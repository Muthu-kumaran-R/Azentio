CREATE OR REPLACE PACKAGE BODY PAY_MULTI_RND.hrmsdbpkg_pay_report IS

PROCEDURE P_LEAVE_REGISTER ( P_COMP_CODE        IN VARCHAR2,
                             P_REP_KEY_NO       IN NUMBER,
                             P_FM_DIVN          IN VARCHAR2,
                             P_TO_DIVN          IN VARCHAR2,
                             P_FM_DEPT          IN VARCHAR2,
                             P_TO_DEPT          IN VARCHAR2,
                             P_FM_LOCN          IN VARCHAR2,
                             P_TO_LOCN          IN VARCHAR2,
                             P_FM_DATE          IN DATE,
                             P_TO_DATE          IN DATE,
                             P_FM_EMP_CODE      IN VARCHAR2,
                             P_TO_EMP_CODE      IN VARCHAR2,
                             P_FM_LEAVE_TY_CODE IN VARCHAR2,
                             P_TO_LEAVE_TY_CODE IN VARCHAR2,
                             P_EMP_ON_LEAVE IN VARCHAR2, --Parameter is added by bhuvaneshwari  ALKHAMIS_INT-1915873
                             P_STATUS           IN VARCHAR2)IS

MM_LANG_CODE VARCHAR2(240);

CURSOR C_LEAVE_REGISTER IS
         SELECT DIV,DEP,EMP_CODE,EMP_NAME,EMP_JOB_LONG_DESC,LOCN,LVAH_START_DT,LVAH_END_DT,LVAH_DAYS,LVRH_DAYS,
                LVRH_RESU_DT,LVAH_NO,LVAH_DT,LVAH_LV_CATG_CODE FROM(
       SELECT
             DECODE(MM_LANG_CODE,'ENG',JOB_TITLE_DESC, 'LANG_01',JOB_TITLE_DESC_LANG_01, 'LANG_02', JOB_TITLE_DESC_LANG_02, 'LANG_03', JOB_TITLE_DESC_LANG_03, 'LANG_04',
              JOB_TITLE_DESC_LANG_04, 'LANG_05', JOB_TITLE_DESC_LANG_05, 'LANG_06',JOB_TITLE_DESC_LANG_06, 'LANG_07',JOB_TITLE_DESC_LANG_07, 'LANG_08',JOB_TITLE_DESC_LANG_08,
              'LANG_09',JOB_TITLE_DESC_LANG_09, 'LANG_10', JOB_TITLE_DESC_LANG_10)EMP_JOB_LONG_DESC,
              EMP_DIVN_CODE ||'-'|| DECODE(MM_LANG_CODE,'ENG',DIVN_SHORT_NAME, 'LANG_01',DIVN_SHORT_NAME_LANG_01, 'LANG_02', DIVN_SHORT_NAME_LANG_02, 'LANG_03', DIVN_SHORT_NAME_LANG_03, 'LANG_04',
              DIVN_SHORT_NAME_LANG_04, 'LANG_05', DIVN_SHORT_NAME_LANG_05, 'LANG_06',DIVN_SHORT_NAME_LANG_06, 'LANG_07',DIVN_SHORT_NAME_LANG_07, 'LANG_08',DIVN_SHORT_NAME_LANG_08,
              'LANG_09',DIVN_SHORT_NAME_LANG_09, 'LANG_10', DIVN_SHORT_NAME_LANG_10) DIV,
              EMP_DEPT_CODE ||'-'|| DECODE(MM_LANG_CODE,'ENG',DEPT_SHORT_NAME, 'LANG_01',DEPT_SHORT_NAME_LANG_01, 'LANG_02', DEPT_SHORT_NAME_LANG_02, 'LANG_03', DEPT_SHORT_NAME_LANG_03, 'LANG_04',
              DEPT_SHORT_NAME_LANG_04, 'LANG_05', DEPT_SHORT_NAME_LANG_05, 'LANG_06',DEPT_SHORT_NAME_LANG_06, 'LANG_07',DEPT_SHORT_NAME_LANG_07, 'LANG_08',DEPT_SHORT_NAME_LANG_08,
              'LANG_09',DEPT_SHORT_NAME_LANG_09, 'LANG_10', DEPT_SHORT_NAME_LANG_10) DEP,
              EMP_CODE,DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01',EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04',
              EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',EMP_NAME_LANG_06, 'LANG_07',EMP_NAME_LANG_07, 'LANG_08',EMP_NAME_LANG_08,
              'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10) EMP_NAME,
              DECODE(MM_LANG_CODE,'ENG',LOCN_DESC, 'LANG_01',LOCN_DESC_LANG_01, 'LANG_02', LOCN_DESC_LANG_02, 'LANG_03', LOCN_DESC_LANG_03, 'LANG_04',
              LOCN_DESC_LANG_04, 'LANG_05', LOCN_DESC_LANG_05, 'LANG_06',LOCN_DESC_LANG_06, 'LANG_07',LOCN_DESC_LANG_07, 'LANG_08',LOCN_DESC_LANG_08,
             'LANG_09',LOCN_DESC_LANG_09, 'LANG_10', LOCN_DESC_LANG_10) LOCN,
             LVAH_START_DT,LVAH_END_DT,LVAH_DAYS,LVRH_DAYS,
             LVRH_RESU_DT,LVAH_TXN_CODE||'-'||LVAH_NO LVAH_NO,
         LVAH_DT,LVAH_LV_CATG_CODE
FROM   PT_LEAVE_APPLICATION_HEAD,PT_LEAVE_RESU_HEAD,PM_EMP_KEY,FM_DIVISION,FM_DEPARTMENT,PM_LOCN ,PM_JOB_TITLE
WHERE  LVAH_COMP_CODE    = P_COMP_CODE
AND    LVAH_COMP_CODE    = EMP_COMP_CODE
AND    LVAH_COMP_CODE    = LVRH_COMP_CODE(+)
AND    EMP_COMP_CODE     = DIVN_COMP_CODE
AND    EMP_COMP_CODE     = DEPT_COMP_CODE
AND    EMP_DIVN_CODE     = DIVN_CODE
AND    DEPT_DIVN_CODE    = DIVN_CODE
AND    EMP_DEPT_CODE     = DEPT_CODE
AND    LVAH_EMP_CODE     = EMP_CODE
AND    LVRH_EMP_CODE(+)  = LVAH_EMP_CODE
AND    EMP_LOCN_CODE     = LOCN_CODE
AND    LVAH_TXN_CODE     = LVRH_REF_TXN_CODE (+)
AND    LVAH_SYS_ID       = LVRH_REF_SYS_ID      (+)
AND JOB_TITLE_CODE       =  EMP_JOB_TITLE_CODE
AND    EMP_DIVN_CODE         BETWEEN P_FM_DIVN  AND P_TO_DIVN
AND    EMP_DEPT_CODE         BETWEEN P_FM_DEPT  AND P_TO_DEPT
AND    EMP_LOCN_CODE         BETWEEN P_FM_LOCN  AND P_TO_LOCN
AND    LVAH_START_DT         BETWEEN P_FM_DATE AND  P_TO_DATE
AND    LVAH_EMP_CODE         BETWEEN P_FM_EMP_CODE   AND P_TO_EMP_CODE
AND    LVAH_LV_CATG_CODE     BETWEEN P_FM_LEAVE_TY_CODE  AND P_TO_LEAVE_TY_CODE
AND    LVAH_APPR_UID     IS  NULL
AND    LVAH_APPR_DT      IS  NULL
AND    LVAH_CANC_UID       IS NULL
AND    P_STATUS IN('Unapproved','Both')
GROUP BY EMP_CODE,EMP_DIVN_CODE,
              EMP_DEPT_CODE,DIVN_SHORT_NAME_LANG_01,DIVN_SHORT_NAME_LANG_02,DIVN_SHORT_NAME_LANG_03,DIVN_SHORT_NAME_LANG_04,
              DIVN_SHORT_NAME_LANG_05,DIVN_SHORT_NAME_LANG_06,DIVN_SHORT_NAME_LANG_07,DIVN_SHORT_NAME_LANG_08,
              DIVN_SHORT_NAME_LANG_09,DIVN_SHORT_NAME_LANG_10,
              EMP_CODE,EMP_NAME,EMP_NAME_LANG_01,EMP_NAME_LANG_02,
              EMP_NAME_LANG_03,EMP_NAME_LANG_04,EMP_NAME_LANG_05,EMP_NAME_LANG_06,EMP_NAME_LANG_07,EMP_NAME_LANG_08,
              EMP_NAME_LANG_09,EMP_NAME_LANG_10,EMP_JOB_LONG_DESC,LOCN_DESC,LOCN_DESC_LANG_01,LOCN_DESC_LANG_02,LOCN_DESC_LANG_03,
              LOCN_DESC_LANG_04,LOCN_DESC_LANG_05,LOCN_DESC_LANG_06,LOCN_DESC_LANG_07,LOCN_DESC_LANG_08,LOCN_DESC_LANG_09,LOCN_DESC_LANG_10,LVAH_START_DT,
              LVAH_END_DT,LVAH_DAYS,LVRH_DAYS,LVRH_RESU_DT,LVAH_TXN_CODE,
           LVAH_NO,LVAH_DT,DIVN_SHORT_NAME,DEPT_SHORT_NAME,DEPT_SHORT_NAME_LANG_01,DEPT_SHORT_NAME_LANG_02,DEPT_SHORT_NAME_LANG_03,DEPT_SHORT_NAME_LANG_04,
           DEPT_SHORT_NAME_LANG_05,DEPT_SHORT_NAME_LANG_06,DEPT_SHORT_NAME_LANG_07,DEPT_SHORT_NAME_LANG_08,DEPT_SHORT_NAME_LANG_09,DEPT_SHORT_NAME_LANG_10,LVAH_LV_CATG_CODE,
           job_title_desc,job_title_desc_lang_01, job_title_desc_lang_02, job_title_desc_lang_03,job_title_desc_lang_04, job_title_desc_lang_05, job_title_desc_lang_06,job_title_desc_lang_07, job_title_desc_lang_08, job_title_desc_lang_09,job_title_desc_lang_10
UNION ALL
SELECT
        DECODE(MM_LANG_CODE,'ENG',JOB_TITLE_DESC, 'LANG_01',JOB_TITLE_DESC_LANG_01, 'LANG_02', JOB_TITLE_DESC_LANG_02, 'LANG_03', JOB_TITLE_DESC_LANG_03, 'LANG_04',
              JOB_TITLE_DESC_LANG_04, 'LANG_05', JOB_TITLE_DESC_LANG_05, 'LANG_06',JOB_TITLE_DESC_LANG_06, 'LANG_07',JOB_TITLE_DESC_LANG_07, 'LANG_08',JOB_TITLE_DESC_LANG_08,
              'LANG_09',JOB_TITLE_DESC_LANG_09, 'LANG_10', JOB_TITLE_DESC_LANG_10)EMP_JOB_LONG_DESC,
        EMP_DIVN_CODE ||'-'|| DECODE(MM_LANG_CODE,'ENG',DIVN_SHORT_NAME, 'LANG_01',DIVN_SHORT_NAME_LANG_01, 'LANG_02', DIVN_SHORT_NAME_LANG_02, 'LANG_03', DIVN_SHORT_NAME_LANG_03, 'LANG_04',
        DIVN_SHORT_NAME_LANG_04, 'LANG_05', DIVN_SHORT_NAME_LANG_05, 'LANG_06',DIVN_SHORT_NAME_LANG_06, 'LANG_07',DIVN_SHORT_NAME_LANG_07, 'LANG_08',DIVN_SHORT_NAME_LANG_08,
        'LANG_09',DIVN_SHORT_NAME_LANG_09, 'LANG_10', DIVN_SHORT_NAME_LANG_10)DIV,

         EMP_DEPT_CODE ||'-'|| DECODE(MM_LANG_CODE,'ENG',DEPT_SHORT_NAME, 'LANG_01',DEPT_SHORT_NAME_LANG_01, 'LANG_02', DEPT_SHORT_NAME_LANG_02, 'LANG_03', DEPT_SHORT_NAME_LANG_03, 'LANG_04',
              DEPT_SHORT_NAME_LANG_04, 'LANG_05', DEPT_SHORT_NAME_LANG_05, 'LANG_06',DEPT_SHORT_NAME_LANG_06, 'LANG_07',DEPT_SHORT_NAME_LANG_07, 'LANG_08',DEPT_SHORT_NAME_LANG_08,
              'LANG_09',DEPT_SHORT_NAME_LANG_09, 'LANG_10', DEPT_SHORT_NAME_LANG_10)  DEP,

         EMP_CODE,DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01',EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04',
              EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',EMP_NAME_LANG_06, 'LANG_07',EMP_NAME_LANG_07, 'LANG_08',EMP_NAME_LANG_08,
              'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10)  EMP_NAME,

         DECODE(MM_LANG_CODE,'ENG',LOCN_DESC, 'LANG_01',LOCN_DESC_LANG_01, 'LANG_02', LOCN_DESC_LANG_02, 'LANG_03', LOCN_DESC_LANG_03, 'LANG_04',
              LOCN_DESC_LANG_04, 'LANG_05', LOCN_DESC_LANG_05, 'LANG_06',LOCN_DESC_LANG_06, 'LANG_07',LOCN_DESC_LANG_07, 'LANG_08',LOCN_DESC_LANG_08,
             'LANG_09',LOCN_DESC_LANG_09, 'LANG_10', LOCN_DESC_LANG_10)  LOCN,
         LVAH_START_DT,LVAH_END_DT,LVAH_DAYS,LVRH_DAYS,LVRH_RESU_DT,
         LVAH_TXN_CODE||'-'||LVAH_NO LVAH_NO,LVAH_DT,LVAH_LV_CATG_CODE
FROM   PT_LEAVE_APPLICATION_HEAD,PT_LEAVE_RESU_HEAD,PM_EMP_KEY,FM_DIVISION,FM_DEPARTMENT,PM_LOCN ,PM_JOB_TITLE
WHERE  LVAH_COMP_CODE    = P_COMP_CODE
AND    LVAH_COMP_CODE    = EMP_COMP_CODE
AND    LVAH_COMP_CODE    = LVRH_COMP_CODE(+)
AND    EMP_COMP_CODE     = DIVN_COMP_CODE
AND    EMP_COMP_CODE     = DEPT_COMP_CODE
AND    EMP_DIVN_CODE     = DIVN_CODE
AND    DEPT_DIVN_CODE    = DIVN_CODE
AND    EMP_DEPT_CODE     = DEPT_CODE
AND    LVAH_EMP_CODE     = EMP_CODE
AND    LVRH_EMP_CODE(+)  = LVAH_EMP_CODE
AND    EMP_LOCN_CODE     = LOCN_CODE
AND    LVAH_TXN_CODE     = LVRH_REF_TXN_CODE (+)
AND    LVAH_SYS_ID       = LVRH_REF_SYS_ID      (+)
AND JOB_TITLE_CODE       =  EMP_JOB_TITLE_CODE
AND    EMP_DIVN_CODE          BETWEEN P_FM_DIVN  AND P_TO_DIVN
AND    EMP_DEPT_CODE          BETWEEN P_FM_DEPT  AND P_TO_DEPT
AND    EMP_LOCN_CODE          BETWEEN P_FM_LOCN  AND P_TO_LOCN
AND    LVAH_START_DT          BETWEEN P_FM_DATE AND  P_TO_DATE
AND    LVAH_EMP_CODE          BETWEEN P_FM_EMP_CODE   AND P_TO_EMP_CODE
AND    LVAH_LV_CATG_CODE      BETWEEN P_FM_LEAVE_TY_CODE  AND P_TO_LEAVE_TY_CODE
AND    LVAH_APPR_UID     IS NOT NULL
AND    LVAH_APPR_DT      IS NOT  NULL
AND    LVAH_CANC_UID       IS NULL
AND    P_EMP_ON_LEAVE ='N'  --code is added by bhuvaneshwari for ALKHAMIS_INT-1915873
AND    P_STATUS IN('Approved','Both')
GROUP BY EMP_CODE,EMP_DIVN_CODE,  EMP_DEPT_CODE,EMP_CODE,EMP_NAME,
             EMP_NAME_LANG_01,EMP_NAME_LANG_02,
              EMP_NAME_LANG_03,EMP_NAME_LANG_04,EMP_NAME_LANG_05,EMP_NAME_LANG_06,EMP_NAME_LANG_07,EMP_NAME_LANG_08,
              EMP_NAME_LANG_09,EMP_NAME_LANG_10,EMP_JOB_LONG_DESC,LOCN_DESC,LOCN_DESC_LANG_01,LOCN_DESC_LANG_02,LOCN_DESC_LANG_03,
              LOCN_DESC_LANG_04,LOCN_DESC_LANG_05,LOCN_DESC_LANG_06,LOCN_DESC_LANG_07,LOCN_DESC_LANG_08,LOCN_DESC_LANG_09,LOCN_DESC_LANG_10,LVAH_START_DT,LVAH_END_DT,
             LVAH_DAYS,LVRH_DAYS,LVRH_RESU_DT,LVAH_TXN_CODE,LVAH_NO,LVAH_DT,DIVN_SHORT_NAME,DIVN_SHORT_NAME_LANG_01,DIVN_SHORT_NAME_LANG_02,DIVN_SHORT_NAME_LANG_03,DIVN_SHORT_NAME_LANG_04,
              DIVN_SHORT_NAME_LANG_05,DIVN_SHORT_NAME_LANG_06,DIVN_SHORT_NAME_LANG_07,DIVN_SHORT_NAME_LANG_08,
              DIVN_SHORT_NAME_LANG_09,DIVN_SHORT_NAME_LANG_10,
              DEPT_SHORT_NAME,DEPT_SHORT_NAME_LANG_01,DEPT_SHORT_NAME_LANG_02,DEPT_SHORT_NAME_LANG_03,DEPT_SHORT_NAME_LANG_04,
              DEPT_SHORT_NAME_LANG_05,DEPT_SHORT_NAME_LANG_06,DEPT_SHORT_NAME_LANG_07,DEPT_SHORT_NAME_LANG_08,DEPT_SHORT_NAME_LANG_09,DEPT_SHORT_NAME_LANG_10,LVAH_LV_CATG_CODE,
              job_title_desc,job_title_desc_lang_01, job_title_desc_lang_02, job_title_desc_lang_03,job_title_desc_lang_04, job_title_desc_lang_05, job_title_desc_lang_06,job_title_desc_lang_07, job_title_desc_lang_08, job_title_desc_lang_09,job_title_desc_lang_10
UNION ALL
SELECT
        DECODE(MM_LANG_CODE,'ENG',JOB_TITLE_DESC, 'LANG_01',JOB_TITLE_DESC_LANG_01, 'LANG_02', JOB_TITLE_DESC_LANG_02, 'LANG_03', JOB_TITLE_DESC_LANG_03, 'LANG_04',
              JOB_TITLE_DESC_LANG_04, 'LANG_05', JOB_TITLE_DESC_LANG_05, 'LANG_06',JOB_TITLE_DESC_LANG_06, 'LANG_07',JOB_TITLE_DESC_LANG_07, 'LANG_08',JOB_TITLE_DESC_LANG_08,
              'LANG_09',JOB_TITLE_DESC_LANG_09, 'LANG_10', JOB_TITLE_DESC_LANG_10)EMP_JOB_LONG_DESC,
        EMP_DIVN_CODE ||'-'|| DECODE(MM_LANG_CODE,'ENG',DIVN_SHORT_NAME, 'LANG_01',DIVN_SHORT_NAME_LANG_01, 'LANG_02', DIVN_SHORT_NAME_LANG_02, 'LANG_03', DIVN_SHORT_NAME_LANG_03, 'LANG_04',
        DIVN_SHORT_NAME_LANG_04, 'LANG_05', DIVN_SHORT_NAME_LANG_05, 'LANG_06',DIVN_SHORT_NAME_LANG_06, 'LANG_07',DIVN_SHORT_NAME_LANG_07, 'LANG_08',DIVN_SHORT_NAME_LANG_08,
        'LANG_09',DIVN_SHORT_NAME_LANG_09, 'LANG_10', DIVN_SHORT_NAME_LANG_10)DIV,

         EMP_DEPT_CODE ||'-'|| DECODE(MM_LANG_CODE,'ENG',DEPT_SHORT_NAME, 'LANG_01',DEPT_SHORT_NAME_LANG_01, 'LANG_02', DEPT_SHORT_NAME_LANG_02, 'LANG_03', DEPT_SHORT_NAME_LANG_03, 'LANG_04',
              DEPT_SHORT_NAME_LANG_04, 'LANG_05', DEPT_SHORT_NAME_LANG_05, 'LANG_06',DEPT_SHORT_NAME_LANG_06, 'LANG_07',DEPT_SHORT_NAME_LANG_07, 'LANG_08',DEPT_SHORT_NAME_LANG_08,
              'LANG_09',DEPT_SHORT_NAME_LANG_09, 'LANG_10', DEPT_SHORT_NAME_LANG_10)  DEP,

         EMP_CODE,DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01',EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04',
              EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',EMP_NAME_LANG_06, 'LANG_07',EMP_NAME_LANG_07, 'LANG_08',EMP_NAME_LANG_08,
              'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10)  EMP_NAME,

         DECODE(MM_LANG_CODE,'ENG',LOCN_DESC, 'LANG_01',LOCN_DESC_LANG_01, 'LANG_02', LOCN_DESC_LANG_02, 'LANG_03', LOCN_DESC_LANG_03, 'LANG_04',
              LOCN_DESC_LANG_04, 'LANG_05', LOCN_DESC_LANG_05, 'LANG_06',LOCN_DESC_LANG_06, 'LANG_07',LOCN_DESC_LANG_07, 'LANG_08',LOCN_DESC_LANG_08,
             'LANG_09',LOCN_DESC_LANG_09, 'LANG_10', LOCN_DESC_LANG_10)  LOCN,
         LVAH_START_DT,LVAH_END_DT,LVAH_DAYS,LVRH_DAYS,LVRH_RESU_DT,
         LVAH_TXN_CODE||'-'||LVAH_NO LVAH_NO,LVAH_DT,LVAH_LV_CATG_CODE
FROM   PT_LEAVE_APPLICATION_HEAD,PT_LEAVE_RESU_HEAD,PM_EMP_KEY,FM_DIVISION,FM_DEPARTMENT,PM_LOCN ,PM_JOB_TITLE,
PM_LEAVE --ADDED BY BHUVANESHWAR
WHERE  LVAH_COMP_CODE    = P_COMP_CODE
AND    LVAH_COMP_CODE    = EMP_COMP_CODE
AND    LVAH_COMP_CODE    = LVRH_COMP_CODE(+)
AND    EMP_COMP_CODE     = DIVN_COMP_CODE
AND    EMP_COMP_CODE     = DEPT_COMP_CODE
AND    EMP_DIVN_CODE     = DIVN_CODE
AND    DEPT_DIVN_CODE    = DIVN_CODE
AND    EMP_DEPT_CODE     = DEPT_CODE
AND    LVAH_EMP_CODE     = EMP_CODE
AND    LVRH_EMP_CODE(+)  = LVAH_EMP_CODE
AND    EMP_LOCN_CODE     = LOCN_CODE
AND    LVAH_TXN_CODE     = LVRH_REF_TXN_CODE (+)
AND    LVAH_SYS_ID       = LVRH_REF_SYS_ID      (+)
AND JOB_TITLE_CODE       =  EMP_JOB_TITLE_CODE
AND    EMP_DIVN_CODE          BETWEEN P_FM_DIVN  AND P_TO_DIVN
AND    EMP_DEPT_CODE          BETWEEN P_FM_DEPT  AND P_TO_DEPT
AND    EMP_LOCN_CODE          BETWEEN P_FM_LOCN  AND P_TO_LOCN
AND    LVAH_START_DT          BETWEEN P_FM_DATE AND  P_TO_DATE
AND    LVAH_EMP_CODE          BETWEEN P_FM_EMP_CODE   AND P_TO_EMP_CODE
AND    LVAH_LV_CATG_CODE      BETWEEN P_FM_LEAVE_TY_CODE  AND P_TO_LEAVE_TY_CODE
AND    LVAH_APPR_UID     IS NOT NULL
AND    LVAH_APPR_DT      IS NOT  NULL
AND    LVAH_CANC_UID       IS NULL
AND   (LV_TYPE_CODE = '1' OR LV_RESU_REQD_YN = 'Y')--Added by bhuvaneshwari ALKHAMIS_INT-1915873
AND    P_EMP_ON_LEAVE ='Y'--ADDED BY BHUVANESHWARI ALKHAMIS_INT-1915873
AND LVRH_RESU_DT IS NULL --ADDED BY BHUVANESHWARI ALKHAMIS_INT-1915873
AND   LV_CATG_CODE = LVAH_LV_CATG_CODE--ADDED BY BHUVANESHWARI ALKHAMIS_INT-1915873
AND    P_STATUS IN('Approved','Both')
GROUP BY EMP_CODE,EMP_DIVN_CODE,  EMP_DEPT_CODE,EMP_CODE,EMP_NAME,
             EMP_NAME_LANG_01,EMP_NAME_LANG_02,
              EMP_NAME_LANG_03,EMP_NAME_LANG_04,EMP_NAME_LANG_05,EMP_NAME_LANG_06,EMP_NAME_LANG_07,EMP_NAME_LANG_08,
              EMP_NAME_LANG_09,EMP_NAME_LANG_10,EMP_JOB_LONG_DESC,LOCN_DESC,LOCN_DESC_LANG_01,LOCN_DESC_LANG_02,LOCN_DESC_LANG_03,
              LOCN_DESC_LANG_04,LOCN_DESC_LANG_05,LOCN_DESC_LANG_06,LOCN_DESC_LANG_07,LOCN_DESC_LANG_08,LOCN_DESC_LANG_09,LOCN_DESC_LANG_10,LVAH_START_DT,LVAH_END_DT,
             LVAH_DAYS,LVRH_DAYS,LVRH_RESU_DT,LVAH_TXN_CODE,LVAH_NO,LVAH_DT,DIVN_SHORT_NAME,DIVN_SHORT_NAME_LANG_01,DIVN_SHORT_NAME_LANG_02,DIVN_SHORT_NAME_LANG_03,DIVN_SHORT_NAME_LANG_04,
              DIVN_SHORT_NAME_LANG_05,DIVN_SHORT_NAME_LANG_06,DIVN_SHORT_NAME_LANG_07,DIVN_SHORT_NAME_LANG_08,
              DIVN_SHORT_NAME_LANG_09,DIVN_SHORT_NAME_LANG_10,
              DEPT_SHORT_NAME,DEPT_SHORT_NAME_LANG_01,DEPT_SHORT_NAME_LANG_02,DEPT_SHORT_NAME_LANG_03,DEPT_SHORT_NAME_LANG_04,
              DEPT_SHORT_NAME_LANG_05,DEPT_SHORT_NAME_LANG_06,DEPT_SHORT_NAME_LANG_07,DEPT_SHORT_NAME_LANG_08,DEPT_SHORT_NAME_LANG_09,DEPT_SHORT_NAME_LANG_10,LVAH_LV_CATG_CODE,
              job_title_desc,job_title_desc_lang_01, job_title_desc_lang_02, job_title_desc_lang_03,job_title_desc_lang_04, job_title_desc_lang_05, job_title_desc_lang_06,job_title_desc_lang_07, job_title_desc_lang_08, job_title_desc_lang_09,job_title_desc_lang_10
/*below union code added by bhuvaneshwari for ALKHAMIS_INT-1915873*/--start
UNION ALL
SELECT
        DECODE(MM_LANG_CODE,'ENG',JOB_TITLE_DESC, 'LANG_01',JOB_TITLE_DESC_LANG_01, 'LANG_02', JOB_TITLE_DESC_LANG_02, 'LANG_03', JOB_TITLE_DESC_LANG_03, 'LANG_04',
              JOB_TITLE_DESC_LANG_04, 'LANG_05', JOB_TITLE_DESC_LANG_05, 'LANG_06',JOB_TITLE_DESC_LANG_06, 'LANG_07',JOB_TITLE_DESC_LANG_07, 'LANG_08',JOB_TITLE_DESC_LANG_08,
              'LANG_09',JOB_TITLE_DESC_LANG_09, 'LANG_10', JOB_TITLE_DESC_LANG_10)EMP_JOB_LONG_DESC,
        EMP_DIVN_CODE ||'-'|| DECODE(MM_LANG_CODE,'ENG',DIVN_SHORT_NAME, 'LANG_01',DIVN_SHORT_NAME_LANG_01, 'LANG_02', DIVN_SHORT_NAME_LANG_02, 'LANG_03', DIVN_SHORT_NAME_LANG_03, 'LANG_04',
        DIVN_SHORT_NAME_LANG_04, 'LANG_05', DIVN_SHORT_NAME_LANG_05, 'LANG_06',DIVN_SHORT_NAME_LANG_06, 'LANG_07',DIVN_SHORT_NAME_LANG_07, 'LANG_08',DIVN_SHORT_NAME_LANG_08,
        'LANG_09',DIVN_SHORT_NAME_LANG_09, 'LANG_10', DIVN_SHORT_NAME_LANG_10)DIV,

         EMP_DEPT_CODE ||'-'|| DECODE(MM_LANG_CODE,'ENG',DEPT_SHORT_NAME, 'LANG_01',DEPT_SHORT_NAME_LANG_01, 'LANG_02', DEPT_SHORT_NAME_LANG_02, 'LANG_03', DEPT_SHORT_NAME_LANG_03, 'LANG_04',
              DEPT_SHORT_NAME_LANG_04, 'LANG_05', DEPT_SHORT_NAME_LANG_05, 'LANG_06',DEPT_SHORT_NAME_LANG_06, 'LANG_07',DEPT_SHORT_NAME_LANG_07, 'LANG_08',DEPT_SHORT_NAME_LANG_08,
              'LANG_09',DEPT_SHORT_NAME_LANG_09, 'LANG_10', DEPT_SHORT_NAME_LANG_10)  DEP,

         EMP_CODE,DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01',EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04',
              EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',EMP_NAME_LANG_06, 'LANG_07',EMP_NAME_LANG_07, 'LANG_08',EMP_NAME_LANG_08,
              'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10)  EMP_NAME,

         DECODE(MM_LANG_CODE,'ENG',LOCN_DESC, 'LANG_01',LOCN_DESC_LANG_01, 'LANG_02', LOCN_DESC_LANG_02, 'LANG_03', LOCN_DESC_LANG_03, 'LANG_04',
              LOCN_DESC_LANG_04, 'LANG_05', LOCN_DESC_LANG_05, 'LANG_06',LOCN_DESC_LANG_06, 'LANG_07',LOCN_DESC_LANG_07, 'LANG_08',LOCN_DESC_LANG_08,
             'LANG_09',LOCN_DESC_LANG_09, 'LANG_10', LOCN_DESC_LANG_10)  LOCN,
         LVAH_START_DT,LVAH_END_DT,LVAH_DAYS,LVRH_DAYS,LVRH_RESU_DT,
         LVAH_TXN_CODE||'-'||LVAH_NO LVAH_NO,LVAH_DT,LVAH_LV_CATG_CODE
FROM   PT_LEAVE_APPLICATION_HEAD,PT_LEAVE_RESU_HEAD,PM_EMP_KEY,FM_DIVISION,FM_DEPARTMENT,PM_LOCN ,PM_JOB_TITLE,
PM_LEAVE --aDDED BY BHUVANESHWARI for ALKHAMIS_INT-1915873
WHERE  LVAH_COMP_CODE    = P_COMP_CODE
AND    LVAH_COMP_CODE    = EMP_COMP_CODE
AND    LVAH_COMP_CODE    = LVRH_COMP_CODE(+)
AND    EMP_COMP_CODE     = DIVN_COMP_CODE
AND    EMP_COMP_CODE     = DEPT_COMP_CODE
AND    EMP_DIVN_CODE     = DIVN_CODE
AND    DEPT_DIVN_CODE    = DIVN_CODE
AND    EMP_DEPT_CODE     = DEPT_CODE
AND    LVAH_EMP_CODE     = EMP_CODE
AND    LVRH_EMP_CODE(+)  = LVAH_EMP_CODE
AND    EMP_LOCN_CODE     = LOCN_CODE
AND    LVAH_TXN_CODE     = LVRH_REF_TXN_CODE (+)
AND    LVAH_SYS_ID       = LVRH_REF_SYS_ID      (+)
AND JOB_TITLE_CODE       =  EMP_JOB_TITLE_CODE
AND    EMP_DIVN_CODE          BETWEEN P_FM_DIVN  AND P_TO_DIVN
AND    EMP_DEPT_CODE          BETWEEN P_FM_DEPT  AND P_TO_DEPT
AND    EMP_LOCN_CODE          BETWEEN P_FM_LOCN  AND P_TO_LOCN
AND    LVAH_START_DT          BETWEEN P_FM_DATE AND  P_TO_DATE
AND    LVAH_EMP_CODE          BETWEEN P_FM_EMP_CODE   AND P_TO_EMP_CODE
AND    LVAH_LV_CATG_CODE      BETWEEN P_FM_LEAVE_TY_CODE  AND P_TO_LEAVE_TY_CODE
AND    LVAH_APPR_UID     IS NOT NULL
AND    LVAH_APPR_DT      IS NOT  NULL
AND    LVAH_CANC_UID       IS NULL
AND   LV_CATG_CODE = LVAH_LV_CATG_CODE --Added by bhuvaneshwari for ALKHAMIS_INT-1915873
AND    P_EMP_ON_LEAVE ='Y'      --Added by bhuvaneshwari for ALKHAMIS_INT-1915873
AND   (LV_TYPE_CODE <> '1' OR LV_RESU_REQD_YN='N')--Added by bhuvaneshwarifor ALKHAMIS_INT-1915873
AND   LVAH_APPR_END_DT BETWEEN P_FM_DATE AND  P_TO_DATE   --Added by bhuvaneshwari for ALKHAMIS_INT-1915873
AND    P_STATUS IN('Approved','Both')
GROUP BY EMP_CODE,EMP_DIVN_CODE,  EMP_DEPT_CODE,EMP_CODE,EMP_NAME,
             EMP_NAME_LANG_01,EMP_NAME_LANG_02,
              EMP_NAME_LANG_03,EMP_NAME_LANG_04,EMP_NAME_LANG_05,EMP_NAME_LANG_06,EMP_NAME_LANG_07,EMP_NAME_LANG_08,
              EMP_NAME_LANG_09,EMP_NAME_LANG_10,EMP_JOB_LONG_DESC,LOCN_DESC,LOCN_DESC_LANG_01,LOCN_DESC_LANG_02,LOCN_DESC_LANG_03,
              LOCN_DESC_LANG_04,LOCN_DESC_LANG_05,LOCN_DESC_LANG_06,LOCN_DESC_LANG_07,LOCN_DESC_LANG_08,LOCN_DESC_LANG_09,LOCN_DESC_LANG_10,LVAH_START_DT,LVAH_END_DT,
             LVAH_DAYS,LVRH_DAYS,LVRH_RESU_DT,LVAH_TXN_CODE,LVAH_NO,LVAH_DT,DIVN_SHORT_NAME,DIVN_SHORT_NAME_LANG_01,DIVN_SHORT_NAME_LANG_02,DIVN_SHORT_NAME_LANG_03,DIVN_SHORT_NAME_LANG_04,
              DIVN_SHORT_NAME_LANG_05,DIVN_SHORT_NAME_LANG_06,DIVN_SHORT_NAME_LANG_07,DIVN_SHORT_NAME_LANG_08,
              DIVN_SHORT_NAME_LANG_09,DIVN_SHORT_NAME_LANG_10,
              DEPT_SHORT_NAME,DEPT_SHORT_NAME_LANG_01,DEPT_SHORT_NAME_LANG_02,DEPT_SHORT_NAME_LANG_03,DEPT_SHORT_NAME_LANG_04,
              DEPT_SHORT_NAME_LANG_05,DEPT_SHORT_NAME_LANG_06,DEPT_SHORT_NAME_LANG_07,DEPT_SHORT_NAME_LANG_08,DEPT_SHORT_NAME_LANG_09,DEPT_SHORT_NAME_LANG_10,LVAH_LV_CATG_CODE,
              job_title_desc,job_title_desc_lang_01, job_title_desc_lang_02, job_title_desc_lang_03,job_title_desc_lang_04, job_title_desc_lang_05, job_title_desc_lang_06,job_title_desc_lang_07, job_title_desc_lang_08, job_title_desc_lang_09,job_title_desc_lang_10
/*above union code added by bhuvaneshwari for ALKHAMIS_INT-1915873*/--end
UNION ALL
-- ADDED BY ASHIK TO SHOW TEH LEAVE ADJUSTMENT ALSO IN THE LEAVE REGISTER ON 26-DEC-2017
SELECT DECODE(MM_LANG_CODE,'ENG',JOB_TITLE_DESC, 'LANG_01',JOB_TITLE_DESC_LANG_01, 'LANG_02', JOB_TITLE_DESC_LANG_02, 'LANG_03', JOB_TITLE_DESC_LANG_03, 'LANG_04',
              JOB_TITLE_DESC_LANG_04, 'LANG_05', JOB_TITLE_DESC_LANG_05, 'LANG_06',JOB_TITLE_DESC_LANG_06, 'LANG_07',JOB_TITLE_DESC_LANG_07, 'LANG_08',JOB_TITLE_DESC_LANG_08,
              'LANG_09',JOB_TITLE_DESC_LANG_09, 'LANG_10', JOB_TITLE_DESC_LANG_10)EMP_JOB_LONG_DESC,
EMP_DIVN_CODE ||'-'|| DECODE(MM_LANG_CODE,'ENG',DIVN_SHORT_NAME, 'LANG_01',DIVN_SHORT_NAME_LANG_01, 'LANG_02', DIVN_SHORT_NAME_LANG_02, 'LANG_03', DIVN_SHORT_NAME_LANG_03, 'LANG_04',
        DIVN_SHORT_NAME_LANG_04, 'LANG_05', DIVN_SHORT_NAME_LANG_05, 'LANG_06',DIVN_SHORT_NAME_LANG_06, 'LANG_07',DIVN_SHORT_NAME_LANG_07, 'LANG_08',DIVN_SHORT_NAME_LANG_08,
        'LANG_09',DIVN_SHORT_NAME_LANG_09, 'LANG_10', DIVN_SHORT_NAME_LANG_10) DIV,
        EMP_DEPT_CODE ||'-'|| DECODE(MM_LANG_CODE,'ENG',DEPT_SHORT_NAME, 'LANG_01',DEPT_SHORT_NAME_LANG_01, 'LANG_02', DEPT_SHORT_NAME_LANG_02, 'LANG_03', DEPT_SHORT_NAME_LANG_03, 'LANG_04',
              DEPT_SHORT_NAME_LANG_04, 'LANG_05', DEPT_SHORT_NAME_LANG_05, 'LANG_06',DEPT_SHORT_NAME_LANG_06, 'LANG_07',DEPT_SHORT_NAME_LANG_07, 'LANG_08',DEPT_SHORT_NAME_LANG_08,
              'LANG_09',DEPT_SHORT_NAME_LANG_09, 'LANG_10', DEPT_SHORT_NAME_LANG_10) DEP,
        EMP_CODE,DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01',EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04',
              EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',EMP_NAME_LANG_06, 'LANG_07',EMP_NAME_LANG_07, 'LANG_08',EMP_NAME_LANG_08,
              'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10)  EMP_NAME,

        DECODE(MM_LANG_CODE,'ENG',LOCN_DESC, 'LANG_01',LOCN_DESC_LANG_01, 'LANG_02', LOCN_DESC_LANG_02, 'LANG_03', LOCN_DESC_LANG_03, 'LANG_04',
              LOCN_DESC_LANG_04, 'LANG_05', LOCN_DESC_LANG_05, 'LANG_06',LOCN_DESC_LANG_06, 'LANG_07',LOCN_DESC_LANG_07, 'LANG_08',LOCN_DESC_LANG_08,
             'LANG_09',LOCN_DESC_LANG_09, 'LANG_10', LOCN_DESC_LANG_10) LOCN,
        LAH_DT LVAH_START_DT,
        NULL LVAH_END_DT,
        LAD_DAYS_INCR_DCR LVAH_DAYS,
        0 LVRH_DAYS,
        NULL LVRH_RESU_DT,
        LAH_TXN_CODE||'-'||LAH_NO LVAH_NO,LAH_DT,LAD_LV_CATG_CODE
FROM   PT_LEAVE_ADJUST_HEAD, PT_LEAVE_ADJUST_DETAIL, PM_EMP_KEY, FM_DIVISION, FM_DEPARTMENT,PM_LOCN ,PM_JOB_TITLE
WHERE  LAH_COMP_CODE    = P_COMP_CODE
AND    LAD_COMP_CODE    = EMP_COMP_CODE
AND    LAD_LAH_SYS_ID    = LAH_SYS_ID
AND    EMP_COMP_CODE     = DIVN_COMP_CODE
AND    EMP_COMP_CODE     = DEPT_COMP_CODE
AND    EMP_DIVN_CODE     = DIVN_CODE
AND    DEPT_DIVN_CODE    = DIVN_CODE
AND    EMP_DEPT_CODE     = DEPT_CODE
AND    LAD_EMP_CODE     = EMP_CODE
AND    EMP_LOCN_CODE     = LOCN_CODE
AND    EMP_DIVN_CODE          BETWEEN P_FM_DIVN  AND P_TO_DIVN
AND    EMP_DEPT_CODE          BETWEEN P_FM_DEPT  AND P_TO_DEPT
AND    EMP_LOCN_CODE          BETWEEN P_FM_LOCN  AND P_TO_LOCN
AND    LAH_DT          BETWEEN P_FM_DATE AND  P_TO_DATE
AND    LAD_EMP_CODE          BETWEEN P_FM_EMP_CODE   AND P_TO_EMP_CODE
AND    LAD_LV_CATG_CODE      BETWEEN P_FM_LEAVE_TY_CODE  AND P_TO_LEAVE_TY_CODE
AND    LAH_APPR_UID     IS NOT NULL
AND    LAH_APPR_DT      IS NOT  NULL
AND JOB_TITLE_CODE       =  EMP_JOB_TITLE_CODE
AND    P_STATUS IN('Approved','Both')
GROUP BY EMP_CODE,EMP_DIVN_CODE,
              EMP_DEPT_CODE,EMP_CODE,EMP_NAME,EMP_NAME_LANG_01,EMP_NAME_LANG_02,
              EMP_NAME_LANG_03,EMP_NAME_LANG_04,EMP_NAME_LANG_05,EMP_NAME_LANG_06,EMP_NAME_LANG_07,EMP_NAME_LANG_08,
              EMP_NAME_LANG_09,EMP_NAME_LANG_10,EMP_JOB_LONG_DESC,LOCN_DESC,LOCN_DESC_LANG_01,LOCN_DESC_LANG_02,LOCN_DESC_LANG_03,
              LOCN_DESC_LANG_04,LOCN_DESC_LANG_05,LOCN_DESC_LANG_06,LOCN_DESC_LANG_07,LOCN_DESC_LANG_08,LOCN_DESC_LANG_09,LOCN_DESC_LANG_10,
             LAD_DAYS_INCR_DCR,LAH_TXN_CODE,LAH_NO,LAH_DT,DIVN_SHORT_NAME,DIVN_SHORT_NAME_LANG_01,DIVN_SHORT_NAME_LANG_02,DIVN_SHORT_NAME_LANG_03,DIVN_SHORT_NAME_LANG_04,
              DIVN_SHORT_NAME_LANG_05,DIVN_SHORT_NAME_LANG_06,DIVN_SHORT_NAME_LANG_07,DIVN_SHORT_NAME_LANG_08,
              DIVN_SHORT_NAME_LANG_09,DIVN_SHORT_NAME_LANG_10,
              DEPT_SHORT_NAME,DEPT_SHORT_NAME_LANG_01,DEPT_SHORT_NAME_LANG_02,DEPT_SHORT_NAME_LANG_03,DEPT_SHORT_NAME_LANG_04,
              DEPT_SHORT_NAME_LANG_05,DEPT_SHORT_NAME_LANG_06,DEPT_SHORT_NAME_LANG_07,DEPT_SHORT_NAME_LANG_08,DEPT_SHORT_NAME_LANG_09,DEPT_SHORT_NAME_LANG_10,LAD_LV_CATG_CODE,
              job_title_desc,job_title_desc_lang_01, job_title_desc_lang_02, job_title_desc_lang_03,job_title_desc_lang_04, job_title_desc_lang_05, job_title_desc_lang_06,job_title_desc_lang_07, job_title_desc_lang_08, job_title_desc_lang_09,job_title_desc_lang_10)
ORDER BY EMP_CODE;

CURSOR C_LVAH_DAYS(P_CATG_CODE IN VARCHAR2,P_EMP_CODE IN VARCHAR2) IS
        SELECT LVAH_LV_TYPE_CODE||'-'||(DECODE(MM_LANG_CODE,'ENG',LV_TYPE_DESC, 'LANG_01',LV_TYPE_DESC_LANG_01, 'LANG_02', LV_TYPE_DESC_LANG_02, 'LANG_03', LV_TYPE_DESC_LANG_03, 'LANG_04',
        LV_TYPE_DESC_LANG_04, 'LANG_05', LV_TYPE_DESC_LANG_05, 'LANG_06',LV_TYPE_DESC_LANG_06, 'LANG_07',LV_TYPE_DESC_LANG_07, 'LANG_08',LV_TYPE_DESC_LANG_08,
        'LANG_09',LV_TYPE_DESC_LANG_09, 'LANG_10', LV_TYPE_DESC_LANG_10))
        FROM   PM_LEAVE,      PM_LEAVE_TYPE,PT_LEAVE_APPLICATION_HEAD
        WHERE  LVAH_LV_TYPE_CODE                      = PM_LEAVE_TYPE.LV_TYPE_CODE
        AND    PM_LEAVE_TYPE.LV_TYPE_CODE  = PM_LEAVE.LV_TYPE_CODE
        AND       LV_CATG_CODE                              = P_CATG_CODE
        AND    LVAH_EMP_CODE                          = P_EMP_CODE
        GROUP BY LVAH_LV_TYPE_CODE,LV_TYPE_DESC,lv_type_desc_lang_01, lv_type_desc_lang_02, lv_type_desc_lang_03, lv_type_desc_lang_04, lv_type_desc_lang_05, lv_type_desc_lang_06, lv_type_desc_lang_07, lv_type_desc_lang_08, lv_type_desc_lang_09, lv_type_desc_lang_10;

CURSOR GET_DATE_FMT IS
     SELECT GPARA_VALUE
     FROM   PM_GUI_PARAMETER
       WHERE  GPARA_CODE = 'REF_DT_FMT';

   CURSOR C2 IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

   M_DT_FMT_MASK  PM_GUI_PARAMETER.GPARA_VALUE%TYPE;
   M_LEAVE_TYPE_DESC            VARCHAR2(240);
   M_AVIAL_DAYS           NUMBER(5,2);
   M_RESU_DATE            DATE;

BEGIN

   DELETE FROM PW_LEAVE_REGISTER WHERE LR_REP_KEY_NO = P_REP_KEY_NO;

    MM_LANG_CODE := NULL;

     IF C2%ISOPEN THEN
       CLOSE C2;
    END IF;

    OPEN C2;
    FETCH C2 INTO MM_LANG_CODE;
    CLOSE C2;

   FOR I IN C_LEAVE_REGISTER
   LOOP

   IF C_LVAH_DAYS%ISOPEN THEN
          CLOSE C_LVAH_DAYS;
     END IF;
     OPEN  C_LVAH_DAYS(I.LVAH_LV_CATG_CODE,I.EMP_CODE);
     FETCH C_LVAH_DAYS INTO M_LEAVE_TYPE_DESC;
     CLOSE C_LVAH_DAYS;

   OPEN  GET_DATE_FMT ;
   FETCH GET_DATE_FMT INTO M_DT_FMT_MASK;
   CLOSE GET_DATE_FMT ;

      IF I.LVRH_RESU_DT IS NULL THEN
         M_AVIAL_DAYS := I.LVAH_DAYS;
      ELSE
         M_AVIAL_DAYS := I.LVRH_DAYS;
      END IF;

      M_RESU_DATE := (I.LVRH_RESU_DT + 1);

      INSERT INTO PW_LEAVE_REGISTER ( LR_COMP_CODE,
                                      LR_REP_KEY_NO,
                                      LR_EMP_CODE,
                                      LR_EMP_NAME,
                                      LR_DIVN_NAME,
                                      LR_DEPT_NAME,
                                      LR_EMP_LONG_DESC,
                                      LR_LOCN,
                                      LR_START_DT,
                                      LR_END_DT,
                                      LR_DAYS,
                                      LR_RESU_DT,
                                      LR_NO,
                                      LR_DATE,
                                      LR_CATG_CODE,
                                      LR_LEAVE_TYPE_DAYS,
                                      LR_AVAI_DAYS,
                                      LR_CF_RESU_DT)
                              VALUES( P_COMP_CODE,
                                      P_REP_KEY_NO,
                                      I.EMP_CODE,
                                      I.EMP_NAME,
                                      I.DIV,
                                      I.DEP,
                                      I.EMP_JOB_LONG_DESC,
                                      I.LOCN,
                                      I.LVAH_START_DT,
                                      I.LVAH_END_DT,
                                      I.LVAH_DAYS,
                                      I.LVRH_RESU_DT,
                                      I.LVAH_NO,
                                      I.LVAH_DT,
                                      I.LVAH_LV_CATG_CODE,
                                      M_LEAVE_TYPE_DESC,
                                      M_AVIAL_DAYS,
                                      M_RESU_DATE);


   END LOOP;
END P_LEAVE_REGISTER;

PROCEDURE P_LEAVE_AVAIL ( P_COMP_CODE     IN VARCHAR2,
                          P_REP_KEY_NO    IN NUMBER,
                          P_FM_DIVN       IN VARCHAR2,
                          P_TO_DIVN       IN VARCHAR2,
                          P_FM_DEPT       IN VARCHAR2,
                          P_TO_DEPT       IN VARCHAR2,
                          P_FM_LOCN       IN VARCHAR2,
                          P_TO_LOCN       IN VARCHAR2,
                          P_FM_DATE       IN DATE,
                          P_TO_DATE       IN DATE,
                          P_FM_EMP_CODE   IN VARCHAR2,
                          P_TO_EMP_CODE   IN VARCHAR2,
                          P_FM_GRADE      IN VARCHAR2,
                          P_TO_GRADE      IN VARCHAR2,
                          P_FM_LEAVE_TYPE IN VARCHAR2,
                          P_TO_LEAVE_TYPE IN VARCHAR2 )IS

MM_LANG_CODE VARCHAR2(240);

CURSOR C_LEAVE_AVAIL IS
      SELECT  EMP_CODE  EMP_CODE,
             DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01',EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04',
              EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',EMP_NAME_LANG_06, 'LANG_07',EMP_NAME_LANG_07, 'LANG_08',EMP_NAME_LANG_08,
              'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10) EMP,
              EMP_JOIN_DT  DOJ,NVL(EMPA_FC_AMOUNT,0) AMT ,
             EMP_DIVN_CODE ||'-'|| DECODE(MM_LANG_CODE,'ENG',DIVN_NAME, 'LANG_01',DIVN_NAME_LANG_01, 'LANG_02', DIVN_NAME_LANG_02, 'LANG_03', DIVN_NAME_LANG_03, 'LANG_04',
               DIVN_NAME_LANG_04, 'LANG_05', DIVN_NAME_LANG_05, 'LANG_06',DIVN_NAME_LANG_06, 'LANG_07',DIVN_NAME_LANG_07, 'LANG_08',DIVN_NAME_LANG_08,
              'LANG_09',DIVN_NAME_LANG_09, 'LANG_10', DIVN_NAME_LANG_10) DIVN,
               EMP_DEPT_CODE ||'-'|| DECODE(MM_LANG_CODE,'ENG',DEPT_NAME, 'LANG_01',DEPT_NAME_LANG_01, 'LANG_02', DEPT_NAME_LANG_02, 'LANG_03', DEPT_NAME_LANG_03, 'LANG_04',
              DEPT_NAME_LANG_04, 'LANG_05', DEPT_NAME_LANG_05, 'LANG_06',DEPT_NAME_LANG_06, 'LANG_07',DEPT_NAME_LANG_07, 'LANG_08',DEPT_NAME_LANG_08,
              'LANG_09',DEPT_NAME_LANG_09, 'LANG_10', DEPT_NAME_LANG_10)  DEPT_CODE,
              EMP_DEPT_CODE DEP,EMP_PERSONAL_GRADE  GRADE , LVAH_LV_TYPE_CODE,
              EMPL_LV_CATG_CODE||'-'|| DECODE(MM_LANG_CODE,'ENG',LV_DESC, 'LANG_01',LV_DESC_LANG_01, 'LANG_02', LV_DESC_LANG_02, 'LANG_03', LV_DESC_LANG_03, 'LANG_04',
               LV_DESC_LANG_04, 'LANG_05', LV_DESC_LANG_05, 'LANG_06',LV_DESC_LANG_06, 'LANG_07',LV_DESC_LANG_07, 'LANG_08',LV_DESC_LANG_08,
              'LANG_09',LV_DESC_LANG_09, 'LANG_10', LV_DESC_LANG_10) L_DESC,
              LVAH_LV_CATG_CODE
      FROM    PM_EMP_ALLOWANCE,PM_ALLOWANCE, PM_EMP_KEY,  PM_LEAVE, PM_EMP_LEAVE,FM_DIVISION,FM_DEPARTMENT,
                    PT_LEAVE_APPLICATION_HEAD,PM_LEAVE_TYPE
      WHERE   EMP_COMP_CODE = P_COMP_CODE
      AND     EMPL_COMP_CODE = EMP_COMP_CODE
      AND     EMPL_COMP_CODE = EMPA_COMP_CODE
      AND     EMP_COMP_CODE = EMPA_COMP_CODE
      AND     EMP_COMP_CODE = DIVN_COMP_CODE
      AND     EMP_COMP_CODE = DEPT_COMP_CODE
      AND     EMP_COMP_CODE = LVAH_COMP_CODE
      AND     EMP_DIVN_CODE = DIVN_CODE
      AND     DEPT_DIVN_CODE = DIVN_CODE
      AND     EMP_DEPT_CODE = DEPT_CODE
      AND     LVAH_EMP_CODE = EMP_CODE
      AND     EMPL_CODE = EMP_CODE
      AND     EMPL_CODE = EMPA_CODE
      AND     EMP_CODE = EMPA_CODE
      AND     EMP_END_OF_SERVICE_DT IS NULL
      AND     EMPA_ALLW_CODE = ALLW_CODE
      AND     EMPL_LV_CATG_CODE = LV_CATG_CODE
      AND     EMPL_LV_CATG_CODE = LVAH_LV_CATG_CODE
      AND     PM_LEAVE.LV_TYPE_CODE = PM_LEAVE_TYPE.LV_TYPE_CODE
      AND     ALLW_TYPE = '1'
      AND     ALLW_EARN_DEDUC = 'E'
      AND     EMPA_EXCLUDE_FROM_DT IS NULL
      AND     EMPA_EXCLUDE_UPTO_DT IS NULL
      AND     EMP_CODE      BETWEEN P_FM_EMP_CODE  AND P_TO_EMP_CODE
      AND     EMP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
      AND     EMP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
      AND     EMP_LOCN_CODE BETWEEN P_FM_LOCN AND P_TO_LOCN
      AND     EMPL_LV_CATG_CODE BETWEEN P_FM_LEAVE_TYPE AND P_TO_LEAVE_TYPE
      AND     LVAH_DT BETWEEN P_FM_DATE AND P_TO_DATE
      AND     EMP_PERSONAL_GRADE  BETWEEN P_FM_GRADE AND P_TO_GRADE
      GROUP BY EMP_CODE  ,EMP_NAME ,EMP_NAME_LANG_01,EMP_NAME_LANG_02,
              EMP_NAME_LANG_03,EMP_NAME_LANG_04,EMP_NAME_LANG_05,EMP_NAME_LANG_06,EMP_NAME_LANG_07,EMP_NAME_LANG_08,
              EMP_NAME_LANG_09,EMP_NAME_LANG_10,EMP_JOIN_DT ,EMPA_FC_AMOUNT,EMP_DIVN_CODE ,DIVN_NAME ,DIVN_NAME_LANG_01,DIVN_NAME_LANG_02,
              DIVN_NAME_LANG_03,DIVN_NAME_LANG_04,DIVN_NAME_LANG_05,DIVN_NAME_LANG_06,DIVN_NAME_LANG_07,DIVN_NAME_LANG_08,DIVN_NAME_LANG_09,
              DIVN_NAME_LANG_10, EMP_DEPT_CODE, DEPT_NAME ,DEPT_NAME_LANG_01,DEPT_NAME_LANG_02,DEPT_NAME_LANG_03,DEPT_NAME_LANG_04,
              DEPT_NAME_LANG_05,DEPT_NAME_LANG_06,DEPT_NAME_LANG_07,DEPT_NAME_LANG_08,DEPT_NAME_LANG_09,
              DEPT_NAME_LANG_10,EMP_DEPT_CODE ,EMPL_LV_CATG_CODE, DECODE(MM_LANG_CODE,'ENG',LV_DESC, 'LANG_01',LV_DESC_LANG_01, 'LANG_02', LV_DESC_LANG_02, 'LANG_03', LV_DESC_LANG_03, 'LANG_04',
               LV_DESC_LANG_04, 'LANG_05', LV_DESC_LANG_05, 'LANG_06',LV_DESC_LANG_06, 'LANG_07',LV_DESC_LANG_07, 'LANG_08',LV_DESC_LANG_08,
              'LANG_09',LV_DESC_LANG_09, 'LANG_10', LV_DESC_LANG_10),
               EMP_PERSONAL_GRADE,LVAH_LV_TYPE_CODE,LVAH_LV_CATG_CODE
      ORDER BY EMP_DIVN_CODE , EMP_DEPT_CODE,EMP_CODE;

CURSOR C_SER_DAYS(P_EMP_CODE IN VARCHAR2) IS
      SELECT TO_CHAR(ROUND(SYSDATE - EMP_JOIN_DT))
      FROM   PM_EMP_KEY
      WHERE  EMP_CODE=P_EMP_CODE
      AND    EMP_COMP_CODE = P_COMP_CODE;

CURSOR C_TOT_LEV_BEGIN(P_EMP_CODE IN VARCHAR,P_CATG_CODE IN VARCHAR2)   IS
        SELECT SUM(LVAC_ACCRUED_DAYS)
        FROM   PS_LEAVE_ACCRUAL_CURR
        WHERE  LVAC_COMP_CODE = P_COMP_CODE
        AND    LVAC_EMP_CODE = P_EMP_CODE
        AND    LVAC_LV_CODE  = P_CATG_CODE
        AND    LVAC_YEAR        <= TO_CHAR(P_FM_DATE,'YYYY')
        AND    LVAC_MONTH      <= TO_CHAR(P_FM_DATE,'MM');

CURSOR C_LEAVE_AVAIL_DAYS(P_EMP_CODE IN VARCHAR2,P_CATG_CODE IN VARCHAR2) IS
        SELECT SUM(LVAC_AVAILED_DAYS)
        FROM   PS_LEAVE_ACCRUAL_CURR
        WHERE  LVAC_COMP_CODE = P_COMP_CODE
        AND    LVAC_EMP_CODE  = P_EMP_CODE
        AND    LVAC_LV_CODE   = P_CATG_CODE
        AND    LVAC_YEAR       BETWEEN TO_CHAR(P_FM_DATE,'YYYY') AND TO_CHAR(P_TO_DATE,'YYYY')
      AND    LVAC_MONTH      BETWEEN TO_CHAR(P_FM_DATE,'MM')   AND TO_CHAR(P_TO_DATE,'MM');

CURSOR C_TOT_LEV_BAL(P_EMP_CODE IN VARCHAR2,P_CATG_CODE IN VARCHAR2) IS
         SELECT SUM(LVAC_ACCRUED_DAYS)
        FROM   PS_LEAVE_ACCRUAL_CURR
        WHERE  LVAC_COMP_CODE = P_COMP_CODE
        AND    LVAC_EMP_CODE  = P_EMP_CODE
        AND    LVAC_LV_CODE   = P_CATG_CODE
        AND    LVAC_YEAR       <= TO_CHAR(SYSDATE,'YYYY')
        AND    LVAC_MONTH       <= TO_CHAR(SYSDATE,'MM');

CURSOR C2 IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

   M_SR_DAYS          NUMBER;
   M_TOT_LEAVE_BEGIN_DAYS        NUMBER;
   M_LEAVE_AVAIL_DAYS    NUMBER;
   M_TOT_LEAVE_DAYS        NUMBER;

BEGIN

   DELETE FROM PW_LEAVE_AVAIL WHERE LA_REP_KEY_NO = P_REP_KEY_NO;

   MM_LANG_CODE := NULL;

    IF C2%ISOPEN THEN
       CLOSE C2;
    END IF;

    OPEN C2;
    FETCH C2 INTO MM_LANG_CODE;
    CLOSE C2;

   FOR I IN C_LEAVE_AVAIL
   LOOP

      IF C_SER_DAYS%ISOPEN THEN
         CLOSE C_SER_DAYS;
      END IF;

      OPEN C_SER_DAYS(I.EMP_CODE);
            FETCH C_SER_DAYS INTO M_SR_DAYS;
            CLOSE C_SER_DAYS;

      IF C_TOT_LEV_BEGIN%ISOPEN THEN
             CLOSE C_TOT_LEV_BEGIN;
        END IF;

      OPEN  C_TOT_LEV_BEGIN(I.EMP_CODE,I.LVAH_LV_CATG_CODE);
        FETCH C_TOT_LEV_BEGIN INTO M_TOT_LEAVE_BEGIN_DAYS;
        CLOSE C_TOT_LEV_BEGIN;

      IF C_LEAVE_AVAIL_DAYS%ISOPEN THEN
             CLOSE C_LEAVE_AVAIL_DAYS;
        END IF;

      OPEN  C_LEAVE_AVAIL_DAYS(I.EMP_CODE,I.LVAH_LV_CATG_CODE);
        FETCH C_LEAVE_AVAIL_DAYS INTO M_LEAVE_AVAIL_DAYS;
        CLOSE C_LEAVE_AVAIL_DAYS;

      IF C_TOT_LEV_BAL%ISOPEN THEN
             CLOSE C_TOT_LEV_BAL;
        END IF;

      OPEN  C_TOT_LEV_BAL(I.EMP_CODE,I.LVAH_LV_CATG_CODE);
        FETCH C_TOT_LEV_BAL INTO M_TOT_LEAVE_DAYS;
        CLOSE C_TOT_LEV_BAL;

      INSERT INTO PW_LEAVE_AVAIL ( LA_COMP_CODE,
                                   LA_REP_KEY_NO,
                                   LA_EMP_CODE,
                                   LA_EMP_NAME,
                                   LA_DOJ,
                                   LA_AMT,
                                   LA_DIVN,
                                   LA_DEPT,
                                   LA_DEPT_CODE,
                                   LA_DESC,
                                   LA_GRADE,
                                   LA_TYPE_CODE,
                                   LA_CATG_CODE,
                                   LA_SER_DAYS,
                                   LA_TOT_LEV_BEGIN,
                                   LA_LEAVE_AVAIL,
                                   LA_TOT_LEAVE_BAL )
                          VALUES ( P_COMP_CODE,
                                   P_REP_KEY_NO,
                                   I.EMP_CODE,
                                   I.EMP,
                                   I.DOJ,
                                   I.AMT,
                                   I.DIVN,
                                   I.DEPT_CODE,
                                   I.DEP,
                                   I.L_DESC,
                                   I.GRADE,
                                   I.LVAH_LV_TYPE_CODE,
                                   I.LVAH_LV_CATG_CODE,
                                   M_SR_DAYS,
                                   M_TOT_LEAVE_BEGIN_DAYS,
                                   M_LEAVE_AVAIL_DAYS,
                                   M_TOT_LEAVE_DAYS);


   END LOOP;
END P_LEAVE_AVAIL;

 PROCEDURE P_LEAVE_REPORT (P_COMP_CODE     IN VARCHAR2,
                          P_REP_KEY_NO    IN NUMBER,
                          P_FM_DIVN       IN VARCHAR2,
                          P_TO_DIVN       IN VARCHAR2,
                          P_FM_DEPT       IN VARCHAR2,
                          P_TO_DEPT       IN VARCHAR2,
                          P_FM_LOCN       IN VARCHAR2,
                          P_TO_LOCN       IN VARCHAR2,
                          P_FM_DATE       IN DATE,
                          P_TO_DATE       IN DATE,
                          P_FM_EMP_CODE   IN VARCHAR2,
                          P_TO_EMP_CODE   IN VARCHAR2,
                          P_FM_GRADE      IN VARCHAR2,
                          P_TO_GRADE      IN VARCHAR2) IS
MM_LANG_CODE VARCHAR2(240);

CURSOR C_LEAVE_REP IS
      SELECT EMP_DIVN_CODE ||'-'|| DECODE(MM_LANG_CODE,'ENG',DIVN_SHORT_NAME, 'LANG_01', DIVN_SHORT_NAME_LANG_01, 'LANG_02', DIVN_SHORT_NAME_LANG_02, 'LANG_03', DIVN_SHORT_NAME_LANG_03, 'LANG_04', DIVN_SHORT_NAME_LANG_04, 'LANG_05', DIVN_SHORT_NAME_LANG_05, 'LANG_06', DIVN_SHORT_NAME_LANG_06, 'LANG_07', DIVN_SHORT_NAME_LANG_07, 'LANG_08', DIVN_SHORT_NAME_LANG_08, 'LANG_09', DIVN_SHORT_NAME_LANG_09, 'LANG_10', DIVN_SHORT_NAME_LANG_10,DIVN_SHORT_NAME) DIVN,
               EMP_DEPT_CODE ||'-'|| DECODE(MM_LANG_CODE,'ENG',DEPT_SHORT_NAME, 'LANG_01', DEPT_SHORT_NAME_LANG_01, 'LANG_02', DEPT_SHORT_NAME_LANG_02, 'LANG_03', DEPT_SHORT_NAME_LANG_03, 'LANG_04', DEPT_SHORT_NAME_LANG_04, 'LANG_05', DEPT_SHORT_NAME_LANG_05, 'LANG_06', DEPT_SHORT_NAME_LANG_06, 'LANG_07', DEPT_SHORT_NAME_LANG_07, 'LANG_08', DEPT_SHORT_NAME_LANG_08, 'LANG_09', DEPT_SHORT_NAME_LANG_09, 'LANG_10', DEPT_SHORT_NAME_LANG_10,DEPT_SHORT_NAME) DEPT,
               LVAH_EMP_CODE,DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06, 'LANG_07', EMP_NAME_LANG_07, 'LANG_08', EMP_NAME_LANG_08, 'LANG_09', EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10,EMP_NAME) EMP,
               LV_TYPE_CODE ||'-'|| DECODE(MM_LANG_CODE,'ENG',LV_TYPE_SHORT_DESC, 'LANG_01', LV_TYPE_SHORT_DESC_LANG_01, 'LANG_02', LV_TYPE_SHORT_DESC_LANG_02, 'LANG_03', LV_TYPE_SHORT_DESC_LANG_03, 'LANG_04', LV_TYPE_SHORT_DESC_LANG_04, 'LANG_05', LV_TYPE_SHORT_DESC_LANG_05, 'LANG_06', LV_TYPE_SHORT_DESC_LANG_06, 'LANG_07', LV_TYPE_SHORT_DESC_LANG_07, 'LANG_08', LV_TYPE_SHORT_DESC_LANG_08, 'LANG_09', LV_TYPE_SHORT_DESC_LANG_09, 'LANG_10', LV_TYPE_SHORT_DESC_LANG_10,LV_TYPE_SHORT_DESC) LV_TYPE,
               SUM(LVAH_DAYS) LVAH_DAYS
      FROM   PT_LEAVE_APPLICATION_HEAD,PM_LEAVE_TYPE,PM_EMP_KEY,FM_DIVISION,FM_DEPARTMENT
      WHERE  LVAH_COMP_CODE = P_COMP_CODE
      AND    LV_TYPE_CODE   = LVAH_LV_TYPE_CODE
      AND    LVAH_COMP_CODE = EMP_COMP_CODE
      AND    EMP_COMP_CODE  = DIVN_COMP_CODE
      AND    EMP_COMP_CODE  = DEPT_COMP_CODE
      AND    LVAH_EMP_CODE  = EMP_CODE
      AND    EMP_DIVN_CODE  = DIVN_CODE
      AND    DEPT_DIVN_CODE = DIVN_CODE
      AND    EMP_DEPT_CODE  = DEPT_CODE
      AND    EMP_DIVN_CODE  BETWEEN P_FM_DIVN AND P_TO_DIVN
      AND    EMP_DEPT_CODE  BETWEEN P_FM_DEPT AND P_TO_DEPT
      AND    EMP_LOCN_CODE  BETWEEN P_FM_LOCN AND P_TO_LOCN
      AND    LVAH_DT        BETWEEN P_FM_DATE AND P_TO_DATE
      AND    LVAH_EMP_CODE  BETWEEN P_FM_EMP_CODE AND P_TO_EMP_CODE
      AND    EMP_PERSONAL_GRADE BETWEEN P_FM_GRADE AND P_TO_GRADE
      GROUP BY EMP_DIVN_CODE ||'-'|| DECODE(MM_LANG_CODE,'ENG',DIVN_SHORT_NAME, 'LANG_01', DIVN_SHORT_NAME_LANG_01, 'LANG_02', DIVN_SHORT_NAME_LANG_02, 'LANG_03', DIVN_SHORT_NAME_LANG_03, 'LANG_04', DIVN_SHORT_NAME_LANG_04, 'LANG_05', DIVN_SHORT_NAME_LANG_05, 'LANG_06', DIVN_SHORT_NAME_LANG_06, 'LANG_07', DIVN_SHORT_NAME_LANG_07, 'LANG_08', DIVN_SHORT_NAME_LANG_08, 'LANG_09', DIVN_SHORT_NAME_LANG_09, 'LANG_10', DIVN_SHORT_NAME_LANG_10,DIVN_SHORT_NAME),DIVN_BL_SHORT_NAME,EMP_DEPT_CODE ||'-'|| DECODE(MM_LANG_CODE,'ENG',DEPT_SHORT_NAME, 'LANG_01', DEPT_SHORT_NAME_LANG_01, 'LANG_02', DEPT_SHORT_NAME_LANG_02, 'LANG_03', DEPT_SHORT_NAME_LANG_03, 'LANG_04', DEPT_SHORT_NAME_LANG_04, 'LANG_05', DEPT_SHORT_NAME_LANG_05, 'LANG_06', DEPT_SHORT_NAME_LANG_06, 'LANG_07', DEPT_SHORT_NAME_LANG_07, 'LANG_08', DEPT_SHORT_NAME_LANG_08, 'LANG_09', DEPT_SHORT_NAME_LANG_09, 'LANG_10', DEPT_SHORT_NAME_LANG_10,DEPT_SHORT_NAME),
               LVAH_EMP_CODE,DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06, 'LANG_07', EMP_NAME_LANG_07, 'LANG_08', EMP_NAME_LANG_08, 'LANG_09', EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10,EMP_NAME),LV_TYPE_CODE ||'-'||DECODE(MM_LANG_CODE,'ENG',LV_TYPE_SHORT_DESC, 'LANG_01', LV_TYPE_SHORT_DESC_LANG_01, 'LANG_02', LV_TYPE_SHORT_DESC_LANG_02, 'LANG_03', LV_TYPE_SHORT_DESC_LANG_03, 'LANG_04', LV_TYPE_SHORT_DESC_LANG_04, 'LANG_05', LV_TYPE_SHORT_DESC_LANG_05, 'LANG_06', LV_TYPE_SHORT_DESC_LANG_06, 'LANG_07', LV_TYPE_SHORT_DESC_LANG_07, 'LANG_08', LV_TYPE_SHORT_DESC_LANG_08, 'LANG_09', LV_TYPE_SHORT_DESC_LANG_09, 'LANG_10', LV_TYPE_SHORT_DESC_LANG_10,LV_TYPE_SHORT_DESC);

CURSOR C_LVAH_DAYS(P_EMP_CODE IN VARCHAR2) IS
      SELECT SUM(LVAH_DAYS)
        FROM   PT_LEAVE_APPLICATION_HEAD
        WHERE  LVAH_COMP_CODE = P_COMP_CODE
        AND    LVAH_EMP_CODE  = P_EMP_CODE
        AND    LVAH_DT        BETWEEN P_FM_DATE AND P_TO_DATE;

CURSOR C_ABSENT_DAYS(P_EMP_CODE IN VARCHAR2) IS
        SELECT SUM(NVL(ATND_HRS_DAYS,0))
        FROM   PM_EMP_KEY,PT_ATTENDANCE_DETAIL,PT_ATTENDANCE_HEAD
        WHERE  EMP_COMP_CODE  = P_COMP_CODE
        AND    ATNH_COMP_CODE = EMP_COMP_CODE
        AND    ATND_DIVN_CODE = EMP_DIVN_CODE
        AND    ATND_DEPT_CODE = EMP_DEPT_CODE
        AND    EMP_CODE       = P_EMP_CODE
        AND    ATND_EMP_CODE  = EMP_CODE
        AND    ATND_ATNH_SYS_ID = ATNH_SYS_ID
        AND    ATNH_DT  BETWEEN P_FM_DATE AND P_TO_DATE;

CURSOR C_NO_OF_LWP(P_EMP_CODE IN VARCHAR2) IS
      SELECT SUM(LWP_DAYS)
      FROM   PT_LWP
      WHERE LWP_COMP_CODE = P_COMP_CODE
      AND   LWP_EMP_CODE  = P_EMP_CODE
      AND   LWP_DT BETWEEN P_FM_DATE AND P_TO_DATE
      AND   LWP_APPR_UID IS NOT NULL
      AND   LWP_APPR_DT IS NOT NULL;

CURSOR C_REP_VAL_3 IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;


   M_DAYS       NUMBER := 0;
   M_ABT_DAYS   NUMBER:= 0;
   M_LWP_DAYS        NUMBER := 0;
   M_DAYS_1       NUMBER := 0;


BEGIN

    DELETE FROM PW_LEAVE WHERE PL_REP_KEY_NO = P_REP_KEY_NO;

    MM_LANG_CODE := NULL;

    IF C_REP_VAL_3%ISOPEN THEN
       CLOSE C_REP_VAL_3;
    END IF;

    OPEN C_REP_VAL_3;
    FETCH C_REP_VAL_3 INTO MM_LANG_CODE;
    CLOSE C_REP_VAL_3;


    FOR I IN C_LEAVE_REP
    LOOP

       IF C_LVAH_DAYS%ISOPEN THEN
              CLOSE C_LVAH_DAYS;
         END IF;

       OPEN C_LVAH_DAYS(I.LVAH_EMP_CODE);
         FETCH C_LVAH_DAYS INTO M_DAYS;
         CLOSE C_LVAH_DAYS;

       IF C_ABSENT_DAYS%ISOPEN THEN
              CLOSE C_ABSENT_DAYS;
         END IF;

       OPEN C_ABSENT_DAYS(I.LVAH_EMP_CODE);
         FETCH C_ABSENT_DAYS INTO M_ABT_DAYS;
         CLOSE C_ABSENT_DAYS;

      --M_LWP_DAYS := ( NVL(M_ABT_DAYS,0) - NVL(M_DAYS,0));

       IF M_LWP_DAYS <= 0 THEN
              M_LWP_DAYS := 0;
         END IF;

         IF C_NO_OF_LWP%ISOPEN THEN
              CLOSE C_NO_OF_LWP;
         END IF;

       OPEN C_NO_OF_LWP(I.LVAH_EMP_CODE);
         FETCH C_NO_OF_LWP INTO M_DAYS_1;
         CLOSE C_NO_OF_LWP;

       --  M_LWP_DAYS := NVL(M_LWP_DAYS,0)+ NVL(M_DAYS_1,0); commented by partha  MEFC_INT-1499859

       INSERT INTO PW_LEAVE ( PL_COMP_CODE,
                              PL_REP_KEY_NO,
                              PL_EMP_CODE,
                              PL_EMP_NAME,
                              PL_DIVN,
                              PL_DEPT,
                              PL_TYPE,
                              PL_DAYS,
                              PL_LVAH_DAYS,
                              PL_ABSENT_DAYS,
                              PL_NO_OF_LWP )
                     VALUES ( P_COMP_CODE,
                              P_REP_KEY_NO,
                              I.LVAH_EMP_CODE,
                              I.EMP,
                              I.DIVN,
                              I.DEPT,
                              I.LV_TYPE,
                              I.LVAH_DAYS,
                              M_DAYS,
                              M_ABT_DAYS,
                              M_DAYS_1);

   END LOOP;

END P_LEAVE_REPORT;

PROCEDURE P_SALARY_REVISION ( P_COMP_CODE     IN  VARCHAR2,
                              P_REP_KEY_NO    IN NUMBER,
                              P_FM_DIVN       IN VARCHAR2,
                              P_TO_DIVN       IN VARCHAR2,
                              P_FM_DEPT       IN VARCHAR2,
                              P_TO_DEPT       IN VARCHAR2,
                              P_FM_LOCN       IN VARCHAR2,
                              P_TO_LOCN       IN VARCHAR2,
                              P_FM_DATE       IN DATE,
                              P_TO_DATE       IN DATE,
                              P_FM_EMP_CODE   IN VARCHAR2,
                              P_TO_EMP_CODE   IN VARCHAR2,
                              P_FM_GRADE      IN VARCHAR2,
                              P_TO_GRADE      IN VARCHAR2,
                              P_FM_TXN_TYPE   IN VARCHAR2,
                              P_TO_TXN_TYPE   IN VARCHAR2,
                              P_STATUS        IN VARCHAR2) IS

MM_LANG_CODE VARCHAR2(240);

CURSOR C_SAL_REV IS
      SELECT EMP_DIVN_CODE DIV_CODE,EMP_DEPT_CODE DEPT_CODE,EMP_DEPT_CODE REVH_DEP,EMP_DIVN_CODE REVH_DIV,
               EMP_LOCN_CODE LOC_CODE,REVA_FROM_DT EFFECTIVE_DT,
               DECODE(MM_LANG_CODE,'ENG',ALLW_DESC, 'LANG_01', ALLW_DESC_LANG_01, 'LANG_02', ALLW_DESC_LANG_02,
'LANG_03', ALLW_DESC_LANG_03, 'LANG_04', ALLW_DESC_LANG_04, 'LANG_05', ALLW_DESC_LANG_05, 'LANG_06',
ALLW_DESC_LANG_06, 'LANG_07', ALLW_DESC_LANG_07, 'LANG_08', ALLW_DESC_LANG_08, 'LANG_09', ALLW_DESC_LANG_09,
'LANG_10', ALLW_DESC_LANG_10,ALLW_DESC)  ELEMENTS_TO_BE_REVISED,
               REVH_REF_FROM BASIS_OF_REVISION,REVH_EMP_CODE EMP_CODE,DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01',EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04',
              EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',EMP_NAME_LANG_06, 'LANG_07',EMP_NAME_LANG_07, 'LANG_08',EMP_NAME_LANG_08,
              'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10) EMP_NAME,
             REVH_TXN_CODE ||'-'|| REVH_NO  TXN_CODE_AND_NO,REVH_REF_TXN_CODE ||'-'||REVH_REF_NO REF_TXN_CODE_AND_NO,
               DECODE(NVL(REVH_APPR_UID,'*'),'*','Unapproved','Approved') APPROVED,
               ALLW_DESC ELEMENTS_TO_BE_REVISED_1
      FROM   PT_SAL_REVISION_ALLOWANCE,PT_PROMOTIONS,PT_SAL_REVISION_HEAD,PM_EMP_KEY,PT_CONT_TYPE_CHANGE,
             PT_TRANSFERS,PM_ALLOWANCE
      WHERE  EMP_COMP_CODE =P_COMP_CODE
      AND    EMP_COMP_CODE = REVH_COMP_CODE
      AND    EMP_END_OF_SERVICE_DT IS NULL
      AND    EMP_CODE      = REVH_EMP_CODE
      AND    REVA_ALLW_CODE=ALLW_CODE
      AND    REVH_SYS_ID   = REVA_REVH_SYS_ID
      AND    PROMO_SYS_ID(+)=REVH_REF_SYS_ID
      AND    PROMO_COMP_CODE(+)=REVH_COMP_CODE
      AND    PROMO_TXN_CODE(+)=REVH_REF_TXN_CODE
      AND    PROMO_NO (+)=REVH_REF_NO
      AND    CTGH_SYS_ID(+)=REVH_REF_SYS_ID
      AND    CTGH_COMP_CODE(+)=REVH_COMP_CODE
      AND    CTGH_TXN_CODE(+)= REVH_REF_TXN_CODE
      AND    CTGH_NO(+)= REVH_REF_NO
      AND    TRF_SYS_ID(+) =REVH_REF_SYS_ID
      AND    TRF_COMP_CODE(+)=REVH_COMP_CODE
      AND    TRF_TXN_CODE(+)=REVH_REF_TXN_CODE
      AND    TRF_NO(+)= REVH_REF_NO
      AND    EMP_CODE      BETWEEN P_FM_EMP_CODE  AND P_TO_EMP_CODE
      AND    EMP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
      AND    EMP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
      AND    EMP_LOCN_CODE BETWEEN P_FM_LOCN AND P_TO_LOCN
      AND    EMP_PERSONAL_GRADE  BETWEEN P_FM_GRADE AND P_TO_GRADE
      AND    REVH_FROM_DT BETWEEN P_FM_DATE  AND P_TO_DATE
      AND    REVA_FROM_DT BETWEEN P_FM_DATE  AND P_TO_DATE
      AND    REVH_TXN_CODE  BETWEEN P_FM_TXN_TYPE AND P_TO_TXN_TYPE
      AND    REVH_APPR_UID     IS  NULL
      AND    REVH_APPR_DT      IS  NULL
      AND    P_STATUS = 'Unapproved'
      UNION ALL
      SELECT EMP_DIVN_CODE DIV_CODE,EMP_DEPT_CODE DEPT_CODE,EMP_DEPT_CODE ESRH_DEP,EMP_DIVN_CODE ESRH_DIV,
               EMP_LOCN_CODE LOC_CODE,ESRH_EFFECT_FROM EFFECTIVE_DT,
               DECODE(MM_LANG_CODE,'ENG',ALLW_DESC, 'LANG_01', ALLW_DESC_LANG_01, 'LANG_02', ALLW_DESC_LANG_02,
'LANG_03', ALLW_DESC_LANG_03, 'LANG_04', ALLW_DESC_LANG_04, 'LANG_05', ALLW_DESC_LANG_05, 'LANG_06',
ALLW_DESC_LANG_06, 'LANG_07', ALLW_DESC_LANG_07, 'LANG_08', ALLW_DESC_LANG_08, 'LANG_09', ALLW_DESC_LANG_09,
'LANG_10', ALLW_DESC_LANG_10,ALLW_DESC)  ELEMENTS_TO_BE_REVISED,
               ESRH_REF_FROM BASIS_OF_REVISION,ESRD_EMP_CODE EMP_CODE,DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01',EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04',
              EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',EMP_NAME_LANG_06, 'LANG_07',EMP_NAME_LANG_07, 'LANG_08',EMP_NAME_LANG_08,
              'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10) EMP_NAME,
             ESRH_TXN_CODE ||'-'|| ESRH_NO  TXN_CODE_AND_NO,
                ESRH_REF_TXN_CODE ||'-'||ESRH_REF_NO REF_TXN_CODE_AND_NO,
               DECODE(NVL(ESRH_APPR_UID,'*'),'*','Unapproved','Approved')             APPROVED,
               ALLW_DESC ELEMENTS_TO_BE_REVISED_1
     FROM    PT_EMP_SAL_REV_HEAD,PT_PROMOTIONS,PT_EMP_SAL_REV_DETAIL,PM_EMP_KEY,
               PT_CONT_TYPE_CHANGE,PT_TRANSFERS,PM_ALLOWANCE
     WHERE   EMP_COMP_CODE =P_COMP_CODE
     AND    EMP_COMP_CODE = ESRH_COMP_CODE
     AND    EMP_END_OF_SERVICE_DT IS NULL
     AND    EMP_CODE      = ESRD_EMP_CODE
     AND    ESRH_ALLW_CODE=ALLW_CODE
     AND    ESRH_SYS_ID   =ESRD_ESRH_SYS_ID
     AND    PROMO_SYS_ID(+)=ESRH_REF_SYS_ID
     AND    PROMO_COMP_CODE(+)=ESRH_COMP_CODE
     AND    PROMO_TXN_CODE(+)=ESRH_REF_TXN_CODE
     AND    PROMO_NO (+)=ESRH_REF_NO
     AND    CTGH_SYS_ID(+)=ESRH_REF_SYS_ID
     AND    CTGH_COMP_CODE(+)=ESRH_COMP_CODE
     AND    CTGH_TXN_CODE(+)= ESRH_REF_TXN_CODE
     AND    CTGH_NO(+)= ESRH_REF_NO
     AND    TRF_SYS_ID(+) =ESRH_REF_SYS_ID
     AND    TRF_COMP_CODE(+)=ESRH_COMP_CODE
     AND    TRF_TXN_CODE(+)=ESRH_REF_TXN_CODE
     AND    TRF_NO(+)= ESRH_REF_NO
     AND    EMP_CODE      BETWEEN P_FM_EMP_CODE  AND P_TO_EMP_CODE
     AND    EMP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
     AND    EMP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
     AND    EMP_LOCN_CODE BETWEEN P_FM_LOCN AND P_TO_LOCN
     AND    EMP_PERSONAL_GRADE  BETWEEN P_FM_GRADE AND P_TO_GRADE
     AND    ESRH_EFFECT_FROM BETWEEN P_FM_DATE  AND P_TO_DATE
     AND    ESRH_TXN_CODE  BETWEEN P_FM_TXN_TYPE AND P_TO_TXN_TYPE
     AND    ESRH_APPR_UID     IS  NULL
     AND    ESRH_APPR_DT      IS  NULL
     AND    P_STATUS = 'Unapproved'
     UNION ALL
     SELECT EMP_DIVN_CODE DIV_CODE,EMP_DEPT_CODE DEPT_CODE,EMP_DEPT_CODE ESRD_DEP,EMP_DIVN_CODE ESRD_DIV,
              EMP_LOCN_CODE LOC_CODE,ESRH_EFFECT_FROM    EFFECTIVE_DT,
              DECODE(MM_LANG_CODE,'ENG',ALLW_DESC, 'LANG_01', ALLW_DESC_LANG_01, 'LANG_02', ALLW_DESC_LANG_02,
'LANG_03', ALLW_DESC_LANG_03, 'LANG_04', ALLW_DESC_LANG_04, 'LANG_05', ALLW_DESC_LANG_05, 'LANG_06',
ALLW_DESC_LANG_06, 'LANG_07', ALLW_DESC_LANG_07, 'LANG_08', ALLW_DESC_LANG_08, 'LANG_09', ALLW_DESC_LANG_09,
'LANG_10', ALLW_DESC_LANG_10,ALLW_DESC) ELEMENTS_TO_BE_REVISED,
              ESRH_REF_FROM BASIS_OF_REVISION,ESRD_EMP_CODE EMP_CODE,DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01',EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04',
              EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',EMP_NAME_LANG_06, 'LANG_07',EMP_NAME_LANG_07, 'LANG_08',EMP_NAME_LANG_08,
              'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10) EMP_NAME,
            ESRH_TXN_CODE ||'-'|| ESRH_NO  TXN_CODE_AND_NO,ESRH_REF_TXN_CODE ||'-'||ESRH_REF_NO REF_TXN_CODE_AND_NO,
              DECODE(NVL(ESRH_APPR_UID,'*'),'*','Unapproved','Approved') APPROVED,
              ALLW_DESC ELEMENTS_TO_BE_REVISED_1
     FROM   PT_EMP_SAL_REV_DETAIL,  PT_PROMOTIONS,PT_EMP_SAL_REV_HEAD,PM_EMP_KEY,PT_CONT_TYPE_CHANGE,PT_TRANSFERS,PM_ALLOWANCE
     WHERE  EMP_COMP_CODE =P_COMP_CODE
     AND    EMP_COMP_CODE =   ESRH_COMP_CODE
     AND    EMP_END_OF_SERVICE_DT IS NULL
     AND    EMP_CODE      = ESRD_EMP_CODE
     AND    ESRH_ALLW_CODE=ALLW_CODE
     AND    ESRH_SYS_ID   = ESRD_ESRH_SYS_ID
     AND    PROMO_SYS_ID(+)=ESRH_REF_SYS_ID
     AND    PROMO_COMP_CODE(+)=ESRH_COMP_CODE
     AND    PROMO_TXN_CODE(+)=ESRH_REF_TXN_CODE
     AND    PROMO_NO (+)=ESRH_REF_NO
     AND    CTGH_SYS_ID(+)=ESRH_REF_SYS_ID
     AND    CTGH_COMP_CODE(+)=ESRH_COMP_CODE
     AND    CTGH_TXN_CODE(+)= ESRH_REF_TXN_CODE
     AND    CTGH_NO(+)= ESRH_REF_NO
     AND    TRF_SYS_ID(+) =ESRH_REF_SYS_ID
     AND    TRF_COMP_CODE(+)=ESRH_COMP_CODE
     AND    TRF_TXN_CODE(+)= ESRH_REF_FROM
     AND    EMP_CODE   BETWEEN P_FM_EMP_CODE  AND P_TO_EMP_CODE
     AND    EMP_DIVN_CODE BETWEEN  P_FM_DIVN AND P_TO_DIVN
     AND    EMP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
     AND    EMP_LOCN_CODE BETWEEN P_FM_LOCN AND P_TO_LOCN
     AND    EMP_PERSONAL_GRADE  BETWEEN P_FM_GRADE AND P_TO_GRADE
     AND    ESRD_FROM_DT BETWEEN P_FM_DATE AND P_TO_DATE
     AND    ESRH_EFFECT_FROM BETWEEN  P_FM_DATE AND P_TO_DATE
     AND    ESRH_TXN_CODE  BETWEEN P_FM_TXN_TYPE AND P_TO_TXN_TYPE
     AND    ESRH_APPR_UID   IS  NOT NULL
     AND    ESRH_APPR_DT    IS  NOT NULL
     AND    P_STATUS = 'Approved'
     UNION ALL
     SELECT EMP_DIVN_CODE DIV_CODE,EMP_DEPT_CODE DEPT_CODE,EMP_DEPT_CODE REVH_DEP,EMP_DIVN_CODE REVH_DIV,
              EMP_LOCN_CODE LOC_CODE,REVA_FROM_DT EFFECTIVE_DT,
              DECODE(MM_LANG_CODE,'ENG',ALLW_DESC, 'LANG_01', ALLW_DESC_LANG_01, 'LANG_02', ALLW_DESC_LANG_02,
'LANG_03', ALLW_DESC_LANG_03, 'LANG_04', ALLW_DESC_LANG_04, 'LANG_05', ALLW_DESC_LANG_05, 'LANG_06',
ALLW_DESC_LANG_06, 'LANG_07', ALLW_DESC_LANG_07, 'LANG_08', ALLW_DESC_LANG_08, 'LANG_09', ALLW_DESC_LANG_09,
'LANG_10', ALLW_DESC_LANG_10,ALLW_DESC) ELEMENTS_TO_BE_REVISED,
              REVH_REF_FROM BASIS_OF_REVISION,REVH_EMP_CODE EMP_CODE,DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01',EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04',
              EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',EMP_NAME_LANG_06, 'LANG_07',EMP_NAME_LANG_07, 'LANG_08',EMP_NAME_LANG_08,
              'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10) EMP_NAME,-- TALAL_INT-1514952 changed by partha on 25/06/2018
            REVH_TXN_CODE ||'-'|| REVH_NO  TXN_CODE_AND_NO,REVH_REF_TXN_CODE ||'-'||REVH_REF_NO REF_TXN_CODE_AND_NO,
              DECODE(NVL(REVH_APPR_UID,'*'),'*','Unapproved','Approved') APPROVED,
              ALLW_DESC ELEMENTS_TO_BE_REVISED_1
     FROM   PT_SAL_REVISION_ALLOWANCE,PT_PROMOTIONS,PT_SAL_REVISION_HEAD,PM_EMP_KEY,PT_CONT_TYPE_CHANGE,PT_TRANSFERS,PM_ALLOWANCE
     WHERE  EMP_COMP_CODE =P_COMP_CODE
     AND    EMP_COMP_CODE = REVH_COMP_CODE
     AND    EMP_END_OF_SERVICE_DT IS NULL
     AND    EMP_CODE      = REVH_EMP_CODE
     AND    REVA_ALLW_CODE=ALLW_CODE
     AND    REVH_SYS_ID   = REVA_REVH_SYS_ID
     AND    PROMO_SYS_ID(+)=REVH_REF_SYS_ID
     AND    PROMO_COMP_CODE(+)=REVH_COMP_CODE
     AND    PROMO_TXN_CODE(+)=REVH_REF_TXN_CODE
     AND    PROMO_NO (+)=REVH_REF_NO
     AND    CTGH_SYS_ID(+)=REVH_REF_SYS_ID
     AND    CTGH_COMP_CODE(+)=REVH_COMP_CODE
     AND    CTGH_TXN_CODE(+)= REVH_REF_TXN_CODE
     AND    CTGH_NO(+)= REVH_REF_NO
     AND    TRF_SYS_ID(+) =REVH_REF_SYS_ID
     AND    TRF_COMP_CODE(+)=REVH_COMP_CODE
     AND    TRF_TXN_CODE(+)=REVH_REF_TXN_CODE
     AND    TRF_NO(+)= REVH_REF_NO
     AND    EMP_CODE   BETWEEN P_FM_EMP_CODE  AND P_TO_EMP_CODE
     AND    EMP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
     AND    EMP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
     AND    EMP_LOCN_CODE BETWEEN P_FM_LOCN AND P_TO_LOCN
     AND    EMP_PERSONAL_GRADE  BETWEEN P_FM_GRADE AND P_TO_GRADE
     AND    REVH_FROM_DT BETWEEN P_FM_DATE AND P_TO_DATE
     AND    REVA_FROM_DT BETWEEN P_FM_DATE AND P_TO_DATE
     AND    REVH_FROM_DT BETWEEN P_FM_DATE  AND P_TO_DATE
     AND    REVA_FROM_DT BETWEEN P_FM_DATE  AND P_TO_DATE
     AND    REVH_APPR_UID   IS  NOT NULL
     AND    REVH_APPR_DT    IS  NOT NULL
     AND    P_STATUS = 'Approved'
     UNION ALL
     SELECT EMP_DIVN_CODE DIV_CODE,EMP_DEPT_CODE DEPT_CODE,EMP_DEPT_CODE ESRH_DEP,EMP_DIVN_CODE ESRH_DIV,
              EMP_LOCN_CODE LOC_CODE,ESRD_FROM_DT    EFFECTIVE_DT,
              DECODE(MM_LANG_CODE,'ENG',ALLW_DESC, 'LANG_01', ALLW_DESC_LANG_01, 'LANG_02', ALLW_DESC_LANG_02,
'LANG_03', ALLW_DESC_LANG_03, 'LANG_04', ALLW_DESC_LANG_04, 'LANG_05', ALLW_DESC_LANG_05, 'LANG_06',
ALLW_DESC_LANG_06, 'LANG_07', ALLW_DESC_LANG_07, 'LANG_08', ALLW_DESC_LANG_08, 'LANG_09', ALLW_DESC_LANG_09,
'LANG_10', ALLW_DESC_LANG_10,ALLW_DESC) ELEMENTS_TO_BE_REVISED,
              ESRH_REF_FROM BASIS_OF_REVISION,ESRD_EMP_CODE EMP_CODE,DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01',EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04',
              EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',EMP_NAME_LANG_06, 'LANG_07',EMP_NAME_LANG_07, 'LANG_08',EMP_NAME_LANG_08,
              'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10) EMP_NAME,-- TALAL_INT-1514952 changed by partha on 25/06/2018
            ESRH_TXN_CODE ||'-'|| ESRH_NO  TXN_CODE_AND_NO,ESRH_REF_TXN_CODE ||'-'||ESRH_REF_NO REF_TXN_CODE_AND_NO,
              DECODE(NVL(ESRH_APPR_UID,'*'),'*','Unapproved','Approved') APPROVED,
              ALLW_DESC ELEMENTS_TO_BE_REVISED_1
     FROM   PT_EMP_SAL_REV_DETAIL,PT_PROMOTIONS,PT_EMP_SAL_REV_HEAD,PM_EMP_KEY,PT_CONT_TYPE_CHANGE,PT_TRANSFERS,PM_ALLOWANCE
     WHERE  EMP_COMP_CODE =P_COMP_CODE
     AND    EMP_COMP_CODE = ESRH_COMP_CODE
     AND    EMP_END_OF_SERVICE_DT IS NULL
     AND    EMP_CODE      = ESRD_EMP_CODE
     AND    ESRD_ALLW_CODE=ALLW_CODE
     AND    ESRH_SYS_ID   = ESRD_ESRH_SYS_ID
     AND    PROMO_SYS_ID(+)=ESRH_REF_SYS_ID
     AND    PROMO_COMP_CODE(+)=ESRH_COMP_CODE
     AND    PROMO_TXN_CODE(+)=ESRH_REF_TXN_CODE
     AND    PROMO_NO (+)=ESRH_REF_NO
     AND    CTGH_SYS_ID(+)=ESRH_REF_SYS_ID
     AND    CTGH_COMP_CODE(+)=ESRH_COMP_CODE
     AND    CTGH_TXN_CODE(+)= ESRH_REF_TXN_CODE
     AND    CTGH_NO(+)= ESRH_REF_NO
     AND    TRF_SYS_ID(+) =ESRH_REF_SYS_ID
     AND    TRF_COMP_CODE(+)=ESRH_COMP_CODE
     AND    TRF_TXN_CODE(+)=ESRH_REF_TXN_CODE
     AND    TRF_NO(+)= ESRH_REF_NO
     AND    EMP_CODE   BETWEEN P_FM_EMP_CODE  AND P_TO_EMP_CODE
     AND    EMP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
     AND    EMP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
     AND    EMP_LOCN_CODE BETWEEN P_FM_LOCN AND P_TO_LOCN
     AND    EMP_PERSONAL_GRADE  BETWEEN P_FM_GRADE AND P_TO_GRADE
     AND    ESRH_EFFECT_FROM BETWEEN P_FM_DATE AND P_TO_DATE
     AND    ESRD_FROM_DT BETWEEN P_FM_DATE AND P_TO_DATE
     AND    ESRH_TXN_CODE  BETWEEN P_FM_TXN_TYPE AND P_TO_TXN_TYPE
     AND    P_STATUS = 'Both' -- TALAL_INT-1513900 changed by partha
     UNION ALL
     SELECT EMP_DIVN_CODE DIV_CODE,EMP_DEPT_CODE DEPT_CODE,EMP_DEPT_CODE REVH_DEP,EMP_DIVN_CODE REVH_DIV,
            EMP_LOCN_CODE LOC_CODE,REVA_FROM_DT    EFFECTIVE_DT,
            DECODE(MM_LANG_CODE,'ENG',ALLW_DESC, 'LANG_01', ALLW_DESC_LANG_01, 'LANG_02', ALLW_DESC_LANG_02,
'LANG_03', ALLW_DESC_LANG_03, 'LANG_04', ALLW_DESC_LANG_04, 'LANG_05', ALLW_DESC_LANG_05, 'LANG_06',
ALLW_DESC_LANG_06, 'LANG_07', ALLW_DESC_LANG_07, 'LANG_08', ALLW_DESC_LANG_08, 'LANG_09', ALLW_DESC_LANG_09,
'LANG_10', ALLW_DESC_LANG_10,ALLW_DESC) ELEMENTS_TO_BE_REVISED,
              REVH_REF_FROM BASIS_OF_REVISION,REVH_EMP_CODE EMP_CODE,DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01',EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04',
              EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',EMP_NAME_LANG_06, 'LANG_07',EMP_NAME_LANG_07, 'LANG_08',EMP_NAME_LANG_08,
              'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_LONG_NAME_LANG_10) EMP_NAME,-- TALAL_INT-1514952 changed by partha on 25/06/2018
            REVH_TXN_CODE ||'-'|| REVH_NO  TXN_CODE_AND_NO,REVH_REF_TXN_CODE ||'-'||REVH_REF_NO REF_TXN_CODE_AND_NO,
              DECODE(NVL(REVH_APPR_UID,'*'),'*','Unapproved','Approved') APPROVED,
              ALLW_DESC ELEMENTS_TO_BE_REVISED_1
     FROM   PT_SAL_REVISION_ALLOWANCE,PT_PROMOTIONS,PT_SAL_REVISION_HEAD,PM_EMP_KEY,PT_CONT_TYPE_CHANGE,PT_TRANSFERS,PM_ALLOWANCE
     WHERE  EMP_COMP_CODE =P_COMP_CODE
     AND    EMP_COMP_CODE = REVH_COMP_CODE
     AND    EMP_END_OF_SERVICE_DT IS NULL
     AND    EMP_CODE      = REVH_EMP_CODE
     AND    REVA_ALLW_CODE=ALLW_CODE
     AND    REVH_SYS_ID   = REVA_REVH_SYS_ID
     AND    PROMO_SYS_ID(+)=REVH_REF_SYS_ID
     AND    PROMO_COMP_CODE(+)=REVH_COMP_CODE
     AND    PROMO_TXN_CODE(+)=REVH_REF_TXN_CODE
     AND    PROMO_NO (+)=REVH_REF_NO
     AND    CTGH_SYS_ID(+)=REVH_REF_SYS_ID
     AND    CTGH_COMP_CODE(+)=REVH_COMP_CODE
     AND    CTGH_TXN_CODE(+)= REVH_REF_TXN_CODE
     AND    CTGH_NO(+)= REVH_REF_NO
     AND    TRF_SYS_ID(+) =REVH_REF_SYS_ID
     AND    TRF_COMP_CODE(+)=REVH_COMP_CODE
     AND    TRF_TXN_CODE(+)=REVH_REF_TXN_CODE
     AND    TRF_NO(+)= REVH_REF_NO
     AND    EMP_CODE   BETWEEN P_FM_EMP_CODE  AND P_TO_EMP_CODE
     AND    EMP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
     AND    EMP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
     AND    EMP_LOCN_CODE BETWEEN P_FM_LOCN AND P_TO_LOCN
     AND    EMP_PERSONAL_GRADE  BETWEEN P_FM_GRADE AND P_TO_GRADE
     AND    REVH_FROM_DT BETWEEN P_FM_DATE AND P_TO_DATE
     AND    REVA_FROM_DT BETWEEN P_FM_DATE AND P_TO_DATE
     AND    REVH_TXN_CODE  BETWEEN P_FM_TXN_TYPE AND P_TO_TXN_TYPE
     AND    P_STATUS =  'Both'  --TALAL_INT-1513900 changed by partha
     ORDER BY DIV_CODE,DEPT_CODE,EMP_CODE,EFFECTIVE_DT,ELEMENTS_TO_BE_REVISED;

CURSOR C_EXIST (P_EMP_CODE IN VARCHAR2,P_EFFECTIVE_DT IN DATE,P_BASIC_OF_REV IN VARCHAR2,P_ELE_TO_BE_REV IN VARCHAR2)IS
          SELECT NVL(REVA_ORG_FC_AMOUNT,0),NVL(REVA_ADJ_FC_AMOUNT,0)
      FROM   PT_SAL_REVISION_ALLOWANCE,PT_SAL_REVISION_HEAD,PM_ALLOWANCE
            WHERE REVH_SYS_ID   = REVA_REVH_SYS_ID
            AND   REVH_COMP_CODE  = P_COMP_CODE
            AND   REVH_EMP_CODE   =P_EMP_CODE
            AND   REVA_FROM_DT = P_EFFECTIVE_DT
            AND   REVH_REF_FROM  = P_BASIC_OF_REV
            AND   REVA_ALLW_CODE=ALLW_CODE
            AND   REVA_ALLW_CODE IN  (SELECT ALLW_CODE FROM PM_ALLOWANCE
            WHERE ALLW_DESC=P_ELE_TO_BE_REV)
            UNION ALL
            SELECT NVL( ESRD_ORG_FC_AMOUNT,0),NVL( ESRD_ADJ_FC_AMOUNT,0)
      FROM   PT_EMP_SAL_REV_DETAIL,PT_EMP_SAL_REV_HEAD,PM_ALLOWANCE
            WHERE  ESRH_SYS_ID   = ESRD_ESRH_SYS_ID
            AND    ESRH_COMP_CODE  = P_COMP_CODE
            AND    ESRD_EMP_CODE   =P_EMP_CODE
            AND    ESRH_EFFECT_FROM = P_EFFECTIVE_DT
            AND    ESRH_REF_FROM  = P_BASIC_OF_REV
            AND    ESRH_ALLW_CODE=ALLW_CODE
            AND    ESRH_ALLW_CODE IN  (SELECT ALLW_CODE FROM PM_ALLOWANCE
            WHERE ALLW_DESC=P_ELE_TO_BE_REV)    ;



CURSOR C2 IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

   M_ORG      NUMBER;
   M_REVISED  NUMBER;
   M_TOT      NUMBER;
   M_VARPER   NUMBER;

BEGIN

   DELETE FROM PW_SALARY_REVISION WHERE SR_REP_KEY_NO = P_REP_KEY_NO;

     MM_LANG_CODE := NULL;

    IF C2%ISOPEN THEN
       CLOSE C2;
    END IF;

    OPEN C2;
    FETCH C2 INTO MM_LANG_CODE;
    CLOSE C2;

   FOR I IN C_SAL_REV
   LOOP

      IF C_EXIST%ISOPEN THEN
         CLOSE C_EXIST;
      END IF;

      --dummy('I.ELEMENTS_TO_BE_REVISED -->'||I.ELEMENTS_TO_BE_REVISED);
      --dummy('I.BASIS_OF_REVISION -->'||I.BASIS_OF_REVISION);

      OPEN C_EXIST(I.EMP_CODE,I.EFFECTIVE_DT,I.BASIS_OF_REVISION,I.ELEMENTS_TO_BE_REVISED_1);
          FETCH C_EXIST INTO M_ORG,M_REVISED;
          CLOSE C_EXIST;

      M_TOT     := NVL((NVL(M_ORG,0)+NVL(M_REVISED,0)),0);
            M_VARPER  := NVL(ROUND(((NVL(M_TOT,0)-NVL(M_ORG,0))/100),2),0);

          --dummy('M_ORG'||M_ORG||'M_REVISED'||M_REVISED||'M_REVISED'||M_REVISED);

      INSERT INTO PW_SALARY_REVISION ( SR_COMP_CODE,
                                       SR_REP_KEY_NO,
                                       SR_DIVN_CODE,
                                       SR_DEPT_CODE,
                                       SR_REVH_DEP,
                                       SR_REVH_DIVN,
                                       SR_LOCN_CODE,
                                       SR_EFFECTIVE_DT,
                                       SR_ELE_TO_BE_REV,
                                       SR_BASIC_OF_REV,
                                       SR_EMP_CODE,
                                       SR_EMP_NAME,
                                       SR_TXN_NO,
                                       SR_REF_TXN_NO,
                                       SR_APPROVED,
                                       SR_ORG,
                                       SR_REVISED,
                                       SR_TOT,
                                       SR_VARPER )
                              VALUES ( P_COMP_CODE,
                                       P_REP_KEY_NO,
                                       I.DIV_CODE,
                                       I.DEPT_CODE,
                                       I.REVH_DEP,
                                       I.REVH_DIV,
                                       I.LOC_CODE,
                                       I.EFFECTIVE_DT,
                                       I.ELEMENTS_TO_BE_REVISED,
                                       I.BASIS_OF_REVISION,
                                       I.EMP_CODE,
                                       I.EMP_NAME,
                                       I.TXN_CODE_AND_NO,
                                       I.REF_TXN_CODE_AND_NO,
                                       I.APPROVED,
                                       M_ORG,
                                       M_REVISED,
                                       M_TOT,
                                       M_VARPER);

   END LOOP;
END P_SALARY_REVISION;

PROCEDURE P_NET_SAL_REPORT( P_COMP_CODE     IN VARCHAR2,
                            P_REP_KEY_NO    IN NUMBER,
                            P_FM_DIVN       IN VARCHAR2,
                            P_TO_DIVN       IN VARCHAR2,
                            P_FM_DEPT       IN VARCHAR2,
                            P_TO_DEPT       IN VARCHAR2,
                            P_FM_LOCN       IN VARCHAR2,
                            P_TO_LOCN       IN VARCHAR2,
                            P_FM_DT         IN DATE,
                            P_TO_DT         IN DATE ) IS

MM_LANG_CODE VARCHAR2(240);

CURSOR C_NET_SAL IS
     SELECT DIVN_CODE,DECODE(MM_LANG_CODE ,'ENG',DIVN_NAME, 'LANG_01', DIVN_NAME_LANG_01, 'LANG_02',
       DIVN_NAME_LANG_02, 'LANG_03', DIVN_NAME_LANG_03, 'LANG_04', DIVN_NAME_LANG_04, 'LANG_05',
       DIVN_NAME_LANG_05, 'LANG_06', DIVN_NAME_LANG_06, 'LANG_07', DIVN_NAME_LANG_07, 'LANG_08',
       DIVN_NAME_LANG_08, 'LANG_09',DIVN_NAME_LANG_09, 'LANG_10', DIVN_NAME_LANG_10) DIVN_NAME,
       DEPT_CODE,DECODE(MM_LANG_CODE ,'ENG',DEPT_NAME, 'LANG_01', DEPT_NAME_LANG_01, 'LANG_02',
       DEPT_NAME_LANG_02, 'LANG_03', DEPT_NAME_LANG_03, 'LANG_04', DEPT_NAME_LANG_04, 'LANG_05',
       DEPT_NAME_LANG_05, 'LANG_06', DEPT_NAME_LANG_06, 'LANG_07', DEPT_NAME_LANG_07, 'LANG_08',
       DEPT_NAME_LANG_08, 'LANG_09',DEPT_NAME_LANG_09, 'LANG_10', DEPT_NAME_LANG_10) DEPT_NAME,
       LOCN_CODE,DECODE(MM_LANG_CODE ,'ENG',LOCN_DESC, 'LANG_01', LOCN_DESC_LANG_01, 'LANG_02',
       LOCN_DESC_LANG_02, 'LANG_03', LOCN_DESC_LANG_03, 'LANG_04', LOCN_DESC_LANG_04, 'LANG_05',
       LOCN_DESC_LANG_05, 'LANG_06', LOCN_DESC_LANG_06, 'LANG_07', LOCN_DESC_LANG_07, 'LANG_08',
       LOCN_DESC_LANG_08, 'LANG_09',LOCN_DESC_LANG_09, 'LANG_10', LOCN_DESC_LANG_10) LOCN_DESC,FP_CURR_CODE,FP_BANK_CODE,
              (DECODE(FP_PAY_MODE, 'B', NVL(SUM(FP_LC_AMOUNT * DECODE(FP_EARN_DEDUC,'E',1,-1)),0),0) +
            DECODE(FP_PAY_MODE, 'Q', NVL(SUM(FP_LC_AMOUNT * DECODE(FP_EARN_DEDUC,'E',1,-1)),0),0)) "NETSAL_BANK",
              DECODE(FP_PAY_MODE, 'C', NVL(SUM(FP_LC_AMOUNT * DECODE(FP_EARN_DEDUC,'E',1,-1)),0),0) "NETSAL_CASH"
     FROM   FM_DIVISION,FM_DEPARTMENT,PM_LOCN,PS_FINAL_PROC
     WHERE  DIVN_COMP_CODE      =    FP_COMP_CODE
       AND    DIVN_CODE          =    FP_DIVN_CODE
       AND    DEPT_COMP_CODE      =    FP_COMP_CODE
       AND    DEPT_DIVN_CODE        =    FP_DIVN_CODE
       AND    DEPT_CODE      =    FP_DEPT_CODE
       AND    LOCN_CODE      =    FP_LOCN_CODE
       AND    FP_COMP_CODE      =    P_COMP_CODE
     AND    TO_DATE(TO_CHAR(FP_PROC_MTH),'YYYYMM') BETWEEN P_FM_DT AND P_TO_DT
       AND    FP_DIVN_CODE    BETWEEN P_FM_DIVN AND P_TO_DIVN
       AND    FP_DEPT_CODE     BETWEEN P_FM_DEPT AND P_TO_DEPT
       AND    FP_LOCN_CODE    BETWEEN P_FM_LOCN AND P_TO_LOCN
       AND    FP_PROC_MTH > 0
     GROUP BY DIVN_CODE,DECODE(MM_LANG_CODE ,'ENG',DIVN_NAME, 'LANG_01', DIVN_NAME_LANG_01, 'LANG_02',
       DIVN_NAME_LANG_02, 'LANG_03', DIVN_NAME_LANG_03, 'LANG_04', DIVN_NAME_LANG_04, 'LANG_05',
       DIVN_NAME_LANG_05, 'LANG_06', DIVN_NAME_LANG_06, 'LANG_07', DIVN_NAME_LANG_07, 'LANG_08',
       DIVN_NAME_LANG_08, 'LANG_09',DIVN_NAME_LANG_09, 'LANG_10', DIVN_NAME_LANG_10),DEPT_CODE,
       DECODE(MM_LANG_CODE ,'ENG',DEPT_NAME, 'LANG_01', DEPT_NAME_LANG_01, 'LANG_02',
       DEPT_NAME_LANG_02, 'LANG_03', DEPT_NAME_LANG_03, 'LANG_04', DEPT_NAME_LANG_04, 'LANG_05',
       DEPT_NAME_LANG_05, 'LANG_06', DEPT_NAME_LANG_06, 'LANG_07', DEPT_NAME_LANG_07, 'LANG_08',
       DEPT_NAME_LANG_08, 'LANG_09',DEPT_NAME_LANG_09, 'LANG_10', DEPT_NAME_LANG_10),LOCN_CODE,
       DECODE(MM_LANG_CODE ,'ENG',LOCN_DESC, 'LANG_01', LOCN_DESC_LANG_01, 'LANG_02',
       LOCN_DESC_LANG_02, 'LANG_03', LOCN_DESC_LANG_03, 'LANG_04', LOCN_DESC_LANG_04, 'LANG_05',
       LOCN_DESC_LANG_05, 'LANG_06', LOCN_DESC_LANG_06, 'LANG_07', LOCN_DESC_LANG_07, 'LANG_08',
       LOCN_DESC_LANG_08, 'LANG_09',LOCN_DESC_LANG_09, 'LANG_10', LOCN_DESC_LANG_10),
       FP_CURR_CODE,FP_BANK_CODE,FP_PAY_MODE;

   M_NET_TOT NUMBER;

   CURSOR C_GET_M_LANG_CODE IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

BEGIN

   DELETE FROM PW_NET_SALARY WHERE NS_REP_KEY_NO = P_REP_KEY_NO;

    MM_LANG_CODE := NULL;

    IF C_GET_M_LANG_CODE%ISOPEN THEN
       CLOSE C_GET_M_LANG_CODE;
    END IF;

    OPEN C_GET_M_LANG_CODE;
    FETCH C_GET_M_LANG_CODE INTO MM_LANG_CODE;
    CLOSE C_GET_M_LANG_CODE;

   FOR I IN C_NET_SAL
   LOOP

   M_NET_TOT := (NVL(I.NETSAL_BANK,0) + NVL(I.NETSAL_CASH,0));

      INSERT INTO PW_NET_SALARY ( NS_COMP_CODE,
                                  NS_REP_KEY_NO,
                                  NS_DIVN_CODE,
                                  NS_DIVN_NAME,
                                  NS_DEPT_CODE,
                                  NS_DEPT_NAME,
                                  NS_LOCN_CODE,
                                  NS_LOCN_NAME,
                                  NS_CURR_CODE,
                                  NS_BANK_CODE,
                                  NS_NETSAL_BANK,
                                  NS_NETSAL_CASH,
                                  NS_NET_TOT )
                         VALUES ( P_COMP_CODE,
                                  P_REP_KEY_NO,
                                  I.DIVN_CODE,
                                  I.DIVN_NAME,
                                  I.DEPT_CODE,
                                  I.DEPT_NAME,
                                  I.LOCN_CODE,
                                  I.LOCN_DESC,
                                  I.FP_CURR_CODE,
                                  I.FP_BANK_CODE,
                                  I.NETSAL_BANK,
                                  I.NETSAL_CASH,
                                  M_NET_TOT);


   END LOOP;


END P_NET_SAL_REPORT;

PROCEDURE P_SAL_TRANSFER_ADVICE ( P_COMP_CODE         IN VARCHAR2,
                                  P_REP_KEY_NO        IN NUMBER,
                                  P_CPMTH             IN NUMBER,
                                  P_FM_EMP_CODE       IN VARCHAR2,
                                  P_TO_EMP_CODE       IN VARCHAR2,
                                  P_FM_DIVN           IN VARCHAR2,
                                  P_TO_DIVN           IN VARCHAR2,
                                  P_FM_DEPT           IN VARCHAR2,
                                  P_TO_DEPT           IN VARCHAR2,
                                  P_FM_LOCN           IN VARCHAR2,
                                  P_TO_LOCN           IN VARCHAR2,
                                  P_FM_COST_CENTRE    IN VARCHAR2,
                                  P_TO_COST_CENTRE    IN VARCHAR2,
                                  P_FM_CONTRACT_TYPE  IN VARCHAR2,
                                  P_TO_CONTRACT_TYPE  IN VARCHAR2,
                                  P_FM_COUNTRY        IN VARCHAR2,
                                  P_TO_COUNTRY        IN VARCHAR2,
                                  P_EMP_BANK          IN VARCHAR2,
                                  P_PAY_MODE          IN VARCHAR2,
                                  P_PAY_TYPE          IN VARCHAR2) IS

 MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;


CURSOR C_SAL_TRANSFER IS
SELECT FP_EMP_CODE,DECODE(P_PAY_MODE, 'C', 'CASH', 'B', 'BANK', 'Q', 'CHEQUE','A', 'ALL') "PAY_MODE",FP_PAY_MODE,
       DECODE(MM_LANG_CODE,'ENG',COMP_NAME, 'LANG_01', COMP_NAME_LANG_01, 'LANG_02', COMP_NAME_LANG_02,
'LANG_03', COMP_NAME_LANG_03, 'LANG_04', COMP_NAME_LANG_04, 'LANG_05', COMP_NAME_LANG_05, 'LANG_06',
COMP_NAME_LANG_06, 'LANG_07', COMP_NAME_LANG_07, 'LANG_08', COMP_NAME_LANG_08, 'LANG_09', COMP_NAME_LANG_09,
'LANG_10', COMP_NAME_LANG_10,COMP_NAME)COMP_NAME,
DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02,
'LANG_03', EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',
EMP_NAME_LANG_06, 'LANG_07', EMP_NAME_LANG_07, 'LANG_08', EMP_NAME_LANG_08, 'LANG_09', EMP_NAME_LANG_09,
'LANG_10', EMP_NAME_LANG_10,EMP_NAME) EMP_NAME,
DECODE(MM_LANG_CODE,'ENG', DEPT_NAME, 'LANG_01',  DEPT_NAME_LANG_01, 'LANG_02',  DEPT_NAME_LANG_02,
'LANG_03',  DEPT_NAME_LANG_03, 'LANG_04',  DEPT_NAME_LANG_04, 'LANG_05',  DEPT_NAME_LANG_05, 'LANG_06',
 DEPT_NAME_LANG_06, 'LANG_07',  DEPT_NAME_LANG_07, 'LANG_08',  DEPT_NAME_LANG_08, 'LANG_09',  DEPT_NAME_LANG_09,
'LANG_10',  DEPT_NAME_LANG_10, DEPT_NAME)  DEPT_NAME,FP_CURR_CODE,EMPY_BANK_REMARKS,
       DECODE(P_PAY_MODE, 'B', SUM(NVL(FP_LC_AMOUNT,0)* DECODE(FP_EARN_DEDUC,'E',1,-1)), 0) "NETSAL_BANK",
       DECODE('ENG', 'ENG', BANK_CODE||'/'||DECODE(MM_LANG_CODE,'ENG',BANK_SHORT_NAME, 'LANG_01', BANK_SHORT_NAME_LANG_01, 'LANG_02', BANK_SHORT_NAME_LANG_02,
'LANG_03', BANK_SHORT_NAME_LANG_03, 'LANG_04', BANK_SHORT_NAME_LANG_04, 'LANG_05', BANK_SHORT_NAME_LANG_05, 'LANG_06',
BANK_SHORT_NAME_LANG_06, 'LANG_07', BANK_SHORT_NAME_LANG_07, 'LANG_08', BANK_SHORT_NAME_LANG_08, 'LANG_09', BANK_SHORT_NAME_LANG_09,
'LANG_10', BANK_SHORT_NAME_LANG_10,BANK_SHORT_NAME), BANK_CODE||'/'||BANK_BL_SHORT_NAME)     "EMP_BANK_NAME"
FROM   FM_COMPANY,FM_DIVISION,FM_DEPARTMENT,PS_FINAL_PROC ,PM_EMP_KEY,PM_EMP_PAY,PM_BANK
WHERE  COMP_CODE             = P_COMP_CODE
AND    DIVN_COMP_CODE           = FP_COMP_CODE
AND    DIVN_CODE                 = FP_DIVN_CODE
AND    DEPT_COMP_CODE           = FP_COMP_CODE
AND    DEPT_DIVN_CODE           = FP_DIVN_CODE
AND    DEPT_CODE               = FP_DEPT_CODE
AND    FP_COMP_CODE             = P_COMP_CODE
AND      EMP_COMP_CODE         = FP_COMP_CODE
AND    FP_EMP_CODE           = EMP_CODE
AND    P_PAY_MODE           = 'B'
AND    EMPY_COMP_CODE        = FP_COMP_CODE
AND    EMPY_CODE             = EMP_CODE
AND    EMPY_BANK_CODE        = BANK_CODE(+)
AND    DECODE(P_EMP_BANK, NULL, BANK_CODE, P_EMP_BANK) = BANK_CODE
AND    FP_PAY_MODE           = P_PAY_MODE
AND    FP_PAY_TYPE           = DECODE( P_PAY_TYPE,'M','M','D','D','H','H','A',EMPY_PAY_TYPE)
AND    FP_PROC_MTH           = P_CPMTH
AND    EMP_STATUS            NOT IN (4, 5, 6)
AND       FP_EMP_CODE           BETWEEN  P_FM_EMP_CODE       AND        P_TO_EMP_CODE
AND    FP_CONT_TYPE_CODE     BETWEEN  P_FM_CONTRACT_TYPE  AND     P_TO_CONTRACT_TYPE
AND       FP_DIVN_CODE          BETWEEN  P_FM_DIVN           AND        P_TO_DIVN
AND    FP_DEPT_CODE          BETWEEN  P_FM_DEPT           AND        P_TO_DEPT
AND    FP_LOCN_CODE          BETWEEN  P_FM_LOCN           AND        P_TO_LOCN
AND    FP_CC_CODE            BETWEEN P_FM_COST_CENTRE                      AND        P_TO_COST_CENTRE
AND    NVL(FP_CNTRY_CODE,P_FM_COUNTRY )      BETWEEN P_FM_COUNTRY            AND        P_TO_COUNTRY
GROUP BY DEPT_NAME,FP_CURR_CODE,FP_PAY_MODE ,FP_EMP_CODE,EMP_NAME,COMP_NAME,EMPY_BANK_REMARKS,BANK_CODE,BANK_SHORT_NAME,
         DEPT_NAME_LANG_01, DEPT_NAME_LANG_02, DEPT_NAME_LANG_03, DEPT_NAME_LANG_04, DEPT_NAME_LANG_05, DEPT_NAME_LANG_06, DEPT_NAME_LANG_07, DEPT_NAME_LANG_08, DEPT_NAME_LANG_09, DEPT_NAME_LANG_10,
         COMP_NAME_LANG_01, COMP_NAME_LANG_02, COMP_NAME_LANG_03, COMP_NAME_LANG_04, COMP_NAME_LANG_05, COMP_NAME_LANG_06, COMP_NAME_LANG_07, COMP_NAME_LANG_08, COMP_NAME_LANG_09, COMP_NAME_LANG_10,
         EMP_NAME_LANG_01, EMP_NAME_LANG_02, EMP_NAME_LANG_03, EMP_NAME_LANG_04, EMP_NAME_LANG_05, EMP_NAME_LANG_06, EMP_NAME_LANG_07, EMP_NAME_LANG_08, EMP_NAME_LANG_09, EMP_NAME_LANG_10,
         BANK_SHORT_NAME_LANG_01, BANK_SHORT_NAME_LANG_02, BANK_SHORT_NAME_LANG_03, BANK_SHORT_NAME_LANG_04, BANK_SHORT_NAME_LANG_05, BANK_SHORT_NAME_LANG_06, BANK_SHORT_NAME_LANG_07, BANK_SHORT_NAME_LANG_08, BANK_SHORT_NAME_LANG_09, BANK_SHORT_NAME_LANG_10,
         BANK_BL_SHORT_NAME


UNION
SELECT FP_EMP_CODE,DECODE(P_PAY_MODE, 'C', 'CASH', 'B', 'BANK', 'Q', 'CHEQUE','A', 'ALL') "PAY_MODE",FP_PAY_MODE,
              DECODE(MM_LANG_CODE,'ENG',COMP_NAME, 'LANG_01', COMP_NAME_LANG_01, 'LANG_02', COMP_NAME_LANG_02,
'LANG_03', COMP_NAME_LANG_03, 'LANG_04', COMP_NAME_LANG_04, 'LANG_05', COMP_NAME_LANG_05, 'LANG_06',
COMP_NAME_LANG_06, 'LANG_07', COMP_NAME_LANG_07, 'LANG_08', COMP_NAME_LANG_08, 'LANG_09', COMP_NAME_LANG_09,
'LANG_10', COMP_NAME_LANG_10,COMP_NAME) COMP_NAME,
DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02,
'LANG_03', EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',
EMP_NAME_LANG_06, 'LANG_07', EMP_NAME_LANG_07, 'LANG_08', EMP_NAME_LANG_08, 'LANG_09', EMP_NAME_LANG_09,
'LANG_10', EMP_NAME_LANG_10,EMP_NAME) EMP_NAME,
DECODE(MM_LANG_CODE,'ENG', DEPT_NAME, 'LANG_01',  DEPT_NAME_LANG_01, 'LANG_02',  DEPT_NAME_LANG_02,
'LANG_03',  DEPT_NAME_LANG_03, 'LANG_04',  DEPT_NAME_LANG_04, 'LANG_05',  DEPT_NAME_LANG_05, 'LANG_06',
 DEPT_NAME_LANG_06, 'LANG_07',  DEPT_NAME_LANG_07, 'LANG_08',  DEPT_NAME_LANG_08, 'LANG_09',  DEPT_NAME_LANG_09,
'LANG_10',  DEPT_NAME_LANG_10, DEPT_NAME) DEPT_NAME,FP_CURR_CODE,EMPY_BANK_REMARKS,
       DECODE(P_PAY_MODE, 'C', SUM(NVL(FP_LC_AMOUNT,0) * DECODE(FP_EARN_DEDUC,'E',1,-1)), 0) "NETSAL_BANK",
       DECODE('ENG', 'ENG', BANK_CODE||'/'||DECODE(MM_LANG_CODE,'ENG',BANK_SHORT_NAME, 'LANG_01', BANK_SHORT_NAME_LANG_01, 'LANG_02', BANK_SHORT_NAME_LANG_02,
'LANG_03', BANK_SHORT_NAME_LANG_03, 'LANG_04', BANK_SHORT_NAME_LANG_04, 'LANG_05', BANK_SHORT_NAME_LANG_05, 'LANG_06',
BANK_SHORT_NAME_LANG_06, 'LANG_07', BANK_SHORT_NAME_LANG_07, 'LANG_08', BANK_SHORT_NAME_LANG_08, 'LANG_09', BANK_SHORT_NAME_LANG_09,
'LANG_10', BANK_SHORT_NAME_LANG_10,BANK_SHORT_NAME)
, BANK_CODE||'/'||BANK_BL_SHORT_NAME)     "EMP_BANK_NAME"
FROM   FM_COMPANY,FM_DIVISION,FM_DEPARTMENT,PS_FINAL_PROC ,PM_EMP_KEY,PM_EMP_PAY,PM_BANK
WHERE  COMP_CODE           = P_COMP_CODE
AND    DIVN_COMP_CODE         =    FP_COMP_CODE
AND    DIVN_CODE               =    FP_DIVN_CODE
AND    DEPT_COMP_CODE         =    FP_COMP_CODE
AND    DEPT_DIVN_CODE         =    FP_DIVN_CODE
AND    DEPT_CODE             =    FP_DEPT_CODE
AND    FP_COMP_CODE           =    P_COMP_CODE
AND      EMP_COMP_CODE       =  FP_COMP_CODE
AND    FP_EMP_CODE         =  EMP_CODE
AND    P_PAY_MODE         =  'C'
AND    EMPY_COMP_CODE      =  FP_COMP_CODE
AND    EMPY_CODE           =  EMP_CODE
AND    EMPY_BANK_CODE      =  BANK_CODE(+)
AND    FP_PAY_MODE         =  P_PAY_MODE
AND    FP_PAY_TYPE         =  DECODE( P_PAY_TYPE,'M','M','D','D','H','H','A',EMPY_PAY_TYPE)
AND    FP_PROC_MTH         =  P_CPMTH
AND    EMP_STATUS          NOT IN (4, 5, 6)
AND       FP_EMP_CODE         BETWEEN  P_FM_EMP_CODE         AND        P_TO_EMP_CODE
AND    FP_CONT_TYPE_CODE   BETWEEN  P_FM_CONTRACT_TYPE    AND     P_TO_CONTRACT_TYPE
AND       FP_DIVN_CODE        BETWEEN  P_FM_DIVN             AND        P_TO_DIVN
AND    FP_DEPT_CODE        BETWEEN  P_FM_DEPT             AND        P_TO_DEPT
AND    FP_LOCN_CODE        BETWEEN  P_FM_LOCN             AND        P_TO_LOCN
AND    FP_CC_CODE          BETWEEN P_FM_COST_CENTRE                      AND        P_TO_COST_CENTRE
AND    NVL(FP_CNTRY_CODE,P_FM_COUNTRY )      BETWEEN P_FM_COUNTRY            AND        P_TO_COUNTRY
GROUP BY DEPT_NAME,FP_CURR_CODE,FP_PAY_MODE ,FP_EMP_CODE,EMP_NAME,COMP_NAME,EMPY_BANK_REMARKS,BANK_CODE,BANK_SHORT_NAME,
         DEPT_NAME_LANG_01, DEPT_NAME_LANG_02, DEPT_NAME_LANG_03, DEPT_NAME_LANG_04, DEPT_NAME_LANG_05, DEPT_NAME_LANG_06, DEPT_NAME_LANG_07, DEPT_NAME_LANG_08, DEPT_NAME_LANG_09, DEPT_NAME_LANG_10,
         COMP_NAME_LANG_01, COMP_NAME_LANG_02, COMP_NAME_LANG_03, COMP_NAME_LANG_04, COMP_NAME_LANG_05, COMP_NAME_LANG_06, COMP_NAME_LANG_07, COMP_NAME_LANG_08, COMP_NAME_LANG_09, COMP_NAME_LANG_10,
         EMP_NAME_LANG_01, EMP_NAME_LANG_02, EMP_NAME_LANG_03, EMP_NAME_LANG_04, EMP_NAME_LANG_05, EMP_NAME_LANG_06, EMP_NAME_LANG_07, EMP_NAME_LANG_08, EMP_NAME_LANG_09, EMP_NAME_LANG_10,
         BANK_SHORT_NAME_LANG_01, BANK_SHORT_NAME_LANG_02, BANK_SHORT_NAME_LANG_03, BANK_SHORT_NAME_LANG_04, BANK_SHORT_NAME_LANG_05, BANK_SHORT_NAME_LANG_06, BANK_SHORT_NAME_LANG_07, BANK_SHORT_NAME_LANG_08, BANK_SHORT_NAME_LANG_09, BANK_SHORT_NAME_LANG_10,
         BANK_BL_SHORT_NAME

UNION
SELECT FP_EMP_CODE,DECODE(P_PAY_MODE, 'C', 'CASH', 'B', 'BANK', 'Q', 'CHEQUE','A', 'ALL') "PAY_MODE", FP_PAY_MODE,
       DECODE(MM_LANG_CODE,'ENG',COMP_NAME, 'LANG_01', COMP_NAME_LANG_01, 'LANG_02', COMP_NAME_LANG_02,
'LANG_03', COMP_NAME_LANG_03, 'LANG_04', COMP_NAME_LANG_04, 'LANG_05', COMP_NAME_LANG_05, 'LANG_06',
COMP_NAME_LANG_06, 'LANG_07', COMP_NAME_LANG_07, 'LANG_08', COMP_NAME_LANG_08, 'LANG_09', COMP_NAME_LANG_09,
'LANG_10', COMP_NAME_LANG_10,COMP_NAME) COMP_NAME,DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02,
'LANG_03', EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',
EMP_NAME_LANG_06, 'LANG_07', EMP_NAME_LANG_07, 'LANG_08', EMP_NAME_LANG_08, 'LANG_09', EMP_NAME_LANG_09,
'LANG_10', EMP_NAME_LANG_10,EMP_NAME )EMP_NAME,DECODE(MM_LANG_CODE,'ENG', DEPT_NAME, 'LANG_01',  DEPT_NAME_LANG_01, 'LANG_02',  DEPT_NAME_LANG_02,
'LANG_03',  DEPT_NAME_LANG_03, 'LANG_04',  DEPT_NAME_LANG_04, 'LANG_05',  DEPT_NAME_LANG_05, 'LANG_06',
 DEPT_NAME_LANG_06, 'LANG_07',  DEPT_NAME_LANG_07, 'LANG_08',  DEPT_NAME_LANG_08, 'LANG_09',  DEPT_NAME_LANG_09,
'LANG_10',  DEPT_NAME_LANG_10, DEPT_NAME)DEPT_NAME,FP_CURR_CODE,EMPY_BANK_REMARKS,
       DECODE(P_PAY_MODE, 'Q', SUM(NVL(FP_LC_AMOUNT,0) * DECODE(FP_EARN_DEDUC,'E',1,-1)), 0) "NETSAL_BANK",
       DECODE('ENG', 'ENG', BANK_CODE||'/'||DECODE(MM_LANG_CODE,'ENG',BANK_SHORT_NAME, 'LANG_01', BANK_SHORT_NAME_LANG_01, 'LANG_02', BANK_SHORT_NAME_LANG_02,
'LANG_03', BANK_SHORT_NAME_LANG_03, 'LANG_04', BANK_SHORT_NAME_LANG_04, 'LANG_05', BANK_SHORT_NAME_LANG_05, 'LANG_06',
BANK_SHORT_NAME_LANG_06, 'LANG_07', BANK_SHORT_NAME_LANG_07, 'LANG_08', BANK_SHORT_NAME_LANG_08, 'LANG_09', BANK_SHORT_NAME_LANG_09,
'LANG_10', BANK_SHORT_NAME_LANG_10,BANK_SHORT_NAME)
, BANK_CODE||'/'||BANK_BL_SHORT_NAME)     "EMP_BANK_NAME"
FROM   FM_COMPANY,FM_DIVISION,FM_DEPARTMENT,PS_FINAL_PROC ,PM_EMP_KEY,PM_EMP_PAY,PM_BANK
WHERE  COMP_CODE          = P_COMP_CODE
AND    DIVN_COMP_CODE        =    FP_COMP_CODE
AND    DIVN_CODE              =    FP_DIVN_CODE
AND    DEPT_COMP_CODE        =    FP_COMP_CODE
AND    DEPT_DIVN_CODE        =    FP_DIVN_CODE
AND    DEPT_CODE            =    FP_DEPT_CODE
AND    FP_COMP_CODE          =    P_COMP_CODE
AND      EMP_COMP_CODE      = FP_COMP_CODE
AND    FP_EMP_CODE        = EMP_CODE
AND    P_PAY_MODE        = 'Q'
AND    EMPY_COMP_CODE     = FP_COMP_CODE
AND    EMPY_CODE          = EMP_CODE
AND    EMPY_BANK_CODE     = BANK_CODE(+)
AND    FP_PAY_MODE        = P_PAY_MODE
AND    FP_PAY_TYPE        = DECODE( P_PAY_TYPE,'M','M','D','D','H','H','A',EMPY_PAY_TYPE)
AND    FP_PROC_MTH        = P_CPMTH
AND    EMP_STATUS         NOT IN (4, 5, 6)
AND       FP_EMP_CODE        BETWEEN  P_FM_EMP_CODE         AND        P_TO_EMP_CODE
AND    FP_CONT_TYPE_CODE  BETWEEN  P_FM_CONTRACT_TYPE    AND      P_TO_CONTRACT_TYPE
AND       FP_DIVN_CODE       BETWEEN  P_FM_DIVN             AND        P_TO_DIVN
AND    FP_DEPT_CODE       BETWEEN  P_FM_DEPT             AND        P_TO_DEPT
AND    FP_LOCN_CODE       BETWEEN  P_FM_LOCN             AND        P_TO_LOCN
AND    FP_CC_CODE         BETWEEN P_FM_COST_CENTRE                      AND        P_TO_COST_CENTRE
AND    NVL(FP_CNTRY_CODE,P_FM_COUNTRY )      BETWEEN P_FM_COUNTRY            AND        P_TO_COUNTRY
GROUP BY DEPT_NAME,FP_CURR_CODE,FP_PAY_MODE ,FP_EMP_CODE,EMP_NAME,COMP_NAME,EMPY_BANK_REMARKS,BANK_CODE,BANK_SHORT_NAME,
         DEPT_NAME_LANG_01, DEPT_NAME_LANG_02, DEPT_NAME_LANG_03, DEPT_NAME_LANG_04, DEPT_NAME_LANG_05, DEPT_NAME_LANG_06, DEPT_NAME_LANG_07, DEPT_NAME_LANG_08, DEPT_NAME_LANG_09, DEPT_NAME_LANG_10,
         COMP_NAME_LANG_01, COMP_NAME_LANG_02, COMP_NAME_LANG_03, COMP_NAME_LANG_04, COMP_NAME_LANG_05, COMP_NAME_LANG_06, COMP_NAME_LANG_07, COMP_NAME_LANG_08, COMP_NAME_LANG_09, COMP_NAME_LANG_10,
         EMP_NAME_LANG_01, EMP_NAME_LANG_02, EMP_NAME_LANG_03, EMP_NAME_LANG_04, EMP_NAME_LANG_05, EMP_NAME_LANG_06, EMP_NAME_LANG_07, EMP_NAME_LANG_08, EMP_NAME_LANG_09, EMP_NAME_LANG_10,
         BANK_SHORT_NAME_LANG_01, BANK_SHORT_NAME_LANG_02, BANK_SHORT_NAME_LANG_03, BANK_SHORT_NAME_LANG_04, BANK_SHORT_NAME_LANG_05, BANK_SHORT_NAME_LANG_06, BANK_SHORT_NAME_LANG_07, BANK_SHORT_NAME_LANG_08, BANK_SHORT_NAME_LANG_09, BANK_SHORT_NAME_LANG_10,
         BANK_BL_SHORT_NAME
UNION
SELECT FP_EMP_CODE,DECODE(P_PAY_MODE, 'C', 'CASH', 'B', 'BANK', 'Q', 'CHEQUE','A', 'ALL') "PAY_MODE",FP_PAY_MODE,
       DECODE(MM_LANG_CODE,'ENG',COMP_NAME, 'LANG_01', COMP_NAME_LANG_01, 'LANG_02', COMP_NAME_LANG_02,
'LANG_03', COMP_NAME_LANG_03, 'LANG_04', COMP_NAME_LANG_04, 'LANG_05', COMP_NAME_LANG_05, 'LANG_06',
COMP_NAME_LANG_06, 'LANG_07', COMP_NAME_LANG_07, 'LANG_08', COMP_NAME_LANG_08, 'LANG_09', COMP_NAME_LANG_09,
'LANG_10', COMP_NAME_LANG_10,COMP_NAME) COMP_NAME,DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02,
'LANG_03', EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',
EMP_NAME_LANG_06, 'LANG_07', EMP_NAME_LANG_07, 'LANG_08', EMP_NAME_LANG_08, 'LANG_09', EMP_NAME_LANG_09,
'LANG_10', EMP_NAME_LANG_10,EMP_NAME )EMP_NAME,DECODE(MM_LANG_CODE,'ENG', DEPT_NAME, 'LANG_01',  DEPT_NAME_LANG_01, 'LANG_02',  DEPT_NAME_LANG_02,
'LANG_03',  DEPT_NAME_LANG_03, 'LANG_04',  DEPT_NAME_LANG_04, 'LANG_05',  DEPT_NAME_LANG_05, 'LANG_06',
 DEPT_NAME_LANG_06, 'LANG_07',  DEPT_NAME_LANG_07, 'LANG_08',  DEPT_NAME_LANG_08, 'LANG_09',  DEPT_NAME_LANG_09,
'LANG_10',  DEPT_NAME_LANG_10, DEPT_NAME)DEPT_NAME,FP_CURR_CODE,EMPY_BANK_REMARKS,
       SUM(NVL(FP_LC_AMOUNT,0) * DECODE(FP_EARN_DEDUC,'E',1,-1)) "NETSAL_BANK",
       DECODE('ENG', 'ENG', BANK_CODE||'/'||DECODE(MM_LANG_CODE,'ENG',BANK_SHORT_NAME, 'LANG_01', BANK_SHORT_NAME_LANG_01, 'LANG_02', BANK_SHORT_NAME_LANG_02,
'LANG_03', BANK_SHORT_NAME_LANG_03, 'LANG_04', BANK_SHORT_NAME_LANG_04, 'LANG_05', BANK_SHORT_NAME_LANG_05, 'LANG_06',
BANK_SHORT_NAME_LANG_06, 'LANG_07', BANK_SHORT_NAME_LANG_07, 'LANG_08', BANK_SHORT_NAME_LANG_08, 'LANG_09', BANK_SHORT_NAME_LANG_09,
'LANG_10', BANK_SHORT_NAME_LANG_10,BANK_SHORT_NAME)
, BANK_CODE||'/'||BANK_BL_SHORT_NAME)     "EMP_BANK_NAME"
FROM   FM_COMPANY,FM_DIVISION,FM_DEPARTMENT,PS_FINAL_PROC ,PM_EMP_KEY,PM_EMP_PAY,PM_BANK
WHERE  COMP_CODE          = P_COMP_CODE
AND    DIVN_COMP_CODE        =    FP_COMP_CODE
AND    DIVN_CODE              =    FP_DIVN_CODE
AND    DEPT_COMP_CODE        =    FP_COMP_CODE
AND    DEPT_DIVN_CODE        =    FP_DIVN_CODE
AND    DEPT_CODE            =    FP_DEPT_CODE
AND    FP_COMP_CODE          =    P_COMP_CODE
AND      EMP_COMP_CODE      =  FP_COMP_CODE
AND    FP_EMP_CODE        =  EMP_CODE
AND    EMPY_COMP_CODE     =  FP_COMP_CODE
AND    FP_PAY_TYPE        =  DECODE( P_PAY_TYPE,'M','M','D','D','H','H','A',EMPY_PAY_TYPE)
AND    EMPY_CODE          =  EMP_CODE
AND    EMPY_BANK_CODE     =  BANK_CODE(+)
AND    P_PAY_MODE       =  'A'
AND    FP_PROC_MTH        =  P_CPMTH
AND    EMP_STATUS         NOT IN (4, 5, 6)
AND       FP_EMP_CODE        BETWEEN  P_FM_EMP_CODE        AND        P_TO_EMP_CODE
AND    FP_CONT_TYPE_CODE  BETWEEN  P_FM_CONTRACT_TYPE   AND     P_TO_CONTRACT_TYPE
AND       FP_DIVN_CODE       BETWEEN  P_FM_DIVN            AND        P_TO_DIVN
AND    FP_DEPT_CODE       BETWEEN  P_FM_DEPT            AND        P_TO_DEPT
AND    FP_LOCN_CODE       BETWEEN  P_FM_LOCN            AND        P_TO_LOCN
AND    FP_CC_CODE         BETWEEN P_FM_COST_CENTRE                      AND        P_TO_COST_CENTRE
AND    NVL(FP_CNTRY_CODE,P_FM_COUNTRY )      BETWEEN P_FM_COUNTRY            AND        P_TO_COUNTRY
GROUP BY DEPT_NAME,FP_CURR_CODE,FP_PAY_MODE ,FP_EMP_CODE,EMP_NAME,COMP_NAME,EMPY_BANK_REMARKS,BANK_CODE,BANK_SHORT_NAME,
       BANK_BL_SHORT_NAME,
       DEPT_NAME_LANG_01, DEPT_NAME_LANG_02, DEPT_NAME_LANG_03, DEPT_NAME_LANG_04, DEPT_NAME_LANG_05, DEPT_NAME_LANG_06, DEPT_NAME_LANG_07, DEPT_NAME_LANG_08, DEPT_NAME_LANG_09, DEPT_NAME_LANG_10,
         COMP_NAME_LANG_01, COMP_NAME_LANG_02, COMP_NAME_LANG_03, COMP_NAME_LANG_04, COMP_NAME_LANG_05, COMP_NAME_LANG_06, COMP_NAME_LANG_07, COMP_NAME_LANG_08, COMP_NAME_LANG_09, COMP_NAME_LANG_10,
         EMP_NAME_LANG_01, EMP_NAME_LANG_02, EMP_NAME_LANG_03, EMP_NAME_LANG_04, EMP_NAME_LANG_05, EMP_NAME_LANG_06, EMP_NAME_LANG_07, EMP_NAME_LANG_08, EMP_NAME_LANG_09, EMP_NAME_LANG_10,
         BANK_SHORT_NAME_LANG_01, BANK_SHORT_NAME_LANG_02, BANK_SHORT_NAME_LANG_03, BANK_SHORT_NAME_LANG_04, BANK_SHORT_NAME_LANG_05, BANK_SHORT_NAME_LANG_06, BANK_SHORT_NAME_LANG_07, BANK_SHORT_NAME_LANG_08, BANK_SHORT_NAME_LANG_09, BANK_SHORT_NAME_LANG_10;



BEGIN

   DELETE FROM PW_SALARY_TRANSFER_ADVICE WHERE STA_REP_KEY_NO = P_REP_KEY_NO;

         MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;


   FOR I IN C_SAL_TRANSFER
   LOOP

   INSERT INTO PW_SALARY_TRANSFER_ADVICE ( STA_COMP_CODE,
                                           STA_REP_KEY_NO,
                                           STA_EMP_CODE,
                                           STA_PAY_MODE,
                                           STA_COMP_NAME,
                                           STA_EMP_NAME,
                                           STA_DEPT_NAME,
                                           STA_CURR_CODE,
                                           STA_BANK_REMARKS,
                                           STA_NETSAL_BANK,
                                           STA_BANK_NAME )
                                  VALUES ( P_COMP_CODE,
                                           P_REP_KEY_NO,
                                           I.FP_EMP_CODE,
                                           I.FP_PAY_MODE,
                                           I.COMP_NAME,
                                           I.EMP_NAME,
                                           I.DEPT_NAME,
                                           I.FP_CURR_CODE,
                                           I.EMPY_BANK_REMARKS,
                                           I.NETSAL_BANK,
                                           I.EMP_BANK_NAME);

 END LOOP;


END P_SAL_TRANSFER_ADVICE;

PROCEDURE P_EMPS_CONF_PERIOD ( P_COMP_CODE    IN VARCHAR2,
                               P_REP_KEY_NO   IN NUMBER,
                               P_FM_DT        IN DATE,
                               P_TO_DT        IN DATE,
                               P_FM_EMP_CODE  IN VARCHAR2,
                               P_TO_EMP_CODE  IN VARCHAR2,
                               P_FM_DIVN      IN VARCHAR2,
                               P_TO_DIVN      IN VARCHAR2,
                               P_FM_DEPT      IN VARCHAR2,
                               P_TO_DEPT      IN VARCHAR2) IS
MM_LANG_CODE VARCHAR2(240);


CURSOR C2 IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;


CURSOR C_CONF_PERIOD IS
      SELECT  EMP_CODE Q_1_EMP_CODE,EMP_JOIN_DT Q_1_EMP_JOIN_DT,
                DECODE(MM_LANG_CODE ,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02',
       EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05',
       EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06, 'LANG_07', EMP_NAME_LANG_07, 'LANG_08',
       EMP_NAME_LANG_08, 'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10) Q_1_EMP_NAME,
                EMP_PROBATION_MTHS Q_1_EMP_PROBATION_MTHS
       FROM   PM_EMP_KEY
       WHERE  EMP_COMP_CODE     =    P_COMP_CODE
       AND      EMP_CODE BETWEEN P_FM_EMP_CODE AND P_TO_EMP_CODE
       AND      EMP_DIVN_CODE    BETWEEN P_FM_DIVN AND P_TO_DIVN
       AND      EMP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
      -- AND      To_Char(ADD_MONTHS(EMP_JOIN_DT,NVL(EMP_PROBATION_MTHS,0)),'DD/MM/YYYY') BETWEEN P_FM_DEPT AND P_TO_DEPT
       AND      ADD_MONTHS(EMP_JOIN_DT,NVL(EMP_PROBATION_MTHS,0)) BETWEEN P_FM_DT AND P_TO_DT
       AND    EMP_CONF_DT IS NULL
       AND    NVL(EMP_TEMP_YN, 'N') = 'N'
       ORDER BY EMP_CODE;

CURSOR C1 IS
      SELECT GPARA_VALUE
      FROM   PM_GUI_PARAMETER
        WHERE  GPARA_CODE = 'REF_DT_FMT';

   M_DT_FMT_MASK  VARCHAR2(60);
   M_CONF_DT         DATE;
   M_DUMMY           VARCHAR2(15);
BEGIN

   DELETE FROM  PW_EMPS_CONF_PERIOD WHERE ESCP_REP_KEY_NO = P_REP_KEY_NO;
    --DUMMY('TAMIL P_FM_EMP_CODE'||P_FM_EMP_CODE);
 --DUMMY('TAMIL P_TO_EMP_CODE'||P_TO_EMP_CODE);
 --DUMMY('TAMIL P_FM_DIVN'||P_FM_DIVN);
 --DUMMY('TAMIL P_TO_DIVN'||P_TO_DIVN);
 --DUMMY('TAMIL P_FM_DEPT'||P_FM_DEPT);
 --DUMMY('TAMIL P_TO_DEPT'||P_TO_DEPT);
 --DUMMY('TAMIL P_FM_DEPT'||P_FM_DEPT);
 --DUMMY('TAMIL P_TO_DEPT'||P_TO_DEPT);

 MM_LANG_CODE := NULL;

    IF C2%ISOPEN THEN
       CLOSE C2;
    END IF;

    OPEN C2;
    FETCH C2 INTO MM_LANG_CODE;
    CLOSE C2;


   FOR I IN  C_CONF_PERIOD
   LOOP

       IF C1%ISOPEN THEN
          CLOSE C1;
       END IF;

       OPEN C1;
       FETCH C1 INTO M_DT_FMT_MASK;
       CLOSE C1;

       M_CONF_DT := ADD_MONTHS(I.Q_1_EMP_JOIN_DT,NVL(I.Q_1_EMP_PROBATION_MTHS,0));
       M_DUMMY   := TO_CHAR(M_CONF_DT,LTRIM(RTRIM(M_DT_FMT_MASK)));

       INSERT INTO PW_EMPS_CONF_PERIOD ( ESCP_COMP_CODE,
                                         ESCP_REP_KEY_NO,
                                         ESCP_EMP_CODE,
                                         ESCP_JOIN_DT,
                                         ESCP_EMP_NAME,
                                         ESCP_PROBATION_MTHS,
                                         ESCP_EXP_CONF )
                                VALUES ( P_COMP_CODE,
                                         P_REP_KEY_NO,
                                         I.Q_1_EMP_CODE,
                                         I.Q_1_EMP_JOIN_DT,
                                         I.Q_1_EMP_NAME,
                                         I.Q_1_EMP_PROBATION_MTHS,
                                         M_DUMMY);

   END LOOP;

END P_EMPS_CONF_PERIOD;

PROCEDURE P_EMP_CONF_PERIOD  ( P_COMP_CODE    IN VARCHAR2,
                               P_REP_KEY_NO   IN NUMBER,
                               P_FM_DT        IN DATE,
                               P_TO_DT        IN DATE,
                               P_FM_EMP_CODE  IN VARCHAR2,
                               P_TO_EMP_CODE  IN VARCHAR2,
                               P_FM_DIVN      IN VARCHAR2,
                               P_TO_DIVN      IN VARCHAR2,
                               P_FM_DEPT      IN VARCHAR2,
                               P_TO_DEPT      IN VARCHAR2) IS

MM_LANG_CODE VARCHAR2(240);

CURSOR C_EMP_CONF IS
      SELECT EMP_CODE Q_1_EMP_CODE,EMP_JOIN_DT Q_1_EMP_JOIN_DT,
               DECODE(MM_LANG_CODE ,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02',
       EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05',
       EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06, 'LANG_07', EMP_NAME_LANG_07, 'LANG_08',
       EMP_NAME_LANG_08, 'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10) Q_1_EMP_NAME,
               EMP_PROBATION_MTHS Q_1_EMP_PROBATION_MTHS ,EMP_CONF_DT Q_1_EMP_CONF_DT
     FROM    PM_EMP_KEY
     WHERE   EMP_COMP_CODE     =    P_COMP_CODE
     AND       EMP_CODE       BETWEEN P_FM_EMP_CODE AND P_TO_EMP_CODE
     AND       EMP_DIVN_CODE    BETWEEN P_FM_DIVN     AND P_TO_DIVN
     AND       EMP_DEPT_CODE  BETWEEN P_FM_DEPT     AND P_TO_DEPT
     AND       EMP_CONF_DT    BETWEEN P_FM_DT       AND P_TO_DT
     ORDER BY Q_1_EMP_CODE;


CURSOR C2 IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

BEGIN

   DELETE FROM PW_EMP_CONF_PERIOD WHERE ECP_REP_KEY_NO = P_REP_KEY_NO;

    MM_LANG_CODE := NULL;

    IF C2%ISOPEN THEN
       CLOSE C2;
    END IF;

    OPEN C2;
    FETCH C2 INTO MM_LANG_CODE;
    CLOSE C2;


   FOR I IN C_EMP_CONF
   LOOP

       INSERT INTO PW_EMP_CONF_PERIOD ( ECP_COMP_CODE,
                                        ECP_REP_KEY_NO,
                                        ECP_EMP_CODE,
                                        ECP_JOIN_DT,
                                        ECP_EMP_NAME,
                                        ECP_PROBATION_MTHS,
                                        ECP_CONF_DT )
                               VALUES ( P_COMP_CODE,
                                        P_REP_KEY_NO,
                                        I.Q_1_EMP_CODE,
                                        I.Q_1_EMP_JOIN_DT,
                                        I.Q_1_EMP_NAME,
                                        I.Q_1_EMP_PROBATION_MTHS,
                                        I.Q_1_EMP_CONF_DT);
   END LOOP;

END P_EMP_CONF_PERIOD;

PROCEDURE P_EMP_HIST_DATA ( P_COMP_CODE         IN VARCHAR2,
                            P_REP_KEY_NO        IN NUMBER,
                            P_FM_EMP_CODE       IN VARCHAR2,
                            P_TO_EMP_CODE       IN VARCHAR2,
                            P_FM_GRADE          IN VARCHAR2,
                            P_TO_GRADE          IN VARCHAR2,
                            P_FM_DIVN           IN VARCHAR2,
                            P_TO_DIVN           IN VARCHAR2,
                            P_FM_DEPT           IN VARCHAR2,
                            P_TO_DEPT           IN VARCHAR2,
                            P_FM_LOCN           IN VARCHAR2,
                            P_TO_LOCN           IN VARCHAR2,
                            P_FM_CONTRACT_TYPE  IN VARCHAR2,
                            P_TO_CONTRACT_TYPE  IN VARCHAR2,
                            P_FM_JOIN_DT        IN DATE,
                            P_TO_JOIN_DT        IN DATE,
                            P_FM_COUNTRY_CODE   IN VARCHAR2,
                            P_TO_COUNTRY_CODE   IN VARCHAR2 ) IS

MM_LANG_CODE VARCHAR2(240);

CURSOR C_Q1 IS
      SELECT EMP_CODE Q1_EMP_CODE,DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06, 'LANG_07', EMP_NAME_LANG_07, 'LANG_08', EMP_NAME_LANG_08, 'LANG_09', EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10,EMP_NAME) Q1_EMP_NAME,
               EMP_BIRTH_DT Q1_BIRTH_DT,EMP_JOIN_DT Q1_JOIN_DT,EMP_DIVN_CODE Q1_DIVN_CDE,
               EMP_DEPT_CODE Q1_DEPT_CDE, EMPS_CNTRY_CODE Q1_CNTRY_CDE,EMPS_RELIGION_CODE Q1_RLGN_CDE,
               DECODE(EMPS_SEX,'M','Male','F','Female') Q1_SEX,EMPS_CONTR_CODE Q1_MARITAL_STS,
               EMPS_PRESENT_ADD_1 Q1_TEMP_ADDR1,EMPS_PRESENT_ADD_2 Q1_TEMP_ADDR2, EMPS_PRESENT_PHONE_NO Q1_PHONE1,
               EMPS_PERMANENT_ADD_1 Q1_PERM_ADD1,EMPS_PERMANENT_ADD_2 Q1_PERM_ADD2,EMPS_PERMANENT_PHONE_NO Q1_PHONE2,
             CNTRY_NATIONALITY Q1_NATIONALITY
      FROM   PM_EMP_KEY,PM_EMP_PERS,PM_COUNTRY
      WHERE  EMP_COMP_CODE = P_COMP_CODE
        AND    EMPS_COMP_CODE(+) = EMP_COMP_CODE
        AND    EMPS_CODE(+) = EMP_CODE
        AND    EMP_CODE           BETWEEN  P_FM_EMP_CODE AND P_TO_EMP_CODE
        AND    EMP_PERSONAL_GRADE BETWEEN  P_FM_GRADE  AND P_TO_GRADE
        AND    EMP_DIVN_CODE      BETWEEN  P_FM_DIVN AND P_TO_DIVN
        AND    EMP_DEPT_CODE      BETWEEN  P_FM_DEPT AND P_TO_DEPT
        AND    EMP_LOCN_CODE      BETWEEN  P_FM_LOCN AND P_TO_LOCN
        AND    EMP_CONT_TYPE_CODE BETWEEN  P_FM_CONTRACT_TYPE AND P_TO_CONTRACT_TYPE
        AND    EMPS_CNTRY_CODE(+) BETWEEN  P_FM_COUNTRY_CODE AND P_TO_COUNTRY_CODE
        AND    EMP_JOIN_DT        BETWEEN  P_FM_JOIN_DT AND P_TO_JOIN_DT
      AND    EMP_FRZ_FLAG = 'N'
      AND    EMPS_CNTRY_CODE=CNTRY_CODE
      ORDER BY Q1_EMP_CODE ASC;

CURSOR C_Q2 (P_EMP_CODE IN VARCHAR2)IS
      SELECT EMPY_CODE Q2_EMP_CODE, EMPY_BANK_CODE Q2_BANK_CDE,EMPY_BANK_REMARKS Q2_BANK_AC ,
               DECODE(EMPY_PAY_TYPE, 'H' , 'Hourly' , 'D' , 'Daily','M' , 'Monthly', EMPY_PAY_TYPE ) Q2_EMPY_PAY_TYPE,
               DECODE(EMPY_PAY_MODE,'C','CASH','B','BANK','Q','CHEQUE') Q2_EMPY_PAY_MODE
     FROM    PM_EMP_PAY, PM_EMP_KEY
     WHERE   EMPY_COMP_CODE = P_COMP_CODE
       AND     EMPY_COMP_CODE = EMP_COMP_CODE
       AND     EMPY_CODE  = EMP_CODE
     AND     EMP_CODE  = P_EMP_CODE;

CURSOR C_Q3 (P_EMP_CODE IN VARCHAR2)IS
      SELECT EMPA_CODE Q3_EMPA_CODE,EMPA_FROM_DT Q3_FRM_DT ,EMPA_UPTO_DT Q3_TO_DT ,
               DECODE(MM_LANG_CODE,'ENG',ALLW_SHORT_DESC, 'LANG_01', ALLW_SHORT_DESC_LANG_01, 'LANG_02', ALLW_SHORT_DESC_LANG_02, 'LANG_03', ALLW_SHORT_DESC_LANG_03, 'LANG_04', ALLW_SHORT_DESC_LANG_04, 'LANG_05', ALLW_SHORT_DESC_LANG_05, 'LANG_06', ALLW_SHORT_DESC_LANG_06, 'LANG_07', ALLW_SHORT_DESC_LANG_07, 'LANG_08', ALLW_SHORT_DESC_LANG_08, 'LANG_09', ALLW_SHORT_DESC_LANG_09, 'LANG_10', ALLW_SHORT_DESC_LANG_10,ALLW_SHORT_DESC) Q3_ALLW_NAME,
               EMPA_CURR_CODE Q3_CURR,    EMPA_LC_AMOUNT Q3_FC_AMT,
             DECODE(EMPA_CE,'C','CALCULATED', 'ENTERED') EMPA_CE,
               EMPAC_ALLW_CODE, EMPAC_ALLW_PERC
      FROM   PM_EMP_ALLOWANCE,PM_ALLOWANCE, PM_EMP_ALLOWANCE_CE
      WHERE  EMPA_COMP_CODE = P_COMP_CODE
        AND    EMPA_ALLW_CODE = ALLW_CODE
        AND    EMPAC_COMP_CODE(+) = EMPA_COMP_CODE
        AND    EMPAC_CODE(+) = EMPA_CODE
      AND    EMPA_CODE = P_EMP_CODE
        AND    EMPAC_BASE_ALLW_CODE(+) = EMPA_ALLW_CODE
        AND    EMPAC_FROM_DT(+) = EMPA_FROM_DT;

    CURSOR C_CALC_ALLW_DESC (P_ALLW IN VARCHAR2) IS
    SELECT    DECODE(MM_LANG_CODE,'ENG',ALLW_SHORT_DESC, 'LANG_01', ALLW_SHORT_DESC_LANG_01, 'LANG_02', ALLW_SHORT_DESC_LANG_02, 'LANG_03', ALLW_SHORT_DESC_LANG_03, 'LANG_04', ALLW_SHORT_DESC_LANG_04, 'LANG_05', ALLW_SHORT_DESC_LANG_05, 'LANG_06', ALLW_SHORT_DESC_LANG_06, 'LANG_07', ALLW_SHORT_DESC_LANG_07, 'LANG_08', ALLW_SHORT_DESC_LANG_08, 'LANG_09', ALLW_SHORT_DESC_LANG_09, 'LANG_10', ALLW_SHORT_DESC_LANG_10,ALLW_SHORT_DESC)
    FROM PM_ALLOWANCE
    WHERE ALLW_CODE = P_ALLW;
    M_CALC_ALLW_DESC VARCHAR2(100);

CURSOR C_Q4 (P_EMP_CODE IN VARCHAR2) IS
      SELECT EMPD_CODE  Q4_EMPD_CDE , DECODE(MM_LANG_CODE,'ENG',DOCU_SHORT_DESC, 'LANG_01', DOCU_SHORT_DESC_LANG_01, 'LANG_02', DOCU_SHORT_DESC_LANG_02, 'LANG_03', DOCU_SHORT_DESC_LANG_03, 'LANG_04', DOCU_SHORT_DESC_LANG_04, 'LANG_05', DOCU_SHORT_DESC_LANG_05, 'LANG_06', DOCU_SHORT_DESC_LANG_06, 'LANG_07', DOCU_SHORT_DESC_LANG_07, 'LANG_08', DOCU_SHORT_DESC_LANG_08, 'LANG_09', DOCU_SHORT_DESC_LANG_09, 'LANG_10', DOCU_SHORT_DESC_LANG_10,DOCU_SHORT_DESC) Q4_EMP_DOCUMEN_NAME ,
               EMPD_NUMBER  Q4_EMPD_NO ,EMPD_ISS_PLACE Q4_ISS_PLACE ,EMPD_ISS_DT Q4_ISS_DT ,
               EMPD_EXP_DT Q4_EXP_DT , EMPD_INIT_DAYS
      FROM   PM_EMP_DOCUMENT, PM_DOCUMENT
      WHERE  EMPD_COMP_CODE = P_COMP_CODE
        AND    EMPD_DOCU_CODE = DOCU_CODE
      AND    EMPD_CODE = P_EMP_CODE;

CURSOR C_Q5 (P_EMP_CODE IN VARCHAR2) IS
      SELECT LVAC_EMP_CODE,LVAC_LV_CODE,DECODE(MM_LANG_CODE,'ENG',LV_SHORT_DESC, 'LANG_01', LV_SHORT_DESC_LANG_01, 'LANG_02', LV_SHORT_DESC_LANG_02, 'LANG_03', LV_SHORT_DESC_LANG_03, 'LANG_04', LV_SHORT_DESC_LANG_04, 'LANG_05', LV_SHORT_DESC_LANG_05, 'LANG_06', LV_SHORT_DESC_LANG_06, 'LANG_07', LV_SHORT_DESC_LANG_07, 'LANG_08', LV_SHORT_DESC_LANG_08, 'LANG_09', LV_SHORT_DESC_LANG_09, 'LANG_10', LV_SHORT_DESC_LANG_10,LV_SHORT_DESC) Q5_LEAVE_TYPE ,
             SUM(NVL(LVAC_ACCRUED_DAYS,0))-SUM(NVL(LVAC_AVAILED_DAYS,0))  Q5_BALANCE_DAYS
      FROM   PM_LEAVE,PS_LEAVE_ACCRUAL_CURR
      WHERE  LVAC_COMP_CODE = P_COMP_CODE
        AND    LVAC_LV_CODE   = LV_CATG_CODE
      AND    LVAC_EMP_CODE = P_EMP_CODE
    GROUP BY LVAC_EMP_CODE,LVAC_LV_CODE,DECODE(MM_LANG_CODE,'ENG',LV_SHORT_DESC, 'LANG_01', LV_SHORT_DESC_LANG_01, 'LANG_02', LV_SHORT_DESC_LANG_02, 'LANG_03', LV_SHORT_DESC_LANG_03, 'LANG_04', LV_SHORT_DESC_LANG_04, 'LANG_05', LV_SHORT_DESC_LANG_05, 'LANG_06', LV_SHORT_DESC_LANG_06, 'LANG_07', LV_SHORT_DESC_LANG_07, 'LANG_08', LV_SHORT_DESC_LANG_08, 'LANG_09', LV_SHORT_DESC_LANG_09, 'LANG_10', LV_SHORT_DESC_LANG_10,LV_SHORT_DESC);

CURSOR C_Q6 (P_EMP_CODE IN VARCHAR2) IS
      SELECT EMPG_CODE,EMPG_FROM_DT,EMPG_UPTO_DT, EMPG_GRAT_DAYS, EMPG_GRAT_PER_AMOUNT,
               EMPG_GRAT_LIB_AMOUNT
      FROM   PM_EMP_GRATUITY
      WHERE  EMPG_COMP_CODE = P_COMP_CODE
      AND    EMPG_CODE = P_EMP_CODE;

CURSOR C_REP_VAL_3 IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;


   M_Q2_EMP_CODE VARCHAR2(12);
   M_Q2_BANK_CDE VARCHAR2(12);
   m_Q2_BANK_AC NUMBER;
   M_Q2_EMPY_PAY_TYPE VARCHAR2(12);
   M_Q2_EMPY_PAY_MODE VARCHAR2(12);
   M_Q3_EMPA_CODE   VARCHAR2(12);
   M_Q3_FRM_DT      DATE;
   M_Q3_TO_DT        DATE;
   M_Q3_ALLW_NAME    VARCHAR2(30);
   M_Q3_CURR         VARCHAR2(12);
   M_Q3_FC_AMT       NUMBER;
   M_EMPA_CE         VARCHAR2(12);
   M_EMPAC_ALLW_CODE  VARCHAR2(12);
   M_EMPAC_ALLW_PERC  NUMBER;
   M_Q4_EMPD_CDE      VARCHAR2(12);
   M_Q4_EMP_DOCUMEN_NAME  VARCHAR2(240);
   M_Q4_EMPD_NO     VARCHAR2(30);
   M_Q4_ISS_PLACE   VARCHAR2(15) ;
   M_Q4_ISS_DT      DATE;
   M_Q4_EXP_DT      DATE;
   M_EMPD_INIT_DAYS  NUMBER(3);
   M_LVAC_EMP_CODE    VARCHAR2(12);
   M_LVAC_LV_CODE     VARCHAR2(12);
   M_Q5_LEAVE_TYPE   VARCHAR2(240);
   M_Q5_BALANCE_DAYS NUMBER;
   M_EMPG_CODE       VARCHAR2(12);
   M_EMPG_FROM_DT    DATE;
   M_EMPG_UPTO_DT    DATE;
   M_EMPG_GRAT_DAYS  NUMBER;
   M_EMPG_GRAT_PER_AMOUNT NUMBER;
   M_EMPG_GRAT_LIB_AMOUNT NUMBER;
BEGIN
   DELETE FROM PW_EMP_HIST_DATA WHERE EMPD_REP_KEY_NO = P_REP_KEY_NO;

   DELETE FROM PW_EMP_HIST_DATA_q2 WHERE empd_q2_rep_key_no = P_REP_KEY_NO;
   DELETE FROM PW_EMP_HIST_DATA_q3 WHERE empd_q3_rep_key_no = P_REP_KEY_NO;
   DELETE FROM PW_EMP_HIST_DATA_q4 WHERE empd_q4_rep_key_no = P_REP_KEY_NO;
   DELETE FROM PW_EMP_HIST_DATA_q5 WHERE EMPD_REP_KEY_NO = P_REP_KEY_NO;
   DELETE FROM PW_EMP_HIST_DATA_q6 WHERE EMPD_REP_KEY_NO = P_REP_KEY_NO;

  IF C_REP_VAL_3%ISOPEN THEN
       CLOSE C_REP_VAL_3;
    END IF;

    OPEN C_REP_VAL_3;
    FETCH C_REP_VAL_3 INTO MM_LANG_CODE;
    CLOSE C_REP_VAL_3;


   --DUMMY(2);
   FOR I IN C_Q1
   LOOP
      INSERT INTO PW_EMP_HIST_DATA ( EMPD_COMP_CODE,
                                                     EMPD_REP_KEY_NO,
                                                     EMPD_Q1_EMP_CODE,
                                                     EMPD_Q1_EMP_NAME,
                                                     EMPD_Q1_BIRTH_DT,
                                                     EMPD_Q1_JOIN_DT,
                                                     EMPD_Q1_DIVN_CDE,
                                                     EMPD_Q1_DEPT_CDE,
                                                     EMPD_Q1_CNTRY_CDE,
                                                     EMPD_Q1_RLGN_CDE,
                                                     EMPD_Q1_SEX,
                                                     EMPD_Q1_MARITAL_STS,
                                                     EMPD_Q1_TEMP_ADDR1,
                                                     EMPD_Q1_TEMP_ADDR2,
                                                     EMPD_Q1_PHONE1,
                                                     EMPD_Q1_PERM_ADD1,
                                                     EMPD_Q1_PERM_ADD2,
                                                     EMPD_Q1_PHONE2,
                                                     EMPD_Q1_NATIONALITY)
                                            VALUES ( P_COMP_CODE,
                                                     P_REP_KEY_NO,
                                                     I.Q1_EMP_CODE,
                                                     I.Q1_EMP_NAME,
                                                     I.Q1_BIRTH_DT,
                                                     I.Q1_JOIN_DT,
                                                     I.Q1_DIVN_CDE,
                                                     I.Q1_DEPT_CDE,
                                                     I.Q1_CNTRY_CDE,
                                                     I.Q1_RLGN_CDE,
                                                     I.Q1_SEX,
                                                     I.Q1_MARITAL_STS,
                                                     I.Q1_TEMP_ADDR1,
                                                     I.Q1_TEMP_ADDR2,
                                                     I.Q1_PHONE1,
                                                     I.Q1_PERM_ADD1,
                                                     I.Q1_PERM_ADD2,
                                                     I.Q1_PHONE2,
                                                     I.Q1_NATIONALITY);
    FOR J IN C_Q2(I.Q1_EMP_CODE) LOOP

    INSERT INTO PW_EMP_HIST_DATA_Q2 (  EMPD_Q2_COMP_CODE,
                                       EMPD_Q2_REP_KEY_NO,
                                       EMPD_Q2_EMP_CODE,
                                       EMPD_Q2_BANK_CODE,
                                       EMPD_Q2_BANK_AC,
                                       EMPD_Q2_EMPY_PAY_MODE,
                                       EMPD_Q2_EMPY_PAY_TYPE)
                              VALUES ( P_COMP_CODE,
                                       P_REP_KEY_NO,
                                       J.Q2_EMP_CODE,
                                       J.Q2_BANK_CDE,
                                       J.Q2_BANK_AC,
                                       J.Q2_EMPY_PAY_TYPE,
                                       J.Q2_EMPY_PAY_MODE);


    END LOOP;

    FOR K IN C_Q3(I.Q1_EMP_CODE) LOOP

        IF C_CALC_ALLW_DESC%ISOPEN THEN
        CLOSE C_CALC_ALLW_DESC;
    END IF;

    OPEN C_CALC_ALLW_DESC(K.EMPAC_ALLW_CODE);
        FETCH C_CALC_ALLW_DESC INTO M_CALC_ALLW_DESC;
    CLOSE C_CALC_ALLW_DESC;

    INSERT INTO PW_EMP_HIST_DATA_Q3 ( EMPD_Q3_COMP_CODE,
                                      EMPD_Q3_REP_KEY_NO,
                                      EMPD_Q3_EMPA_CODE,
                                      EMPD_Q3_FRM_DT,
                                      EMPD_Q3_TO_DT,
                                      EMPD_Q3_ALLW_NAME,
                                      EMPD_Q3_CURR,
                                      EMPD_Q3_FC_AMT,
                                      EMPD_EMPA_CE,
                                      EMPD_EMPAC_ALLW_CODE,
                                      EMPD_EMPAC_ALLW_PERC  )
                             VALUES ( P_cOMP_CODE,
                                      P_REP_KEY_NO,
                                      K.Q3_EMPA_CODE,
                                      K.Q3_FRM_DT,
                                      K.Q3_TO_DT,
                                      K.Q3_ALLW_NAME,
                                      K.Q3_CURR,
                                      K.Q3_FC_AMT,
                                      K.EMPA_CE,
                                      K.EMPAC_ALLW_CODE,
                                      K.EMPAC_ALLW_PERC);

    END LOOP;

    FOR M IN C_Q4 (I.Q1_EMP_CODE) LOOP

    INSERT INTO PW_EMP_HIST_DATA_Q4 ( EMPD_Q4_COMP_CODE,
                                      EMPD_Q4_REP_KEY_NO,
                                      EMPD_Q4_EMPD_CDE,
                                      EMPD_Q4_EMP_DOCUMEN_NAME,
                                      EMPD_Q4_EMPD_NO,
                                      EMPD_Q4_ISS_PLACE,
                                      EMPD_Q4_ISS_DT,
                                      EMPD_Q4_EXP_DT,
                                      EMPD_EMPD_INIT_DAYS)
                            VALUES ( P_COMP_CODE,
                                     P_REP_KEY_NO,
                                     M.Q4_EMPD_CDE,
                                     M.Q4_EMP_DOCUMEN_NAME,
                                     M.Q4_EMPD_NO,
                                     M.Q4_ISS_PLACE,
                                     M.Q4_ISS_DT,
                                     M.Q4_EXP_DT,
                                     M.EMPD_INIT_DAYS);

    END LOOP;

    FOR N IN C_Q5 (I.Q1_EMP_CODE) LOOP

    INSERT INTO PW_EMP_HIST_DATA_Q5 ( EMPD_COMP_CODE,
                                      EMPD_REP_KEY_NO,
                                      EMPD_LVAC_EMP_CODE,
                                      EMPD_LVAC_LV_CODE,
                                      EMPD_Q5_LEAVE_TYPE,
                                      EMPD_Q5_BALANCE_DAYS )
                              VALUES ( P_COMP_cODE,
                                       P_REP_KEY_NO,
                                       N.LVAC_EMP_CODE,
                                       N.LVAC_LV_CODE,
                                       N.Q5_LEAVE_TYPE,
                                       N.Q5_BALANCE_DAYS);

    END LOOP;

    FOR O IN C_Q6 (I.Q1_EMP_CODE) LOOP

    INSERT INTO PW_EMP_HIST_DATA_Q6 ( EMPD_COMP_CODE,
                                      EMPD_REP_KEY_NO,
                                      EMPD_EMPG_CODE,
                                      EMPD_EMPG_FROM_DT,
                                      EMPD_EMPG_UPTO_DT,
                                      EMPD_EMPG_GRAT_DAYS,
                                      EMPD_EMPG_GRAT_PER_AMOUNT,
                                      EMPD_EMPG_GRAT_LIB_AMOUNT)
                              VALUES ( P_COMP_CODE,
                                       P_REP_KEY_NO,
                                       O.EMPG_CODE,
                                       O.EMPG_FROM_DT,
                                       O.EMPG_UPTO_DT,
                                       O.EMPG_GRAT_DAYS,
                                       O.EMPG_GRAT_PER_AMOUNT,
                                       O.EMPG_GRAT_LIB_AMOUNT);

    END LOOP;

    END LOOP;

END P_EMP_HIST_DATA;

PROCEDURE P_EMP_ATTEND_DETAILS_SUM ( P_COMP_CODE         IN VARCHAR2,
                                     P_REP_KEY_NO        IN NUMBER,
                                     P_FM_DIVN           IN VARCHAR2,
                                     P_TO_DIVN           IN VARCHAR2,
                                     P_FM_DEPT           IN VARCHAR2,
                                     P_TO_DEPT           IN VARCHAR2,
                                     P_FM_LOCN           IN VARCHAR2,
                                     P_TO_LOCN           IN VARCHAR2,
                                     P_FM_DT             IN VARCHAR2,
                                     P_TO_DT             IN VARCHAR2,
                                     P_FM_EMP_CODE       IN VARCHAR2,
                                     P_TO_EMP_CODE       IN VARCHAR2,
                                     P_FM_GRADE          IN VARCHAR2,
                                     P_TO_GRADE          IN VARCHAR2) IS

                                     MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

CURSOR C_EMP_ATTED IS
    SELECT  EMP_CODE,             DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) EMP_NAME,
            EMP_DIVN_CODE,        EMP_DEPT_CODE,
            EMP_LOCN_CODE,        EMP_PERSONAL_GRADE
    FROM    PM_EMP_KEY
    WHERE   EMP_STATUS IN  (1,2,3)
    AND     EMP_END_OF_SERVICE_DT  IS      NULL
    AND     EMP_DIVN_CODE          BETWEEN P_FM_DIVN   AND P_TO_DIVN
    AND     EMP_DEPT_CODE          BETWEEN P_FM_DEPT   AND P_TO_DEPT
    AND     EMP_LOCN_CODE          BETWEEN P_FM_LOCN   AND P_TO_LOCN
    AND     EMP_CODE               BETWEEN P_FM_EMP_CODE  AND P_TO_EMP_CODE
    AND     EMP_PERSONAL_GRADE     BETWEEN P_FM_GRADE  AND P_TO_GRADE
    AND     EMP_COMP_CODE  =       P_COMP_CODE
    AND     EMP_JOIN_DT     <=     TO_DATE(P_TO_DT,'YYYYMM')
    ORDER BY EMP_CODE;

CURSOR C2(P_DATE VARCHAR2,P_EMP_CODE VARCHAR2) IS
      SELECT SUM(ATNDHRSDAYS) ATNDHRSDAYS
      FROM (
            SELECT    SUM(NVL(ATND_HRS_DAYS,0))ATNDHRSDAYS
                  FROM      PT_ATTENDANCE_DETAIL
                  WHERE     ATND_EMP_CODE              =    P_EMP_CODE
                  AND       TO_CHAR(ATND_DT,'YYYYMM')  =    P_DATE
                GROUP BY  TO_CHAR(ATND_DT,'YYYYMM')
              UNION ALL
                  SELECT  SUM(NVL(PMAD_ABSENT_DAYS,0)) ATNDHRSDAYS
                  FROM    PT_PREV_MTH_ATTN_DETAIL, PT_PREV_MTH_ATTN_HEAD
                  WHERE   PMAD_PMAH_SYS_ID = PMAH_SYS_ID
                  AND     PMAH_APPR_UID IS NOT NULL
                  AND     PMAD_EMP_CODE    = P_EMP_CODE
                  AND     TO_CHAR(PMAH_DT,'YYYYMM') = P_DATE
                GROUP BY  TO_CHAR(PMAH_DT,'YYYYMM'));

CURSOR C3(P_DATE VARCHAR2) IS
      SELECT  TO_CHAR(LAST_DAY(TO_DATE(P_DATE,'YYYYMM')),'DD')
      FROM    DUAL ;

CURSOR C4 IS
     SELECT   PARA_VALUE
     FROM     PM_COMP_PARAMETER
     WHERE    PARA_TYPE   =  PARA_CODE
     AND      PARA_CODE   =  'STD_WHRS';

CURSOR C5   (P_DATE VARCHAR2,P_EMP_CODE VARCHAR2) IS
      SELECT    SUM(NVL(OTD_TOTAL_OT_HRS,0))
      FROM      PT_OVERTIME_DETAIL
      WHERE     OTD_EMP_CODE             =   P_EMP_CODE
      AND       TO_CHAR(OTD_DT,'YYYYMM') =   P_DATE;

CURSOR C6 (M_DIVN_CODE VARCHAR2,M_DEPT_CODE VARCHAR)IS
     SELECT    DECODE(MM_LANG_CODE, 'ENG',DIVN_NAME ,'LANG_01',DIVN_NAME_LANG_01,'LANG_02',DIVN_NAME_LANG_02,'LANG_03',DIVN_NAME_LANG_03,'LANG_04',DIVN_NAME_LANG_04,'LANG_05',DIVN_NAME_LANG_05,'LANG_06',DIVN_NAME_LANG_06,'LANG_07',DIVN_NAME_LANG_07,'LANG_08',DIVN_NAME_LANG_08,'LANG_09',DIVN_NAME_LANG_09,'LANG_10',DIVN_NAME_LANG_10),       DECODE(MM_LANG_CODE, 'ENG',DEPT_NAME ,'LANG_01',DEPT_NAME_LANG_01,'LANG_02',DEPT_NAME_LANG_02,'LANG_03',DEPT_NAME_LANG_03,'LANG_04',DEPT_NAME_LANG_04,'LANG_05',DEPT_NAME_LANG_05,'LANG_06',DEPT_NAME_LANG_06,'LANG_07',DEPT_NAME_LANG_07,'LANG_08',DEPT_NAME_LANG_08,'LANG_09',DEPT_NAME_LANG_09,'LANG_10',DEPT_NAME_LANG_10)
     FROM      FM_DIVISION,      FM_DEPARTMENT
     WHERE     DIVN_CODE      =  DEPT_DIVN_CODE
     AND       DIVN_CODE      =  M_DIVN_CODE
     AND       DEPT_CODE      =  M_DEPT_CODE;

--code added by partha MEFC_INT-1495639 on 12/04/2018
CURSOR C7 (P_DATE VARCHAR2 ,P_EMP_CODE VARCHAR2) IS
      SELECT SUM(LVAH_DAYS) FROM PT_LEAVE_APPLICATION_HEAD WHERE LVAH_COMP_CODE = P_COMP_CODE
      AND LVAH_EMP_CODE  = P_EMP_CODE
      AND P_DATE BETWEEN To_Char(lvah_appr_start_dt,'YYYYMM') AND To_Char(lvah_appr_end_dt,'YYYYMM')
      AND LVAH_APPR_DT IS NOT NULL;

M_LEAVE_DAYS NUMBER:=0; --added by partha MEFC_INT-1495639 on 12/04/2018

--added by partha MEFC_INT-1495639 on 12/04/2018
CURSOR C8 (P_DATE IN VARCHAR2,P_EMP_CODE VARCHAR2) IS
SELECT Sum(lwp_days)
      FROM pt_lwp
      WHERE LWP_COMP_CODE = P_COMP_CODE
      AND   LWP_EMP_CODE  = P_EMP_CODE
      AND   P_DATE BETWEEN To_Char(lwp_from_dt,'YYYYMM') AND To_Char(lwp_upto_dt,'YYYYMM')
      AND   To_Char(LWP_DT,'YYYYMM') BETWEEN P_FM_DT AND P_TO_DT
      AND   LWP_APPR_UID IS NOT NULL
      AND   LWP_APPR_DT IS NOT NULL;



M_LWP_DAYS NUMBER:=0;    --added by partha MEFC_INT-1495639 on 12/04/2018



   M_OT1_HRS                     NUMBER;
   M_OT2_HRS                     NUMBER;
   M_ATND_HRS_DAYS         NUMBER;
   M_FROM_DT                     VARCHAR2(6);
   M_UPTO_DT                     VARCHAR2(6);
   M_LAST_DAY                 VARCHAR2(3);
   M_LAST_DAY_1                 NUMBER; --added by partha MEFC_INT-1495639 on 12/04/2018

   M_PARA_VALUE             VARCHAR2(12);
   M_TOT_HRS                    NUMBER;
   M_TOT_OT                     NUMBER;
   M_TOT_HR_WRK             NUMBER;
   M_DIVN_NAME              VARCHAR2(240);
   M_DEPT_NAME        VARCHAR2(240);

BEGIN
   DELETE FROM PR267_TEMP WHERE prt_rep_key_no = P_REP_KEY_NO;

       MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;

   M_FROM_DT := P_FM_DT;
   M_UPTO_DT := P_TO_DT;

   FOR EMP IN C_EMP_ATTED ---FOR EMPLOYEE FROM EMP KEY
   LOOP
     EXIT WHEN C_EMP_ATTED%NOTFOUND;

        IF C6%ISOPEN THEN
             CLOSE C6;
        END IF;

      OPEN C6(EMP.EMP_DIVN_CODE,EMP.EMP_DEPT_CODE);
        FETCH C6 INTO M_DIVN_NAME,M_DEPT_NAME;

        WHILE M_FROM_DT <= M_UPTO_DT
        LOOP

              IF C2%ISOPEN THEN
                   CLOSE C2;
              END IF;

         OPEN C2(M_FROM_DT,EMP.EMP_CODE);
              FETCH C2 INTO M_ATND_HRS_DAYS;

         IF C2%NOTFOUND THEN
                 M_ATND_HRS_DAYS := 0;
              END IF;

              IF C3%ISOPEN THEN
                   CLOSE C3;
              END IF;

         OPEN C3(M_FROM_DT);
              FETCH C3 INTO M_LAST_DAY;
         CLOSE C3;
         --added by partha MEFC_INT-1495639 on 12/04/2018
              IF C7%ISOPEN THEN
                 CLOSE C7;
              END IF;

              OPEN C7(M_FROM_DT,EMP.EMP_CODE);
              FETCH C7 INTO  M_LEAVE_DAYS;
              CLOSE C7;
         --added by partha MEFC_INT-1495639 on 12/04/2018
              IF C8%ISOPEN THEN
                 CLOSE C8;
              END IF;

              OPEN C8(M_FROM_DT,EMP.EMP_CODE);
              FETCH C8 INTO  M_LWP_DAYS;
              CLOSE C8;

              IF C4%ISOPEN THEN
                    CLOSE C4;
              END IF;

         OPEN C4;
              FETCH C4 INTO M_PARA_VALUE;

              IF C5%ISOPEN THEN
                 CLOSE C5;
              END IF;
            --DUMMY('M_FROM_DT: '||M_FROM_DT||'EMP.EMP_CODE : '||EMP.EMP_CODE);
         OPEN C5(M_FROM_DT,EMP.EMP_CODE);--FOR FETCHING RECORDS FROM OVERTIME DETAIL
              FETCH C5 INTO M_OT1_HRS;--,M_OT2_HRS;

         IF C5%NOTFOUND THEN
                      M_OT1_HRS := 0;
                      M_OT2_HRS := 0;
              END IF;

            M_TOT_HRS            := NVL(TO_NUMBER(M_PARA_VALUE) * TO_NUMBER(M_LAST_DAY),0);


             M_TOT_OT             := NVL(M_OT1_HRS,0); --+ M_OT2_HRS,0);
             M_LAST_DAY_1:= Nvl(M_LAST_DAY,0) - Nvl(M_LEAVE_DAYS,0) - Nvl(M_LWP_DAYS,0);   --added by partha MEFC_INT-1495639 on 12/04/2018
             --DUMMY('M_PARA_VALUE'||M_PARA_VALUE||'M_LAST_DAY'||M_LAST_DAY||'M_ATND_HRS_DAYS'||M_ATND_HRS_DAYS||'M_OT1_HRS'||M_OT1_HRS);

         M_TOT_HR_WRK     := NVL(TO_NUMBER(M_PARA_VALUE) * (TO_NUMBER(M_LAST_DAY_1)-NVL(M_ATND_HRS_DAYS,0)) + NVL(M_OT1_HRS,0),0);  --addded by Gayathri P on 23/12/2014 for TARMAC_INT-1132186
          --DUMMY('M_TOT_HR_WRK'||M_TOT_HR_WRK);
              INSERT INTO PR267_TEMP(PRT_EMP_CODE,                PRT_EMP_NAME,                PRT_ATND_DT,                PRT_ATND_HRS_DAYS,
                                      PRT_OT1_HRS,                  PRT_OT2_HRS,                PRT_PARA_VALUE,            PRT_LAST_DAYS,
                                         PRT_TOT_HRS,                  PRT_TOT_OT,                    PRT_TOT_HR_WRK,     PRT_COMP_CODE,
                                        PRT_DIVN_CODE,              PRT_DIVN_NAME,            PRT_DEPT_CODE,            PRT_DEPT_NAME,
                                        PRT_LOCN_CODE,              PRT_GRADE_CODE,PRT_REP_KEY_NO)
                             VALUES       (EMP.EMP_CODE,                EMP.EMP_NAME,                M_FROM_DT,                    NVL(M_ATND_HRS_DAYS,0),
                                        NVL(M_OT1_HRS,0),        NVL(M_OT2_HRS,0),        M_PARA_VALUE,                M_LAST_DAY,
                                        M_TOT_HRS,                      M_TOT_OT,                        M_TOT_HR_WRK,                P_COMP_CODE,
                                        EMP.EMP_DIVN_CODE,      M_DIVN_NAME,                EMP.EMP_DEPT_CODE,    M_DEPT_NAME,
                                        EMP.EMP_LOCN_CODE,  EMP.EMP_PERSONAL_GRADE,P_REP_KEY_NO);
                                      M_FROM_DT := TO_CHAR(ADD_MONTHS(TO_DATE(M_FROM_DT,'YYYYMM'),1),'YYYYMM');

     END LOOP;

   M_FROM_DT := P_FM_DT;
   M_UPTO_DT := P_TO_DT;

   END LOOP;

END P_EMP_ATTEND_DETAILS_SUM;

PROCEDURE P_EMP_ATTEND_DETAILS_DET ( P_COMP_CODE         IN VARCHAR2,
                                     P_REP_KEY_NO        IN NUMBER,
                                     P_FM_DIVN           IN VARCHAR2,
                                     P_TO_DIVN           IN VARCHAR2,
                                     P_FM_DEPT           IN VARCHAR2,
                                     P_TO_DEPT           IN VARCHAR2,
                                     P_FM_LOCN           IN VARCHAR2,
                                     P_TO_LOCN           IN VARCHAR2,
                                     P_FM_DT             IN DATE,
                                     P_TO_DT             IN DATE,
                                     P_FM_EMP_CODE       IN VARCHAR2,
                                     P_TO_EMP_CODE       IN VARCHAR2,
                                     P_FM_GRADE          IN VARCHAR2,
                                     P_TO_GRADE          IN VARCHAR2) IS


                                     MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;
CURSOR C1 IS
      SELECT EMP_CODE,DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) EMP_NAME,EMP_DIVN_CODE,        EMP_DEPT_CODE,
             EMP_LOCN_CODE,        EMP_PERSONAL_GRADE,EMP_CALENDAR_CODE
      FROM   PM_EMP_KEY,PM_CALENDAR_DATE
      WHERE  EMP_STATUS IN  (1,2,3)
      AND    EMP_END_OF_SERVICE_DT  IS NULL
      AND    EMP_CALENDAR_CODE    =  CALDD_CODE
      AND    EMP_DIVN_CODE      BETWEEN P_FM_DIVN      AND P_TO_DIVN
      AND    EMP_DEPT_CODE      BETWEEN P_FM_DEPT      AND P_TO_DEPT
      AND    EMP_LOCN_CODE      BETWEEN P_FM_LOCN      AND P_TO_LOCN
      AND    EMP_CODE           BETWEEN P_FM_EMP_CODE  AND P_TO_EMP_CODE
      AND    EMP_PERSONAL_GRADE BETWEEN P_FM_GRADE     AND P_TO_GRADE
      AND    EMP_COMP_CODE = p_COMP_CODE
      AND    EMP_JOIN_DT <= P_TO_DT
      GROUP BY EMP_CODE,DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',
      EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',
      EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) ,EMP_DIVN_CODE,
      EMP_DEPT_CODE,EMP_LOCN_CODE,EMP_PERSONAL_GRADE,EMP_CALENDAR_CODE
      ORDER BY EMP_CODE;

CURSOR C2(P_EMP_CODE VARCHAR2,P_DATE VARCHAR2) IS
      SELECT   ATND_HRS_DAYS
      FROM     PT_ATTENDANCE_DETAIL
      WHERE    ATND_EMP_CODE                  =  P_EMP_CODE
      AND      TO_CHAR(ATND_DT,'DD/MM/RRRR')  = P_DATE;

CURSOR C4 IS
      SELECT   PARA_VALUE
      FROM     PM_COMP_PARAMETER
      WHERE    PARA_TYPE   =  PARA_CODE
      AND      PARA_CODE   =  'STD_WHRS';

CURSOR C5  (P_DATE VARCHAR2,P_EMP_CODE VARCHAR2) IS
      SELECT  SUM(NVL(OTD_TOTAL_OT_HRS,0) )
      FROM    PT_OVERTIME_DETAIL
      WHERE   OTD_EMP_CODE = P_EMP_CODE
      AND     TO_CHAR(OTD_DT,'DD/MM/RRRR')      = P_DATE;



CURSOR C6 (M_DIVN_CODE VARCHAR2,M_DEPT_CODE VARCHAR)IS
      SELECT  DECODE(MM_LANG_CODE, 'ENG',DIVN_NAME ,'LANG_01',DIVN_NAME_LANG_01,'LANG_02',DIVN_NAME_LANG_02,'LANG_03',DIVN_NAME_LANG_03,'LANG_04',DIVN_NAME_LANG_04,'LANG_05',DIVN_NAME_LANG_05,'LANG_06',DIVN_NAME_LANG_06,'LANG_07',DIVN_NAME_LANG_07,'LANG_08',DIVN_NAME_LANG_08,'LANG_09',DIVN_NAME_LANG_09,'LANG_10',DIVN_NAME_LANG_10),                        DECODE(MM_LANG_CODE, 'ENG',DEPT_NAME ,'LANG_01',DEPT_NAME_LANG_01,'LANG_02',DEPT_NAME_LANG_02,'LANG_03',DEPT_NAME_LANG_03,'LANG_04',DEPT_NAME_LANG_04,'LANG_05',DEPT_NAME_LANG_05,'LANG_06',DEPT_NAME_LANG_06,'LANG_07',DEPT_NAME_LANG_07,'LANG_08',DEPT_NAME_LANG_08,'LANG_09',DEPT_NAME_LANG_09,'LANG_10',DEPT_NAME_LANG_10)
      FROM    FM_DIVISION,                    FM_DEPARTMENT
      WHERE   DIVN_CODE         =             DEPT_DIVN_CODE
      AND     DIVN_CODE         =             M_DIVN_CODE
      AND     DEPT_CODE         =             M_DEPT_CODE;

CURSOR C7 (P_DATE VARCHAR2,CALD_CODE VARCHAR2) IS
      SELECT  CALDD_DT
      FROM         PM_CALENDAR_DATE
      WHERE     TO_CHAR(CALDD_DT,'DD/MM/RRRR') = P_DATE
      AND     CALDD_CODE                     = CALD_CODE;

--added by partha MEFC_INT-1495634 on 12/04/2018

CURSOR C8 (P_DATE IN DATE,P_EMP_CODE VARCHAR2) IS
      SELECT 'X' FROM PT_LEAVE_APPLICATION_HEAD WHERE
      LVAH_COMP_CODE = P_COMP_CODE
      AND LVAH_EMP_CODE  = P_EMP_CODE
      AND P_DATE BETWEEN LVAH_START_DT AND   LVAH_END_DT
      AND LVAH_APPR_DT IS NOT NULL;
      M_DUMMY VARCHAR2(1);    --added by partha MEFC_INT-1495634 on 12/04/2018

--added by partha MEFC_INT-1495634 on 12/04/2018

CURSOR C9 (P_DATE IN DATE,P_EMP_CODE VARCHAR2) IS
SELECT 'X'
      FROM   PT_LWP
      WHERE LWP_COMP_CODE = P_COMP_CODE
      AND   LWP_EMP_CODE  = P_EMP_CODE
      AND   P_DATE BETWEEN lwp_from_dt AND lwp_upto_dt
      AND   LWP_DT BETWEEN P_FM_DT AND P_TO_DT
      AND   LWP_APPR_UID IS NOT NULL
      AND   LWP_APPR_DT IS NOT NULL;



   M_OT1_HRS                     NUMBER;
   M_OT2_HRS                     NUMBER;
   M_ATND_HRS_DAYS         NUMBER;
   M_FROM_DT                     VARCHAR2(11);
   M_UPTO_DT                     VARCHAR2(11);
   M_LAST_DAY                 VARCHAR2(3);
   M_PARA_VALUE             VARCHAR2(10);
   M_TOT_HRS                    NUMBER;
   M_TOT_OT                     NUMBER;
   M_TOT_HR_WRK             NUMBER;
   M_DIVN_NAME              VARCHAR2(240);
   M_DEPT_NAME        VARCHAR2(240);
   M_ATND_FLAG        VARCHAR2(1):= 'N';
   M_OT_FLAG          VARCHAR2(1):= 'N';
   M_CALND_FLAG       VARCHAR2(1):= 'N';
   M_NO_OF_DAYS       NUMBER;
   M_CAL_DT                      DATE;

BEGIN
   DELETE FROM PR268_TEMP WHERE  prt_rep_key_no= P_REP_KEY_NO;

    MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;


   M_FROM_DT := TO_CHAR(P_FM_DT,'DD/MM/RRRR');
   M_UPTO_DT := TO_CHAR(P_TO_DT,'DD/MM/RRRR');

   FOR EMP IN C1 ---FOR EMPLOYEE FROM EMP KEY
   LOOP
     EXIT WHEN C1%NOTFOUND;

        IF C6%ISOPEN THEN
             CLOSE C6;
        END IF;

      OPEN C6(EMP.EMP_DIVN_CODE,EMP.EMP_DEPT_CODE);
        FETCH C6 INTO M_DIVN_NAME,M_DEPT_NAME;
             ----DUMMY('M_FROM_DT'||M_FROM_DT||'M_UPTO_DT'||M_UPTO_DT);
        WHILE   TO_DATE(M_FROM_DT,'DD/MM/RRRR') <= TO_DATE(M_UPTO_DT,'DD/MM/RRRR')
        LOOP
             --DUMMY(1);
           IF C2%ISOPEN THEN --- FOR FETCHING THE VALUE OF ABSTENT DAYS OR ABSNT HOURS FROM ATTENDACNE DETAIL TABLE
               CLOSE C2;
           END IF;

         OPEN C2(EMP.EMP_CODE,M_FROM_DT);
            FETCH C2 INTO M_ATND_HRS_DAYS;
           -- --DUMMY('M_ATND_HRS_DAYS'||M_ATND_HRS_DAYS||'M_FROM_DT'||M_FROM_DT);

         M_NO_OF_DAYS := 1;
         --DUMMY(2);
         IF C2%NOTFOUND THEN
               M_ATND_FLAG := 'N';
                 M_ATND_HRS_DAYS := 0;

              ELSE
                   M_NO_OF_DAYS := 1;
                    M_ATND_FLAG := 'Y';
              END IF;

         CLOSE C2;
         --DUMMY(3);
             IF C4%ISOPEN THEN
                 CLOSE C4;
              END IF;
              OPEN C4;
              FETCH C4 INTO M_PARA_VALUE;
              CLOSE C4;
          --DUMMY(4);
              IF C5%ISOPEN THEN
                 CLOSE C5;
              END IF;
              OPEN C5(M_FROM_DT,EMP.EMP_CODE);--FOR FETCHING RECORDS FROM OVERTIME DETAIL
              FETCH C5 INTO M_OT1_HRS;--,M_OT2_HRS;
              CLOSE C5;

              IF M_OT1_HRS IS NULL THEN --AND M_OT2_HRS IS NULL  THEN commented and added by deebak on 04/06/2007 for DANEM-159792
                    M_OT1_HRS := 0;
                 M_OT_FLAG := 'N';
              ELSE
                       M_NO_OF_DAYS := 1;
                       M_OT_FLAG := 'Y';
              END IF;

          --DUMMY(5);
              IF C7%ISOPEN THEN
                   CLOSE C7;
              END IF;

         OPEN C7(M_FROM_DT,EMP.EMP_CALENDAR_CODE);
              FETCH C7 INTO M_CAL_DT;

            IF C7%FOUND THEN
                      M_CALND_FLAG := 'Y';
              ELSE
                       M_CALND_FLAG := 'N';
              END IF;
          --DUMMY(6);
            IF M_CALND_FLAG = 'Y' AND (M_ATND_FLAG = 'Y' OR M_OT_FLAG = 'Y') THEN--HOLIDAY AND OT OR ATTENDANCE IS PRESENT
               M_TOT_HRS            := TO_NUMBER(M_PARA_VALUE) * TO_NUMBER(M_NO_OF_DAYS);
              M_TOT_OT             := NVL(M_OT1_HRS,0);-- + M_OT2_HRS,0);
              --M_TOT_HR_WRK     := NVL(TO_NUMBER(M_PARA_VALUE) * (TO_NUMBER(M_NO_OF_DAYS)-M_ATND_HRS_DAYS) + M_OT1_HRS,0);-- + M_OT2_HRS,0);
              IF C8%ISOPEN THEN
                 CLOSE C8;
              END IF;

              OPEN C8(To_Date(M_FROM_DT,'DD/MM/RRRR'),EMP.EMP_CODE);
              FETCH C8 INTO M_DUMMY;
              --changed by partha MEFC_INT-1495634 on 12/04/2018
              IF C8%FOUND THEN
                 M_TOT_HR_WRK :=0;
                 --DUMMY(1||'M_FROM_DT'||M_FROM_DT||M_TOT_HR_WRK);
              ELSE
                 M_TOT_HR_WRK     := NVL(TO_NUMBER(M_PARA_VALUE) * (TO_NUMBER(M_NO_OF_DAYS)-M_ATND_HRS_DAYS) + M_OT1_HRS,0);
                 --DUMMY(2||'M_FROM_DT'||M_FROM_DT||M_TOT_HR_WRK);
              END IF;
              CLOSE C8;
              --changed by partha MEFC_INT-1495634 on 12/04/2018
              IF C9%ISOPEN THEN
                 CLOSE C9;
              END IF;

              OPEN C9(To_Date(M_FROM_DT,'DD/MM/RRRR'),EMP.EMP_CODE);
              FETCH C9 INTO M_DUMMY;

               IF C9%FOUND THEN
                 M_TOT_HR_WRK :=0;
                 --DUMMY(3||'M_FROM_DT'||M_FROM_DT||M_TOT_HR_WRK);
               END IF;

               CLOSE C9;

           --DUMMY('A');
            INSERT INTO PR268_TEMP(PRT_EMP_CODE,                PRT_EMP_NAME,                      PRT_ATND_DT,                PRT_ATND_HRS_DAYS,
                                        PRT_OT1_HRS,                  PRT_OT2_HRS,                      PRT_PARA_VALUE,
                                        PRT_TOT_HRS,                  PRT_TOT_OT,                          PRT_TOT_HR_WRK,     PRT_COMP_CODE,
                                        PRT_DIVN_CODE,              PRT_DIVN_NAME,                  PRT_DEPT_CODE,            PRT_DEPT_NAME,
                                        PRT_LOCN_CODE,              PRT_GRADE_CODE,                  PRT_NO_OF_DAYS,PRT_REP_KEY_nO)
                              VALUES   (EMP.EMP_CODE,                EMP.EMP_NAME,                      M_FROM_DT,                  NVL(M_ATND_HRS_DAYS,0),
                                        NVL(M_OT1_HRS,0),        NVL(M_OT2_HRS,0),              M_PARA_VALUE,
                                        M_TOT_HRS,                      M_TOT_OT,                              M_TOT_HR_WRK,                P_COMP_CODE,
                                        EMP.EMP_DIVN_CODE,      M_DIVN_NAME,                      EMP.EMP_DEPT_CODE,    M_DEPT_NAME,
                                        EMP.EMP_LOCN_CODE,   EMP.EMP_PERSONAL_GRADE, NVL(M_NO_OF_DAYS,1),P_REP_KEY_NO);
            ELSIF M_CALND_FLAG = 'N' AND (M_ATND_FLAG = 'Y' OR    M_OT_FLAG = 'Y') THEN
            M_TOT_HRS            := TO_NUMBER(M_PARA_VALUE) * TO_NUMBER(M_NO_OF_DAYS);
              M_TOT_OT             := NVL(M_OT1_HRS,0);-- + M_OT2_HRS,0);

              --changed by partha MEFC_INT-1495634 on 12/04/2018
              IF C8%ISOPEN THEN
                 CLOSE C8;
              END IF;
              OPEN C8(To_Date(M_FROM_DT,'DD/MM/RRRR'),EMP.EMP_CODE);
              FETCH C8 INTO M_DUMMY;
              IF C8%FOUND THEN
                 M_TOT_HR_WRK :=0;
                 --DUMMY(4||'M_FROM_DT'||M_FROM_DT||M_TOT_HR_WRK);
              ELSE

          M_TOT_HR_WRK     := NVL(TO_NUMBER(M_PARA_VALUE) * (TO_NUMBER(M_NO_OF_DAYS)-M_ATND_HRS_DAYS) + M_OT1_HRS,0);-- + M_OT2_HRS,0);
          --DUMMY(5||'M_FROM_DT'||M_FROM_DT||M_TOT_HR_WRK);
          END IF;
          CLOSE C8;
          --changed by partha MEFC_INT-1495634 on 12/04/2018
          IF C9%ISOPEN THEN
                 CLOSE C9;
              END IF;

              OPEN C9(To_Date(M_FROM_DT,'DD/MM/RRRR'),EMP.EMP_CODE);
              FETCH C9 INTO M_DUMMY;

               IF C9%FOUND THEN
                 M_TOT_HR_WRK :=0;
                 --DUMMY(6||'M_FROM_DT'||M_FROM_DT||M_TOT_HR_WRK);
               END IF;

               CLOSE C9;
           /*DUMMY('B'||'EMP.EMP_CODE'||EMP.EMP_CODE||'EMP.EMP_NAME'||EMP.EMP_NAME||'M_FROM_DT'||M_FROM_DT||'M_ATND_HRS_DAYS'||M_ATND_HRS_DAYS||
           'M_OT1_HRS'||M_OT1_HRS||'M_OT2_HRS'||M_OT2_HRS||'M_PARA_VALUE'||M_PARA_VALUE||'M_TOT_HRS'||M_TOT_HRS||'M_TOT_OT'||M_TOT_OT||
           'M_TOT_HR_WRK'||M_TOT_HR_WRK||'P_COMP_CODE'||P_COMP_CODE||'EMP.EMP_DIVN_CODE'||EMP.EMP_DIVN_CODE||'M_DIVN_NAME'||M_DIVN_NAME||
           'EMP.EMP_DEPT_CODE'||EMP.EMP_DEPT_CODE||'M_DEPT_NAME'||M_DEPT_NAME||'EMP.EMP_LOCN_CODE'||EMP.EMP_LOCN_CODE||'EMP.EMP_PERSONAL_GRADE'||EMP.EMP_PERSONAL_GRADE);  */
               INSERT INTO PR268_TEMP(PRT_EMP_CODE,                PRT_EMP_NAME,                PRT_ATND_DT,                PRT_ATND_HRS_DAYS,
                                        PRT_OT1_HRS,                  PRT_OT2_HRS,                PRT_PARA_VALUE,
                                        PRT_TOT_HRS,                  PRT_TOT_OT,                    PRT_TOT_HR_WRK,     PRT_COMP_CODE,
                                        PRT_DIVN_CODE,              PRT_DIVN_NAME,            PRT_DEPT_CODE,            PRT_DEPT_NAME,
                                        PRT_LOCN_CODE,              PRT_GRADE_CODE,            PRT_NO_OF_DAYS,PRT_REP_KEY_nO)
                             VALUES      ( EMP.EMP_CODE,                EMP.EMP_NAME,                M_FROM_DT,                    NVL(M_ATND_HRS_DAYS,0),
                                        NVL(M_OT1_HRS,0),        NVL(M_OT2_HRS,0),        M_PARA_VALUE,
                                        M_TOT_HRS,                      M_TOT_OT,                        M_TOT_HR_WRK,                P_COMP_CODE,
                                        EMP.EMP_DIVN_CODE,      M_DIVN_NAME,                EMP.EMP_DEPT_CODE,    M_DEPT_NAME,
                                        EMP.EMP_LOCN_CODE,   EMP.EMP_PERSONAL_GRADE,NVL(M_NO_OF_DAYS,1),P_REP_KEY_NO);  --changed by partha MEFC_INT-1495634 on 12/04/2018
            ELSIF M_CALND_FLAG = 'N' AND (M_ATND_FLAG = 'N' OR    M_OT_FLAG = 'N') THEN
            M_TOT_HRS            := TO_NUMBER(M_PARA_VALUE) * TO_NUMBER(M_NO_OF_DAYS);
              M_TOT_OT             := NVL(M_OT1_HRS,0);-- + M_OT2_HRS,0);
              IF C8%ISOPEN THEN
                 CLOSE C8;
              END IF;

              OPEN C8(To_Date(M_FROM_DT,'DD/MM/RRRR'),EMP.EMP_CODE);

              FETCH C8 INTO M_DUMMY;
              --changed by partha MEFC_INT-1495634 on 12/04/2018
              IF C8%FOUND THEN
                 M_TOT_HR_WRK :=0;
                 --DUMMY(7||'M_FROM_DT'||M_FROM_DT||M_TOT_HR_WRK);
              ELSE
          M_TOT_HR_WRK     := NVL(TO_NUMBER(M_PARA_VALUE) * (TO_NUMBER(M_NO_OF_DAYS)-M_ATND_HRS_DAYS) + M_OT1_HRS,0);-- + M_OT2_HRS,0);
          --DUMMY(8||'M_FROM_DT'||M_FROM_DT||M_TOT_HR_WRK);
          END IF;
          CLOSE C8;
          --changed by partha MEFC_INT-1495634 on 12/04/2018
          IF C9%ISOPEN THEN
                 CLOSE C9;
              END IF;

              OPEN C9(To_Date(M_FROM_DT,'DD/MM/RRRR'),EMP.EMP_CODE);
              FETCH C9 INTO M_DUMMY;

               IF C9%FOUND THEN
                 M_TOT_HR_WRK :=0;
                 --DUMMY(9||'M_FROM_DT'||M_FROM_DT||M_TOT_HR_WRK);
               END IF;

               CLOSE C9;
           --DUMMY('C');
               INSERT INTO PR268_TEMP(PRT_EMP_CODE,                PRT_EMP_NAME,                PRT_ATND_DT,                PRT_ATND_HRS_DAYS,
                                      PRT_OT1_HRS,                PRT_OT2_HRS,                PRT_PARA_VALUE,
                                      PRT_TOT_HRS,                PRT_TOT_OT,                    PRT_TOT_HR_WRK,     PRT_COMP_CODE,
                                        PRT_DIVN_CODE,            PRT_DIVN_NAME,            PRT_DEPT_CODE,            PRT_DEPT_NAME,
                                        PRT_LOCN_CODE,            PRT_GRADE_CODE,            PRT_NO_OF_DAYS,prt_rep_key_no)
                              VALUES (  EMP.EMP_CODE,                EMP.EMP_NAME,                M_FROM_DT,                    NVL(M_ATND_HRS_DAYS,0),
                                        NVL(M_OT1_HRS,0),        NVL(M_OT2_HRS,0),        M_PARA_VALUE,
                                        M_TOT_HRS,                    M_TOT_OT,                        M_TOT_HR_WRK,                P_COMP_CODE,
                                        EMP.EMP_DIVN_CODE,    M_DIVN_NAME,                EMP.EMP_DEPT_CODE,    M_DEPT_NAME,
                                        EMP.EMP_LOCN_CODE,  EMP.EMP_PERSONAL_GRADE,NVL(M_NO_OF_DAYS,1),P_REP_KEY_NO);
            END IF;
            --Commented and added by shaibu on 12/01/2006 for persian calander changes
            --M_FROM_DT :=  TO_CHAR(TO_DATe(M_FROM_DT,'DD/MM/YYYY')+1,'DD/MM/YYYY');
            M_FROM_DT :=  TO_CHAR(TO_DATE(M_FROM_DT,'DD/MM/RRRR')+1,'DD/MM/RRRR');
   --    END IF;
       END LOOP;
     M_FROM_DT := TO_CHAR(P_FM_DT,'DD/MM/RRRR');
     M_UPTO_DT := TO_CHAR(P_TO_DT,'DD/MM/RRRR');
   -- END IF;
    END LOOP;

END P_EMP_ATTEND_DETAILS_DET;

PROCEDURE P_END_OF_SERVICE ( P_COMP_CODE    IN VARCHAR2,
                             P_REP_KEY_NO   IN NUMBER,
                             P_FM_TXN       IN VARCHAR2,
                             P_TO_TXN       IN VARCHAR2,
                             P_FM_EMP_CODE  IN VARCHAR2,
                             P_TO_EMP_CODE  IN VARCHAR2) IS

MM_LANG_CODE VARCHAR2(240);
CURSOR C_END_OF_SERVICE IS
      SELECT EOSH_EMP_CODE,EOSH_SYS_ID,EOSH_TXN_CODE,EOSH_NO,EOSH_COMP_CODE,InitCap(DECODE(MM_LANG_CODE,'ENG',EMP_LONG_NAME, 'LANG_01', EMP_LONG_NAME_LANG_01, 'LANG_02', EMP_LONG_NAME_LANG_02, 'LANG_03', EMP_LONG_NAME_LANG_03, 'LANG_04', EMP_LONG_NAME_LANG_04, 'LANG_05', EMP_LONG_NAME_LANG_05, 'LANG_06', EMP_LONG_NAME_LANG_06, 'LANG_07', EMP_LONG_NAME_LANG_07, 'LANG_08', EMP_LONG_NAME_LANG_08, 'LANG_09', EMP_LONG_NAME_LANG_09, 'LANG_10', EMP_LONG_NAME_LANG_10,EMP_LONG_NAME)) EMP_LONG_NAME,
               InitCap(DECODE(MM_LANG_CODE,'ENG',LOCN_DESC, 'LANG_01', LOCN_DESC_LANG_01, 'LANG_02', LOCN_DESC_LANG_02, 'LANG_03', LOCN_DESC_LANG_03, 'LANG_04', LOCN_DESC_LANG_04, 'LANG_05', LOCN_DESC_LANG_05, 'LANG_06', LOCN_DESC_LANG_06, 'LANG_07', LOCN_DESC_LANG_07, 'LANG_08', LOCN_DESC_LANG_08, 'LANG_09', LOCN_DESC_LANG_09, 'LANG_10', LOCN_DESC_LANG_10,LOCN_DESC)) LOCN_DESC,InitCap(DECODE(MM_LANG_CODE,'ENG',JOB_TITLE_DESC, 'LANG_01', JOB_TITLE_DESC_LANG_01, 'LANG_02', JOB_TITLE_DESC_LANG_02, 'LANG_03', JOB_TITLE_DESC_LANG_03, 'LANG_04', JOB_TITLE_DESC_LANG_04, 'LANG_05', JOB_TITLE_DESC_LANG_05, 'LANG_06', JOB_TITLE_DESC_LANG_06, 'LANG_07', JOB_TITLE_DESC_LANG_07, 'LANG_08', JOB_TITLE_DESC_LANG_08, 'LANG_09', JOB_TITLE_DESC_LANG_09, 'LANG_10', JOB_TITLE_DESC_LANG_10,JOB_TITLE_DESC)) JOB_TITLE_DESC,EMP_ANAL_CODE_2 "VISA_STATUS",
               InitCap(DECODE(MM_LANG_CODE,'ENG',DIVN_NAME, 'LANG_01', DIVN_NAME_LANG_01, 'LANG_02', DIVN_NAME_LANG_02, 'LANG_03', DIVN_NAME_LANG_03, 'LANG_04', DIVN_NAME_LANG_04, 'LANG_05', DIVN_NAME_LANG_05, 'LANG_06', DIVN_NAME_LANG_06, 'LANG_07', DIVN_NAME_LANG_07, 'LANG_08', DIVN_NAME_LANG_08, 'LANG_09', DIVN_NAME_LANG_09, 'LANG_10', DIVN_NAME_LANG_10,DIVN_NAME)) DIVN_NAME,InitCap(DECODE(MM_LANG_CODE,'ENG',DEPT_NAME, 'LANG_01', DEPT_NAME_LANG_01, 'LANG_02', DEPT_NAME_LANG_02, 'LANG_03', DEPT_NAME_LANG_03, 'LANG_04', DEPT_NAME_LANG_04, 'LANG_05', DEPT_NAME_LANG_05, 'LANG_06', DEPT_NAME_LANG_06, 'LANG_07', DEPT_NAME_LANG_07, 'LANG_08', DEPT_NAME_LANG_08, 'LANG_09', DEPT_NAME_LANG_09, 'LANG_10', DEPT_NAME_LANG_10,DEPT_NAME)) DEPT_NAME,EMP_JOIN_DT,EOSH_EFF_DT,
               ((EOSH_EFF_DT - EMP_JOIN_DT)+1) Service_days,EOSH_LV_ACCRUED_DAYS,EOSH_LV_ADJ_DAYS "ADJ_DAYS",
              EOSH_LV_TOTAL_DAYS "TOT_DAYS",DECODE(NVL(EOSH_GRAT_YN,'Y'),'Y',EOSH_GRAT_LC_AMOUNT,0) "GRATUITY",
               EOSH_LV_LC_AMOUNT "LEAVE_ACCRUAL",EOSH_LOAN_LC_AMOUNT "LOAN_AMT",EOSH_LV_ADV_LC_AMOUNT,
               EOSH_UNREC_LC_AMOUNT,EOSH_SAL_LC_AMOUNT,EOSH_NOTICE_PERIOD_PRN,EOSH_PRN_LC_AMOUNT,
             DECODE(EOSH_FLAG,'R','Resigned','T','Transfered','E','Terminated','N','Retirement','D','Death','O','Article 120') Status, -- ADDED BY ASHIK FOR THE ISSUE HTC-465511 ON 09/NOV/2010
             EOSH_APPR_UID,EOSH_GRAT_CODE,EOSH_GRAT_YN, EOSH_GRAT_DAYS
      FROM     PT_EOS_PROCESS,PM_EMP_KEY,PM_LOCN,PM_JOB_TITLE,FM_DIVISION,FM_DEPARTMENT
      WHERE     EOSH_TXN_CODE BETWEEN P_FM_TXN AND P_TO_TXN
      AND       EOSH_COMP_CODE    = P_COMP_CODE
      AND       EOSH_EMP_CODE BETWEEN P_FM_EMP_CODE AND P_TO_EMP_CODE
      AND       EMP_CODE          = EOSH_EMP_CODE
      AND       LOCN_CODE         = EMP_LOCN_CODE
      AND       JOB_TITLE_CODE    = EMP_JOB_TITLE_CODE
      AND       DIVN_CODE         = EMP_DIVN_CODE
      AND    DIVN_COMP_CODE    = P_COMP_CODE
      AND       DEPT_CODE         = EMP_DEPT_CODE
      AND    DEPT_COMP_CODE    = EMP_COMP_CODE
      AND       DEPT_DIVN_CODE    = EMP_DIVN_CODE;

CURSOR C1 (P_EMP_CODE IN VARCHAR2,P_EFF_DT DATE) IS
          SELECT SUM(ATND_HRS_DAYS) ABSNT_DAYS
          FROM   PT_ATTENDANCE_HEAD, PT_ATTENDANCE_DETAIL
          WHERE  ATND_EMP_CODE  = P_EMP_CODE
          AND    ATNH_COMP_CODE = P_COMP_CODE
          AND    ATNH_APPR_UID IS NOT NULL
          AND    ATNH_SYS_ID    = ATND_ATNH_SYS_ID
          AND    ATND_DT       <= P_EFF_DT;

CURSOR C2(P_EMP_CODE IN VARCHAR2,P_EFF_DT IN DATE) IS
          SELECT SUM(LWP_DAYS) LWP_DAYS
          FROM   PT_LWP
          WHERE  LWP_EMP_CODE  = P_EMP_CODE
          AND    LWP_COMP_CODE = P_COMP_CODE
          AND    LWP_APPR_UID IS NOT NULL
           AND    LWP_DT      <= P_EFF_DT;

CURSOR C_GRAT(P_GRAT_CODE IN VARCHAR2) IS
          SELECT NVL(GRAT_DEDUC_LV_DAYS,0) DED_DAYS
          FROM   PM_GRATUITY
          WHERE  GRAT_CODE = P_GRAT_CODE;

CURSOR C_GET_NO_OF_DAYS_PRESENT (P_EMP_CODE IN VARCHAR2,P_EFF_DT IN DATE) IS
      SELECT ATNH_TXN_CODE, SUM(NVL(ATND_HRS_DAYS,0)) ATND_HRS_DAYS
      FROM   PT_ATTENDANCE_DETAIL , PT_ATTENDANCE_HEAD, PM_EMP_PAY
      WHERE  ATND_ATNH_SYS_ID     = ATNH_SYS_ID
      AND    ATND_EMP_CODE        = P_EMP_CODE
      AND    ATNH_APPR_UID IS NOT NULL
      AND    ATND_DT             <= P_EFF_DT
      AND    NVL(ATND_PAY_TYPE,EMPY_PAY_TYPE) = EMPY_PAY_TYPE
      AND    EMPY_CODE = P_EMP_CODE
      GROUP BY ATNH_TXN_CODE
            UNION ALL
            SELECT PMAH_TXN_CODE ATNH_TXN_CODE,SUM(NVL(PMAD_PRESENT_DAYS,0))* -1 ATND_HRS_DAYS
            FROM   PT_PREV_MTH_ATTN_HEAD, PT_PREV_MTH_ATTN_DETAIL
            WHERE  PMAH_SYS_ID = PMAD_PMAH_SYS_ID
            AND    PMAH_APPR_UID IS NOT NULL
            AND    PMAD_EMP_CODE = P_EMP_CODE
            GROUP BY PMAH_TXN_CODE
            UNION ALL
            SELECT PMAH_TXN_CODE ATNH_TXN_CODE, SUM(NVL(PMAD_ABSENT_DAYS,0)) ATND_HRS_DAYS
            FROM   PT_PREV_MTH_ATTN_HEAD, PT_PREV_MTH_ATTN_DETAIL
            WHERE  PMAH_SYS_ID = PMAD_PMAH_SYS_ID
            AND    PMAH_APPR_UID IS NOT NULL
            AND    PMAD_EMP_CODE = P_EMP_CODE
            GROUP BY PMAH_TXN_CODE;



CURSOR EX_ABST(P_TXN_CODE IN VARCHAR2) IS
            SELECT VSSV_CODE, TO_NUMBER(VSSV_FIELD_01) VSSV_FIELD_01
            FROM   IM_VS_STATIC_VALUE
            WHERE  VSSV_VS_CODE = 'ABS_GRT_EX'
            AND    NVL(VSSV_FRZ_FLAG_NUM,'2') = '2'
            AND    VSSV_CODE = P_TXN_CODE;

   M_DED_DAYS         NUMBER;
   --M_ABSNT_DAYS       NUMBER;
   M_LWP_DAYS         NUMBER;
   M_TOT_DED_DAYS     NUMBER;
   --M_TOT_SERVICE_DAYS NUMBER;
   M_YRLY_WDAYS       NUMBER(12);

CURSOR C_YRLY_WDAYS IS
          SELECT TO_NUMBER(PARA_VALUE)
          FROM   PM_COMP_PARAMETER
          WHERE  PARA_COMP_CODE = P_COMP_CODE
          AND    PARA_CODE = 'YTD_WDAYS';

CURSOR C10 (P_EMPG_GRAT_DAYS NUMBER) IS
        SELECT floor((P_EMPG_GRAT_DAYS/NVL(M_YRLY_WDAYS,365))) || ' Years ' ||
                     FLOOR((P_EMPG_GRAT_DAYS- (floor((P_EMPG_GRAT_DAYS/NVL(M_YRLY_WDAYS,365)))*NVL(M_YRLY_WDAYS,365))) / (NVL(M_YRLY_WDAYS,365)/12))  || ' Months ' ||
                     ROUND(((P_EMPG_GRAT_DAYS- (floor((P_EMPG_GRAT_DAYS/NVL(M_YRLY_WDAYS,365)))* NVL(M_YRLY_WDAYS,365))) / (NVL(M_YRLY_WDAYS,365)/12) -
                     FLOOR((P_EMPG_GRAT_DAYS- (floor((P_EMPG_GRAT_DAYS/NVL(M_YRLY_WDAYS,365)))*NVL(M_YRLY_WDAYS,365))) / (NVL(M_YRLY_WDAYS,365)/12)) ) * (NVL(M_YRLY_WDAYS,365)/12),2) || ' Days' grat_days
        FROM DUAL;

CURSOR C3 (P_COMP_CODE IN VARCHAR2 , P_EMP_CODE IN VARCHAR2) IS
      SELECT    MAX(NVL(LVAH_RESU_DT,LVAH_APPR_END_DT))
        FROM      PT_LEAVE_APPLICATION_HEAD
        WHERE      LVAH_COMP_CODE = P_COMP_CODE
        AND        LVAH_EMP_CODE  = P_EMP_CODE
        AND     LVAH_APPR_UID IS NOT NULL
        AND     LVAH_CANC_UID IS NULL
        AND     LVAH_LV_TYPE_CODE = '1';

M_LAST_LEAVE    DATE;

----------------------------------

CURSOR C4(P_EMP_CODE IN VARCHAR2,P_EFF_DT IN DATE) IS
          SELECT SUM(LWP_DAYS) LWP_DAYS
          FROM   PT_LWP
          WHERE  LWP_EMP_CODE  = P_EMP_CODE
          AND    LWP_COMP_CODE = P_COMP_CODE
          AND    LWP_APPR_UID IS NOT NULL
          AND    LWP_DT BETWEEN M_LAST_LEAVE AND P_EFF_DT;

CURSOR C_GRAT_1(P_GRAT_CODE IN VARCHAR2) IS
          SELECT NVL(GRAT_DEDUC_LV_DAYS,0) DED_DAYS
          FROM   PM_GRATUITY
          WHERE  GRAT_CODE = P_GRAT_CODE;

CURSOR C_GET_NO_OF_DAYS_PRESENT_1(P_EMP_CODE IN VARCHAR2,P_EFF_DT IN DATE) IS
      SELECT ATNH_TXN_CODE, SUM(NVL(ATND_HRS_DAYS,0)) ATND_HRS_DAYS
      FROM   PT_ATTENDANCE_DETAIL , PT_ATTENDANCE_HEAD, PM_EMP_PAY
      WHERE  ATND_ATNH_SYS_ID     = ATNH_SYS_ID
      AND    ATND_EMP_CODE        = P_EMP_CODE
      AND    ATNH_APPR_UID IS NOT NULL
      AND    ATND_DT  BETWEEN M_LAST_LEAVE AND P_EFF_DT
      AND    NVL(ATND_PAY_TYPE,EMPY_PAY_TYPE) = EMPY_PAY_TYPE
      AND    EMPY_CODE = P_EMP_CODE
      GROUP BY ATNH_TXN_CODE
            UNION ALL
            SELECT PMAH_TXN_CODE ATNH_TXN_CODE,SUM(NVL(PMAD_PRESENT_DAYS,0))* -1 ATND_HRS_DAYS
            FROM   PT_PREV_MTH_ATTN_HEAD, PT_PREV_MTH_ATTN_DETAIL
            WHERE  PMAH_SYS_ID = PMAD_PMAH_SYS_ID
            AND    PMAH_APPR_UID IS NOT NULL
            AND    PMAD_EMP_CODE = P_EMP_CODE
            AND    PMAH_DT BETWEEN M_LAST_LEAVE AND P_EFF_DT
            GROUP BY PMAH_TXN_CODE
            UNION ALL
            SELECT PMAH_TXN_CODE ATNH_TXN_CODE, SUM(NVL(PMAD_ABSENT_DAYS,0)) ATND_HRS_DAYS
            FROM   PT_PREV_MTH_ATTN_HEAD, PT_PREV_MTH_ATTN_DETAIL
            WHERE  PMAH_SYS_ID = PMAD_PMAH_SYS_ID
            AND    PMAH_APPR_UID IS NOT NULL
            AND    PMAD_EMP_CODE = P_EMP_CODE
            AND    PMAH_DT BETWEEN M_LAST_LEAVE AND P_EFF_DT
            GROUP BY PMAH_TXN_CODE;

CURSOR EX_ABST_1(P_TXN_CODE IN VARCHAR2) IS
            SELECT VSSV_CODE, TO_NUMBER(VSSV_FIELD_01) VSSV_FIELD_01
            FROM IM_VS_STATIC_VALUE
            WHERE VSSV_VS_CODE = 'ABS_GRT_EX'
            AND NVL(VSSV_FRZ_FLAG_NUM,'2') = '2'
            AND VSSV_CODE = P_TXN_CODE;

CURSOR C_EARN(P_SYS_ID IN NUMBER,P_EMP_CODE IN VARCHAR2) IS
        SELECT    SUM(EOSD_LC_AMOUNT)
        FROM    PT_EOS_ALLW_DETAIL, PM_ALLOWANCE
        WHERE    EOSD_EOSH_SYS_ID = P_SYS_ID
        AND    EOSD_EMP_CODE = P_EMP_CODE
        AND    ALLW_CODE = EOSD_ALLW_CODE
        AND    ALLW_EARN_DEDUC = 'E';

CURSOR C_DEDUC(P_SYS_ID IN NUMBER,P_EMP_CODE IN VARCHAR2) IS
       SELECT    SUM(EOSD_LC_AMOUNT)
        FROM      PT_EOS_ALLW_DETAIL, PM_ALLOWANCE
       WHERE    EOSD_EOSH_SYS_ID = P_SYS_ID
       AND      EOSD_EMP_CODE = P_EMP_CODE
     AND      ALLW_CODE = EOSD_ALLW_CODE
       AND      ALLW_EARN_DEDUC = 'D';


CURSOR C_REP_VAL_3 IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;


    M_EARN    NUMBER(13,3):=0;
    M_DEDUC    NUMBER(13,3):=0;
    m_temp number:=1;

        M_ATD_TXN_CODE VARCHAR2(12);
        M_ATD_DAYS_EX  NUMBER;

M_DED_DAYS_1 NUMBER;
M_ABSNT_DAYS NUMBER;
M_LWP_DAYS_1 NUMBER;
M_TOT_DED_DAYS_1 NUMBER;
M_TOT_SERVICE_DAYS NUMBER;
M_LWP NUMBER;
M_ABSENT_DAYS NUMBER;
M_SERVICE_DAYS VARCHAR2(60);
M_SER_YR_MTH_DYS VARCHAR2(60);
M_SER_LAS NUMBER;
M_GRAT_YN VARCHAR2(30);
M_DEDUC_PRN NUMBER;
M_EARN_PRN NUMBER;
M_OTHER_EARN NUMBER;
M_OTHER_DEDUC NUMBER;
M_NET_PAY NUMBER;

M_CNTRY        VARCHAR2(240);
-- CURSOR ADDED BY PARTHA ALKHAMIS_INT-1445197 FOR GETTING NATIONALITY 08-10-2017
CURSOR C_NATIONALITY(C_EMP_CODE IN VARCHAR2) IS
    SELECT CNTRY_DESC
    FROM      PM_EMP_PERS,
                  PM_COUNTRY
    WHERE  EMPS_COMP_CODE = P_COMP_CODE
    AND         EMPS_CODE      = C_EMP_CODE
    AND         CNTRY_CODE     = EMPS_CNTRY_CODE;



BEGIN

   DELETE FROM PW_END_OF_SERVICE WHERE EOS_REP_KEY_NO = P_REP_KEY_NO;
     MM_LANG_CODE := NULL;

    IF C_REP_VAL_3%ISOPEN THEN
       CLOSE C_REP_VAL_3;
    END IF;

    OPEN C_REP_VAL_3;
    FETCH C_REP_VAL_3 INTO MM_LANG_CODE;
    CLOSE C_REP_VAL_3;
   FOR I IN C_END_OF_SERVICE
   LOOP

      IF C_NATIONALITY%ISOPEN THEN
             CLOSE C_NATIONALITY;
          END IF;

      OPEN  C_NATIONALITY(I.EOSH_EMP_CODE);
        FETCH C_NATIONALITY INTO M_CNTRY;
        CLOSE C_NATIONALITY;

      IF C_GRAT%ISOPEN THEN
         CLOSE C_GRAT;
      END IF;

      OPEN C_GRAT(I.EOSH_GRAT_CODE);
      FETCH C_GRAT INTO M_DED_DAYS;
        CLOSE C_GRAT;

        M_LWP_DAYS :=0;

      IF C2%ISOPEN THEN
         CLOSE C2;
      END IF;

        OPEN C2(I.EOSH_EMP_CODE,I.EOSH_EFF_DT);
        FETCH C2 INTO M_LWP_DAYS;
        CLOSE C2;

      IF NVL(M_LWP_DAYS,0) > NVL(M_DED_DAYS,0) THEN

         M_TOT_DED_DAYS := NVL(M_LWP_DAYS_1,0) - NVL(M_DED_DAYS_1,0);

      END IF;

      M_LWP := NVL(M_TOT_DED_DAYS,0);  -- ADDED BY ASHIK FOR ISSUE CONTECH-1056543 ON 22-APR-2014


        M_ABSNT_DAYS     :=0;
        M_ATD_DAYS_EX    :=0;

        FOR C_ABSNT_REC IN C_GET_NO_OF_DAYS_PRESENT(I.EOSH_EMP_CODE,I.EOSH_EFF_DT) LOOP

         IF EX_ABST%ISOPEN THEN CLOSE EX_ABST; END IF;
             OPEN EX_ABST(C_ABSNT_REC.ATNH_TXN_CODE);
             FETCH EX_ABST INTO M_ATD_TXN_CODE, M_ATD_DAYS_EX;

            IF EX_ABST%FOUND THEN

               IF NVL(C_ABSNT_REC.ATND_HRS_DAYS,0) > NVL(M_ATD_DAYS_EX,0) THEN
                          M_ABSNT_DAYS := NVL(C_ABSNT_REC.ATND_HRS_DAYS,0) - NVL(M_ATD_DAYS_EX,0);
                          M_TOT_DED_DAYS := NVL(M_TOT_DED_DAYS,0) + NVL(M_ABSNT_DAYS,0);
                     END IF;

            ELSE
                          M_TOT_DED_DAYS := NVL(M_TOT_DED_DAYS,0) + NVL(C_ABSNT_REC.ATND_HRS_DAYS,0);

            END IF;
       END LOOP;

        M_TOT_SERVICE_DAYS := NVL(I.Service_days,0)  - NVL(M_TOT_DED_DAYS,0);
     M_ABSENT_DAYS :=     NVL(M_TOT_DED_DAYS,0) - NVL(M_LWP,0);  -- ADDED BY ASHIK FOR ISSUE CONTECH-1056543 ON 22-APR-2014



       IF C_YRLY_WDAYS%ISOPEN THEN
            CLOSE C_YRLY_WDAYS;
       END IF;

       OPEN C_YRLY_WDAYS;
       FETCH C_YRLY_WDAYS INTO M_YRLY_WDAYS;
       CLOSE C_YRLY_WDAYS;

       IF NVL(M_TOT_SERVICE_DAYS,0) > 0 THEN

     IF C10%ISOPEN THEN
        CLOSE C10;
     END IF;

         OPEN C10(M_TOT_SERVICE_DAYS);
         FETCH C10 INTO M_SERVICE_DAYS;
         CLOSE C10;

     M_SER_YR_MTH_DYS := M_SERVICE_DAYS;
       END IF;


   IF C3%ISOPEN THEN
      CLOSE C3;
   END IF;

   OPEN C3(I.EOSH_EMP_CODE,I.EOSH_EFF_DT);
     FETCH C3 INTO M_LAST_LEAVE;
     CLOSE C3;

   IF M_LAST_LEAVE IS NULL THEN
          M_LAST_LEAVE := I.EMP_JOIN_DT;
     END IF;

     OPEN C_GRAT_1(I.EOSH_GRAT_CODE);
     FETCH C_GRAT_1 INTO M_DED_DAYS;
     CLOSE C_GRAT_1;

     M_LWP_DAYS :=0;

     OPEN C4(I.EOSH_EMP_CODE,I.EOSH_EFF_DT);
     FETCH C4 INTO M_LWP_DAYS;
     CLOSE C4;

   IF NVL(M_LWP_DAYS,0) > NVL(M_DED_DAYS,0) THEN
          M_TOT_DED_DAYS := NVL(M_LWP_DAYS,0) - NVL(M_DED_DAYS,0);
     END IF;



     M_ABSNT_DAYS     :=0;
     M_ATD_DAYS_EX    :=0;

     FOR C_ABSNT_REC IN C_GET_NO_OF_DAYS_PRESENT_1(I.EOSH_EMP_CODE,I.EOSH_EFF_DT) LOOP

       IF EX_ABST%ISOPEN THEN CLOSE EX_ABST; END IF;

       OPEN EX_ABST(C_ABSNT_REC.ATNH_TXN_CODE);
           FETCH EX_ABST INTO M_ATD_TXN_CODE, M_ATD_DAYS_EX;

       IF EX_ABST%FOUND THEN
                IF NVL(C_ABSNT_REC.ATND_HRS_DAYS,0) > NVL(M_ATD_DAYS_EX,0) THEN
                   M_ABSNT_DAYS := NVL(C_ABSNT_REC.ATND_HRS_DAYS,0) - NVL(M_ATD_DAYS_EX,0);
                      M_TOT_DED_DAYS := NVL(M_TOT_DED_DAYS,0) + NVL(M_ABSNT_DAYS,0);
                END IF;
          ELSE
                  M_TOT_DED_DAYS := NVL(M_TOT_DED_DAYS,0) + NVL(C_ABSNT_REC.ATND_HRS_DAYS,0);
          END IF;
     END LOOP;


   M_SER_LAS := ((I.EOSH_EFF_DT - M_LAST_LEAVE) - NVL(M_TOT_DED_DAYS,0)+1);

   IF NVL(I.EOSH_GRAT_YN,'Y') = 'N' THEN
        M_GRAT_YN := ('Gratuity Not Applicable');
   ELSE
        M_GRAT_YN := ('');
   END IF;

   M_DEDUC_PRN := 0;
   M_EARN_PRN := 0;

   IF NVL(I.EOSH_NOTICE_PERIOD_PRN,'R') = 'R' THEN
          M_DEDUC_PRN := NVL(I.EOSH_PRN_LC_AMOUNT,0);
     ELSE
          M_EARN_PRN := NVL(I.EOSH_PRN_LC_AMOUNT,0);
     END IF;

   OPEN C_EARN(I.EOSH_sys_id,I.EOSH_EMP_CODE);
     FETCH C_EARN INTO M_EARN;
     CLOSE C_EARN;
     M_OTHER_EARN := NVL(M_EARN,0);


     OPEN C_DEDUC(I.EOSH_sys_id,I.EOSH_EMP_CODE);
     FETCH C_DEDUC INTO M_DEDUC;
     CLOSE C_DEDUC;
     M_OTHER_DEDUC := NVL(M_DEDUC,0);

    --RETURN(m_temp);

  M_NET_PAY := NVL(I.GRATUITY,0) + NVL(I.LEAVE_ACCRUAL,0)
            + NVL(I.EOSH_SAL_LC_AMOUNT,0) + NVL(M_EARN_PRN,0)
            + NVL(M_OTHER_EARN,0)
            - NVL(I.LOAN_AMT,0) - NVL(M_OTHER_DEDUC,0)
            - NVL(I.EOSH_LV_ADV_LC_AMOUNT,0)
            - NVL(I.EOSH_UNREC_LC_AMOUNT,0)
            - NVL(M_DEDUC_PRN,0);
    --RETURN(M_NET_PAY);


      INSERT INTO PW_END_OF_SERVICE ( EOS_COMP_CODE,
                                      EOS_REP_KEY_NO,
                                      EOS_EMP_CODE,
                                      EOS_SYS_ID,
                                      EOS_TXN_CODE,
                                      EOS_NO,
                                      EOS_LANG_NAME,
                                      EOS_LOCN_DESC,
                                      EOS_JOB_TITLE,
                                      EOS_VISA_STATUS,
                                      EOS_DIVN_NAME,
                                      EOS_DEPT_NAME,
                                      EOS_JOIN_DT,
                                      EOS_EEF_DT,
                                      EOS_SERVICE_DAYS,
                                      EOS_LV_ACCRUED_DAYS,
                                      EOS_ADJ_DAYS,
                                      EOS_TOT_DAYS,
                                      EOS_LEAVE_ACCRUAL,
                                      EOS_LOAN_AMT,
                                      EOS_LV_ADV_LC_AMOUNT,
                                      EOS_UNREC_LC_AMOUNT,
                                      EOS_SAL_LC_AMOUNT,
                                      EOS_NOTICE_PERIOD_PRN,
                                      EOS_PRN_LC_AMOUNT,
                                      EOS_STATUS,
                                      EOS_APPR_UID,
                                      EOS_GRAT_CODE,
                                      EOS_GRAT_YN,
                                      EOS_GRAT_DAYS,
                                      EOS_LWP,
                                      EOS_ABSENT_DAYS,
                                      EOS_SER_YR_MTH_DYS,
                                      EOS_TOT_SER_DAYS,
                                      EOS_SER_LAST,
                                      EOS_CF_GRAT_YN,
                                      EOS_CR_EARN,
                                      EOS_OTHER_EARN,
                                      EOS_DEDUC_PRN,
                                      EOS_OTHER_DEDUC,
                                      EOS_NET_PAY,
                                      EOS_GRATUITY,
                                      EOS_NATIONALITY )
                             VALUES ( P_COMP_CODE,
                                      P_REP_KEY_NO,
                                      I.EOSH_EMP_CODE,
                                      I.EOSH_SYS_ID,
                                      I.EOSH_TXN_CODE,
                                      I.EOSH_NO,
                                      I.EMP_LONG_NAME,
                                      I.LOCN_DESC,
                                      I.JOB_TITLE_DESC,
                                      I.VISA_STATUS,
                                      I.DIVN_NAME,
                                      I.DEPT_NAME,
                                      I.EMP_JOIN_DT,
                                      I.EOSH_EFF_DT,
                                      I.Service_days,
                                      I.EOSH_LV_ACCRUED_DAYS,
                                      I.ADJ_DAYS,
                                      I.TOT_DAYS,
                                      I.LEAVE_ACCRUAL,
                                      I.LOAN_AMT,
                                      I.EOSH_LV_ADV_LC_AMOUNT,
                                      I.EOSH_UNREC_LC_AMOUNT,
                                      I.EOSH_SAL_LC_AMOUNT,
                                      I.EOSH_NOTICE_PERIOD_PRN,
                                      I.EOSH_PRN_LC_AMOUNT,
                                      I.STATUS,
                                      I.EOSH_APPR_UID,
                                      I.EOSH_GRAT_CODE,
                                      I.EOSH_GRAT_YN,
                                      I.EOSH_GRAT_DAYS,
                                      M_LWP_DAYS,
                                      M_ABSENT_DAYS,
                                      M_SER_YR_MTH_DYS,
                                      M_TOT_SERVICE_DAYS,
                                      M_SER_LAS,
                                      M_GRAT_YN,
                                      M_EARN_PRN,
                                      M_OTHER_EARN,
                                      M_DEDUC_PRN,
                                      M_OTHER_DEDUC,
                                      M_NET_PAY,
                                      I.GRATUITY,
                                      M_CNTRY);







   END LOOP;

END P_END_OF_SERVICE;

PROCEDURE P_GRATUITY_ACCRUAL ( P_COMP_CODE  IN VARCHAR2,
                               P_REP_KEY_NO IN NUMBER,
                               P_FM_EMP     IN VARCHAR2,
                               P_TO_EMP     IN VARCHAR2,
                               P_FM_DIVN    IN VARCHAR2,
                               P_TO_DIVN    IN VARCHAR2,
                               P_FM_DEPT    IN VARCHAR2,
                               P_TO_DEPT    IN VARCHAR2,
                               P_FM_LOCN    IN VARCHAR2,
                               P_TO_LOCN    IN VARCHAR2,
                               P_MTHYY      IN NUMBER) IS

 MM_LANG_CODE VARCHAR2(240);

CURSOR C_GRATUITY_ACCRUAL IS
      SELECT EMP_COMP_CODE, EMP_DIVN_CODE,
             --DECODE('ENG','ENG',EMP_DIVN_CODE ||'-'|| DIVN_SHORT_NAME,EMP_DIVN_CODE ||'-'|| DIVN_BL_SHORT_NAME) DIV,
             EMP_DIVN_CODE ||'-'|| DECODE(MM_LANG_CODE ,'ENG',DIVN_SHORT_NAME, 'LANG_01', DIVN_SHORT_NAME_LANG_01, 'LANG_02',
               DIVN_SHORT_NAME_LANG_02, 'LANG_03', DIVN_SHORT_NAME_LANG_03, 'LANG_04', DIVN_SHORT_NAME_LANG_04, 'LANG_05',
               DIVN_SHORT_NAME_LANG_05, 'LANG_06', DIVN_SHORT_NAME_LANG_06, 'LANG_07', DIVN_SHORT_NAME_LANG_07, 'LANG_08',
               DIVN_SHORT_NAME_LANG_08, 'LANG_09',DIVN_SHORT_NAME_LANG_09, 'LANG_10', DIVN_SHORT_NAME_LANG_10) DIV,
             --EMP_DEPT_CODE,DECODE('ENG','ENG',EMP_DEPT_CODE ||'-'|| DEPT_SHORT_NAME,EMP_DEPT_CODE ||'-'|| DEPT_BL_SHORT_NAME) DEPT,
               EMP_DEPT_CODE,EMP_DEPT_CODE ||'-'|| DECODE(MM_LANG_CODE ,'ENG',DEPT_SHORT_NAME, 'LANG_01', DEPT_SHORT_NAME_LANG_01, 'LANG_02',
               DEPT_SHORT_NAME_LANG_02, 'LANG_03', DEPT_SHORT_NAME_LANG_03, 'LANG_04', DEPT_SHORT_NAME_LANG_04, 'LANG_05',
               DEPT_SHORT_NAME_LANG_05, 'LANG_06', DEPT_SHORT_NAME_LANG_06, 'LANG_07', DEPT_SHORT_NAME_LANG_07, 'LANG_08',
               DEPT_SHORT_NAME_LANG_08, 'LANG_09',DEPT_SHORT_NAME_LANG_09, 'LANG_10', DEPT_SHORT_NAME_LANG_10) DEPT,
               --EMP_CODE,DECODE('ENG','ENG',EMP_NAME,EMP_BL_NAME) EMP_NAME,
               EMP_CODE,DECODE(MM_LANG_CODE ,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02',EMP_NAME_LANG_02, 'LANG_03',
               EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05',EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06,
               'LANG_07', EMP_NAME_LANG_07, 'LANG_08', EMP_NAME_LANG_08, 'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10) EMP_NAME,
               EMP_PERSONAL_GRADE,EMP_JOIN_DT,EMPG_BASIC_AMOUNT,EMPG_GRAT_DAYS,EMPG_CURR_CODE
      FROM   PM_EMP_KEY,PM_EMP_GRATUITY,PM_GRATUITY,FM_DIVISION,FM_DEPARTMENT
      WHERE  EMP_COMP_CODE = P_COMP_CODE
      AND    EMP_COMP_CODE = EMPG_COMP_CODE
      AND    EMP_COMP_CODE = DIVN_COMP_CODE
      AND    EMP_COMP_CODE = DEPT_COMP_CODE
      AND    EMP_DIVN_CODE = DIVN_CODE
      AND    DEPT_DIVN_CODE = DIVN_CODE
      AND    EMP_DEPT_CODE = DEPT_CODE
      AND    EMP_CODE         = EMPG_CODE
      AND    EMPG_GRAT_CODE = GRAT_CODE
      AND    EMP_DIVN_CODE  BETWEEN P_FM_DIVN AND P_TO_DIVN
      AND    EMP_DEPT_CODE  BETWEEN P_FM_DEPT AND P_TO_DEPT
      AND    EMP_LOCN_CODE  BETWEEN P_FM_LOCN AND P_TO_LOCN
      AND    EMPG_CODE      BETWEEN P_FM_EMP AND P_TO_EMP
      AND    TO_CHAR(EMPG_UPTO_DT,'RRRRMM') = P_MTHYY
      AND (EMP_STATUS IN('1','2','3')  OR EMP_END_OF_SERVICE_DT > LAST_DAY(TO_DATE(P_MTHYY,'YYYYMM'))
      OR EMP_END_OF_SERVICE_DT BETWEEN TO_DATE(P_MTHYY,'YYYYMM') AND LAST_DAY(TO_DATE(P_MTHYY,'YYYYMM')) );

   M_DAYS  NUMBER;

CURSOR C1 (P_JOIN_DT IN DATE,P_EMP_CODE IN VARCHAR2)IS
      SELECT MAX(NVL(EMPG_UPTO_DT,SYSDATE) - P_JOIN_DT +1 )
      FROM   PM_EMP_KEY,PM_EMP_GRATUITY,PM_GRATUITY
      WHERE  EMP_COMP_CODE = P_COMP_CODE
      AND    EMP_COMP_CODE = EMPG_COMP_CODE
      AND    EMP_CODE         = EMPG_CODE
      AND    EMPG_GRAT_CODE = GRAT_CODE
      AND    EMPG_CODE     = P_EMP_CODE
      AND    TO_CHAR(EMPG_UPTO_DT,'RRRRMM') <= P_MTHYY;

----------------------------------------
   M_NO_OF_DAYS_LEAVE                PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_DAYS_LV_DURING_CPMTH      PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_SL_LV_DAYS             PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_DAYS_LWP_DURING_CPMTH    PW_FS.NO_OF_DAYS%TYPE;



     M_GRAT_DEDUC_LV_DAYS  PW_FS.NO_OF_DAYS%TYPE;
     M_EMPY_PAY_TYPE VARCHAR2(1);
   M_NO_OF_DAYS_OR_HRS_PRESENT PW_FS.NO_OF_DAYS%TYPE;

CURSOR C_GET_GRATUITY_DETAILS(P_EMP_CODE IN VARCHAR2) IS
      SELECT  GRAT_DEDUC_LV_DAYS, EMPY_PAY_TYPE
      FROM    PM_GRATUITY, PM_EMP_PAY
      WHERE   EMPY_CODE = P_EMP_CODE
      AND     GRAT_CODE            = EMPY_GRATUITY_CODE ;

CURSOR C_GET_NO_OF_DAYS_PRESENT(P_JOIN_DT IN DATE,P_EMP_CODE IN VARCHAR2) IS
      SELECT ATNH_TXN_CODE, SUM(NVL(ATND_HRS_DAYS,0)) ATND_HRS_DAYS
      FROM   PT_ATTENDANCE_DETAIL , PT_ATTENDANCE_HEAD, PM_EMP_PAY
      WHERE  ATND_ATNH_SYS_ID     = ATNH_SYS_ID
      AND    ATND_EMP_CODE        = P_EMP_CODE
      AND    ATNH_APPR_UID IS NOT NULL
      AND    ATND_DT    BETWEEN   P_JOIN_DT AND LAST_DAY(TO_DATE(P_MTHYY,'YYYYMM'))
      AND    EMPY_CODE = ATND_EMP_CODE
      AND    NVL(ATND_PAY_TYPE,EMPY_PAY_TYPE) = EMPY_PAY_TYPE
      GROUP BY ATNH_TXN_CODE
      UNION ALL
          SELECT PMAH_TXN_CODE ATNH_TXN_CODE,SUM(NVL(PMAD_PRESENT_DAYS,0))* -1 ATND_HRS_DAYS
            FROM   PT_PREV_MTH_ATTN_HEAD, PT_PREV_MTH_ATTN_DETAIL
            WHERE  PMAH_SYS_ID = PMAD_PMAH_SYS_ID
            AND    PMAH_APPR_UID IS NOT NULL
            AND    PMAD_EMP_CODE = P_EMP_CODE
            GROUP BY PMAH_TXN_CODE
            UNION ALL
            SELECT PMAH_TXN_CODE ATNH_TXN_CODE, SUM(NVL(PMAD_ABSENT_DAYS,0)) ATND_HRS_DAYS
            FROM   PT_PREV_MTH_ATTN_HEAD, PT_PREV_MTH_ATTN_DETAIL
            WHERE  PMAH_SYS_ID = PMAD_PMAH_SYS_ID
            AND    PMAH_APPR_UID IS NOT NULL
            AND    PMAD_EMP_CODE = P_EMP_CODE
            GROUP BY PMAH_TXN_CODE;

CURSOR EX_ABST(P_TXN_CODE IN VARCHAR2) IS
            SELECT VSSV_CODE, TO_NUMBER(VSSV_FIELD_01) VSSV_FIELD_01
            FROM IM_VS_STATIC_VALUE
            WHERE VSSV_VS_CODE = 'ABS_GRT_EX'
            AND NVL(VSSV_FRZ_FLAG_NUM,'2') = '2'
            AND VSSV_CODE = P_TXN_CODE;

     M_ATD_TXN_CODE VARCHAR2(12);
     M_ATD_DAYS_EX  NUMBER;
     M_ABSNT_DAYS   NUMBER;

CURSOR C_EMP_LV_AND_RESUMPTION_DTLS(P_EMP_CODE IN VARCHAR2,P_JOIN_DT IN DATE) IS
          SELECT 'L'A_LR_TYPE,LWP_FROM_DT A_START_DT,LWP_UPTO_DT A_END_DT ,
                          TO_DATE('')                  A_RESUMPTION_DT       ,
                          LWP_DAYS                   A_NO_OF_DAYS_LEAVE
        FROM   PT_LWP
        WHERE  LWP_COMP_CODE             = P_COMP_CODE
        AND    LWP_EMP_CODE              = P_EMP_CODE
        AND  (
                (LWP_FROM_DT              BETWEEN  P_JOIN_DT AND LAST_DAY(TO_DATE(P_MTHYY,'YYYYMM'))
                OR LWP_UPTO_DT           BETWEEN  P_JOIN_DT AND LAST_DAY(TO_DATE(P_MTHYY,'YYYYMM')) )
                OR (P_JOIN_DT       BETWEEN LWP_FROM_DT  AND LWP_UPTO_DT
                OR  LAST_DAY(TO_DATE(P_MTHYY,'YYYYMM'))          BETWEEN LWP_FROM_DT AND LWP_UPTO_DT)
                )
    AND    LWP_APPR_UID  IS NOT NULL;

M_C_MTH_AMT  NUMBER;
M_C_MTH_AMT_FC NUMBER;
M_C_MTH_FC_AMT NUMBER;
M_C_MTH_AMT_TOT NUMBER;



CURSOR C_CUR_MTH_AMT(P_EMP_CODE IN VARCHAR2) IS
      SELECT SUM(NVL(EMPG_GRAT_PER_AMOUNT,0)) LC_AMT, SUM(NVL(EMPG_GRAT_PER_FC_AMOUNT,0)) FC_AMT
        FROM   PM_EMP_GRATUITY
        WHERE  EMPG_COMP_CODE = P_COMP_CODE
        AND    EMPG_CODE        = P_EMP_CODE
        AND    TO_CHAR(EMPG_UPTO_DT,'YYYYMM') <= P_MTHYY;

M_P_MTH_AMT  NUMBER;
M_P_MTH_AMT_FC NUMBER;
M_P_MTH_FC_AMT NUMBER;
M_P_MTH_AMT_TOT NUMBER;
M_CURRENT_MTH_PROV_FC NUMBER;
M_CURRENT_MTH_PROV  NUMBER;

CURSOR C_PRV_MTH_AMT(P_EMP_CODE IN VARCHAR2) IS
      SELECT SUM(NVL(EMPG_GRAT_PER_AMOUNT,0)) LC_AMT, SUM(NVL(EMPG_GRAT_PER_FC_AMOUNT,0)) FC_AMT
        FROM   PM_EMP_GRATUITY
        WHERE  EMPG_COMP_CODE = P_COMP_CODE
        AND    EMPG_CODE        = P_EMP_CODE
        AND    TO_CHAR(EMPG_UPTO_DT,'YYYYMM') <= TO_CHAR(ADD_MONTHS(TO_DATE(P_MTHYY,'YYYYMM'),-1),'YYYYMM');

CURSOR C_GET_M_LANG_CODE IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;


BEGIN

   DELETE FROM PW_GRATUITY_ACCRUAL WHERE GA_REP_KEY_NO = P_REP_KEY_NO;

   MM_LANG_CODE := NULL;

    IF C_GET_M_LANG_CODE%ISOPEN THEN
       CLOSE C_GET_M_LANG_CODE;
    END IF;

    OPEN C_GET_M_LANG_CODE;
    FETCH C_GET_M_LANG_CODE INTO MM_LANG_CODE;
    CLOSE C_GET_M_LANG_CODE;

   FOR I IN C_GRATUITY_ACCRUAL
   LOOP

      IF C1%ISOPEN THEN
             CLOSE C1;
        END IF;
        OPEN  C1(I.EMP_JOIN_DT,I.EMP_CODE);
        FETCH C1 INTO M_DAYS;
        CLOSE C1;

        IF C_GET_GRATUITY_DETAILS%ISOPEN THEN
             CLOSE C_GET_GRATUITY_DETAILS;
        END IF;

      OPEN C_GET_GRATUITY_DETAILS(I.EMP_CODE);
        FETCH C_GET_GRATUITY_DETAILS INTO M_GRAT_DEDUC_LV_DAYS, M_EMPY_PAY_TYPE;
        CLOSE C_GET_GRATUITY_DETAILS;

      M_NO_OF_DAYS_OR_HRS_PRESENT := 0;

        M_NO_OF_DAYS_LWP_DURING_CPMTH :=0;
        M_ABSNT_DAYS     :=0;
        M_ATD_DAYS_EX    :=0;

        FOR C_ABSNT_REC IN C_GET_NO_OF_DAYS_PRESENT (I.EMP_JOIN_DT,I.EMP_CODE) LOOP

         IF EX_ABST%ISOPEN THEN CLOSE EX_ABST; END IF; -- ADDED BY ASHIK FOR THE ISSUE AMZ-944245 ON 03-SEP-2013
             OPEN EX_ABST(C_ABSNT_REC.ATNH_TXN_CODE);
             FETCH EX_ABST INTO M_ATD_TXN_CODE, M_ATD_DAYS_EX;

            IF EX_ABST%FOUND THEN

               IF NVL(C_ABSNT_REC.ATND_HRS_DAYS,0) > NVL(M_ATD_DAYS_EX,0) THEN
                          M_ABSNT_DAYS := NVL(C_ABSNT_REC.ATND_HRS_DAYS,0) - NVL(M_ATD_DAYS_EX,0);
                          M_NO_OF_DAYS_OR_HRS_PRESENT := NVL(M_NO_OF_DAYS_OR_HRS_PRESENT,0) + NVL(M_ABSNT_DAYS,0);
                     END IF;
                ELSE
                       M_NO_OF_DAYS_OR_HRS_PRESENT := NVL(M_NO_OF_DAYS_OR_HRS_PRESENT,0) + NVL(C_ABSNT_REC.ATND_HRS_DAYS,0);
                END IF;
        END LOOP;
--:EMP_JOIN_DT AND LAST_DAY(:P_DT)

     IF M_EMPY_PAY_TYPE = 'M' THEN
          FOR C_LEAVE_REC IN C_EMP_LV_AND_RESUMPTION_DTLS (I.EMP_CODE,I.EMP_JOIN_DT)
          LOOP

      IF C_LEAVE_REC.A_LR_TYPE = 'L' THEN   -- Leave Details
                  IF C_LEAVE_REC.A_START_DT >= I.EMP_JOIN_DT AND
                      C_LEAVE_REC.A_END_DT   <= LAST_DAY(TO_DATE(P_MTHYY,'YYYYMM'))  THEN

                      M_NO_OF_DAYS_LV_DURING_CPMTH   :=    C_LEAVE_REC.A_END_DT
                                                     - C_LEAVE_REC.A_START_DT
                                                     + 1 ;
                 ELSIF C_LEAVE_REC.A_END_DT > LAST_DAY(TO_DATE(P_MTHYY,'YYYYMM')) THEN
                        M_NO_OF_DAYS_LV_DURING_CPMTH   := ( LAST_DAY(TO_DATE(P_MTHYY,'YYYYMM')) - C_LEAVE_REC.A_START_DT + 1 ) ;

                 END IF ;
                    M_NO_OF_DAYS_LWP_DURING_CPMTH  := NVL( M_NO_OF_DAYS_LWP_DURING_CPMTH ,0) +
                                              NVL(M_NO_OF_DAYS_LV_DURING_CPMTH,0);
            END IF;
          END LOOP ;

      M_NO_OF_DAYS_LWP_DURING_CPMTH := NVL(M_NO_OF_DAYS_LWP_DURING_CPMTH,0);
     END IF;

    IF (NVL(M_NO_OF_DAYS_LWP_DURING_CPMTH,0) > NVL(M_GRAT_DEDUC_LV_DAYS,0)) THEN
        M_NO_OF_DAYS_LWP_DURING_CPMTH      := M_NO_OF_DAYS_LWP_DURING_CPMTH - M_GRAT_DEDUC_LV_DAYS;
    ELSE
        M_NO_OF_DAYS_LWP_DURING_CPMTH      := 0;
    END IF;
     -- THE BELOW ADDED BY PARTHA     ALKHAMIS_INT-1445845
--    M_NO_OF_DAYS_OR_HRS_PRESENT := HRDBP_NO_DAYS_PRESENT_ABSENT(P_COMP_CODE,I.EMP_CODE, P_MTHYY,'P');--commented by bhuvaneshwari AMI_INT-1939565

    M_NO_OF_DAYS_LWP_DURING_CPMTH   := HRDBP_NO_DAYS_PRESENT_ABSENT(P_COMP_CODE,I.EMP_CODE, P_MTHYY,'L');

        M_DAYS      := NVL(M_DAYS,0)  - NVL(M_NO_OF_DAYS_OR_HRS_PRESENT,0) - NVL(M_NO_OF_DAYS_LWP_DURING_CPMTH,0);

    --RETURN (NVL(M_DAYS,0));

   IF C_CUR_MTH_AMT%ISOPEN THEN
          CLOSE C_CUR_MTH_AMT;
     END IF;
     OPEN  C_CUR_MTH_AMT(I.EMP_CODE);

     FETCH C_CUR_MTH_AMT INTO M_C_MTH_AMT, M_C_MTH_AMT_FC;
     CLOSE C_CUR_MTH_AMT;

     M_C_MTH_FC_AMT := M_C_MTH_AMT_FC;
     M_C_MTH_AMT_TOT  :=  (NVL(M_C_MTH_AMT,0));

   M_P_MTH_AMT:= 0;

   IF C_PRV_MTH_AMT%ISOPEN THEN
          CLOSE C_PRV_MTH_AMT;
     END IF;
     OPEN  C_PRV_MTH_AMT(I.EMP_cODE);

     FETCH C_PRV_MTH_AMT INTO M_P_MTH_AMT, M_P_MTH_AMT_FC;
     CLOSE C_PRV_MTH_AMT;

     M_P_MTH_FC_AMT := NVL(M_P_MTH_AMT_FC,0);
     M_P_MTH_AMT_TOT :=  (NVL(M_P_MTH_AMT,0));

   M_CURRENT_MTH_PROV_FC := (NVL(M_C_MTH_FC_AMT,0) - NVL(M_P_MTH_FC_AMT,0));
     M_CURRENT_MTH_PROV :=  (NVL(M_C_MTH_AMT_TOT,0) - NVL(M_P_MTH_AMT_TOT,0));

      INSERT INTO PW_GRATUITY_ACCRUAL ( GA_COMP_CODE,
                                        GA_REP_KEY_NO,
                                        GA_DIVN_CODE,
                                        GA_DIV,
                                        GA_DEPT_CODE,
                                        GA_DEPT,
                                        GA_EMP_CODE,
                                        GA_EMP_NAME,
                                        GA_PERSONAL_GRADE,
                                        GA_JOIN_DT,
                                        GA_BASIC_AMOUNT,
                                        GA_GRAT_DAYS,
                                        GA_CURR_CODE,
                                        GA_SERVICE_DAYS,
                                        GA_TOT_GRAT_ACCR_C_MTH,
                                        GA_TOT_GRAT_ACCR_P_MTH,
                                        GA_CURR_MTH_PROV,
                                        GA_C_MTH_FC_AMT,
                                        GA_P_MTH_FC_AMT,
                                        GA_CURR_MTH_PROV_FC)
                               VALUES ( P_COMP_CODE,
                                        P_REP_KEY_NO,
                                        I.EMP_DIVN_CODE,
                                        I.DIV,
                                        I.EMP_DEPT_CODE,
                                        I.DEPT,
                                        I.EMP_CODE,
                                        I.EMP_NAME,
                                        I.EMP_PERSONAL_GRADE,
                                        I.EMP_JOIN_DT,
                                        I.EMPG_BASIC_AMOUNT,
                                        I.EMPG_GRAT_DAYS,
                                        I.EMPG_CURR_CODE,
                                        M_DAYS,
                                        M_C_MTH_AMT_TOT,
                                        M_P_MTH_AMT_TOT,
                                        M_CURRENT_MTH_PROV,
                                        M_C_MTH_FC_AMT,
                                        M_P_MTH_FC_AMT,
                                        M_CURRENT_MTH_PROV_FC);




   END LOOP;


END P_GRATUITY_ACCRUAL;

PROCEDURE P_EAR_LATE_REG ( P_COMP_CODE    IN VARCHAR2,
                           P_REP_KEY_NO   IN NUMBER,
                           P_FM_DIVN      IN VARCHAR2,
                           P_TO_DIVN      IN VARCHAR2,
                           P_FM_DEPT      IN VARCHAR2,
                           P_TO_DEPT      IN VARCHAR2,
                           P_FM_LOCN      IN VARCHAR2,
                           P_TO_LOCN      IN VARCHAR2,
                           P_FM_DT        IN DATE,
                           P_TO_DT        IN DATE,
                           P_FM_EMP_CODE  IN VARCHAR2,
                           P_TO_EMP_CODE  IN VARCHAR2,
                           P_FM_GRADE     IN VARCHAR2,
                           P_TO_GRADE     IN VARCHAR2,
                           P_STATUS       IN VARCHAR2) IS

MM_LANG_CODE VARCHAR2(240);

CURSOR C_EAR_LATE_REG IS
      SELECT LVRH_EMP_CODE,--DECODE('ENG','ENG',EMP_NAME,EMP_BL_NAME) EMP,
               DECODE(MM_LANG_CODE ,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02',EMP_NAME_LANG_02, 'LANG_03',
               EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05',EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06,
               'LANG_07', EMP_NAME_LANG_07, 'LANG_08', EMP_NAME_LANG_08, 'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10) EMP,
               LVRH_TXN_CODE ||'-'|| LVRH_NO DOC,LVRH_DT,
               --DECODE('ENG','ENG',EMP_DIVN_CODE ||'-'|| DIVN_SHORT_NAME,EMP_DIVN_CODE ||'-'|| DIVN_BL_SHORT_NAME) DIVN,
               EMP_DIVN_CODE ||'-'|| DECODE(MM_LANG_CODE ,'ENG',DIVN_SHORT_NAME, 'LANG_01', DIVN_SHORT_NAME_LANG_01, 'LANG_02',
               DIVN_SHORT_NAME_LANG_02, 'LANG_03', DIVN_SHORT_NAME_LANG_03, 'LANG_04', DIVN_SHORT_NAME_LANG_04, 'LANG_05',
               DIVN_SHORT_NAME_LANG_05, 'LANG_06', DIVN_SHORT_NAME_LANG_06, 'LANG_07', DIVN_SHORT_NAME_LANG_07, 'LANG_08',
               DIVN_SHORT_NAME_LANG_08, 'LANG_09',DIVN_SHORT_NAME_LANG_09, 'LANG_10', DIVN_SHORT_NAME_LANG_10) DIVN,
               --DECODE('ENG','ENG',EMP_DEPT_CODE ||'-'|| DEPT_SHORT_NAME,EMP_DEPT_CODE ||'-'|| DEPT_BL_SHORT_NAME) DEPT,
               EMP_DEPT_CODE ||'-'|| DECODE(MM_LANG_CODE ,'ENG',DEPT_SHORT_NAME, 'LANG_01', DEPT_SHORT_NAME_LANG_01, 'LANG_02',
               DEPT_SHORT_NAME_LANG_02, 'LANG_03', DEPT_SHORT_NAME_LANG_03, 'LANG_04', DEPT_SHORT_NAME_LANG_04, 'LANG_05',
               DEPT_SHORT_NAME_LANG_05, 'LANG_06', DEPT_SHORT_NAME_LANG_06, 'LANG_07', DEPT_SHORT_NAME_LANG_07, 'LANG_08',
               DEPT_SHORT_NAME_LANG_08, 'LANG_09',DEPT_SHORT_NAME_LANG_09, 'LANG_10', DEPT_SHORT_NAME_LANG_10) DEPT,
               LVAH_APPR_START_DT,LVAH_APPR_END_DT,LVAH_APPR_DAYS,LVRH_START_DT,LVRH_RESU_DT,LVRH_DAYS,
             DECODE(NVL(LVRH_APPR_UID,'*'),'*','Unapproved','Approved')  STATUS
      FROM   PT_LEAVE_RESU_HEAD,PT_LEAVE_APPLICATION_HEAD,PM_EMP_KEY,FM_DIVISION,FM_DEPARTMENT
      WHERE  LVRH_COMP_CODE = P_COMP_CODE
      AND    LVAH_COMP_CODE = LVRH_COMP_CODE
      AND    LVAH_COMP_CODE = EMP_COMP_CODE
      AND    EMP_COMP_CODE  = DIVN_COMP_CODE
      AND    EMP_COMP_CODE  = DEPT_COMP_CODE
      AND    EMP_DIVN_CODE  = DIVN_CODE
      AND    DEPT_DIVN_CODE = DIVN_CODE
      AND    EMP_DEPT_CODE  = DEPT_CODE
      AND    LVRH_EMP_CODE  = EMP_CODE
      AND    LVAH_EMP_CODE  = EMP_CODE
      AND    LVAH_TXN_CODE  = LVRH_REF_TXN_CODE
      AND    LVAH_NO           = LVRH_REF_NO
      AND       EMP_DIVN_CODE BETWEEN  P_FM_DIVN AND P_TO_DIVN
      AND    EMP_DEPT_CODE BETWEEN  P_FM_DEPT AND P_TO_DEPT
      AND    EMP_LOCN_CODE BETWEEN  P_FM_LOCN AND P_TO_LOCN
      AND    LVRH_DT       BETWEEN  P_FM_DT          AND P_TO_DT
      AND    LVRH_EMP_CODE BETWEEN  P_FM_EMP_CODE  AND P_TO_EMP_CODE
      AND    EMP_PERSONAL_GRADE BETWEEN  P_FM_GRADE  AND P_TO_GRADE
      AND    LVRH_APPR_UID IS NOT NULL
      AND    LVRH_APPR_DT  IS NOT NULL
      AND    P_STATUS  = 'Approved'
      GROUP BY LVRH_EMP_CODE,DECODE(MM_LANG_CODE ,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02',EMP_NAME_LANG_02, 'LANG_03',
               EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05',EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06,
               'LANG_07', EMP_NAME_LANG_07, 'LANG_08', EMP_NAME_LANG_08, 'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10),LVRH_TXN_CODE,LVRH_NO,LVRH_DT,EMP_DIVN_CODE,EMP_DEPT_CODE,LVAH_APPR_START_DT,
               LVAH_APPR_END_DT,LVAH_APPR_DAYS,LVRH_START_DT,LVRH_RESU_DT,LVRH_DAYS,LVRH_APPR_UID,DECODE(MM_LANG_CODE ,'ENG',DIVN_SHORT_NAME, 'LANG_01', DIVN_SHORT_NAME_LANG_01, 'LANG_02',
               DIVN_SHORT_NAME_LANG_02, 'LANG_03', DIVN_SHORT_NAME_LANG_03, 'LANG_04', DIVN_SHORT_NAME_LANG_04, 'LANG_05',
               DIVN_SHORT_NAME_LANG_05, 'LANG_06', DIVN_SHORT_NAME_LANG_06, 'LANG_07', DIVN_SHORT_NAME_LANG_07, 'LANG_08',
               DIVN_SHORT_NAME_LANG_08, 'LANG_09',DIVN_SHORT_NAME_LANG_09, 'LANG_10', DIVN_SHORT_NAME_LANG_10),
               DECODE(MM_LANG_CODE ,'ENG',DEPT_SHORT_NAME, 'LANG_01', DEPT_SHORT_NAME_LANG_01, 'LANG_02',
               DEPT_SHORT_NAME_LANG_02, 'LANG_03', DEPT_SHORT_NAME_LANG_03, 'LANG_04', DEPT_SHORT_NAME_LANG_04, 'LANG_05',
               DEPT_SHORT_NAME_LANG_05, 'LANG_06', DEPT_SHORT_NAME_LANG_06, 'LANG_07', DEPT_SHORT_NAME_LANG_07, 'LANG_08',
               DEPT_SHORT_NAME_LANG_08, 'LANG_09',DEPT_SHORT_NAME_LANG_09, 'LANG_10', DEPT_SHORT_NAME_LANG_10)
      UNION ALL
      SELECT LVRH_EMP_CODE,--DECODE('ENG','ENG',EMP_NAME,EMP_BL_NAME) EMP_NAME,
               DECODE(MM_LANG_CODE ,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02',EMP_NAME_LANG_02, 'LANG_03',
               EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05',EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06,
               'LANG_07', EMP_NAME_LANG_07, 'LANG_08', EMP_NAME_LANG_08, 'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10) EMP_NAME,
               LVRH_TXN_CODE ||'-'|| LVRH_NO DOC,LVRH_DT,
               --DECODE('ENG','ENG',EMP_DIVN_CODE ||'-'|| DIVN_SHORT_NAME,EMP_DIVN_CODE ||'-'|| DIVN_BL_SHORT_NAME) DIVN,
               EMP_DIVN_CODE ||'-'|| DECODE(MM_LANG_CODE ,'ENG',DIVN_SHORT_NAME, 'LANG_01', DIVN_SHORT_NAME_LANG_01, 'LANG_02',
               DIVN_SHORT_NAME_LANG_02, 'LANG_03', DIVN_SHORT_NAME_LANG_03, 'LANG_04', DIVN_SHORT_NAME_LANG_04, 'LANG_05',
               DIVN_SHORT_NAME_LANG_05, 'LANG_06', DIVN_SHORT_NAME_LANG_06, 'LANG_07', DIVN_SHORT_NAME_LANG_07, 'LANG_08',
               DIVN_SHORT_NAME_LANG_08, 'LANG_09',DIVN_SHORT_NAME_LANG_09, 'LANG_10', DIVN_SHORT_NAME_LANG_10) DIVN,
               --DECODE('ENG','ENG',EMP_DEPT_CODE ||'-'|| DEPT_SHORT_NAME,EMP_DEPT_CODE ||'-'|| DEPT_BL_SHORT_NAME) DEPT,
               EMP_DEPT_CODE ||'-'|| DECODE(MM_LANG_CODE ,'ENG',DEPT_SHORT_NAME, 'LANG_01', DEPT_SHORT_NAME_LANG_01, 'LANG_02',
               DEPT_SHORT_NAME_LANG_02, 'LANG_03', DEPT_SHORT_NAME_LANG_03, 'LANG_04', DEPT_SHORT_NAME_LANG_04, 'LANG_05',
               DEPT_SHORT_NAME_LANG_05, 'LANG_06', DEPT_SHORT_NAME_LANG_06, 'LANG_07', DEPT_SHORT_NAME_LANG_07, 'LANG_08',
               DEPT_SHORT_NAME_LANG_08, 'LANG_09',DEPT_SHORT_NAME_LANG_09, 'LANG_10', DEPT_SHORT_NAME_LANG_10) DEPT,
               LVAH_APPR_START_DT,LVAH_APPR_END_DT,LVAH_APPR_DAYS,LVRH_START_DT,LVRH_RESU_DT,LVRH_DAYS,
             DECODE(NVL(LVRH_APPR_UID,'*'),'*','Unapproved','Approved')  STATUS
      FROM   PT_LEAVE_RESU_HEAD,PT_LEAVE_APPLICATION_HEAD,PM_EMP_KEY,FM_DIVISION,FM_DEPARTMENT
      WHERE  LVRH_COMP_CODE = P_COMP_CODE
      AND    LVAH_COMP_CODE = LVRH_COMP_CODE
      AND    LVAH_COMP_CODE = EMP_COMP_CODE
      AND    EMP_COMP_CODE  = DIVN_COMP_CODE
      AND    EMP_COMP_CODE  = DEPT_COMP_CODE
      AND    EMP_DIVN_CODE  = DIVN_CODE
      AND    DEPT_DIVN_CODE = DIVN_CODE
      AND    EMP_DEPT_CODE  = DEPT_CODE
      AND    LVRH_EMP_CODE  = EMP_CODE
      AND    LVAH_EMP_CODE  = EMP_CODE
      AND    LVAH_TXN_CODE  = LVRH_REF_TXN_CODE
      AND    LVAH_NO           = LVRH_REF_NO
      AND       EMP_DIVN_CODE BETWEEN  P_FM_DIVN AND P_TO_DIVN
      AND    EMP_DEPT_CODE BETWEEN  P_FM_DEPT AND P_TO_DEPT
      AND    EMP_LOCN_CODE BETWEEN P_FM_LOCN AND P_TO_LOCN
      AND    LVRH_DT       BETWEEN  P_FM_DT          AND P_TO_DT
      AND    LVRH_EMP_CODE BETWEEN  P_FM_EMP_CODE AND P_TO_EMP_CODE
      AND    EMP_PERSONAL_GRADE BETWEEN  P_FM_GRADE AND P_TO_GRADE
      AND    LVRH_APPR_UID IS NULL
      AND    LVRH_APPR_DT  IS NULL
      AND    P_STATUS  = 'Unapproved'
      GROUP BY LVRH_EMP_CODE,DECODE(MM_LANG_CODE ,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02',EMP_NAME_LANG_02, 'LANG_03',
               EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05',EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06,
               'LANG_07', EMP_NAME_LANG_07, 'LANG_08', EMP_NAME_LANG_08, 'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10),
               LVRH_TXN_CODE,LVRH_NO,LVRH_DT,EMP_DIVN_CODE,EMP_DEPT_CODE,LVAH_APPR_START_DT,
                 LVAH_APPR_END_DT,LVAH_APPR_DAYS,LVRH_START_DT,LVRH_RESU_DT,LVRH_DAYS,LVRH_APPR_UID,
               DECODE(MM_LANG_CODE ,'ENG',DIVN_SHORT_NAME, 'LANG_01', DIVN_SHORT_NAME_LANG_01, 'LANG_02',
               DIVN_SHORT_NAME_LANG_02, 'LANG_03', DIVN_SHORT_NAME_LANG_03, 'LANG_04', DIVN_SHORT_NAME_LANG_04, 'LANG_05',
               DIVN_SHORT_NAME_LANG_05, 'LANG_06', DIVN_SHORT_NAME_LANG_06, 'LANG_07', DIVN_SHORT_NAME_LANG_07, 'LANG_08',
               DIVN_SHORT_NAME_LANG_08, 'LANG_09',DIVN_SHORT_NAME_LANG_09, 'LANG_10', DIVN_SHORT_NAME_LANG_10),
                 DECODE(MM_LANG_CODE ,'ENG',DEPT_SHORT_NAME, 'LANG_01', DEPT_SHORT_NAME_LANG_01, 'LANG_02',
               DEPT_SHORT_NAME_LANG_02, 'LANG_03', DEPT_SHORT_NAME_LANG_03, 'LANG_04', DEPT_SHORT_NAME_LANG_04, 'LANG_05',
               DEPT_SHORT_NAME_LANG_05, 'LANG_06', DEPT_SHORT_NAME_LANG_06, 'LANG_07', DEPT_SHORT_NAME_LANG_07, 'LANG_08',
               DEPT_SHORT_NAME_LANG_08, 'LANG_09',DEPT_SHORT_NAME_LANG_09, 'LANG_10', DEPT_SHORT_NAME_LANG_10)
      UNION ALL
      SELECT LVRH_EMP_CODE,--DECODE('ENG','ENG',EMP_NAME,EMP_BL_NAME) EMP_NAME,
               DECODE(MM_LANG_CODE ,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02',EMP_NAME_LANG_02, 'LANG_03',
               EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05',EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06,
               'LANG_07', EMP_NAME_LANG_07, 'LANG_08', EMP_NAME_LANG_08, 'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10) EMP_NAME,
               LVRH_TXN_CODE ||'-'|| LVRH_NO DOC,LVRH_DT,
               --DECODE('ENG','ENG',EMP_DIVN_CODE ||'-'|| DIVN_SHORT_NAME, DIVN_BL_SHORT_NAME) DIVN,
               EMP_DIVN_CODE ||'-'|| DECODE(MM_LANG_CODE ,'ENG',DIVN_SHORT_NAME, 'LANG_01', DIVN_SHORT_NAME_LANG_01, 'LANG_02',
               DIVN_SHORT_NAME_LANG_02, 'LANG_03', DIVN_SHORT_NAME_LANG_03, 'LANG_04', DIVN_SHORT_NAME_LANG_04, 'LANG_05',
               DIVN_SHORT_NAME_LANG_05, 'LANG_06', DIVN_SHORT_NAME_LANG_06, 'LANG_07', DIVN_SHORT_NAME_LANG_07, 'LANG_08',
               DIVN_SHORT_NAME_LANG_08, 'LANG_09',DIVN_SHORT_NAME_LANG_09, 'LANG_10', DIVN_SHORT_NAME_LANG_10) DIVN,
               --DECODE('ENG','ENG', EMP_DEPT_CODE ||'-'|| DEPT_SHORT_NAME,DEPT_BL_SHORT_NAME) DEPT,
               EMP_DEPT_CODE ||'-'|| DECODE(MM_LANG_CODE ,'ENG',DEPT_SHORT_NAME, 'LANG_01', DEPT_SHORT_NAME_LANG_01, 'LANG_02',
               DEPT_SHORT_NAME_LANG_02, 'LANG_03', DEPT_SHORT_NAME_LANG_03, 'LANG_04', DEPT_SHORT_NAME_LANG_04, 'LANG_05',
               DEPT_SHORT_NAME_LANG_05, 'LANG_06', DEPT_SHORT_NAME_LANG_06, 'LANG_07', DEPT_SHORT_NAME_LANG_07, 'LANG_08',
               DEPT_SHORT_NAME_LANG_08, 'LANG_09',DEPT_SHORT_NAME_LANG_09, 'LANG_10', DEPT_SHORT_NAME_LANG_10) DEPT,
               LVAH_APPR_START_DT,LVAH_APPR_END_DT,LVAH_APPR_DAYS,LVRH_START_DT,LVRH_RESU_DT,LVRH_DAYS,
             DECODE(NVL(LVRH_APPR_UID,'*'),'*','Unapproved','Approved')STATUS
      FROM   PT_LEAVE_RESU_HEAD,PT_LEAVE_APPLICATION_HEAD,PM_EMP_KEY,FM_DIVISION,FM_DEPARTMENT
      WHERE  LVRH_COMP_CODE = P_COMP_CODE
      AND    LVAH_COMP_CODE = LVRH_COMP_CODE
      AND    LVAH_COMP_CODE = EMP_COMP_CODE
      AND    EMP_COMP_CODE  = DIVN_COMP_CODE
      AND    EMP_COMP_CODE  = DEPT_COMP_CODE
      AND    EMP_DIVN_CODE  = DIVN_CODE
      AND    DEPT_DIVN_CODE = DIVN_CODE
      AND    EMP_DEPT_CODE  = DEPT_CODE
      AND    LVRH_EMP_CODE  = EMP_CODE
      AND    LVAH_EMP_CODE  = EMP_CODE
      AND    LVAH_TXN_CODE  = LVRH_REF_TXN_CODE
      AND    LVAH_NO           = LVRH_REF_NO
      AND       EMP_DIVN_CODE BETWEEN  P_FM_DIVN AND P_TO_DIVN
      AND    EMP_DEPT_CODE BETWEEN  P_FM_DEPT AND P_TO_DEPT
      AND    EMP_LOCN_CODE BETWEEN  P_FM_LOCN AND P_TO_LOCN
      AND    LVRH_DT       BETWEEN  P_FM_DT          AND P_TO_DT
      AND    LVRH_EMP_CODE BETWEEN  P_FM_EMP_CODE  AND P_TO_EMP_CODE
      AND    EMP_PERSONAL_GRADE BETWEEN  P_FM_GRADE  AND P_TO_GRADE
      AND    P_STATUS  = 'All'
      GROUP BY LVRH_EMP_CODE,DECODE(MM_LANG_CODE ,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02',EMP_NAME_LANG_02, 'LANG_03',
               EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05',EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06,
               'LANG_07', EMP_NAME_LANG_07, 'LANG_08', EMP_NAME_LANG_08, 'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10),
               LVRH_TXN_CODE,LVRH_NO,LVRH_DT,EMP_DIVN_CODE,EMP_DEPT_CODE,LVAH_APPR_START_DT,
                 LVAH_APPR_END_DT,LVAH_APPR_DAYS,LVRH_START_DT,LVRH_RESU_DT,LVRH_DAYS,LVRH_APPR_UID,
               DECODE(MM_LANG_CODE ,'ENG',DIVN_SHORT_NAME, 'LANG_01', DIVN_SHORT_NAME_LANG_01, 'LANG_02',
               DIVN_SHORT_NAME_LANG_02, 'LANG_03', DIVN_SHORT_NAME_LANG_03, 'LANG_04', DIVN_SHORT_NAME_LANG_04, 'LANG_05',
               DIVN_SHORT_NAME_LANG_05, 'LANG_06', DIVN_SHORT_NAME_LANG_06, 'LANG_07', DIVN_SHORT_NAME_LANG_07, 'LANG_08',
               DIVN_SHORT_NAME_LANG_08, 'LANG_09',DIVN_SHORT_NAME_LANG_09, 'LANG_10', DIVN_SHORT_NAME_LANG_10),DECODE(MM_LANG_CODE ,'ENG',DEPT_SHORT_NAME, 'LANG_01', DEPT_SHORT_NAME_LANG_01, 'LANG_02',
               DEPT_SHORT_NAME_LANG_02, 'LANG_03', DEPT_SHORT_NAME_LANG_03, 'LANG_04', DEPT_SHORT_NAME_LANG_04, 'LANG_05',
               DEPT_SHORT_NAME_LANG_05, 'LANG_06', DEPT_SHORT_NAME_LANG_06, 'LANG_07', DEPT_SHORT_NAME_LANG_07, 'LANG_08',
               DEPT_SHORT_NAME_LANG_08, 'LANG_09',DEPT_SHORT_NAME_LANG_09, 'LANG_10', DEPT_SHORT_NAME_LANG_10);

CURSOR C1(P_EMP_CODE IN VARCHAR2) IS
       SELECT DECODE(LVRH_WO_PAY_YN,'Y','LEAVE WITHOUT PAY')
       FROM   PT_LEAVE_RESU_HEAD,
                PT_LEAVE_APPLICATION_HEAD
       WHERE  LVRH_COMP_CODE = P_COMP_CODE
       AND    LVAH_COMP_CODE = LVRH_COMP_CODE
       AND    LVRH_EMP_CODE  = P_EMP_CODE
       AND    LVRH_EMP_CODE  = LVAH_EMP_CODE
       AND    LVAH_TXN_CODE  = LVRH_REF_TXN_CODE
       AND    LVAH_NO             = LVRH_REF_NO
       AND    LVRH_ADJ_SAME_FUTURE_YN <> 'Y';

CURSOR C2(P_EMP_CODE IN VARCHAR2) IS
        SELECT DECODE(LVRH_ADJ_SAME_FUTURE_YN,'Y','ADJUSTED WITH THE SAME CATEGORY')
        FROM   PT_LEAVE_RESU_HEAD,PT_LEAVE_APPLICATION_HEAD
        WHERE  LVRH_COMP_CODE = P_COMP_CODE
        AND    LVAH_COMP_CODE = LVRH_COMP_CODE
        AND    LVRH_EMP_CODE  = P_EMP_CODE
        AND    LVRH_EMP_CODE  = LVAH_EMP_CODE
        AND    LVAH_TXN_CODE  = LVRH_REF_TXN_CODE
        AND    LVAH_NO             = LVRH_REF_NO
        AND    LVRH_WO_PAY_YN <> 'Y';

   M_LWP_STATUS        VARCHAR2(20);
   M_SM_CATG_STATUS VARCHAR2(20);
   M_ADJ_DAYS NUMBER;
   M_ADJ_STATUS     VARCHAR2(20);

   CURSOR C_GET_LANG_CODE IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;


BEGIN

   DELETE FROM PW_EAR_LATE_REG WHERE ELR_REP_KEY_NO = P_REP_KEY_NO;
    /*DUMMY('P_COMP_CODE = '||P_COMP_CODE||'P_REP_KEY_NO = '|| P_REP_KEY_NO||'P_FM_DIVN = '|| P_FM_DIVN||
    'P_TO_DIVN = '|| P_TO_DIVN||'P_FM_DEPT = '|| P_FM_DEPT||'P_TO_DEPT = '|| P_TO_DEPT||'P_FM_LOCN = '|| P_FM_LOCN||
    'P_TO_LOCN = '|| P_TO_LOCN||'P_FM_DT = '|| P_FM_DT||'P_TO_DT = '|| P_TO_DT||'P_FM_EMP_CODE = '||P_FM_EMP_CODE||
    'P_TO_EMP_CODE = '|| P_TO_EMP_CODE||'P_FM_GRADE = '|| P_FM_GRADE||'P_TO_GRADE = '|| P_TO_GRADE||'P_STATUS = '|| P_STATUS);  */

    MM_LANG_CODE := NULL;

    IF C_GET_LANG_CODE%ISOPEN THEN
       CLOSE C_GET_LANG_CODE;
    END IF;

    OPEN C_GET_LANG_CODE;
    FETCH C_GET_LANG_CODE INTO MM_LANG_CODE;
    CLOSE C_GET_LANG_CODE;

   FOR I IN C_EAR_LATE_REG
   LOOP
    --DUMMY(2);
   M_ADJ_DAYS := (NVL(I.LVRH_DAYS,0)) - (NVL(I.LVAH_APPR_DAYS,0));

      IF C1%ISOPEN THEN
             CLOSE C1;
        END IF;

      OPEN C1(I.LVRH_EMP_CODE);
        FETCH C1 INTO M_LWP_STATUS;
        CLOSE C1;

        IF C2%ISOPEN THEN
             CLOSE C2;
        END IF;
      --DUMMY(3);
      OPEN C2 (I.LVRH_EMP_CODE);
        FETCH C2 INTO M_SM_CATG_STATUS;
        CLOSE C2;

        IF M_LWP_STATUS = 'N' AND M_SM_CATG_STATUS = 'Y' THEN
          M_ADJ_STATUS:= (M_SM_CATG_STATUS) ;
        ELSE
            M_ADJ_STATUS :=  (M_LWP_STATUS) ;
      END IF;
     --DUMMY(4);
      INSERT INTO PW_EAR_LATE_REG ( ELR_COMP_CODE,
                                    ELR_REP_KEY_NO,
                                    ELR_EMP_CODE,
                                    ELR_EMP_NAME,
                                    ELR_TXN_NO,
                                    ELR_DT,
                                    ELR_DIVN,
                                    ELR_DEPT,
                                    ELR_APPR_START_DT,
                                    ELR_APPR_END_DT,
                                    ELR_APPR_DAYS,
                                    ELR_START_DT,
                                    ELR_RESU_DT,
                                    ELR_DAYS,
                                    ELR_ID,
                                    ELR_ADJ_DAYS,
                                    ELR_ADJ_STATUS)
                           VALUES ( P_COMP_CODE,
                                    P_REP_KEY_NO,
                                    I.LVRH_EMP_CODE,
                                    I.EMP,
                                    I.DOC,
                                    I.LVRH_DT,
                                    I.DIVN,
                                    I.DEPT,
                                    I.LVAH_APPR_START_DT,
                                    I.LVAH_APPR_END_DT,
                                    I.LVAH_APPR_DAYS,
                                    I.LVRH_START_DT,
                                    I.LVRH_RESU_DT,
                                    I.LVRH_DAYS,
                                    I.STATUS,
                                    M_ADJ_DAYS,
                                    M_ADJ_STATUS);

   END LOOP;
  COMMIT;
END P_EAR_LATE_REG;

PROCEDURE P_ADV_RECOV ( P_COMP_CODE    IN VARCHAR2,
                        P_REP_KEY_NO   IN NUMBER,
                        P_FM_DIVN      IN VARCHAR2,
                        P_TO_DIVN      IN VARCHAR2,
                        P_FM_DEPT      IN VARCHAR2,
                        P_TO_DEPT      IN VARCHAR2,
                        P_FM_LOCN      IN VARCHAR2,
                        P_TO_LOCN      IN VARCHAR2,
                        P_FM_LOAN_DT   IN DATE,
                        P_TO_LOAN_DT   IN DATE,
                        P_FM_INS_DT    IN DATE,
                        P_TO_INS_DT    IN DATE,
                        P_FM_EMP       IN VARCHAR2,
                        P_TO_EMP       IN VARCHAR2,
                        P_FM_LOAN_TYPE IN VARCHAR2,
                        P_TO_LOAN_TYPE IN VARCHAR2,
                        P_STATUS       IN VARCHAR2) IS

   MM_LANG_CODE VARCHAR2(240);

CURSOR C_ADV_RECO IS
      SELECT --EMP_DIVN_CODE ||'-'|| DIVN_SHORT_NAME DIVN,
              DECODE(MM_LANG_CODE ,'ENG',DIVN_SHORT_NAME, 'LANG_01', DIVN_SHORT_NAME_LANG_01, 'LANG_02',
              DIVN_SHORT_NAME_LANG_02, 'LANG_03', DIVN_SHORT_NAME_LANG_03, 'LANG_04', DIVN_SHORT_NAME_LANG_04, 'LANG_05',
              DIVN_SHORT_NAME_LANG_05, 'LANG_06', DIVN_SHORT_NAME_LANG_06, 'LANG_07', DIVN_SHORT_NAME_LANG_07, 'LANG_08',
              DIVN_SHORT_NAME_LANG_08, 'LANG_09',DIVN_SHORT_NAME_LANG_09, 'LANG_10', DIVN_SHORT_NAME_LANG_10) DIVN,
               --EMP_DEPT_CODE ||'-'|| DEPT_SHORT_NAME DEPT,
             DECODE(MM_LANG_CODE ,'ENG',DEPT_SHORT_NAME, 'LANG_01', DEPT_SHORT_NAME_LANG_01, 'LANG_02',
             DEPT_SHORT_NAME_LANG_02, 'LANG_03', DEPT_SHORT_NAME_LANG_03, 'LANG_04', DEPT_SHORT_NAME_LANG_04, 'LANG_05',
             DEPT_SHORT_NAME_LANG_05, 'LANG_06', DEPT_SHORT_NAME_LANG_06, 'LANG_07', DEPT_SHORT_NAME_LANG_07, 'LANG_08',
             DEPT_SHORT_NAME_LANG_08, 'LANG_09',DEPT_SHORT_NAME_LANG_09, 'LANG_10', DEPT_SHORT_NAME_LANG_10) DEPT,
               LNAH_EMP_CODE,DECODE(MM_LANG_CODE ,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02',
             EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05',
             EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06, 'LANG_07', EMP_NAME_LANG_07, 'LANG_08',
             EMP_NAME_LANG_08, 'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10) EMP_NAME,LN_ADV_CODE ||'-'||DECODE(MM_LANG_CODE ,'ENG',LN_ADV_SHORT_DESC, 'LANG_01', LN_ADV_SHORT_DESC_LANG_01, 'LANG_02',
             LN_ADV_SHORT_DESC_LANG_02, 'LANG_03', LN_ADV_SHORT_DESC_LANG_03, 'LANG_04', LN_ADV_SHORT_DESC_LANG_04, 'LANG_05',
             LN_ADV_SHORT_DESC_LANG_05, 'LANG_06', LN_ADV_SHORT_DESC_LANG_06, 'LANG_07', LN_ADV_SHORT_DESC_LANG_07, 'LANG_08',
             LN_ADV_SHORT_DESC_LANG_08, 'LANG_09',LN_ADV_SHORT_DESC_LANG_09, 'LANG_10', LN_ADV_SHORT_DESC_LANG_10) ADV_DESC,
               LNAH_DEDUC_START_DT,NVL(LNAH_PRINCIPAL_FC_AMOUNT,0) PRINCIPAL_FC_AMOUNT,
               LNAH_NO_OF_MONTHS_INSTALL,NVL(LNAH_INSTALL_FC_AMOUNT,0) INSTALL_FC_AMOUNT,
               NVL( LNAH_PAID_FC_AMOUNT,0) PAID_FC_AMOUNT
      FROM   PM_EMP_KEY,PM_LOAN_ADV,PT_LOAN_ADV_HEAD,FM_DIVISION,FM_DEPARTMENT
      WHERE  LNAH_COMP_CODE = P_COMP_CODE
      AND    EMP_COMP_CODE  = LNAH_COMP_CODE
      AND    EMP_COMP_CODE  = DIVN_COMP_CODE
      AND    EMP_COMP_CODE  = DEPT_COMP_CODE
      AND    EMP_DIVN_CODE  = DIVN_CODE
      AND    DEPT_DIVN_CODE = DIVN_CODE
      AND    EMP_DEPT_CODE  = DEPT_CODE
      AND    EMP_CODE       = LNAH_EMP_CODE
      AND    LNAH_LA_CODE   = LN_ADV_CODE
      AND    LNAH_LA        = LN_ADV_FLAG
      AND       EMP_DIVN_CODE  BETWEEN  P_FM_DIVN AND P_TO_DIVN
      AND    EMP_DEPT_CODE  BETWEEN  P_FM_DEPT AND P_TO_DEPT
      AND    EMP_LOCN_CODE  BETWEEN  P_FM_LOCN AND P_TO_LOCN
      AND    LNAH_DT          BETWEEN  P_FM_LOAN_DT            AND P_TO_LOAN_DT
      AND    LNAH_DEDUC_START_DT      BETWEEN  P_FM_INS_DT        AND P_TO_INS_DT
      AND    LNAH_EMP_CODE  BETWEEN  P_FM_EMP   AND P_TO_EMP
      AND    LN_ADV_CODE    BETWEEN  P_FM_LOAN_TYPE AND P_TO_LOAN_TYPE
      AND    LNAH_APPR_UID  IS NOT NULL
      AND    LNAH_APPR_DT   IS NOT NULL
      AND    P_STATUS  = 'Approved'
      UNION ALL
      SELECT --EMP_DIVN_CODE ||'-'|| DIVN_SHORT_NAME DIVN,
              DECODE(MM_LANG_CODE ,'ENG',DIVN_SHORT_NAME, 'LANG_01', DIVN_SHORT_NAME_LANG_01, 'LANG_02',
              DIVN_SHORT_NAME_LANG_02, 'LANG_03', DIVN_SHORT_NAME_LANG_03, 'LANG_04', DIVN_SHORT_NAME_LANG_04, 'LANG_05',
              DIVN_SHORT_NAME_LANG_05, 'LANG_06', DIVN_SHORT_NAME_LANG_06, 'LANG_07', DIVN_SHORT_NAME_LANG_07, 'LANG_08',
              DIVN_SHORT_NAME_LANG_08, 'LANG_09',DIVN_SHORT_NAME_LANG_09, 'LANG_10', DIVN_SHORT_NAME_LANG_10) DIVN,
               --EMP_DEPT_CODE ||'-'|| DEPT_SHORT_NAME DEPT,
               DECODE(MM_LANG_CODE ,'ENG',DEPT_SHORT_NAME, 'LANG_01', DEPT_SHORT_NAME_LANG_01, 'LANG_02',
             DEPT_SHORT_NAME_LANG_02, 'LANG_03', DEPT_SHORT_NAME_LANG_03, 'LANG_04', DEPT_SHORT_NAME_LANG_04, 'LANG_05',
             DEPT_SHORT_NAME_LANG_05, 'LANG_06', DEPT_SHORT_NAME_LANG_06, 'LANG_07', DEPT_SHORT_NAME_LANG_07, 'LANG_08',
             DEPT_SHORT_NAME_LANG_08, 'LANG_09',DEPT_SHORT_NAME_LANG_09, 'LANG_10', DEPT_SHORT_NAME_LANG_10) DEPT,
               LNAH_EMP_CODE,DECODE(MM_LANG_CODE ,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02',
             EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05',
             EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06, 'LANG_07', EMP_NAME_LANG_07, 'LANG_08',
             EMP_NAME_LANG_08, 'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10) EMP_NAME,LN_ADV_CODE ||'-'||DECODE(MM_LANG_CODE ,'ENG',LN_ADV_SHORT_DESC, 'LANG_01', LN_ADV_SHORT_DESC_LANG_01, 'LANG_02',
             LN_ADV_SHORT_DESC_LANG_02, 'LANG_03', LN_ADV_SHORT_DESC_LANG_03, 'LANG_04', LN_ADV_SHORT_DESC_LANG_04, 'LANG_05',
             LN_ADV_SHORT_DESC_LANG_05, 'LANG_06', LN_ADV_SHORT_DESC_LANG_06, 'LANG_07', LN_ADV_SHORT_DESC_LANG_07, 'LANG_08',
             LN_ADV_SHORT_DESC_LANG_08, 'LANG_09',LN_ADV_SHORT_DESC_LANG_09, 'LANG_10', LN_ADV_SHORT_DESC_LANG_10) ADV_DESC,
               LNAH_DEDUC_START_DT,NVL(LNAH_PRINCIPAL_FC_AMOUNT,0) PRINCIPAL_FC_AMOUNT,
               LNAH_NO_OF_MONTHS_INSTALL,NVL(LNAH_INSTALL_FC_AMOUNT,0) INSTALL_FC_AMOUNT,
               NVL( LNAH_PAID_FC_AMOUNT,0) PAID_FC_AMOUNT
      FROM   PM_EMP_KEY,PM_LOAN_ADV,PT_LOAN_ADV_HEAD,FM_DIVISION,FM_DEPARTMENT
      WHERE  LNAH_COMP_CODE = P_COMP_CODE
      AND    EMP_COMP_CODE  = LNAH_COMP_CODE
      AND    EMP_COMP_CODE  = DIVN_COMP_CODE
      AND    EMP_COMP_CODE  = DEPT_COMP_CODE
      AND    EMP_DIVN_CODE  = DIVN_CODE
      AND    DEPT_DIVN_CODE = DIVN_CODE
      AND    EMP_DEPT_CODE  = DEPT_CODE
      AND    EMP_CODE       = LNAH_EMP_CODE
      AND    LNAH_LA_CODE   = LN_ADV_CODE
      AND    LNAH_LA        = LN_ADV_FLAG
      AND       EMP_DIVN_CODE  BETWEEN  P_FM_DIVN  AND P_TO_DIVN
      AND    EMP_DEPT_CODE  BETWEEN  P_FM_DEPT  AND P_TO_DEPT
      AND    EMP_LOCN_CODE  BETWEEN  P_FM_LOCN  AND P_TO_LOCN
      AND    LNAH_DT      BETWEEN  P_FM_LOAN_DT            AND P_TO_LOAN_DT
      AND    LNAH_DEDUC_START_DT  BETWEEN  P_FM_INS_DT    AND P_TO_INS_DT
      AND    LNAH_EMP_CODE  BETWEEN  P_FM_EMP   AND P_TO_EMP
      AND    LN_ADV_CODE    BETWEEN  P_FM_LOAN_TYPE AND P_TO_LOAN_TYPE
      AND    LNAH_APPR_UID  IS NULL
      AND    LNAH_APPR_DT   IS NULL
      AND    P_STATUS  = 'Unapproved'
      UNION ALL
      SELECT --EMP_DIVN_CODE ||'-'|| DIVN_SHORT_NAME DIVN,
            DECODE(MM_LANG_CODE ,'ENG',DIVN_SHORT_NAME, 'LANG_01', DIVN_SHORT_NAME_LANG_01, 'LANG_02',
              DIVN_SHORT_NAME_LANG_02, 'LANG_03', DIVN_SHORT_NAME_LANG_03, 'LANG_04', DIVN_SHORT_NAME_LANG_04, 'LANG_05',
              DIVN_SHORT_NAME_LANG_05, 'LANG_06', DIVN_SHORT_NAME_LANG_06, 'LANG_07', DIVN_SHORT_NAME_LANG_07, 'LANG_08',
              DIVN_SHORT_NAME_LANG_08, 'LANG_09',DIVN_SHORT_NAME_LANG_09, 'LANG_10', DIVN_SHORT_NAME_LANG_10) DIVN,
             --EMP_DEPT_CODE ||'-'|| DEPT_SHORT_NAME DEPT,
             DECODE(MM_LANG_CODE ,'ENG',DEPT_SHORT_NAME, 'LANG_01', DEPT_SHORT_NAME_LANG_01, 'LANG_02',
             DEPT_SHORT_NAME_LANG_02, 'LANG_03', DEPT_SHORT_NAME_LANG_03, 'LANG_04', DEPT_SHORT_NAME_LANG_04, 'LANG_05',
             DEPT_SHORT_NAME_LANG_05, 'LANG_06', DEPT_SHORT_NAME_LANG_06, 'LANG_07', DEPT_SHORT_NAME_LANG_07, 'LANG_08',
             DEPT_SHORT_NAME_LANG_08, 'LANG_09',DEPT_SHORT_NAME_LANG_09, 'LANG_10', DEPT_SHORT_NAME_LANG_10) DEPT,
               LNAH_EMP_CODE,DECODE(MM_LANG_CODE ,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02',
             EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05',
             EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06, 'LANG_07', EMP_NAME_LANG_07, 'LANG_08',
             EMP_NAME_LANG_08, 'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10) EMP_NAME,LN_ADV_CODE ||'-'||DECODE(MM_LANG_CODE ,'ENG',LN_ADV_SHORT_DESC, 'LANG_01', LN_ADV_SHORT_DESC_LANG_01, 'LANG_02',
             LN_ADV_SHORT_DESC_LANG_02, 'LANG_03', LN_ADV_SHORT_DESC_LANG_03, 'LANG_04', LN_ADV_SHORT_DESC_LANG_04, 'LANG_05',
             LN_ADV_SHORT_DESC_LANG_05, 'LANG_06', LN_ADV_SHORT_DESC_LANG_06, 'LANG_07', LN_ADV_SHORT_DESC_LANG_07, 'LANG_08',
             LN_ADV_SHORT_DESC_LANG_08, 'LANG_09',LN_ADV_SHORT_DESC_LANG_09, 'LANG_10', LN_ADV_SHORT_DESC_LANG_10) ADV_DESC,
               LNAH_DEDUC_START_DT,NVL(LNAH_PRINCIPAL_FC_AMOUNT,0) PRINCIPAL_FC_AMOUNT,
               LNAH_NO_OF_MONTHS_INSTALL,NVL(LNAH_INSTALL_FC_AMOUNT,0) INSTALL_FC_AMOUNT,
               NVL( LNAH_PAID_FC_AMOUNT,0) PAID_FC_AMOUNT
      FROM   PM_EMP_KEY,PM_LOAN_ADV,PT_LOAN_ADV_HEAD,FM_DIVISION,FM_DEPARTMENT
      WHERE  LNAH_COMP_CODE = P_COMP_CODE
      AND    EMP_COMP_CODE  = LNAH_COMP_CODE
      AND    EMP_COMP_CODE  = DIVN_COMP_CODE
      AND    EMP_COMP_CODE  = DEPT_COMP_CODE
      AND    EMP_DIVN_CODE  = DIVN_CODE
      AND    DEPT_DIVN_CODE = DIVN_CODE
      AND    EMP_DEPT_CODE  = DEPT_CODE
      AND    EMP_CODE       = LNAH_EMP_CODE
      AND    LNAH_LA_CODE   = LN_ADV_CODE
      AND    LNAH_LA        = LN_ADV_FLAG
      AND       EMP_DIVN_CODE  BETWEEN  P_FM_DIVN  AND P_TO_DIVN
      AND    EMP_DEPT_CODE  BETWEEN  P_FM_DEPT  AND P_TO_DEPT
      AND    EMP_LOCN_CODE  BETWEEN  P_FM_LOCN  AND P_TO_LOCN
      AND    LNAH_DT      BETWEEN  P_FM_LOAN_DT            AND P_TO_LOAN_DT
      AND    LNAH_DEDUC_START_DT  BETWEEN  P_FM_INS_DT    AND P_TO_INS_DT
      AND    LNAH_EMP_CODE  BETWEEN  P_FM_EMP   AND P_TO_EMP
      AND    LN_ADV_CODE    BETWEEN  P_FM_LOAN_TYPE AND P_TO_LOAN_TYPE
      AND    P_STATUS  = 'Both';


M_OUT_STD_BAL NUMBER;

CURSOR C_GET_LANG_CODE IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

BEGIN

   DELETE FROM PW_ADV_RECOV WHERE AR_REP_KEY_NO = P_REP_KEY_NO;

   MM_LANG_CODE := NULL;

    IF C_GET_LANG_CODE%ISOPEN THEN
       CLOSE C_GET_LANG_CODE;
    END IF;

    OPEN C_GET_LANG_CODE;
    FETCH C_GET_LANG_CODE INTO MM_LANG_CODE;
    CLOSE C_GET_LANG_CODE;

   FOR I IN  C_ADV_RECO
   LOOP

   M_OUT_STD_BAL := (NVL(I.PRINCIPAL_FC_AMOUNT,0) - NVL(I.PAID_FC_AMOUNT,0));

      INSERT INTO PW_ADV_RECOV ( AR_COMP_CODE,
                                 AR_REP_KEY_NO,
                                 AR_EMP_CODE,
                                 AR_EMP_NAME,
                                 AR_DIVN,
                                 AR_DEPT,
                                 AR_ADV_DESC,
                                 AR_DT,
                                 AR_PRINCIPAL_FC_AMOUNT,
                                 AR_NO_OF_INSTALL,
                                 AR_INSTALL_AMT,
                                 AR_OUT_STD_BAL,
                                 AR_PAID_AMOUNT )
                        VALUES ( P_COMP_CODE,
                                 P_REP_KEY_NO,
                                 I.LNAH_EMP_CODE,
                                 I.EMP_NAME,
                                 I.DIVN,
                                 I.DEPT,
                                 I.ADV_DESC,
                                 I.LNAH_DEDUC_START_DT,
                                 I.PRINCIPAL_FC_AMOUNT,
                                 I.LNAH_NO_OF_MONTHS_INSTALL,
                                 I.INSTALL_FC_AMOUNT,
                                 M_OUT_STD_BAL,
                                 I.PAID_FC_AMOUNT);

   END LOOP;

END P_ADV_RECOV;

PROCEDURE P_SUM_OF_MTH_OT_DIV ( P_COMP_CODE        IN VARCHAR2,
                                 P_REP_KEY_NO       IN NUMBER,
                                 P_FM_DIVN          IN VARCHAR2,
                                 P_TO_DIVN          IN VARCHAR2,
                                 P_FM_CONTRACT_TYPE IN VARCHAR2,
                                 P_TO_CONTRACT_TYPE IN VARCHAR2,
                                 P_MTHYY            IN number )IS

MM_LANG_CODE VARCHAR2(240);

CURSOR C_Q1 IS
      SELECT DIVN_CODE "Q_1_DIVN_CODE",DECODE(MM_LANG_CODE,'ENG',DIVN_SHORT_NAME, 'LANG_01', DIVN_SHORT_NAME_LANG_01, 'LANG_02', DIVN_SHORT_NAME_LANG_02, 'LANG_03', DIVN_SHORT_NAME_LANG_03, 'LANG_04', DIVN_SHORT_NAME_LANG_04, 'LANG_05', DIVN_SHORT_NAME_LANG_05, 'LANG_06', DIVN_SHORT_NAME_LANG_06, 'LANG_07', DIVN_SHORT_NAME_LANG_07, 'LANG_08', DIVN_SHORT_NAME_LANG_08, 'LANG_09', DIVN_SHORT_NAME_LANG_09, 'LANG_10', DIVN_SHORT_NAME_LANG_10,DIVN_SHORT_NAME) Q_1_DIVN_NAME,
             DIVN_COMP_CODE Q_1_DIVN_COMP_CODE
      FROM   FM_DIVISION
      WHERE  EXISTS(SELECT 'X' FROM     PS_FINAL_PROC WHERE DIVN_CODE =     FP_DIVN_CODE)
      AND    DIVN_COMP_CODE = P_COMP_CODE
      AND    DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
      ORDER BY DIVN_CODE;

CURSOR C_Q2 (P_DIVN_CODE IN VARCHAR2) IS
      SELECT FP_DIVN_CODE Q_2_FP_DIVN_CODE,FP_CONT_TYPE_CODE Q_2_FP_CONT_TYPE_CODE,
             SUM(DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'),  to_date(P_MTHYY,'YYYYMM'), DECODE(ALLW_TYPE, '1',NVL(FP_ORG_BASIC_LC_AMOUNT,0),0),0)) Q_2_BASIC_CURR,
             SUM((DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'),  to_date(P_MTHYY,'YYYYMM'), DECODE(ALLW_TYPE, '3',NVL(FP_LC_AMOUNT,0),0),0)) +
             (DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'),  to_date(P_MTHYY,'YYYYMM'), DECODE(ALLW_TYPE,'4',NVL(FP_LC_AMOUNT,0),0),0))) Q_2_OT_CURR,
             SUM(DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'), ADD_MONTHS(to_date(P_MTHYY,'YYYYMM'),-1),DECODE(ALLW_TYPE, '1', NVL(FP_ORG_BASIC_LC_AMOUNT,0),0),0)) Q_2_BASIC_PREV,
             SUM((DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'), ADD_MONTHS(to_date(P_MTHYY,'YYYYMM'),-1),DECODE(ALLW_TYPE, '3', NVL(FP_LC_AMOUNT,0),0),0)) +
             (DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'), ADD_MONTHS(to_date(P_MTHYY,'YYYYMM'),-1), DECODE(ALLW_TYPE, '4', NVL(FP_LC_AMOUNT,0),0),0))) Q_2_OT_PREV,
             SUM(DECODE(ALLW_TYPE, '1', NVL(FP_ORG_BASIC_LC_AMOUNT,0),0)) Q_2_BASIC_ACCU,
             SUM((DECODE(ALLW_TYPE, '3', NVL(FP_LC_AMOUNT,0),0)) +
             (DECODE(ALLW_TYPE, '4', NVL(FP_LC_AMOUNT,0),0)))  Q_2_OT_ACCUV
      FROM    PS_FINAL_PROC, PM_ALLOWANCE
      WHERE   FP_COMP_CODE = P_COMP_CODE
      AND     FP_CONT_TYPE_CODE BETWEEN P_FM_CONTRACT_TYPE  AND  P_TO_CONTRACT_TYPE
      AND     TO_DATE(FP_PROC_MTH,'YYYYMM') <= to_date(P_MTHYY,'YYYYMM')
      AND     FP_DIVN_CODE = P_DIVN_CODE
      --AND     TO_DATE(FP_PROC_MTH,'YYYYMM') >= :FIN_START_PROC_MONTH
      AND     ALLW_CODE    = FP_ALLW_CODE
      AND     ALLW_TYPE IN ('1','3','4')
      GROUP BY FP_DIVN_CODE, FP_CONT_TYPE_CODE, FP_COMP_CODE;

CURSOR C_Q2_SUM (P_DIVN_CODE IN VARCHAR2) IS
      SELECT SUM(DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'),  to_date(P_MTHYY,'YYYYMM'), DECODE(ALLW_TYPE, '1',NVL(FP_ORG_BASIC_LC_AMOUNT,0),0),0)) SUM_BASIC_CURR,
             SUM((DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'),  to_date(P_MTHYY,'YYYYMM'), DECODE(ALLW_TYPE, '3',NVL(FP_LC_AMOUNT,0),0),0)) +
             (DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'),  to_date(P_MTHYY,'YYYYMM'), DECODE(ALLW_TYPE,'4',NVL(FP_LC_AMOUNT,0),0),0))) SUM_OT_CURR,
             SUM(DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'), ADD_MONTHS(to_date(P_MTHYY,'YYYYMM'),-1),DECODE(ALLW_TYPE, '1', NVL(FP_ORG_BASIC_LC_AMOUNT,0),0),0)) SUM_BASIC_PREV,
             SUM((DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'), ADD_MONTHS(to_date(P_MTHYY,'YYYYMM'),-1),DECODE(ALLW_TYPE, '3', NVL(FP_LC_AMOUNT,0),0),0)) +
             (DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'), ADD_MONTHS(to_date(P_MTHYY,'YYYYMM'),-1), DECODE(ALLW_TYPE, '4', NVL(FP_LC_AMOUNT,0),0),0))) SUM_OT_PREV,
             SUM(DECODE(ALLW_TYPE, '1', NVL(FP_ORG_BASIC_LC_AMOUNT,0),0)) SUM_BASIC_ACCU,
             SUM((DECODE(ALLW_TYPE, '3', NVL(FP_LC_AMOUNT,0),0)) +
             (DECODE(ALLW_TYPE, '4', NVL(FP_LC_AMOUNT,0),0)))  SUM_OT_ACCUV
      FROM    PS_FINAL_PROC, PM_ALLOWANCE
      WHERE   FP_COMP_CODE = P_COMP_CODE
      AND     FP_CONT_TYPE_CODE BETWEEN P_FM_CONTRACT_TYPE  AND  P_TO_CONTRACT_TYPE
      AND     TO_DATE(FP_PROC_MTH,'YYYYMM') <= to_date(P_MTHYY,'YYYYMM')
      AND     FP_DIVN_CODE = P_DIVN_CODE
      --AND     TO_DATE(FP_PROC_MTH,'YYYYMM') >= :FIN_START_PROC_MONTH
      AND     ALLW_CODE    = FP_ALLW_CODE
      AND     ALLW_TYPE IN ('1','3','4');


CURSOR C_REP_VAL_3 IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

   M_CURR_PERC NUMBER(13,3);
   M_PREV_PERC NUMBER(13,3);
   M_ACCU_PERC NUMBER(13,3);
   M_TOT_PERC_CURR  NUMBER(5,2);
   M_TOT_PERC_PREV  NUMBER(5,2);
   M_TOT_PERC  NUMBER(5,2);

BEGIN

   DELETE FROM SUM_OF_MTHLY_OT WHERE SOM_REP_KEY_NO = P_REP_KEY_NO;

    MM_LANG_CODE := NULL;

    IF C_REP_VAL_3%ISOPEN THEN
       CLOSE C_REP_VAL_3;
    END IF;

    OPEN C_REP_VAL_3;
    FETCH C_REP_VAL_3 INTO MM_LANG_CODE;
    CLOSE C_REP_VAL_3;


   FOR I IN C_Q1
   LOOP

      FOR J IN C_Q2(I.Q_1_DIVN_CODE)
      LOOP

         FOR K IN C_Q2_SUM (I.Q_1_DIVN_CODE)
         LOOP

      IF NVL(J.Q_2_BASIC_CURR,0) != 0 THEN
         M_CURR_PERC  := ((NVL(J.Q_2_OT_CURR,0) * 100)/NVL(J.Q_2_BASIC_CURR,0));
         --RETURN(M_CURR_PERC);
      ELSE
         M_CURR_PERC := 0;
         --RETURN(M_CURR_PERC);
      END IF;

       IF NVL(J.Q_2_BASIC_PREV,0) != 0 THEN
          M_PREV_PERC  := ((NVL(J.Q_2_OT_PREV,0) * 100)/NVL(J.Q_2_BASIC_PREV,0));
          --RETURN(M_PREV_PERC);
       ELSE
          M_PREV_PERC := 0;
          --RETURN(M_PREV_PERC);
       END IF;

        IF NVL(J.Q_2_BASIC_ACCU,0) != 0 THEN
           M_ACCU_PERC  := ((NVL(J.Q_2_OT_ACCUV,0) * 100)/NVL(J.Q_2_BASIC_ACCU,0));
           --RETURN(NVL(M_ACCU_PERC,0));
        ELSE
           M_ACCU_PERC := 0;
           --RETURN(M_ACCU_PERC);
        END IF;

        IF NVL(K.SUM_BASIC_CURR,0) != 0 THEN
           M_TOT_PERC_CURR := ((NVL(K.SUM_OT_CURR,0) * 100)/ NVL(K.SUM_BASIC_CURR,0));
           --RETURN(M_TOT_PERC);
        ELSE
           M_TOT_PERC_CURR := 0;
           --RETURN(M_TOT_PERC);
        END IF;

        IF NVL(K.SUM_BASIC_PREV,0) != 0 THEN
           M_TOT_PERC_PREV := ((NVL(K.SUM_OT_PREV,0) * 100)/ NVL(K.SUM_BASIC_PREV,0));
           --RETURN(M_TOT_PERC);
        ELSE
           M_TOT_PERC_PREV := 0;
           --RETURN(M_TOT_PERC);
        END IF;

        IF NVL(K.SUM_BASIC_ACCU,0) != 0 THEN
           M_TOT_PERC := ((NVL(K.SUM_OT_ACCUV,0) * 100)/ NVL(K.SUM_BASIC_ACCU,0));
           --RETURN(M_TOT_PERC);
        ELSE
           M_TOT_PERC := 0;
           --RETURN(M_TOT_PERC);
        END IF;

        INSERT INTO SUM_OF_MTHLY_OT ( SOM_COMP_CODE,
                                      SOM_REP_KEY_NO,
                                      SOM_DIVN_CODE,
                                      SOM_DIVN_NAME,
                                      SOM_DIVN_COMP_CODE,
                                      SOM_FP_DIVN_CODE,
                                      SOM_CONT_TYPE,
                                      SOM_BASIC_CURR,
                                      SOM_OT_CURR,
                                      SOM_BASIC_PREV,
                                      SOM_QT_PREV,
                                      SOM_BASIC_ACCU,
                                      SOM_QT_ACCU,
                                      SOM_CF_CURR,
                                      SOM_PREV_PERC,
                                      SOM_ACCU_PERC,
                                      SOM_TOT,
                                      SOM_CURR_TOT_PERC,
                                      SOM_PREV_TOT_PERC,
                                      SOM_ACCU_TOT_PERC,
                                      SOM_CS_BASIC_CURR,
                                      SOM_CS_OT_CURR,
                                      SOM_CS_BASIC_PREV,
                                      SOM_CS_OT_PREV,
                                      SOM_CS_BASIC_ACCU,
                                      SOM_CS_OT_ACCU )
                             VALUES ( P_COMP_CODE,
                                      P_REP_KEY_NO,
                                      I.Q_1_DIVN_CODE,
                                      I.Q_1_DIVN_NAME,
                                      I.Q_1_DIVN_COMP_CODE,
                                      J.Q_2_FP_DIVN_CODE,
                                      J.Q_2_FP_CONT_TYPE_CODE,
                                      J.Q_2_BASIC_CURR,
                                      J.Q_2_OT_CURR,
                                      J.Q_2_BASIC_PREV,
                                      J.Q_2_OT_PREV,
                                      J.Q_2_BASIC_ACCU,
                                      J.Q_2_OT_ACCUV,
                                      M_CURR_PERC,
                                      M_PREV_PERC,
                                      M_ACCU_PERC,
                                      '' ,
                                      M_TOT_PERC_CURR,
                                      M_TOT_PERC_PREV,
                                      M_TOT_PERC,
                                      K.SUM_BASIC_CURR,
                                      K.SUM_OT_CURR,
                                      K.SUM_BASIC_PREV,
                                      K.SUM_OT_PREV,
                                      K.SUM_BASIC_ACCU,
                                      K.SUM_OT_ACCUV);

         END LOOP;
      END LOOP;
   END LOOP;

END P_SUM_OF_MTH_OT_DIV;

PROCEDURE P_SUM_OF_MTH_OT_DEPT ( P_COMP_CODE        IN VARCHAR,
                                 P_REP_KEY_NO       IN NUMBER,
                                 P_DIVISION         IN VARCHAR2,
                                 P_FM_DEPT          IN VARCHAR2,
                                 P_TO_DEPT          IN VARCHAR2,
                                 P_FM_CONTRACT_TYPE IN VARCHAR2,
                                 P_TO_CONTRACT_TYPE IN VARCHAR2,
                                 P_MTHYY            IN number ) IS
                                 MM_LANG_CODE VARCHAR2(240);

CURSOR C_DEPT_Q1 IS
      SELECT DEPT_DIVN_CODE Q_1_DIVN_CODE,DECODE(MM_LANG_CODE,'ENG',DIVN_NAME, 'LANG_01',DIVN_NAME_LANG_01, 'LANG_02', DIVN_NAME_LANG_02, 'LANG_03', DIVN_NAME_LANG_03, 'LANG_04',
              DIVN_NAME_LANG_04, 'LANG_05', DIVN_NAME_LANG_05, 'LANG_06',DIVN_NAME_LANG_06, 'LANG_07',DIVN_NAME_LANG_07, 'LANG_08',DIVN_NAME_LANG_08,
              'LANG_09',DIVN_NAME_LANG_09, 'LANG_10', DIVN_NAME_LANG_10) Q_1_DIVN_NAME,DEPT_CODE Q_1_DEPT_CODE,DECODE(MM_LANG_CODE,'ENG',DEPT_SHORT_NAME, 'LANG_01',DEPT_SHORT_NAME_LANG_01, 'LANG_02', DEPT_SHORT_NAME_LANG_02, 'LANG_03', DEPT_SHORT_NAME_LANG_03, 'LANG_04',
              DEPT_SHORT_NAME_LANG_04, 'LANG_05', DEPT_SHORT_NAME_LANG_05, 'LANG_06',DEPT_SHORT_NAME_LANG_06, 'LANG_07',DEPT_SHORT_NAME_LANG_07, 'LANG_08',DEPT_SHORT_NAME_LANG_08,
              'LANG_09',DEPT_SHORT_NAME_LANG_09, 'LANG_10', DEPT_SHORT_NAME_LANG_10) Q_1_DEPT_NAME,
             DEPT_COMP_CODE Q_1_DEPT_COMP_CODE
      FROM   FM_DEPARTMENT, FM_DIVISION
      WHERE  EXISTS (SELECT 'X' FROM     PS_FINAL_PROC WHERE DEPT_DIVN_CODE =     FP_DIVN_CODE
      AND    DEPT_CODE          =              FP_DEPT_CODE)
      AND    DEPT_COMP_CODE = P_COMP_CODE
      AND    DEPT_DIVN_CODE = P_DIVISION
      AND    DEPT_CODE  BETWEEN P_FM_DEPT AND P_TO_DEPT
      AND    DIVN_COMP_CODE = P_COMP_CODE
      AND    DIVN_CODE      = DEPT_DIVN_CODE
      ORDER BY DEPT_CODE;

CURSOR C_DEPT_Q2(P_DIVN_CODE IN VARCHAR2,P_DEPT_CODE IN VARCHAR2) IS
      SELECT FP_DIVN_CODE Q_2_FP_DIVN_CODE,FP_DEPT_CODE Q_2_FP_DEPT_CODE,FP_COMP_CODE Q_2_FP_COMP_CODE,
             FP_CONT_TYPE_CODE Q_2_FP_CONT_TYPE_CODE,
             SUM(DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'),  to_date(P_MTHYY,'YYYYMM'), DECODE(ALLW_TYPE, '1',NVL(FP_ORG_BASIC_LC_AMOUNT,0),0),0)) Q_2_BASIC_CURR,
             SUM((DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'),  to_date(P_MTHYY,'YYYYMM'), DECODE(ALLW_TYPE, '3',NVL(FP_LC_AMOUNT,0),0),0))  +
            (DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'),  to_date(P_MTHYY,'YYYYMM'), DECODE(ALLW_TYPE, '4',NVL(FP_LC_AMOUNT,0),0),0))) Q_2_OT_CURR,
             SUM(DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'), ADD_MONTHS(to_date(P_MTHYY,'YYYYMM'),-1),DECODE(ALLW_TYPE, '1', NVL(FP_ORG_BASIC_LC_AMOUNT,0),0),0)) Q_2_BASIC_PREV,
             SUM((DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'), ADD_MONTHS(to_date(P_MTHYY,'YYYYMM'),-1),DECODE(ALLW_TYPE, '3', NVL(FP_LC_AMOUNT,0),0),0)) +
            (DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'), ADD_MONTHS(to_date(P_MTHYY,'YYYYMM'),-1),DECODE(ALLW_TYPE, '4', NVL(FP_LC_AMOUNT,0),0),0))) Q_2_OT_PREV,
             SUM(DECODE(ALLW_TYPE, '1', NVL(FP_ORG_BASIC_LC_AMOUNT,0),0)) Q_2_BASIC_ACCU,
             SUM((DECODE(ALLW_TYPE, '3', NVL(FP_LC_AMOUNT,0),0)) +
            (DECODE(ALLW_TYPE, '4', NVL(FP_LC_AMOUNT,0),0))) Q_2_OT_ACCUV
      FROM    PS_FINAL_PROC, PM_ALLOWANCE
      WHERE   FP_COMP_CODE = P_COMP_CODE
      AND     FP_CONT_TYPE_CODE BETWEEN P_FM_CONTRACT_TYPE AND P_TO_CONTRACT_TYPE
      AND     TO_DATE(FP_PROC_MTH,'YYYYMM') <= to_date(P_MTHYY,'YYYYMM')
      AND     FP_DIVN_CODE = P_DIVN_CODE
      AND     FP_DEPT_CODE = P_DEPT_CODE
      --AND     TO_DATE(FP_PROC_MTH,'YYYYMM') >= :FIN_START_PROC_MONTH
      AND     ALLW_CODE    = FP_ALLW_CODE
      AND     ALLW_TYPE IN ('1','3','4')
      GROUP BY  FP_DIVN_CODE ,FP_DEPT_CODE,  FP_COMP_CODE,  FP_CONT_TYPE_CODE;

CURSOR C_DEPT_Q2_SUM(P_DIVN_CODE IN VARCHAR2,P_DEPT_CODE IN VARCHAR2) IS
      SELECT SUM(DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'),  to_date(P_MTHYY,'YYYYMM'), DECODE(ALLW_TYPE, '1',NVL(FP_ORG_BASIC_LC_AMOUNT,0),0),0)) SUM_BASIC_CURR,
             SUM((DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'),  to_date(P_MTHYY,'YYYYMM'), DECODE(ALLW_TYPE, '3',NVL(FP_LC_AMOUNT,0),0),0))  +
            (DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'),  to_date(P_MTHYY,'YYYYMM'), DECODE(ALLW_TYPE, '4',NVL(FP_LC_AMOUNT,0),0),0))) SUM_OT_CURR,
             SUM(DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'), ADD_MONTHS(to_date(P_MTHYY,'YYYYMM'),-1),DECODE(ALLW_TYPE, '1', NVL(FP_ORG_BASIC_LC_AMOUNT,0),0),0)) SUM_BASIC_PREV,
             SUM((DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'), ADD_MONTHS(to_date(P_MTHYY,'YYYYMM'),-1),DECODE(ALLW_TYPE, '3', NVL(FP_LC_AMOUNT,0),0),0)) +
            (DECODE(TO_DATE(FP_PROC_MTH,'YYYYMM'), ADD_MONTHS(to_date(P_MTHYY,'YYYYMM'),-1),DECODE(ALLW_TYPE, '4', NVL(FP_LC_AMOUNT,0),0),0))) SUM_OT_PREV,
             SUM(DECODE(ALLW_TYPE, '1', NVL(FP_ORG_BASIC_LC_AMOUNT,0),0)) SUM_BASIC_ACCU,
             SUM((DECODE(ALLW_TYPE, '3', NVL(FP_LC_AMOUNT,0),0)) +
            (DECODE(ALLW_TYPE, '4', NVL(FP_LC_AMOUNT,0),0))) SUM_OT_ACCUV
      FROM    PS_FINAL_PROC, PM_ALLOWANCE
      WHERE   FP_COMP_CODE = P_COMP_CODE
      AND     FP_CONT_TYPE_CODE BETWEEN P_FM_CONTRACT_TYPE AND P_TO_CONTRACT_TYPE
      AND     TO_DATE(FP_PROC_MTH,'YYYYMM') <= to_date(P_MTHYY,'YYYYMM')
      AND     FP_DIVN_CODE = P_DIVN_CODE
      AND     FP_DEPT_CODE = P_DEPT_CODE
      --AND     TO_DATE(FP_PROC_MTH,'YYYYMM') >= :FIN_START_PROC_MONTH
      AND     ALLW_CODE    = FP_ALLW_CODE
      AND     ALLW_TYPE IN ('1','3','4');

      CURSOR C2 IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

   M_CURR_PERC NUMBER(13,3);
   M_PREV_PERC NUMBER(13,3);
   M_ACCU_PERC NUMBER(13,3);
   M_CURR_PERC_TOT PW_FS.PERC%TYPE;
   M_PREV_PERC_TOT PW_FS.PERC%TYPE;
   M_ACCU_PERC_TOT PW_FS.PERC%TYPE;


BEGIN

   DELETE FROM SUM_OF_MTHLY_DEPT WHERE SOMD_REP_KEY_NO = P_REP_KEY_NO;


    IF C2%ISOPEN THEN
       CLOSE C2;
    END IF;

    OPEN C2;
    FETCH C2 INTO MM_LANG_CODE;
    CLOSE C2;

   FOR I IN C_DEPT_Q1
   LOOP

      FOR J IN C_DEPT_Q2(I.Q_1_DIVN_CODE,I.Q_1_DEPT_CODE)
      LOOP

         FOR K IN C_DEPT_Q2_SUM(I.Q_1_DIVN_CODE,I.Q_1_DEPT_CODE)
         LOOP


      IF NVL(J.Q_2_BASIC_CURR,0) != 0 THEN
         M_CURR_PERC  := ((NVL(J.Q_2_OT_CURR,0) * 100)/NVL(J.Q_2_BASIC_CURR,0));
         --RETURN(M_CURR_PERC);
      ELSE
         M_CURR_PERC := 0;
         --RETURN(M_CURR_PERC);
      END IF;

      IF NVL(J.Q_2_BASIC_PREV,0) != 0 THEN
         M_PREV_PERC  := ((NVL(J.Q_2_OT_PREV,0) * 100)/NVL(J.Q_2_BASIC_PREV,0));
         --RETURN(M_PREV_PERC);
      ELSE
         M_PREV_PERC := 0;
         --RETURN(M_PREV_PERC);
      END IF;

       IF NVL(J.Q_2_BASIC_ACCU,0) != 0 THEN
          M_ACCU_PERC  := ((NVL(J.Q_2_OT_ACCUV,0) * 100)/NVL(J.Q_2_BASIC_ACCU,0));
          --RETURN(NVL(M_ACCU_PERC,0));
       ELSE
          M_ACCU_PERC := 0;
          --RETURN(M_ACCU_PERC);
       END IF;

       IF NVL(K.SUM_BASIC_CURR,0) != 0 THEN
          M_CURR_PERC_TOT  := ((NVL(K.SUM_OT_CURR,0) * 100)/NVL(K.SUM_BASIC_CURR,0));
          --RETURN(M_CURR_PERC);
       ELSE
          M_CURR_PERC_TOT := 0;
          --RETURN(M_CURR_PERC);
       END IF;

       IF NVL(K.SUM_BASIC_PREV,0) != 0 THEN
          M_PREV_PERC_TOT  := ((NVL(K.SUM_OT_PREV,0) * 100)/NVL(K.SUM_BASIC_PREV,0));
         -- RETURN(M_CURR_PERC);
       ELSE
          M_PREV_PERC_TOT := 0;
          --RETURN(M_CURR_PERC);
       END IF;

       IF NVL(K.SUM_BASIC_ACCU,0) != 0 THEN
          M_ACCU_PERC_TOT  := ((NVL(K.SUM_OT_ACCUV,0) * 100)/NVL(K.SUM_BASIC_ACCU,0));
          --RETURN(M_CURR_PERC);
       ELSE
          M_ACCU_PERC_TOT := 0;
          --RETURN(M_CURR_PERC);
       END IF;

       INSERT INTO SUM_OF_MTHLY_DEPT ( SOMD_COMP_CODE,
                                       SOMD_REP_KEY_NO,
                                       SOMD_DIVN_CODE,
                                       SOMD_DIVN_NAME,
                                       SOMD_DEPT_CODE,
                                       SOMD_DEPT_NAME,
                                       SOMD_DEPT_COMP_CODE,
                                       SOMD_FP_DIVN_CODE,
                                       SOMD_FP_DEPT_CODE,
                                       SOMD_FP_COMP_CODE,
                                       SOMD_CONT_TYPE,
                                       SOMD_BASIC_CURR,
                                       SOMD_OT_CURR,
                                       SOMD_BASIC_PREV,
                                       SOMD_QT_PREV,
                                       SOMD_BASIC_ACCU,
                                       SOMD_QT_ACCU,
                                       SOMD_CF_CURR,
                                       SOMD_PREV_PERC,
                                       SOMD_ACCU_PERC,
                                       SOMD_TOT,
                                       SOMD_CURR_TOT_PERC,
                                       SOMD_PREV_TOT_PERC,
                                       SOMD_ACCU_TOT_PERC,
                                       SOMD_CS_BASIC_CURR,
                                       SOMD_CS_OT_CURR,
                                       SOMD_CS_BASIC_PREV,
                                       SOMD_CS_OT_PREV,
                                       SOMD_CS_BASIC_ACCU,
                                       SOMD_CS_OT_ACCU )
                              VALUES ( P_COMP_CODE,
                                       P_REP_KEY_NO,
                                       I.Q_1_DIVN_CODE,
                                       I.Q_1_DIVN_NAME,
                                       I.Q_1_DEPT_CODE,
                                       I.Q_1_DEPT_NAME,
                                       I.Q_1_DEPT_COMP_CODE,
                                       J.Q_2_FP_DIVN_CODE,
                                       J.Q_2_FP_DEPT_CODE,
                                       J.Q_2_FP_COMP_CODE,
                                       J.Q_2_FP_CONT_TYPE_CODE,
                                       J.Q_2_BASIC_CURR,
                                       J.Q_2_OT_CURR,
                                       J.Q_2_BASIC_PREV,
                                       J.Q_2_OT_PREV,
                                       J.Q_2_BASIC_ACCU,
                                       J.Q_2_OT_ACCUV,
                                       M_CURR_PERC,
                                       M_PREV_PERC,
                                       M_ACCU_PERC,
                                       '' ,
                                       M_CURR_PERC_TOT ,
                                       M_PREV_PERC_TOT ,
                                       M_ACCU_PERC_TOT ,
                                       K.SUM_BASIC_CURR,
                                       K.SUM_OT_CURR,
                                       K.SUM_BASIC_PREV,
                                       K.SUM_OT_PREV,
                                       K.SUM_BASIC_ACCU,
                                       K.SUM_OT_ACCUV);


         END LOOP;
      END LOOP;
   END LOOP;


END P_SUM_OF_MTH_OT_DEPT;

PROCEDURE P_VACATION_SCHEDULE ( P_COMP_CODE      IN VARCHAR2,
                                P_REP_KEY_NO     IN NUMBER,
                                P_FM_DIVN        IN VARCHAR2,
                                P_TO_DIVN        IN VARCHAR2,
                                P_FM_DEPT        IN VARCHAR2,
                                P_TO_DEPT        IN VARCHAR2,
                                P_FM_EMP         IN VARCHAR2,
                                P_TO_EMP         IN VARCHAR2,
                                P_FM_DESIGNATION IN VARCHAR2,
                                P_TO_DESIGNATION IN VARCHAR2,
                                P_AS_OF_YEAR     IN NUMBER ) IS

MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;


CURSOR C_VAC_SCH IS
      SELECT DISTINCT --B.DIVN_NAME
      DECODE(MM_LANG_CODE,'ENG',B.DIVN_NAME, 'LANG_01', B.DIVN_NAME_LANG_01, 'LANG_02', B.DIVN_NAME_LANG_02,
'LANG_03', B.DIVN_NAME_LANG_03, 'LANG_04', B.DIVN_NAME_LANG_04, 'LANG_05', B.DIVN_NAME_LANG_05, 'LANG_06',
B.DIVN_NAME_LANG_06, 'LANG_07', B.DIVN_NAME_LANG_07, 'LANG_08', B.DIVN_NAME_LANG_08, 'LANG_09', B.DIVN_NAME_LANG_09,
'LANG_10', B.DIVN_NAME_LANG_10,B.DIVN_NAME)DIVN_NAME,
      --C.DEPT_NAME,
      DECODE(MM_LANG_CODE,'ENG', C.DEPT_NAME, 'LANG_01',  C.DEPT_NAME_LANG_01, 'LANG_02',  C.DEPT_NAME_LANG_02,
'LANG_03',  C.DEPT_NAME_LANG_03, 'LANG_04',  C.DEPT_NAME_LANG_04, 'LANG_05',  C.DEPT_NAME_LANG_05, 'LANG_06',
 C.DEPT_NAME_LANG_06, 'LANG_07',  C.DEPT_NAME_LANG_07, 'LANG_08',  C.DEPT_NAME_LANG_08, 'LANG_09',  C.DEPT_NAME_LANG_09,
'LANG_10',  C.DEPT_NAME_LANG_10, C.DEPT_NAME)DEPT_NAME ,
      A.EMP_CODE,A.EMP_CODE||' '||DECODE(MM_LANG_CODE,'ENG',A.EMP_NAME, 'LANG_01', A.EMP_NAME_LANG_01, 'LANG_02', A.EMP_NAME_LANG_02,
'LANG_03', A.EMP_NAME_LANG_03, 'LANG_04', A.EMP_NAME_LANG_04, 'LANG_05', A.EMP_NAME_LANG_05, 'LANG_06',
A.EMP_NAME_LANG_06, 'LANG_07', A.EMP_NAME_LANG_07, 'LANG_08', A.EMP_NAME_LANG_08, 'LANG_09', A.EMP_NAME_LANG_09,
'LANG_10', A.EMP_NAME_LANG_10,A.EMP_NAME) Emp_Name_Code,
              DECODE(MM_LANG_CODE,'ENG',D.JOB_TITLE_DESC, 'LANG_01', D.JOB_TITLE_DESC_LANG_01, 'LANG_02', D.JOB_TITLE_DESC_LANG_02,
'LANG_03', D.JOB_TITLE_DESC_LANG_03, 'LANG_04', D.JOB_TITLE_DESC_LANG_04, 'LANG_05', D.JOB_TITLE_DESC_LANG_05, 'LANG_06',
D.JOB_TITLE_DESC_LANG_06, 'LANG_07', D.JOB_TITLE_DESC_LANG_07, 'LANG_08', D.JOB_TITLE_DESC_LANG_08, 'LANG_09', D.JOB_TITLE_DESC_LANG_09,
'LANG_10', D.JOB_TITLE_DESC_LANG_10,D.JOB_TITLE_DESC)JOB_TITLE_DESC
,A.EMP_COMP_CODE
      FROM    PM_EMP_KEY A, FM_DIVISION B,FM_DEPARTMENT C, PM_JOB_TITLE D,PT_LEAVE_SCH_DETAIL E, PM_LEAVE F
      WHERE    A.EMP_COMP_CODE    = P_COMP_CODE
      AND    B.DIVN_CODE            = A.EMP_DIVN_CODE
      AND    B.DIVN_COMP_CODE    = A.EMP_COMP_CODE
      AND    C.DEPT_CODE            = A.EMP_DEPT_CODE
      AND    C.DEPT_DIVN_CODE    = A.EMP_DIVN_CODE
      AND    C.DEPT_COMP_CODE    = A.EMP_COMP_CODE
      AND    D.JOB_TITLE_CODE    = A.EMP_JOB_TITLE_CODE
      AND    E.LVSCD_EMP_CODE    = A.EMP_CODE
      AND    F.LV_CATG_CODE       = E.LVSCD_LV_CATG_CODE
      AND     F.LV_TYPE_CODE    = '1'
      AND    A.EMP_CODE               BETWEEN  P_FM_EMP  AND P_TO_EMP
      AND    A.EMP_DIVN_CODE         BETWEEN  P_FM_DIVN AND P_TO_DIVN
      AND    A.EMP_DEPT_CODE         BETWEEN  P_FM_DEPT AND P_TO_DEPT
      AND    A.EMP_JOB_TITLE_CODE BETWEEN  P_FM_DESIGNATION AND P_TO_DESIGNATION
      AND    (TO_CHAR(E.LVSCD_FROM_DT,'YYYY') = P_AS_OF_YEAR OR
        TO_CHAR(E.LVSCD_UPTO_DT,'YYYY') = P_AS_OF_YEAR);

CURSOR C_LEAVE_MM IS
      SELECT LVSCD_EMP_CODE EMP_CODE,TO_CHAR(LVSCD_FROM_DT,'MMYYYY') LV_MM,
               TO_CHAR(LVSCD_FROM_DT,'Mon') Month,TO_CHAR(LVSCD_FROM_DT,'DD/MM') LV_DT
      FROM     PT_LEAVE_SCH_DETAIL
      WHERE     TO_CHAR(LVSCD_FROM_DT,'MMYYYY') != TO_CHAR(LVSCD_UPTO_DT,'MMYYYY')
      UNION
      SELECT LVSCD_EMP_CODE,TO_CHAR(LVSCD_UPTO_DT,'MMYYYY') LV_MM,
               TO_CHAR(LVSCD_UPTO_DT,'Mon') Month,TO_CHAR(LVSCD_UPTO_DT,'DD/MM') LV_DT
      FROM     PT_LEAVE_SCH_DETAIL
      WHERE  TO_CHAR(LVSCD_FROM_DT,'MMYYYY') != TO_CHAR(LVSCD_UPTO_DT,'MMYYYY')
      UNION
      SELECT LVSCD_EMP_CODE,TO_CHAR(LVSCD_FROM_DT,'MMYYYY') LV_MM,TO_CHAR(LVSCD_FROM_DT,'Mon') Month,
               TO_CHAR(LVSCD_FROM_DT,'DD/MM')||' - '||TO_CHAR(LVSCD_UPTO_DT,'DD/MM') LV_DT
      FROM    PT_LEAVE_SCH_DETAIL
      WHERE TO_CHAR(LVSCD_FROM_DT,'MMYYYY') = TO_CHAR(LVSCD_UPTO_DT,'MMYYYY');

BEGIN

   DELETE FROM PW_VACATION_SCHEDULE  WHERE VSR_REP_KEY_NO = P_REP_KEY_NO;

    MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;


   FOR I IN  C_VAC_SCH
   LOOP

      FOR J IN C_LEAVE_MM
      LOOP

      INSERT INTO PW_VACATION_SCHEDULE ( VSR_COMP_CODE,
                                         VSR_REP_KEY_NO,
                                         VSR_DIVN_NAME,
                                         VSR_DEPT_NAME,
                                         VSR_EMP,
                                         VSR_EMP_NAME,
                                         VSR_JOB_TITLE_DESC,
                                         VSR_EMP_COMP_CODE,
                                         VSR_EMP_CODE,
                                         VSR_LV_MM,
                                         VSR_MONTH,
                                         VSR_LV_DT )
                                VALUES ( P_COMP_CODE,
                                         P_REP_KEY_NO,
                                         I.DIVN_NAME,
                                         I.DEPT_NAME,
                                         I.EMP_CODE,
                                         I.EMP_NAME_CODE,
                                         I.JOB_TITLE_DESC,
                                         I.EMP_COMP_CODE,
                                         J.EMP_CODE,
                                         J.LV_MM,
                                         J.MONTH,
                                         J.LV_DT);


      END LOOP;
   END LOOP;

END P_VACATION_SCHEDULE;

PROCEDURE P_LEAVE_ACCURAL ( P_COMP_CODE   IN VARCHAR2,
                            P_REP_KEY_NO  IN NUMBER,
                            P_FM_DIVN     IN VARCHAR2,
                            P_TO_DIVN     IN VARCHAR2,
                            P_FM_DEPT     IN VARCHAR2,
                            P_TO_DEPT     IN VARCHAR2,
                            P_FM_LOCN     IN VARCHAR2,
                            P_TO_LOCN     IN VARCHAR2,
                            P_FM_CC       IN VARCHAR2,
                            P_TO_CC       IN VARCHAR2,
                            P_FM_EMP      IN VARCHAR2,
                            P_TO_EMP      IN VARCHAR2,
                            P_FM_CON_TYPE IN VARCHAR2,
                            P_TO_CON_TYPE IN VARCHAR2,
                            P_FM_LV IN VARCHAR2,  --CONDITION ADDED BY SHOBHANA FOR ALKHAMIS_INT-1913806
                            P_TO_LV IN VARCHAR2, --CONDITION ADDED BY SHOBHANA FOR ALKHAMIS_INT-1913806
                            P_AS_ON_MTH   IN number) IS

MM_LANG_CODE VARCHAR2(240);

CURSOR C_LEAVE_ACCURAL IS
      SELECT EMPL_LV_CATG_CODE Q_1_CATG_CODE,DECODE(MM_LANG_CODE,'ENG',LV_DESC, 'LANG_01',LV_DESC_LANG_01, 'LANG_02', LV_DESC_LANG_02, 'LANG_03', LV_DESC_LANG_03, 'LANG_04',
         LV_DESC_LANG_04, 'LANG_05', LV_DESC_LANG_05, 'LANG_06',LV_DESC_LANG_06, 'LANG_07',LV_DESC_LANG_07, 'LANG_08',LV_DESC_LANG_08,
         'LANG_09',LV_DESC_LANG_09, 'LANG_10', LV_DESC_LANG_10) Q_1_CATG_DESC, EMP_CODE  Q_1_EMP_CODE,
         DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01',EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04',
         EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',EMP_NAME_LANG_06, 'LANG_07',EMP_NAME_LANG_07, 'LANG_08',EMP_NAME_LANG_08,
         'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10) Q_1_EMP_NAME,
             LV_DAYS  Q_1_LV_DAYS,LV_TYPE_CODE Q_1_TYPE_CODE
      FROM   PM_EMP_LEAVE, PM_EMP_KEY, PM_LEAVE
      WHERE  EMP_COMP_CODE = P_COMP_CODE
      AND    EMP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
      AND    EMP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
      AND    EMP_CODE      BETWEEN P_FM_EMP  AND P_TO_EMP
      AND    EMP_CC_CODE   BETWEEN P_FM_CC   AND P_TO_CC
      AND    EMPL_LV_CATG_CODE BETWEEN P_FM_LV AND P_TO_LV   --CONDITION ADDED BY SHOBHANA FOR ALKHAMIS_INT-1913806
      AND    EMP_CONT_TYPE_CODE BETWEEN P_FM_CON_TYPE AND P_TO_CON_TYPE
      AND    EMP_LOCN_CODE BETWEEN  P_FM_LOCN AND P_TO_LOCN
      AND    LV_CATG_CODE = EMPL_LV_CATG_CODE
      AND    EMP_CODE = EMPL_CODE
      AND    EMP_COMP_CODE = EMPL_COMP_CODE
      AND    NVL(EMP_FRZ_FLAG,'N')='N'
      AND    EMP_STATUS IN ('1','2','3','9')
      ORDER BY EMPL_LV_CATG_CODE, EMP_CODE;


 CURSOR C2 IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;



   M_BALANCE PW_FS.AMOUNT%TYPE;
   M_ACCR_AMT NUMBER;
   M_ACCR_AMT_LC NUMBER;
   M_AVAILED_LV_BAL  NUMBER;  --ADDED BY SURESH_B IN00951 REQ2928 - Maintaining the Leave Accrual History
   M_CARRY_FRWRD_LV_BAL  NUMBER;  --ADDED BY SURESH_B IN00951 REQ2928 - Maintaining the Leave Accrual History

BEGIN

   DELETE FROM PW_LEAVE_ACCURAL WHERE LAC_REP_KEY_NO = P_REP_KEY_NO;
   DELETE FROM OW_REP_COLS WHERE REP_KEY_NO = P_REP_KEY_NO;

   MM_LANG_CODE := NULL;

    IF C2%ISOPEN THEN
       CLOSE C2;
    END IF;

    OPEN C2;
    FETCH C2 INTO MM_LANG_CODE;
    CLOSE C2;

    INSERT INTO OW_REP_COLS
(REP_SYS_ID, REP_NAME, COL_TYPE, COL_NAME, COL_TAB_NAME, COL_LEVEL, COL_LINK_LEVEL, COL_LINK, LINK_COLUMN_YN, COL_SEQ, SUB_WHERE_COND, SUB_TAB_NAME, SUB_RET_NAME, COL_LABEL_NAME, COL_ORDER_YN, COL_ORDER_SEQ, COL_FORMAT_MASK, COL_WIDTH, COL_ORDER_ASC_DESC, COL_MATRIX_TYPE, COL_FORMULA, COL_FOR_DATA_TYPE, REP_TYPE_FLAG, REP_USER_ID, COL_DISP_YN, REP_COL_SYS_ID, COL_ALIGN, COL_CASE, REP_COL_CR_UID, REP_COL_CR_DT, REP_COL_UPD_UID, REP_COL_UPD_DT, COL_LABEL_BL_NAME, COL_FORMULA_YN, COL_EXPORT_WIDTH, COL_EXPORT_WRAP_YN, SUB_CLIENT_ID, SUB_INST_CODE, SUB_SECURITY_CODE, REP_CLIENT_ID, REP_INST_CODE, REP_SECURITY_CODE, LINK_CLIENT_ID, LINK_INST_CODE, LINK_SECURITY_CODE, COL_CLIENT_ID, COL_INST_CODE, COL_SECURITY_CODE, CURR_FORMAT_YN_NUM, CURR_FORMAT_LC_FC, CURR_COL_NAME, REP_KEY_NO,COL_LABEL_NAME_LANG_01,COL_LABEL_NAME_LANG_02,COL_LABEL_NAME_LANG_03,COL_LABEL_NAME_LANG_04,COL_LABEL_NAME_LANG_05,COL_LABEL_NAME_LANG_06,COL_LABEL_NAME_LANG_07,COL_LABEL_NAME_LANG_08,COL_LABEL_NAME_LANG_09,COL_LABEL_NAME_LANG_10)
SELECT REP_SYS_ID, REP_NAME, COL_TYPE, COL_NAME, COL_TAB_NAME, COL_LEVEL, COL_LINK_LEVEL, COL_LINK, LINK_COLUMN_YN, COL_SEQ, SUB_WHERE_COND, SUB_TAB_NAME, SUB_RET_NAME, COL_LABEL_NAME, COL_ORDER_YN, COL_ORDER_SEQ, COL_FORMAT_MASK, COL_WIDTH, COL_ORDER_ASC_DESC, COL_MATRIX_TYPE, COL_FORMULA, COL_FOR_DATA_TYPE, REP_TYPE_FLAG, REP_USER_ID, COL_DISP_YN, REP_COL_SYS_ID, COL_ALIGN, COL_CASE, REP_COL_CR_UID, REP_COL_CR_DT, REP_COL_UPD_UID, REP_COL_UPD_DT, COL_LABEL_BL_NAME, COL_FORMULA_YN, COL_EXPORT_WIDTH, COL_EXPORT_WRAP_YN, SUB_CLIENT_ID, SUB_INST_CODE, SUB_SECURITY_CODE, C.REP_CLIENT_ID, C.REP_INST_CODE, C.REP_SECURITY_CODE, LINK_CLIENT_ID, LINK_INST_CODE, LINK_SECURITY_CODE, COL_CLIENT_ID, COL_INST_CODE, COL_SECURITY_CODE, CURR_FORMAT_YN_NUM, CURR_FORMAT_LC_FC, CURR_COL_NAME, P_REP_KEY_NO,COL_LABEL_NAME_LANG_01,COL_LABEL_NAME_LANG_02,COL_LABEL_NAME_LANG_03,COL_LABEL_NAME_LANG_04,COL_LABEL_NAME_LANG_05,COL_LABEL_NAME_LANG_06,COL_LABEL_NAME_LANG_07,COL_LABEL_NAME_LANG_08,COL_LABEL_NAME_LANG_09,COL_LABEL_NAME_LANG_10 FROM REP_COLS C, IP_REP_INFO WHERE REP_SYS_ID = REP_ID AND  REP_KEY_NO = P_REP_KEY_NO;

   FOR I IN C_LEAVE_ACCURAL
   LOOP
      ----DUMMY('SURESH_B I.Q_1_TYPE_CODE: '||I.Q_1_TYPE_CODE||', I.Q_1_EMP_CODE: '||I.Q_1_EMP_CODE);
      IF I.Q_1_TYPE_CODE <> '3' THEN
           M_BALANCE :=  P_GET_LEAVE_BAL(P_COMP_CODE,I.Q_1_EMP_CODE,I.Q_1_CATG_CODE,LAST_DAY(TO_DATE(P_AS_ON_MTH,'YYYYMM')),M_ACCR_AMT, M_ACCR_AMT_LC, I.Q_1_TYPE_CODE);--:CP_ACCR_AMT is added by Rajat  on 05/10/2006 to display Accrued Amount
         --DUMMY('M_BALANCE'||M_BALANCE);
          P_GET_LEAVE_BAL_DTLS(P_COMP_CODE,I.Q_1_EMP_CODE,I.Q_1_CATG_CODE,LAST_DAY(TO_DATE(P_AS_ON_MTH,'YYYYMM')),
                                M_ACCR_AMT, M_ACCR_AMT_LC, I.Q_1_TYPE_CODE,
                                M_BALANCE, M_AVAILED_LV_BAL, M_CARRY_FRWRD_LV_BAL );
      ELSE
           M_BALANCE :=  P_GET_LEAVE_BAL_SICK(P_COMP_CODE,I.Q_1_EMP_CODE,I.Q_1_CATG_CODE,LAST_DAY(TO_DATE(P_AS_ON_MTH,'YYYYMM')),M_ACCR_AMT,I.Q_1_TYPE_CODE);
      END IF;

      INSERT INTO PW_LEAVE_ACCURAL ( LAC_COMP_CODE,
                                     LAC_REP_KEY_NO,
                                     LAC_CATG_CODE,
                                     LAC_CATG_DESC,
                                     LAC_EMP_CODE,
                                     LAC_EMP_NAME,
                                     LAC_LV_DAYS,
                                     LAC_TYPE_CODE,
                                     LAC_BALANE,
                                     LAC_AMOUNT,
                                     LAC_LC_ACCR_AMT,
                                     LAC_AVAILED_LV_BAL,  --ADDED BY SURESH_B IN00951 REQ2928 - Maintaining the Leave Accrual History
                                     LAC_CARRY_FRWD_LV_BAL  )   --ADDED BY SURESH_B IN00951 REQ2928 - Maintaining the Leave Accrual History
                            VALUES ( P_COMP_cODE,
                                     P_REP_KEY_NO,
                                     I.Q_1_CATG_CODE,
                                     I.Q_1_CATG_DESC,
                                     I.Q_1_EMP_CODE,
                                     I.Q_1_EMP_NAME,
                                     I.Q_1_LV_DAYS,
                                     I.Q_1_TYPE_CODE,
                                     Nvl(M_BALANCE,0),
                                     Nvl(M_ACCR_AMT,0),
                                     Nvl(M_ACCR_AMT_LC,0),
                                     Nvl(M_AVAILED_LV_BAL,0),   --ADDED BY SURESH_B IN00951 REQ2928 - Maintaining the Leave Accrual History
                                     Nvl(M_CARRY_FRWRD_LV_BAL,0) );   --ADDED BY SURESH_B IN00951 REQ2928 - Maintaining the Leave Accrual History


   END LOOP;



END P_LEAVE_ACCURAL;

FUNCTION P_GET_LEAVE_BAL( P_COMP_CODE           IN     VARCHAR2,
                          P_EMP_CODE            IN     VARCHAR2,
                          P_LV_CATG_CODE        IN     VARCHAR2,
                          P_DATE                IN     DATE    ,
                          P_ACCRUED_AMT         IN OUT NUMBER,
                          P_ACCR_AMT_LC                  OUT    NUMBER,
                          P_TYPE_CODE                    IN        NUMBER) RETURN NUMBER IS

   M_COMP_CODE  PW_FS.COMP_CODE%TYPE;
   P_BALANCE    PW_FS.AMOUNT%TYPE;
   P_ACCR_AMT   PW_FS.AMOUNT%TYPE;

   M_EMP_CURR_CODE VARCHAR2(12);
   M_FC_AMOUNT  NUMBER;
   M_PERC  NUMBER(5,2);
   M_TYPE_CODE VARCHAR2(6);
   M_ALLW_AMT NUMBER;
   M_ACCR_DAYS NUMBER;
   M_AVAIL_DAYS NUMBER;
   M_ELIG_DAYS NUMBER;
   M_CPTODT_1 DATE;
   M_CPFMDT_1 DATE;

CURSOR C2(P_FM_DT DATE,P_TO_DT DATE) IS
      SELECT EMPA_CURR_CODE, EMPA_FC_AMOUNT, LVA_PERC, LVA_TYPE_CODE
      FROM   PM_EMP_ALLOWANCE, PM_LEAVE_ALLOWANCE, PM_EMP_LEAVE
      WHERE EMPA_COMP_CODE = M_COMP_CODE
      AND   EMPA_CODE = P_EMP_CODE
      AND   EMPA_ALLW_CODE = LVA_ALLW_CODE
      AND   EMPL_CODE = EMPA_CODE
      AND   EMPL_LV_CATG_CODE = LVA_CATG_CODE
      AND   LVA_TYPE_CODE = '1'
      AND  (EMPA_FROM_DT  BETWEEN P_FM_DT AND P_TO_DT
        OR EMPA_UPTO_DT BETWEEN P_FM_DT AND P_TO_DT
        OR P_FM_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
        OR P_TO_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT);


   M_PARA_VALUE VARCHAR2(30);

CURSOR C_PARA_VALUE IS
      SELECT PARA_VALUE
      FROM   PM_COMP_PARAMETER
      WHERE  PARA_COMP_CODE = M_COMP_CODE
      AND   PARA_TYPE = 'LVBSDYFLAG'
      AND   PARA_CODE = 'LVBSDYFLAG';


   M_PARA_VALUE_1 VARCHAR2(30);

CURSOR C_PARA_VALUE_1 IS
     SELECT PARA_VALUE
     FROM   PM_COMP_PARAMETER
     WHERE  PARA_COMP_CODE = M_COMP_CODE
     AND   PARA_TYPE = 'LVBSDYS'
     AND   PARA_CODE = 'LVBSDYS';


   M_CPTODT VARCHAR2(30);
CURSOR C_CPTODT IS
     SELECT PARA_VALUE
     FROM   PM_COMP_PARAMETER
     WHERE  PARA_COMP_CODE = M_COMP_CODE
     AND    PARA_CODE = 'CPTODT'
     AND    PARA_TYPE = 'CPTODT';

   M_DAYS NUMBER;
   M_CPFMDT VARCHAR2(30);

CURSOR C_CPFMDT IS
     SELECT PARA_VALUE
     FROM   PM_COMP_PARAMETER
     WHERE  PARA_COMP_CODE = M_COMP_CODE
     AND    PARA_CODE = 'CPFMDT'
     AND    PARA_TYPE = 'CPFMDT';

CURSOR C_GET_LV_BAL IS
      SELECT SUM(LVAC_ACCRUED_DAYS), NVL(SUM(LVAC_AVAILED_DAYS),0) --,
      FROM     PS_LEAVE_ACCRUAL_CURR
          WHERE  LVAC_COMP_CODE        = M_COMP_CODE
          AND       LVAC_EMP_CODE        = P_EMP_CODE
      AND    LVAC_LV_CODE = P_LV_CATG_CODE
          AND      (TO_CHAR(LVAC_YEAR) < TO_CHAR(P_DATE,'YYYY') -- MODIFIED BY ASHIK FOR THE ISSUE FALCONCHEM-367351 ON 11/01/2010
          OR    (TO_CHAR(LVAC_YEAR) = TO_CHAR(P_DATE,'YYYY')
         AND      LPAD(TO_CHAR(NVL(LVAC_MONTH,0)),2,'0') <= TO_CHAR(P_DATE,'MM')));

CURSOR C1 IS
            SELECT LV_DAYS
            FROM PM_LEAVE
            WHERE    LV_CATG_CODE = P_LV_CATG_CODE
            AND LV_TYPE_CODE = P_TYPE_CODE;
CURSOR C_GET_LV_BAL_PREV IS
      SELECT     SUM(LVAP_ACCRUED_DAYS), NVL(SUM(LVAP_AVAILED_DAYS),0)
          FROM      PS_LEAVE_ACCRUAL_PREV
          WHERE      LVAP_COMP_CODE        = M_COMP_CODE
          AND        LVAP_EMP_CODE        = P_EMP_CODE
      AND     LVAP_LV_CODE = P_LV_CATG_CODE
          AND        TO_CHAR(LVAP_YEAR) = TO_CHAR(P_DATE,'YYYY')
          AND        LPAD(TO_CHAR(NVL(LVAP_MONTH,0)),2,'0') <= TO_CHAR(P_DATE,'MM');

   M_ACCR_DAYS_PREV NUMBER;
   M_AVAIL_DAYS_PREV NUMBER;

CURSOR C_CPMTH IS
      SELECT PARA_VALUE
      FROM   PM_COMP_PARAMETER
      WHERE PARA_COMP_CODE = M_COMP_CODE
      AND   PARA_CODE = 'CPMTH'
      AND   PARA_TYPE = 'CPMTH';

M_CPMTH VARCHAR2(6);

CURSOR C_PREV_YEAR_DATA_IN_CURR IS
          SELECT 'X'
          FROM   PS_LEAVE_ACCRUAL_CURR
          WHERE  LVAC_COMP_CODE = M_COMP_CODE
          AND    LVAC_EMP_CODE = P_EMP_CODE
          AND    LVAC_LV_CODE = P_LV_CATG_CODE
          AND    TO_CHAR(LVAC_YEAR) = TO_CHAR(P_DATE,'YYYY');


   M_PREV_EXIST VARCHAR2(1);


CURSOR C_GET_BASE_CURR IS
        SELECT COMP_BASE_CURR_CODE_1
        FROM FM_COMPANY
        WHERE COMP_CODE = M_COMP_CODE;

   M_BASE_CURR VARCHAR2(12);


BEGIN

   P_BALANCE   := 0;
   M_COMP_CODE := P_COMP_CODE;
   OPEN C_GET_LV_BAL;
   /*commented and added below by Rajasekaran on 17/03/2008 for AIN-206999 issue.
   Addition start by Rajasekaran
   FETCH C_GET_LV_BAL INTO P_BALANCE;--COMMENTED , P_ACCR_AMT;-- P_ACCR_AMT is added by Rajat on 05/10/2006 to display Accrued Amount*/
   FETCH C_GET_LV_BAL INTO M_ACCR_DAYS,M_AVAIL_DAYS;
   CLOSE C_GET_LV_BAL;

-- ADDED BY ASHIK
   OPEN C_GET_LV_BAL_PREV;
   FETCH C_GET_LV_BAL_PREV INTO M_ACCR_DAYS_PREV,M_AVAIL_DAYS_PREV;
   CLOSE C_GET_LV_BAL_PREV;

     OPEN C_CPMTH;
     FETCH C_CPMTH INTO M_CPMTH;
     CLOSE C_CPMTH;

        OPEN C_PREV_YEAR_DATA_IN_CURR;
        FETCH C_PREV_YEAR_DATA_IN_CURR INTO M_PREV_EXIST;
        CLOSE C_PREV_YEAR_DATA_IN_CURR;

        IF TO_CHAR(P_DATE,'YYYY') < SUBSTR(M_CPMTH,1,4) AND NVL(M_PREV_EXIST,'Y') <> 'X'THEN
                 P_BALANCE := M_ACCR_DAYS_PREV - M_AVAIL_DAYS_PREV;
         ELSE
-- ADDED BY ASHIK
           OPEN C1;
           FETCH C1 INTO M_ELIG_DAYS;
           CLOSE C1;

           IF M_ACCR_DAYS IS NULL THEN
--                   P_BALANCE := M_ELIG_DAYS - M_AVAIL_DAYS;
-- COMMENTED ABOVE AND ADDED BELOW BY ASHIK FOR THE ISSUE ALS-399979 ON 19-05-2010
                   P_BALANCE := NVL(M_ACCR_DAYS,0) - M_AVAIL_DAYS;
            ELSE
                   P_BALANCE := M_ACCR_DAYS - M_AVAIL_DAYS;
            END IF;
        END IF;
   --Addition end by Rajasekaran for AIN-206999 issue.
--   P_BALANCE := NVL(P_BALANCE,0);
--   P_BALANCE := ROUND(NVL(P_BALANCE,0));
--  COMMENTED ABOVE AND ADDED BELOW BY ASHIK FOR THE ISSUE ASI-425964 ON 04-AUG-2010
   P_BALANCE := ROUND(NVL(P_BALANCE,0),2);
   --P_ACCRUED_AMT := NVL(P_ACCR_AMT,0);

-- ADDED BELOW BY ASHIK FOR THE ISSUE ALS-399979 ON 20-05-2010

    --M_CPFMDT_1 :=TO_DATE(TO_DATE(P_DATE,'YYYYMM'),'DD/MM/RRRR');
  M_CPFMDT_1 := p_date;
    --M_CPTODT_1 :=TO_DATE(LAST_DAY(TO_DATE(P_DATE,'YYYYMM')),'DD/MM/RRRR');
  M_CPTODT_1 := Last_Day(P_DATE);

-- Added by Rajesh M for the issue TAMEER-164898 on 30/06/2007
--   OPEN C2;
-- COMMENTED ABOVE AND ADDED BELOW BY ASHIK FOR THE ISSUE ALS-399979 ON 20-05-2010
   OPEN C2(M_CPFMDT_1,M_CPTODT_1);
 LOOP
   FETCH C2 INTO M_EMP_CURR_CODE, M_FC_AMOUNT, M_PERC, M_TYPE_CODE;
     P_ACCR_AMT := ((M_FC_AMOUNT * M_PERC) / 100);
   EXIT WHEN C2%NOTFOUND;
     M_ALLW_AMT := (NVL(P_ACCR_AMT,0) + NVL(M_ALLW_AMT,0));
 END LOOP;
CLOSE C2;

OPEN C_PARA_VALUE;
 FETCH C_PARA_VALUE INTO M_PARA_VALUE;
CLOSE C_PARA_VALUE;

OPEN C_PARA_VALUE_1;
 FETCH C_PARA_VALUE_1 INTO M_PARA_VALUE_1;
CLOSE C_PARA_VALUE_1;

OPEN C_CPFMDT;
FETCH C_CPFMDT INTO M_CPFMDT;
CLOSE C_CPFMDT;

OPEN C_CPTODT;
FETCH C_CPTODT INTO M_CPTODT;
CLOSE C_CPTODT;

IF P_TYPE_CODE = '1' THEN
-- ADDED BY ASHIK FOR THE ISSUE FALCONCHEM-367848 ON 14/FEB/2010
    M_CPFMDT := To_Char(TO_DATE(P_DATE,'DD/MM/YYYY'),'YYYYMM');
    M_CPTODT := (To_Char(TO_DATE(P_DATE,'DD/MM/YYYY'),'YYYYMM'));
-- ADDED BY ASHIK FOR THE ISSUE FALCONCHEM-367848 ON 14/FEB/2010
  M_DAYS := M_CPTODT- M_CPFMDT + 1 ;
 IF M_PARA_VALUE = 'E' THEN
  P_ACCRUED_AMT := ((M_ALLW_AMT / M_PARA_VALUE_1) * P_BALANCE);

  P_ACCRUED_AMT:=ROUND(P_ACCRUED_AMT,2);
 ELSE
     P_ACCRUED_AMT := ((M_ALLW_AMT / M_DAYS) * P_BALANCE);

     P_ACCRUED_AMT:=ROUND(P_ACCRUED_AMT,2);
 END IF;
 ELSE
     P_ACCRUED_AMT := 0;
END IF;
 --end  TAMEER-164898

-- ADDED BY ASHIK ON 14/OCT/2012 FOR THE ISSUE JSG-780692
OPEN C_GET_BASE_CURR;
FETCH C_GET_BASE_CURR INTO M_BASE_CURR;
CLOSE C_GET_BASE_CURR;

IF NVL(P_ACCRUED_AMT,0) > 0 THEN
    F_DCONV_RATE_FM_CURR_TO_CURR(M_EMP_CURR_CODE,P_ACCRUED_AMT,'B',SYSDATE,M_BASE_CURR,P_ACCR_AMT_LC,'W');
END IF;
-- ADDED BY ASHIK ON 14/OCT/2012 FOR THE ISSUE JSG-780692

RETURN (P_BALANCE);


END P_GET_LEAVE_BAL/* some changes are done by partha*/;

FUNCTION P_GET_LEAVE_BAL_SICK (  P_COMP_CODE    IN VARCHAR2,
                                P_EMP_CODE     IN VARCHAR2,  -- Employee Code
                                P_LV_CATG_CODE IN VARCHAR2,  -- Leave Category Code
                                P_DATE         IN DATE    ,  -- Balance on which Date
                                P_ACCRUED_AMT  IN OUT  NUMBER,
                                P_TYPE_CODE         IN    NUMBER
                          )  RETURN NUMBER IS

M_COMP_CODE  PW_FS.COMP_CODE%TYPE;
   P_BALANCE    PW_FS.AMOUNT%TYPE;
   P_ACCR_AMT   PW_FS.AMOUNT%TYPE;


M_BAL_DAYS NUMBER;

CURSOR C_GET_LV_BAL IS
        SELECT NVL(SUM(ELS_BAL_DAYS),0)
        FROM PM_EMP_LEAVE_SICK
        WHERE    ELS_COMP_CODE        = M_COMP_CODE
        AND      ELS_EMP_CODE        = P_EMP_CODE
    AND   ELS_CATG_CODE = P_LV_CATG_CODE;

BEGIN

    P_BALANCE   := 0;
   M_COMP_CODE := P_COMP_CODE;
   OPEN C_GET_LV_BAL;
   FETCH C_GET_LV_BAL INTO M_BAL_DAYS;
   CLOSE C_GET_LV_BAL;

  P_BALANCE := ROUND(NVL(M_BAL_DAYS,0),2);

     P_ACCRUED_AMT := 0;
   RETURN (P_BALANCE);
END P_GET_LEAVE_BAL_SICK;

PROCEDURE P_FINAL_PAYROLL_FC ( P_COMP_CODE     IN VARCHAR2,
                               P_REP_KEY_NO    IN NUMBER,
                               P_FM_EMP        IN VARCHAR2,
                               P_TO_EMP        IN VARCHAR2,
                               P_FM_DIVN       IN VARCHAR2,
                               P_TO_DIVN       IN VARCHAR2,
                               P_FM_DEPT       IN VARCHAR2,
                               P_TO_DEPT       IN VARCHAR2,
                               P_FM_LOCN       IN VARCHAR2,
                               P_TO_LOCN       IN VARCHAR2,
                               P_FM_CC         IN VARCHAR2,
                               P_TO_CC         IN VARCHAR2,
                               P_FM_CONT_TYPE  IN VARCHAR2,
                               P_TO_CONT_TYPE  IN VARCHAR2,
                               P_FM_COUNTRY    IN VARCHAR2,
                               P_TO_COUNTRY    IN VARCHAR2,
                               P_CURRENCY      IN VARCHAR2,
                               P_PROC_MTH      IN NUMBER,
                               P_MODE_TYPE     IN VARCHAR2,
                               P_PAY_TYPE      IN VARCHAR2,
                               P_SAL_YN        IN VARCHAR2,
                               P_PYBSDYFLAG_EA IN VARCHAR2 ) IS

MM_LANG_CODE VARCHAR2(240);
CURSOR C_FINAL_PAY IS
      SELECT DISTINCT DEPT_DIVN_CODE DEPT_DIVN_CODE,
             DECODE(MM_LANG_CODE,'ENG',DIVN_NAME, 'LANG_01',DIVN_NAME_LANG_01, 'LANG_02', DIVN_NAME_LANG_02, 'LANG_03', DIVN_NAME_LANG_03, 'LANG_04',
              DIVN_NAME_LANG_04, 'LANG_05', DIVN_NAME_LANG_05, 'LANG_06',DIVN_NAME_LANG_06, 'LANG_07',DIVN_NAME_LANG_07, 'LANG_08',DIVN_NAME_LANG_08,
              'LANG_09',DIVN_NAME_LANG_09, 'LANG_10', DIVN_NAME_LANG_10)  "Q_1_DIVN_NAME",
               DEPT_CODE "Q_1_DEPT_CODE",DEPT_CODE "C_DEPT_CODE",
             DECODE(MM_LANG_CODE,'ENG',DEPT_NAME, 'LANG_01',DEPT_NAME_LANG_01, 'LANG_02', DEPT_NAME_LANG_02, 'LANG_03', DEPT_NAME_LANG_03, 'LANG_04',
              DEPT_NAME_LANG_04, 'LANG_05', DEPT_NAME_LANG_05, 'LANG_06',DEPT_NAME_LANG_06, 'LANG_07',DEPT_NAME_LANG_07, 'LANG_08',DEPT_NAME_LANG_08,
              'LANG_09',DEPT_NAME_LANG_09, 'LANG_10', DEPT_NAME_LANG_10)   "Q_1_DEPT_NAME",
              DECODE(MM_LANG_CODE,'ENG',DEPT_NAME, 'LANG_01',DEPT_NAME_LANG_01, 'LANG_02', DEPT_NAME_LANG_02, 'LANG_03', DEPT_NAME_LANG_03, 'LANG_04',
              DEPT_NAME_LANG_04, 'LANG_05', DEPT_NAME_LANG_05, 'LANG_06',DEPT_NAME_LANG_06, 'LANG_07',DEPT_NAME_LANG_07, 'LANG_08',DEPT_NAME_LANG_08,
              'LANG_09',DEPT_NAME_LANG_09, 'LANG_10', DEPT_NAME_LANG_10)   "C_DEPT_NAME",
               FP_EMP_CODE "Q_1_DP_EMP_CODE1",FP_ORG_BASIC_FC_AMOUNT "Q_1_DP_ORG_BASIC_FC_AMOUNT",
               EMP_JOIN_DT,EMP_ANAL_CODE_1
      FROM   FM_DEPARTMENT, FM_DIVISION,PS_FINAL_PROC , PM_EMP_PAY,  PM_EMP_KEY
      WHERE  DEPT_COMP_CODE   = P_COMP_CODE
      AND       DEPT_CODE        = FP_DEPT_CODE
      AND       DEPT_DIVN_CODE   = FP_DIVN_CODE
      AND    FP_COMP_CODE     =  DEPT_COMP_CODE
      AND       FP_EMP_CODE     BETWEEN P_FM_EMP  AND P_TO_EMP
      AND       FP_DIVN_CODE    BETWEEN P_FM_DIVN  AND P_TO_DIVN
      AND    FP_DEPT_CODE    BETWEEN P_FM_DEPT AND P_TO_DEPT
      AND       FP_LOCN_CODE    BETWEEN P_FM_LOCN     AND P_TO_LOCN
      AND    FP_CC_CODE      BETWEEN P_FM_CC  AND P_TO_CC
      AND       FP_CONT_TYPE_CODE   BETWEEN P_FM_CONT_TYPE AND P_TO_CONT_TYPE
      AND       NVL(FP_CNTRY_CODE,P_FM_COUNTRY)  BETWEEN  P_FM_COUNTRY  AND  P_TO_COUNTRY
      AND    EMPY_COMP_CODE = DEPT_COMP_CODE
      AND    EMPY_CODE             = FP_EMP_CODE
      AND    EMPY_PAY_TYPE    = DECODE(P_PAY_TYPE,'H','H','D','D','M','M','A', EMPY_PAY_TYPE)
      AND       EMPY_PAY_MODE   = DECODE (NVL(P_MODE_TYPE,'A'), 'C', 'C', 'B', 'B', 'Q', 'Q','A', EMPY_PAY_MODE)
      AND      DIVN_COMP_CODE = P_COMP_CODE
      AND      DIVN_CODE = DEPT_DIVN_CODE
      AND     EMPY_CODE  = EMP_CODE
      AND    EMP_COMP_CODE = P_COMP_CODE
      AND NVL(EMP_PROC_FLAG,'Z') = 'Y'
      AND (EMP_STATUS IN('1','2','3')  OR EMP_END_OF_SERVICE_DT >  LAST_DAY(TO_DATE(P_PROC_MTH, 'YYYYMM') ))/*Above line commented added by Rajasekar on 24/07/2007 for SDRS-170082*/
      AND    FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
      AND       ( DECODE(NVL(EMP_LVSAL_PROC_YN,'N'),'Y','Y','N','N')  <> P_SAL_YN
      OR           NVL(EMP_LVSAL_PROC_YN,'P')  = P_SAL_YN)
      ORDER BY DEPT_DIVN_CODE, DEPT_CODE ,FP_EMP_CODE;

   M_NO_OF_DAYS_LEAVE                PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_DAYS_LV_DURING_CPMTH      PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_SL_LV_DAYS                    PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_DAYS_LWP_DURING_CPMTH     PW_FS.NO_OF_DAYS%TYPE;
   P_STATUS                          PW_FS.FLAG%TYPE := NULL;
   P_NO_OF_DAYS_OR_HRS_PRESENT       PW_FS.NO_OF_DAYS%TYPE; -- No. of days Absent
   M_NO_OF_DAY_BET_PERIOD  PW_FS.NO_OF_DAYS%TYPE; -- Total No. of days between Eff. dates
   M_NO_OF_DAYS_IN_MONTH   PW_FS.NO_OF_DAYS%TYPE; -- Total No. of days in Month
   M_DT_FMT_MASK  VARCHAR2(60);
--   M_NAME      VARCHAR2(60);
   M_NAME      VARCHAR2(240); -- CORRECTED BY ASHIK TO RETRIEVE THE NAME AS ERROR WAS COMING WHILE RUNNING THE REPORT ON 06-FEB-2017
  M_EMP_CODE  VARCHAR2(12);
  M_ORG_BASIC      NUMBER(13,3);
  M_ORG_BAS      NUMBER(13,3);
  M_ACT_BASIC      NUMBER(13,3);
  M_ACT_BAS      NUMBER;
  M_PR_HRA        NUMBER;
  M_HRA        NUMBER;
  M_PR_HRAD        NUMBER;
  M_HRAD          NUMBER;
  M_PR_DBASIC    NUMBER;
  M_DBASIC       NUMBER;
  M_OT1          NUMBER;
  M_PR_OT1       NUMBER;
  M_PR_OT2       NUMBER;
  M_PR_EARN_1    NUMBER;
  M_EARN_1       NUMBER;
  M_PR_EARN_2    NUMBER;
  M_EARN_2       NUMBER;
  M_PR_EARN_3    NUMBER;
  M_EARN_3       NUMBER;
  M_PR_EARN_4    NUMBER;
  M_EARN_4       NUMBER;
  M_PR_EARN_5    NUMBER;
  M_EARN_5       NUMBER;
  M_PR_DED_1     NUMBER;
  M_DED_1        NUMBER;
  M_PR_DED_2     NUMBER;
  M_DED_2        NUMBER;
  M_PR_DED_3     NUMBER;
  M_DED_3        NUMBER;
  M_PR_DED_4     NUMBER;
  M_DED_4        NUMBER;
  M_PR_DED_5     NUMBER;
  M_DED_5        NUMBER;
  M_PR_EARN_OTH  NUMBER;
  M_EARN_OTH     NUMBER;
  M_PR_DED_OTH   NUMBER;
  M_DED_OTH      NUMBER;
  M_TOT_GROSS_EARN NUMBER;
  M_TOT_GROSS_DED  NUMBER;
  M_NET_SAL        NUMBER;
  M_PR_OT1_CURR_CODE PS_FINAL_PROC.FP_CURR_CODE%TYPE;
  M_PR_OT1_FC_AMT NUMBER;
  M_ORG_BASIC_FC_AMT NUMBER;
  M_ACT_BASIS_CURR_CODE PS_FINAL_PROC.FP_CURR_CODE%TYPE;
  M_ACT_BASIS_FC_AMT NUMBER;
  M_EMP_HRA_CURR_CODE PS_FINAL_PROC.FP_CURR_CODE%TYPE;
  M_EMP_HRA_FC_AMT NUMBER;
  M_EMP_HRAD_CURR_CODE PS_FINAL_PROC.FP_CURR_CODE%TYPE;
  M_EMP_HRAD_FC_AMT NUMBER;
  M_PR_DBASIC_CURR_CODE PS_FINAL_PROC.FP_CURR_CODE%TYPE;
  M_PR_DBASIC_FC_AMT NUMBER;
  M_PR_EARN1_CURR_CODE PS_FINAL_PROC.FP_CURR_CODE%TYPE;
  M_PR_EARN1_FC_AMT NUMBER;
  M_PR_EARN2_CURR_CODE PS_FINAL_PROC.FP_CURR_CODE%TYPE;
  M_PR_EARN2_FC_AMT NUMBER;
  M_PR_EARN3_CURR_CODE PS_FINAL_PROC.FP_CURR_CODE%TYPE;
  M_PR_EARN3_FC_AMT NUMBER;
  M_PR_EARN4_CURR_CODE PS_FINAL_PROC.FP_CURR_CODE%TYPE;
  M_PR_EARN4_FC_AMT NUMBER;
  M_PR_EARN5_CURR_CODE PS_FINAL_PROC.FP_CURR_CODE%TYPE;
  M_PR_EARN5_FC_AMT NUMBER;
  M_PR_DED1_CURR_CODE PS_FINAL_PROC.FP_CURR_CODE%TYPE;
  M_PR_DED1_FC_AMT NUMBER;
  M_PR_DED2_CURR_CODE PS_FINAL_PROC.FP_CURR_CODE%TYPE;
  M_PR_DED2_FC_AMT NUMBER;
  M_PR_DED3_CURR_CODE PS_FINAL_PROC.FP_CURR_CODE%TYPE;
  M_PR_DED3_FC_AMT NUMBER;
  M_PR_DED4_CURR_CODE PS_FINAL_PROC.FP_CURR_CODE%TYPE;
  M_PR_DED4_FC_AMT NUMBER;
  M_PR_DED5_CURR_CODE PS_FINAL_PROC.FP_CURR_CODE%TYPE;
  M_PR_DED5_FC_AMT NUMBER;
  M_PR_EARN_OTH_CURR_CODE PS_FINAL_PROC.FP_CURR_CODE%TYPE;
  M_PR_EARN_OTH_FC_AMT NUMBER;
  M_PR_DED_OTH_CURR_CODE PS_FINAL_PROC.FP_CURR_CODE%TYPE;
  M_PR_DED_OTH_FC_AMT NUMBER;

  M_ALLW_DED_1 VARCHAR2(12);
  M_ALLW_DED_2 VARCHAR2(12);
  M_ALLW_DED_3 VARCHAR2(12);
  M_ALLW_DED_4 VARCHAR2(12);
  M_ALLW_DED_5 VARCHAR2(12);
  M_ALLW_EARN_1 VARCHAR2(12);
  M_ALLW_EARN_2 VARCHAR2(12);
  M_ALLW_EARN_3 VARCHAR2(12);
  M_ALLW_EARN_4 VARCHAR2(12);
  M_ALLW_EARN_5 VARCHAR2(12);


  M_BP_VALUE     VARCHAR2(100);
  M_PAYDAYS number;
  M_PROC_START_DT DATE;
  M_PROC_END_DT DATE;
  M_OT_MIN_REP  VARCHAR2(1);

  M_ALLW  VARCHAR2(20);
  CNT     NUMBER(2);
  M_ALLW1 VARCHAR2(20);
  CNT1    NUMBER(2);


CURSOR B3 IS
        SELECT TO_DATE(PARA_VALUE, 'DD/MM/YYYY')--'DD/MM/YYYY')
        FROM   PM_COMP_PARAMETER
        WHERE  PARA_CODE = 'CPFMDT'
        AND    PARA_COMP_CODE = P_COMP_CODE;

CURSOR B4 IS
    SELECT TO_DATE(PARA_VALUE, 'DD/MM/YYYY')--'DD/MM/YYYY')
    FROM   PM_COMP_PARAMETER
    WHERE  PARA_CODE = 'CPTODT'
    AND    PARA_COMP_CODE = P_COMP_CODE;

CURSOR B7 IS
        SELECT NVL(PARA_VALUE,'N')
        FROM   PM_COMP_PARAMETER
        WHERE  PARA_CODE = 'OT_MIN_REP'
        AND    PARA_COMP_CODE = P_COMP_CODE;

CURSOR C_GET_NO_OF_DAYS_PRESENT(P_EMP_CODE IN VARCHAR2,P_FM_PROC_DT IN DATE,P_TO_PROC_DT IN DATE) IS
         SELECT SUM(NVL(ATND_HRS_DAYS,0))
         FROM   PT_ATTENDANCE_DETAIL , PT_ATTENDANCE_HEAD
         WHERE  ATNH_COMP_CODE       = P_COMP_CODE
         AND    ATND_ATNH_SYS_ID     = ATNH_SYS_ID
         AND    ATND_EMP_CODE        = P_EMP_CODE
         AND    ATNH_APPR_UID IS NOT NULL
         AND    ATND_DT      BETWEEN   P_FM_PROC_DT AND P_TO_PROC_DT ;

CURSOR C1 (P_EMP_CODE IN VARCHAR2,P_FM_PROC_DT IN DATE,P_TO_PROC_DT IN DATE) IS
         SELECT   NVL(LVAP_LWP_PAY_DAYS,0)
           FROM   PT_LEAVE_APPLICATION_HEAD, PT_LEAVE_SICK_PAY_CALC, PM_EMP_LEAVE , PM_LEAVE
          WHERE   LVAH_COMP_CODE                 = P_COMP_CODE
            AND   LVAH_EMP_CODE                  = P_EMP_CODE
            AND   LVAH_SYS_ID                = LVAP_LVAH_SYS_ID
            AND   LVAP_FHNL_L   = 'L'
              AND   LVAH_APPR_UID  IS NOT NULL
            AND   LVAH_CANC_UID IS NULL
            AND   EMPL_CODE                  = P_EMP_CODE
            AND   LVAH_LV_CATG_CODE          = EMPL_LV_CATG_CODE
            AND   LVAH_DT         BETWEEN P_FM_PROC_DT AND P_TO_PROC_DT
            AND   EMPL_LV_CATG_CODE          = LV_CATG_CODE
            AND   LV_TYPE_CODE               = '3';


CURSOR C_EMP_LV_AND_RESUMPTION_DTLS(P_EMP_CODE IN VARCHAR2,P_FM_PROC_DT IN DATE,P_TO_PROC_DT IN DATE) IS
         SELECT 'W'                    A_LR_TYPE             ,  --MEA issues
                 LWP_FROM_DT                A_START_DT            ,
                 LWP_UPTO_DT              A_END_DT              ,
                 TO_DATE('')            A_RESUMPTION_DT       ,
                 LWP_DAYS                  A_NO_OF_DAYS_LEAVE
          FROM   PT_LWP
          WHERE  LWP_COMP_CODE             = P_COMP_CODE
          AND    LWP_EMP_CODE              = P_EMP_CODE
          AND  ((LWP_FROM_DT               BETWEEN P_FM_PROC_DT AND P_TO_PROC_DT
                  OR LWP_UPTO_DT           BETWEEN P_FM_PROC_DT AND P_TO_PROC_DT )
                  OR (P_FM_PROC_DT                BETWEEN LWP_FROM_DT  AND LWP_UPTO_DT
                      OR P_TO_PROC_DT             BETWEEN LWP_FROM_DT AND LWP_UPTO_DT))
          AND    LWP_APPR_UID  IS NOT NULL
          AND    LWP_REF_SYS_ID  IS NULL
          UNION
          SELECT 'L'                          A_LR_TYPE             ,
                 LVAH_APPR_START_DT           A_START_DT            ,
                 --LVAH_APPR_END_DT             A_END_DT              ,-- modified by yasharth on 15-Aug-2006 for issue ALFOZAN-120383
                 NVL(LVAH_RESU_DT,LVAH_APPR_END_DT)            A_END_DT              ,
                 TO_DATE('')                  A_RESUMPTION_DT       ,
                 LVAH_APPR_DAYS               A_NO_OF_DAYS_LEAVE
          FROM   PT_LEAVE_APPLICATION_HEAD  , PM_EMP_LEAVE , PM_LEAVE
          WHERE  LVAH_COMP_CODE             = P_COMP_CODE
          AND    LVAH_EMP_CODE              = P_EMP_CODE
          AND  ( LVAH_APPR_START_DT         BETWEEN P_FM_PROC_DT AND P_TO_PROC_DT
              OR LVAH_APPR_END_DT           BETWEEN P_FM_PROC_DT AND P_TO_PROC_DT
-- ADDED BY ASHIK FOR AWAL-272846 ON 22/02/2009
              OR P_FM_PROC_DT  BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
              OR P_TO_PROC_DT    BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
-- ADDED BY ASHIK FOR AWAL-272846 ON 22/02/2009
              OR LVAH_RESU_DT               BETWEEN P_FM_PROC_DT AND P_TO_PROC_DT
              OR LVAH_RESU_DT IS NULL )
--          AND LVAH_RESU_DT <= LVAH_APPR_END_DT -- added by yasharth on 15-Aug-2006 for issue ALFOZAN-120383
-- above statment commented and added below statement for the issue DANUBE-261858 by ashik on 14/12/2008
--          AND (DECODE(LV_RESU_REQD_YN,'N',LVAH_APPR_END_DT,LVAH_RESU_DT)<= DECODE(LV_RESU_REQD_YN,'N',P_TO_PROC_DT,LVAH_APPR_END_DT)
-- COMMENTED ABOVE AND ADDED BELOW BY ASHIK FOR THE ISSUE AWAL-272846 ON 19/02/2009
          AND (DECODE(NVL(LV_RESU_REQD_YN,'N'),'N',LVAH_APPR_END_DT,LVAH_RESU_DT)<= DECODE(NVL(LV_RESU_REQD_YN,'N'),'N',P_TO_PROC_DT,LVAH_APPR_END_DT)
-- ADDED BY ASHIK FOR AWAL-272846 ON 22/02/2009
              OR P_FM_PROC_DT  BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
              OR P_TO_PROC_DT    BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
-- ADDED BY ASHIK FOR AWAL-272846 ON 22/02/2009
                    OR LVAH_APPR_END_DT BETWEEN P_FM_PROC_DT AND P_TO_PROC_DT)
          AND    LVAH_EMP_CODE              = EMPL_CODE
          AND    LVAH_APPR_UID  IS NOT NULL
          AND    LVAH_LV_CATG_CODE          = EMPL_LV_CATG_CODE
          AND    EMPL_LV_CATG_CODE          = LV_CATG_CODE
          AND    LV_TYPE_CODE = '1'
          AND (LVAH_CANC_UID IS NULL AND LVAH_CANC_DT IS NULL)
          UNION -- union added by yasharth on 15-Aug-2006 for issue ALFOZAN-120383 start(for late resumption)
          SELECT 'L'                          A_LR_TYPE             ,
                 LVAH_APPR_START_DT           A_START_DT            ,
                /*below 2 lines commented and added by deebak on 29/08/2007 for ECAR-175836 (mukthar)
                 DECODE(LVRH_WO_PAY_YN, 'Y',LVAH_APPR_END_DT ,'N', LVAH_RESU_DT)  A_END_DT              , */
                 NVL(LVAH_RESU_DT,LVAH_APPR_END_DT)            A_END_DT              ,
                 TO_DATE('')                  A_RESUMPTION_DT       ,
                 LVAH_APPR_DAYS               A_NO_OF_DAYS_LEAVE
          FROM   PT_LEAVE_APPLICATION_HEAD  , PM_EMP_LEAVE , PM_LEAVE,PT_LEAVE_RESU_HEAD
          WHERE  LVAH_COMP_CODE             = P_COMP_CODE
          AND    LVAH_EMP_CODE              = P_EMP_CODE
          AND  ( LVAH_APPR_START_DT         BETWEEN P_FM_PROC_DT AND P_TO_PROC_DT
              OR LVAH_APPR_END_DT           BETWEEN P_FM_PROC_DT AND P_TO_PROC_DT
              OR LVAH_RESU_DT               BETWEEN P_FM_PROC_DT AND P_TO_PROC_DT
              OR LVAH_RESU_DT IS NULL )
          AND LVAH_RESU_DT > LVAH_APPR_END_DT
          AND LVAH_TXN_CODE = LVRH_REF_TXN_CODE
          AND LVAH_NO          = LVRH_REF_NO
          AND LVAH_SYS_ID   = LVRH_REF_SYS_ID
          AND LVRH_APPR_UID IS NOT NULL
          AND LVAH_EMP_CODE = LVRH_EMP_CODE
          AND    LVAH_EMP_CODE              = EMPL_CODE
          AND    LVAH_APPR_UID  IS NOT NULL
          AND    LVAH_LV_CATG_CODE          = EMPL_LV_CATG_CODE
          AND    EMPL_LV_CATG_CODE          = LV_CATG_CODE
          AND    LV_TYPE_CODE = '1'
          AND (LVAH_CANC_UID IS NULL AND LVAH_CANC_DT IS NULL);-- end

CURSOR EMP_OT_HRS(P_EMP_CODE IN VARCHAR2,P_FM_PROC_DT IN DATE,P_TO_PROC_DT IN DATE) IS
    SELECT     SUM(NVL(OTD_TOTAL_OT_HRS, 0)) "TOTAL_OT_HRS"
    --  NVL(OTD_TOTAL_OT_HRS, 0) "TOTAL_OT_HRS"
          FROM   PT_OVERTIME_DETAIL        , PT_OVERTIME_HEAD
          WHERE  OTH_COMP_CODE             = P_COMP_CODE
          AND    OTD_OTH_SYS_ID            = OTH_SYS_ID
          AND    OTD_EMP_CODE               = P_EMP_CODE
          AND    OTD_DT            BETWEEN  P_FM_PROC_DT AND P_TO_PROC_DT
          AND    OTH_APPR_UID IS NOT NULL;


  M_NO_DAYS_PRSNT        NUMBER;
   M_OT_HRS       NUMBER;

M_OT_HRS_MIN NUMBER(12,2);

 CURSOR EMP_NAME(P_EMP_CODE IN VARCHAR2) IS
    SELECT DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01',EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04',
              EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',EMP_NAME_LANG_06, 'LANG_07',EMP_NAME_LANG_07, 'LANG_08',EMP_NAME_LANG_08,
              'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10)
        FROM   PM_EMP_KEY
        WHERE  EMP_COMP_CODE = P_COMP_CODE
        AND    EMP_CODE      = P_EMP_CODE;

 CURSOR EMP_ORG_BASIC(P_EMP_CODE IN VARCHAR2) IS
    --SELECT NVL(SUM(EMPA_LC_AMOUNT),0)  -- Commented and added by sudhakar on 17/07/2012 to get Original basic as same as actual basic
    SELECT EMPA_CURR_CODE, NVL(EMPA_LC_AMOUNT,0),NVL(EMPA_FC_AMOUNT,0)
  FROM   PM_EMP_ALLOWANCE , PM_ALLOWANCE
  WHERE  EMPA_COMP_CODE = P_COMP_CODE
    AND    EMPA_CODE      = P_EMP_CODE
  AND    ALLW_CODE      = EMPA_ALLW_CODE
    AND    EMPA_EXCLUDE_FROM_DT IS NULL
    AND    EMPA_EXCLUDE_UPTO_DT IS NULL
  AND    ALLW_TYPE      = '1';
  --GROUP BY EMPA_CURR_CODE;

/*    SELECT NVL(SUM(FP_FC_AMOUNT),0)
        FROM   PS_FINAL_PROC , PM_ALLOWANCE
        WHERE  FP_COMP_CODE = P_COMP_CODE
    AND    FP_EMP_CODE  = P_EMP_CODE
        AND    ALLW_CODE    = FP_ALLW_CODE
    AND    FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
    AND    FP_EARN_DEDUC = 'E'
        AND    ALLW_TYPE    = '1';
    */


 CURSOR EMP_ACT_BASIC(P_EMP_CODE IN VARCHAR2) IS
    SELECT NVL(FP_LC_AMOUNT,0),FP_CURR_CODE,NVL(FP_FC_AMOUNT,0)
        FROM   PS_FINAL_PROC , PM_ALLOWANCE
        WHERE  FP_COMP_CODE = P_COMP_CODE
    AND    FP_EMP_CODE  = P_EMP_CODE
        AND    ALLW_CODE    = FP_ALLW_CODE
    AND    FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
    AND    FP_EARN_DEDUC = 'E'   -- Added on 20/4/2004
    AND    ALLW_TYPE    = '1';



 CURSOR EMP_HRA(P_EMP_CODE IN VARCHAR2) IS
    SELECT NVL(FP_LC_AMOUNT,0),FP_CURR_CODE,NVL(FP_FC_AMOUNT,0)
    FROM   PS_FINAL_PROC  , PM_ALLOWANCE
    WHERE  FP_COMP_CODE = P_COMP_CODE
    AND    FP_EMP_CODE = P_EMP_CODE
    AND    ALLW_CODE   = FP_ALLW_CODE
    AND    FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
    AND    FP_EARN_DEDUC = 'E'
    AND    ALLW_TYPE = '2';



 CURSOR EMP_HRAD(P_EMP_CODE IN VARCHAR2) IS
    SELECT NVL(FP_LC_AMOUNT,0),FP_CURR_CODE,NVL(FP_FC_AMOUNT,0)
    FROM   PS_FINAL_PROC  , PM_ALLOWANCE
    WHERE  FP_COMP_CODE = P_COMP_CODE
    AND    FP_EMP_CODE = P_EMP_CODE
    AND    ALLW_CODE   = FP_ALLW_CODE
    AND    FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
    AND    ALLW_TYPE = '2'
    AND    FP_EARN_DEDUC = 'D';


 CURSOR EMP_DBASIC(P_EMP_CODE IN VARCHAR2) IS
    SELECT NVL(FP_LC_AMOUNT,0),FP_CURR_CODE,NVL(FP_FC_AMOUNT,0)
    FROM   PS_FINAL_PROC  , PM_ALLOWANCE
    WHERE  FP_COMP_CODE = P_COMP_CODE
    AND    FP_EMP_CODE = P_EMP_CODE
    AND    ALLW_CODE   = FP_ALLW_CODE
    AND    FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
    AND    ALLW_TYPE = '1'
    AND    FP_EARN_DEDUC = 'D';


    --The Below cursor is added by Rajendra for issue ALFOZAN-120388 on 04-Aug-2006
    CURSOR EMP_OT1 (P_EMP_CODE IN VARCHAR2)IS
    SELECT  NVL(FP_LC_AMOUNT,0),FP_CURR_CODE,NVL(FP_FC_AMOUNT,0)
    FROM    PS_FINAL_PROC , PM_ALLOWANCE
    WHERE   FP_COMP_CODE = P_COMP_CODE
    AND     FP_EMP_CODE  = P_EMP_CODE
    AND     ALLW_CODE    = FP_ALLW_CODE
    AND    FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
    AND    FP_EARN_DEDUC = 'E'
    AND     ALLW_TYPE = '3';


CURSOR ALLW_EARN(P_DEPT_CODE IN VARCHAR2,P_DEPT_DIVN_CODE IN VARCHAR2) IS
        SELECT DISTINCT ALLW_CODE
        FROM   PS_FINAL_PROC,PM_ALLOWANCE
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_ALLW_CODE=ALLW_CODE
        AND    ALLW_EARN_DEDUC = 'E'
        AND    FP_DIVN_CODE    = P_DEPT_DIVN_CODE
        AND    FP_DEPT_CODE    = P_DEPT_CODE
        AND      FP_PROC_MTH     = NVL(P_PROC_MTH,FP_PROC_MTH) --ADDED ON 21/02/2004 FOR DISPLAYING ALLW CODES PERTAINING TO PROC MTH
        AND    ALLW_TYPE > 4
--     AND    FP_EMP_CODE     = :CP_EMP_CODE
     ORDER BY ALLW_CODE;

CURSOR ALLW_DED(P_DEPT_CODE IN VARCHAR2,P_DEPT_DIVN_CODE IN VARCHAR2)  IS
        SELECT DISTINCT ALLW_CODE
        FROM   PS_FINAL_PROC,PM_ALLOWANCE
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_ALLW_CODE=ALLW_CODE
        AND    ALLW_EARN_DEDUC = 'D'
        AND    FP_DIVN_CODE  = P_DEPT_DIVN_CODE
        AND    FP_DEPT_CODE  = P_DEPT_CODE
        AND      FP_PROC_MTH   = NVL(P_PROC_MTH,FP_PROC_MTH)  ----ADDED ON 21/02/2004 FOR DISPLAYING ALLW CODES PERTAINING TO PROC MTH
        AND    ALLW_TYPE > 4
      ORDER  BY ALLW_CODE;


    ---End



--Commented and added by Manjula dor 10.4 development 01/12/2005
/*
 CURSOR EMP_OT1 IS
    SELECT  NVL(SUM(FP_FC_AMOUNT),0)
    FROM    PS_FINAL_PROC , PM_ALLOWANCE
    WHERE   FP_COMP_CODE = P_COMP_CODE
    AND     FP_EMP_CODE  = P_EMP_CODE
    AND     ALLW_CODE    = FP_ALLW_CODE
    AND    FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
    AND    FP_EARN_DEDUC = 'E'
    AND     ALLW_TYPE = '3';



 CURSOR EMP_OT2 IS
    SELECT  NVL(SUM(FP_FC_AMOUNT),0)
    FROM    PS_FINAL_PROC , PM_ALLOWANCE
    WHERE   FP_COMP_CODE = P_COMP_CODE
    AND     FP_EMP_CODE  = P_EMP_CODE
    AND     ALLW_CODE    = FP_ALLW_CODE
    AND    FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
    AND    FP_EARN_DEDUC = 'E'
    AND     ALLW_TYPE = '4';    */


 CURSOR EMP_EARN_1(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
    SELECT NVL(FP_LC_AMOUNT,0),FP_CURR_CODE,NVL(FP_FC_AMOUNT,0)
        FROM   PS_FINAL_PROC,
               PM_ALLOWANCE    --Added on 20/02/2004
        WHERE  FP_COMP_CODE = P_COMP_CODE
    AND    FP_EMP_CODE  = P_EMP_CODE
    AND    FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
    AND    FP_EARN_DEDUC = 'E'          -- Added on 20/2/2004
    AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20/2/2004
    AND    FP_ALLW_CODE = P_ALLW_CODE;



 CURSOR EMP_EARN_2(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
    SELECT NVL(FP_LC_AMOUNT,0),FP_CURR_CODE,NVL(FP_FC_AMOUNT,0)
    FROM   PS_FINAL_PROC,
           PM_ALLOWANCE                -- Added on 20th Feb 2004
    WHERE  FP_COMP_CODE = P_COMP_CODE
    AND    FP_EMP_CODE = P_EMP_CODE
    AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
    AND    FP_EARN_DEDUC = 'E'          -- Added on 20th feb 2004
    AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20th FEB 2004
    AND    FP_ALLW_CODE = P_ALLW_CODE;



 CURSOR EMP_EARN_3(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
    SELECT NVL(FP_LC_AMOUNT,0),FP_CURR_CODE,NVL(FP_FC_AMOUNT,0)
     FROM   PS_FINAL_PROC,
            PM_ALLOWANCE           --   Added on 20/2/2004
    WHERE  FP_COMP_CODE = P_COMP_CODE
    AND    FP_EMP_CODE = P_EMP_CODE
    AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
    AND    FP_EARN_DEDUC = 'E'          -- Added on 20th feb 2004
    AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20th feb 2004
    AND    FP_ALLW_CODE = P_ALLW_CODE;





 CURSOR EMP_EARN_4(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
    SELECT NVL(FP_LC_AMOUNT,0),FP_CURR_CODE,NVL(FP_FC_AMOUNT,0)
    FROM   PS_FINAL_PROC,
           PM_ALLOWANCE             --Added 20/2/2004
    WHERE  FP_COMP_CODE  = P_COMP_CODE
    AND    FP_EMP_CODE = P_EMP_CODE
    AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
    AND    FP_EARN_DEDUC = 'E'          -- Added on 20/2/2004
    AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20/2/2004
    AND    FP_ALLW_CODE = P_ALLW_CODE;




 CURSOR EMP_EARN_5(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
    SELECT NVL(FP_LC_AMOUNT,0),FP_CURR_CODE,NVL(FP_FC_AMOUNT,0)
    FROM   PS_FINAL_PROC
    WHERE  FP_COMP_CODE = P_COMP_CODE
    AND    FP_EMP_CODE = P_EMP_CODE
    AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
    AND    FP_ALLW_CODE = P_ALLW_CODE;


 CURSOR EMP_DED_1(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
    SELECT NVL(FP_LC_AMOUNT,0),FP_CURR_CODE,NVL(FP_FC_AMOUNT,0)
    FROM   PS_FINAL_PROC,
                 PM_ALLOWANCE       --ADDED ON 20/2/2004
    WHERE  FP_COMP_CODE  = P_COMP_CODE
    AND    FP_EMP_CODE = P_EMP_CODE
    AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
    AND    FP_EARN_DEDUC = 'D'          -- Added on 20/2/2004
    AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20/2/2004
    AND    ALLW_CODE    = P_ALLW_CODE;  --Added on 20/01/2004


 CURSOR EMP_DED_2(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
    SELECT NVL(FP_LC_AMOUNT,0),FP_CURR_CODE,NVL(FP_FC_AMOUNT,0)
    FROM   PS_FINAL_PROC,
           PM_ALLOWANCE              --aDDED ON 20/4/2004
    WHERE  FP_COMP_CODE = P_COMP_CODE
    AND    FP_EMP_CODE = P_EMP_CODE
    AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
    AND    FP_EARN_DEDUC = 'D'          -- Added on 20/4/2004
    AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20/4/2004
    AND    ALLW_CODE = P_ALLW_CODE;



 CURSOR EMP_DED_3(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
    SELECT NVL(FP_LC_AMOUNT,0),FP_CURR_CODE,NVL(FP_FC_AMOUNT,0)
    FROM   PS_FINAL_PROC
    WHERE  FP_COMP_CODE = P_COMP_CODE
    AND    FP_EMP_CODE = P_EMP_CODE
    AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
    AND    FP_ALLW_CODE = P_ALLW_CODE;




 CURSOR EMP_DED_4(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
    SELECT NVL(FP_LC_AMOUNT,0),FP_CURR_CODE,NVL(FP_FC_AMOUNT,0)
    FROM   PS_FINAL_PROC
    WHERE  FP_COMP_CODE = P_COMP_CODE
    AND    FP_EMP_CODE = P_EMP_CODE
    AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
    AND    FP_ALLW_CODE = P_ALLW_CODE;



 CURSOR EMP_DED_5(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
    SELECT NVL(FP_LC_AMOUNT,0),FP_CURR_CODE,NVL(FP_FC_AMOUNT,0)
    FROM   PS_FINAL_PROC
    WHERE  FP_COMP_CODE = P_COMP_CODE
    AND    FP_EMP_CODE = P_EMP_CODE
    AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
    AND    FP_ALLW_CODE = P_ALLW_CODE;




 CURSOR EMP_EARN_OTHERS(P_EMP_CODE IN VARCHAR2) IS
    SELECT NVL(FP_LC_AMOUNT,0),FP_CURR_CODE,NVL(FP_FC_AMOUNT,0)
    FROM   PS_FINAL_PROC , PM_ALLOWANCE
    WHERE  FP_COMP_CODE = P_COMP_CODE
    AND    ALLW_CODE    = FP_ALLW_CODE
    AND    FP_EMP_CODE  = P_EMP_CODE
    AND    FP_ALLW_CODE NOT IN (M_PR_EARN_1,M_PR_EARN_2,
                M_PR_EARN_3,M_PR_EARN_4,M_PR_EARN_5)
    AND    FP_EARN_DEDUC = 'E'
    AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
    AND    ALLW_TYPE NOT IN ('1','2','3','4');




 CURSOR EMP_DED_OTHERS(P_EMP_CODE IN VARCHAR2) IS
    SELECT NVL(FP_LC_AMOUNT,0),FP_CURR_CODE,NVL(FP_FC_AMOUNT,0)
    FROM   PS_FINAL_PROC , PM_ALLOWANCE
    WHERE  FP_COMP_CODE  = P_COMP_CODE
    AND    ALLW_CODE    =  FP_ALLW_CODE
    AND    FP_EMP_CODE  =  P_EMP_CODE
    AND    FP_ALLW_CODE NOT IN (M_PR_DED_1,M_PR_DED_2,
                M_PR_DED_3,M_PR_DED_4,M_PR_DED_5)
    AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
    AND    FP_EARN_DEDUC = 'D'
    AND    ALLW_TYPE NOT IN ('1','2','3','4');


 --ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012 STARTS
  CURSOR C_CURR IS
       SELECT PARA_VALUE
       FROM PM_PARAMETER
       WHERE PARA_TYPE  ='BASECURR' AND PARA_CODE ='BASECURR';

  CURSOR C_DATE IS
  SELECT TRUNC(To_Date(PARA_VALUE,'DD/MM/RRRR'))
  FROM PM_COMP_PARAMETER WHERE PARA_CODE= 'CPTODT'
  AND PARA_COMP_CODE = P_COMP_CODE;


       CURSOR C2 IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

  M_DATE DATE;
  M_CURR_CODE FM_CURRENCY.CURR_CODE%TYPE;
  --ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012 ENDS
  M_EMP_CURR_CODE PM_EMP_ALLOWANCE.EMPA_CURR_CODE%TYPE; -- Added by Sudhakar on 17/07/2012




BEGIN
      --DUMMY(1);
      DELETE FROM PW_FINAL_PAYROLL_FC WHERE FP_REP_KEY_NO = P_REP_KEY_NO;

      MM_LANG_CODE := NULL;

    IF C2%ISOPEN THEN
       CLOSE C2;
    END IF;

    OPEN C2;
    FETCH C2 INTO MM_LANG_CODE;
    CLOSE C2;

      IF B3%ISOPEN THEN
         CLOSE B3;
      END IF;

      OPEN B3;
      FETCH B3 INTO M_PROC_START_DT;
      CLOSE B3;

      IF B4%ISOPEN THEN
         CLOSE B4;
      END IF;

      OPEN B4;
      FETCH B4 INTO M_PROC_END_DT;
      CLOSE B4;

      IF B7%ISOPEN THEN
         CLOSE B7;
      END IF;

      OPEN B7;
      FETCH B7 INTO M_OT_MIN_REP;
      CLOSE B7;

   FOR I IN C_FINAL_PAY
   LOOP
    --DUMMY(2);
   P_STATUS := '0' ;
   P_NO_OF_DAYS_OR_HRS_PRESENT := 0;

      /* commented and added by deebak on 26/07/2007 for ALKHAMIS-170778
      IF NVL(:CP_PYBSDYFLAG_EA, '*') = 'E' THEN
         M_NO_OF_DAYS_IN_MONTH  := :CP_PAYDAYS ;
      ELSE
           --Commented and Added by Manjula for ORIONQC-GDC-814532 on 02/02/2006
           M_NO_OF_DAYS_IN_MONTH := :CP_LAST_DAY;--(P_TO_PROC_DT - P_FM_PROC_DT) + 1;
        END IF ; */
    --The above Deebak commented code reverted back by Rajasekaran on 11/02/2008 for ASIC-201065
    IF NVL(P_PYBSDYFLAG_EA, '*') = 'E' THEN
         M_NO_OF_DAYS_IN_MONTH  := M_PAYDAYS ;
      ELSE
     M_NO_OF_DAYS_IN_MONTH := M_PROC_END_DT - M_PROC_START_DT + 1;  --end ALKHAMIS-170778
         END IF;
    -- Initialised by Vidyadhar since dedn will not be calculated for abseteeism below
    -- if PYBSDYFLAG-'E' and 'PYBSDYS-30, and actual days in the month is 31.
    M_NO_OF_DAY_BET_PERIOD := M_NO_OF_DAYS_IN_MONTH ;
    -- added by yasharth on 15-Aug-2006 for issue ALFOZAN-120383
    IF I.EMP_JOIN_DT BETWEEN M_PROC_START_DT AND M_PROC_END_DT THEN
        M_NO_OF_DAY_BET_PERIOD := M_NO_OF_DAY_BET_PERIOD - (I.EMP_JOIN_DT - M_PROC_START_DT);
    END IF;
    -- end
     --DUMMY(3);
    OPEN  C_GET_NO_OF_DAYS_PRESENT(I.Q_1_DP_EMP_CODE1,M_PROC_START_DT,M_PROC_END_DT);
    FETCH C_GET_NO_OF_DAYS_PRESENT INTO P_NO_OF_DAYS_OR_HRS_PRESENT ;
    CLOSE C_GET_NO_OF_DAYS_PRESENT ;

    OPEN C1(I.Q_1_DP_EMP_CODE1,M_PROC_START_DT,M_PROC_END_DT);
    FETCH C1 INTO     M_NO_OF_SL_LV_DAYS;
    CLOSE C1;

    P_NO_OF_DAYS_OR_HRS_PRESENT := NVL(P_NO_OF_DAYS_OR_HRS_PRESENT, 0) + NVL(M_NO_OF_SL_LV_DAYS,0);

    IF P_PAY_TYPE IN ('M','T','W','B') THEN -- 'W','B' Added for weekly, biweekly DAF
     --DUMMY(4);
     FOR C_LEAVE_REC IN C_EMP_LV_AND_RESUMPTION_DTLS(I.Q_1_DP_EMP_CODE1,M_PROC_START_DT,M_PROC_END_DT)
      LOOP

         IF C_LEAVE_REC.A_LR_TYPE = 'L' THEN   -- Leave Details
            IF C_LEAVE_REC.A_START_DT >= M_PROC_START_DT AND
               C_LEAVE_REC.A_END_DT   <=M_PROC_END_DT   THEN
               --Commented by Manjula for ORIONQC-GDC-814532 on 14/02/2006
               /*IF NVL(:CP_ADV_LV_SAL,'N') = 'Y' THEN  -- MEA issues, since salary for the first to leave start paid alrealy
                       M_NO_OF_DAYS_LV_DURING_CPMTH   :=    C_LEAVE_REC.A_END_DT
                                                       - M_PROC_START_DT
                                                       + 1 ;
                ELSE    */
                        M_NO_OF_DAYS_LV_DURING_CPMTH   :=    C_LEAVE_REC.A_END_DT
                                                       - C_LEAVE_REC.A_START_DT
                                                        + 1 ;
          --DUMMY(5);
                --END IF;
            ELSIF ((C_LEAVE_REC.A_START_DT <= M_PROC_START_DT) AND
                   (C_LEAVE_REC.A_END_DT   >= M_PROC_END_DT)) THEN  -- For the Whole month
                    M_NO_OF_DAYS_LV_DURING_CPMTH   := M_PROC_END_DT - M_PROC_START_DT + 1;

            ELSIF C_LEAVE_REC.A_START_DT BETWEEN M_PROC_START_DT AND M_PROC_END_DT THEN
               IF C_LEAVE_REC.A_END_DT > M_PROC_END_DT THEN -- If leave doesn't fall within this Proc. Month
                  M_NO_OF_DAYS_LV_DURING_CPMTH   :=
                                                  ( M_PROC_END_DT  - C_LEAVE_REC.A_START_DT + 1 ) ;
               ELSE
                  M_NO_OF_DAYS_LV_DURING_CPMTH   := NVL(M_NO_OF_DAYS_LV_DURING_CPMTH, 0) +
                                                    M_NO_OF_DAYS_LEAVE ;
               END IF ;
             --DUMMY(6);
            ELSIF C_LEAVE_REC.A_END_DT BETWEEN M_PROC_START_DT AND M_PROC_END_DT THEN
                  M_NO_OF_DAYS_LV_DURING_CPMTH    :=    C_LEAVE_REC.A_END_DT
                                              - M_PROC_START_DT
                                              + 1 ;
            END IF ;
            M_NO_OF_DAYS_LWP_DURING_CPMTH  := NVL( M_NO_OF_DAYS_LWP_DURING_CPMTH ,0) +
                                              NVL(M_NO_OF_DAYS_LV_DURING_CPMTH,0);
            ELSE  -- MEA issues, since salary for the first to leave start paid alrealy
             --DUMMY(7);
            IF C_LEAVE_REC.A_START_DT >= M_PROC_START_DT AND
               C_LEAVE_REC.A_END_DT   <= M_PROC_END_DT   THEN
               M_NO_OF_DAYS_LV_DURING_CPMTH   :=    C_LEAVE_REC.A_END_DT
                                                     - C_LEAVE_REC.A_START_DT
                                                     + 1 ;
            ELSIF ((C_LEAVE_REC.A_START_DT <= M_PROC_START_DT) AND
                   (C_LEAVE_REC.A_END_DT   >= M_PROC_END_DT)) THEN  -- For the Whole month
                M_NO_OF_DAYS_LV_DURING_CPMTH   := M_PROC_END_DT - M_PROC_START_DT + 1;

            ELSIF C_LEAVE_REC.A_START_DT BETWEEN M_PROC_START_DT AND M_PROC_END_DT THEN
            --DUMMY(8);
               IF C_LEAVE_REC.A_END_DT > M_PROC_END_DT THEN -- If leave doesn't fall within this Proc. Month
                  M_NO_OF_DAYS_LV_DURING_CPMTH   :=
                                                  ( M_PROC_END_DT  - C_LEAVE_REC.A_START_DT + 1 ) ;
               ELSE
                  M_NO_OF_DAYS_LV_DURING_CPMTH   := NVL(M_NO_OF_DAYS_LV_DURING_CPMTH, 0) +
                                                    M_NO_OF_DAYS_LEAVE ;
               END IF ;
           --DUMMY(9);
            ELSIF C_LEAVE_REC.A_END_DT BETWEEN M_PROC_START_DT AND M_PROC_END_DT THEN
              M_NO_OF_DAYS_LV_DURING_CPMTH    :=    C_LEAVE_REC.A_END_DT
                                              - M_PROC_START_DT
                                              + 1 ;
            END IF ;
            M_NO_OF_DAYS_LWP_DURING_CPMTH  := NVL( M_NO_OF_DAYS_LWP_DURING_CPMTH ,0) +
                                              NVL(M_NO_OF_DAYS_LV_DURING_CPMTH,0);
       END IF;
      END LOOP ;
      --Total number of days abscent during the period..
      P_NO_OF_DAYS_OR_HRS_PRESENT := NVL(P_NO_OF_DAYS_OR_HRS_PRESENT,0) +
                                     NVL(M_NO_OF_DAYS_LWP_DURING_CPMTH , 0);

      --Total number of days present during the period...
      M_NO_DAYS_PRSNT := NVL((M_NO_OF_DAY_BET_PERIOD - P_NO_OF_DAYS_OR_HRS_PRESENT), 0);

  END IF;

    --RETURN M_NO_DAYS_PRSNT;
   --DUMMY(10);
   OPEN EMP_OT_HRS(I.Q_1_DP_EMP_CODE1,M_PROC_START_DT,M_PROC_END_DT);
   FETCH EMP_OT_HRS INTO M_OT_HRS;
   CLOSE EMP_OT_HRS;

-- ADDED BY ASHIK FOR THE ISSUE NPI-658844 ON 29/JAN/2012
   IF M_OT_MIN_REP = 'Y' THEN
        M_OT_HRS_MIN := ROUND(FLOOR(M_OT_HRS) + (MOD(M_OT_HRS,FLOOR(M_OT_HRS))*60/100),2);
    --    RETURN NVL(M_OT_HRS_MIN,0);
   ELSE
-- ADDED BY ASHIK FOR THE ISSUE NPI-658844 ON 29/JAN/2012
         --RETURN NVL(M_OT_HRS,0);
      M_OT_HRS := Nvl(M_OT_HRS,0);
   END IF;

  -- END LOOP;
     --DUMMY(11||I.DEPT_DIVN_CODE||I.Q_1_DEPT_CODE);
     CNT := 1;
     FOR J IN ALLW_EARN(I.Q_1_DEPT_CODE,I.DEPT_DIVN_CODE)
     LOOP
      EXIT WHEN CNT > 5 ;
       IF CNT = 1 THEN
         M_ALLW_EARN_1 := J.ALLW_CODE;
       ELSIF CNT = 2 THEN
         M_ALLW_EARN_2 := J.ALLW_CODE;
       ELSIF CNT = 3 THEN
         M_ALLW_EARN_3 := J.ALLW_CODE;
       ELSIF CNT = 4 THEN
         M_ALLW_EARN_4 := J.ALLW_CODE;
       ELSIF CNT = 5 THEN
         M_ALLW_EARN_5 := J.ALLW_CODE;
       END IF;
       CNT := CNT + 1 ;


     CNT1 := 1;
     --DUMMY(12);
     FOR K IN ALLW_DED(I.DEPT_DIVN_CODE,I.Q_1_DEPT_CODE)
     LOOP
      EXIT WHEN CNT1 > 5;
        IF CNT1 = 1 THEN
           M_ALLW_DED_1 := K.ALLW_CODE;
        ELSIF CNT1 = 2 THEN
           M_ALLW_DED_2 := K.ALLW_CODE;
        ELSIF CNT1 = 3 THEN
           M_ALLW_DED_3 := K.ALLW_CODE;
        ELSIF CNT1 = 4 THEN
           M_ALLW_DED_4 := K.ALLW_CODE;
        ELSIF CNT1 = 5 THEN
           M_ALLW_DED_5 := K.ALLW_CODE;
        END IF;
        CNT1 := CNT1 + 1;

     --DUMMY(13);
    IF C_DATE%ISOPEN THEN
       CLOSE C_DATE;
  END IF;

  OPEN C_DATE;
  FETCH C_DATE INTO M_DATE;
  CLOSE C_DATE;

 /* IF C_CURR%ISOPEN THEN
       CLOSE C_CURR;
  END IF;

  OPEN C_CURR;
  FETCH C_CURR INTO M_CURR_CODE;
  CLOSE C_CURR;   */

  M_CURR_CODE :=F_GET_BASE_CURR(P_COMP_CODE);

  --ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012 ENDS


    /*SRW.REFERENCE(P_EMP_CODE);
    SRW.REFERENCE(:CP_PR_EARN_1);
    SRW.REFERENCE(:CP_PR_EARN_2);
    SRW.REFERENCE(:CP_PR_EARN_3);
    SRW.REFERENCE(:CP_PR_EARN_4);
    SRW.REFERENCE(:CP_PR_EARN_5);
    SRW.REFERENCE(:CP_PR_DED_1);
    SRW.REFERENCE(:CP_PR_DED_2);
    SRW.REFERENCE(:CP_PR_DED_3);
    SRW.REFERENCE(:CP_PR_DED_4);
    SRW.REFERENCE(:CP_PR_DED_5);
    SRW.REFERENCE(:CP_ORG_BAS);
    SRW.REFERENCE(:CP_ACT_BAS);
    SRW.REFERENCE(:CF_OT_HRS);
    SRW.REFERENCE(:CP_HRA); */

    --The Below code is added by Rajendra for issue ALFOZAN-120388 on 04-Aug-2006
        OPEN EMP_OT1(I.Q_1_DP_EMP_CODE1);
      FETCH EMP_OT1 INTO M_PR_OT1,M_PR_OT1_CURR_CODE,M_PR_OT1_FC_AMT;

    IF NVL(M_PR_OT1,0) > 0 THEN
        IF M_PR_OT1_CURR_CODE <> P_CURRENCY THEN
             f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_OT1,'S',M_DATE,P_CURRENCY,M_PR_OT1,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
        ELSE
             M_PR_OT1 := M_PR_OT1_FC_AMT;
        END IF;
    END IF;
    M_OT1 := M_PR_OT1;
    CLOSE EMP_OT1;
    --END
  --DUMMY(14);
    OPEN  EMP_NAME (I.Q_1_DP_EMP_CODE1);
    FETCH EMP_NAME INTO M_NAME;
    CLOSE EMP_NAME;



    OPEN EMP_ORG_BASIC(I.Q_1_DP_EMP_CODE1);
    FETCH EMP_ORG_BASIC INTO M_EMP_CURR_CODE, M_ORG_BASIC,M_ORG_BASIC_FC_AMT;
    IF NVL(M_ORG_BASIC,0) > 0 THEN
         IF M_EMP_CURR_CODE <> P_CURRENCY THEN
        --f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_ORG_BASIC,'S',M_DATE,P_CURRENCY,M_ORG_BASIC,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012 -- Commented and added by Sudhakar on 17/07/2012
        f_dconv_rate_fm_curr_to_curr(M_EMP_CURR_CODE,M_ORG_BASIC,'S',M_DATE,P_CURRENCY,M_ORG_BASIC,'E');
         ELSE
              M_ORG_BASIC := M_ORG_BASIC_FC_AMT;
         END IF;
    END IF;
    M_ORG_BAS := M_ORG_BASIC;
    CLOSE EMP_ORG_BASIC;
  --DUMMY(15);
    OPEN EMP_ACT_BASIC(I.Q_1_DP_EMP_CODE1);
    FETCH EMP_ACT_BASIC INTO M_ACT_BASIC,M_ACT_BASIS_CURR_CODE,M_ACT_BASIS_FC_AMT;
    IF NVL(M_ACT_BASIC,0) > 0 THEN
        IF M_ACT_BASIS_CURR_CODE <> P_CURRENCY THEN
       f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_ACT_BASIC,'S',M_DATE,P_CURRENCY,M_ACT_BASIC,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
        ELSE
             M_ACT_BASIC := M_ACT_BASIS_FC_AMT;
        END IF;
  END IF;
    M_ACT_BAS := M_ACT_BASIC;
    CLOSE EMP_ACT_BASIC;

    OPEN  EMP_HRA(I.Q_1_DP_EMP_CODE1) ;
    FETCH EMP_HRA INTO M_PR_HRA,M_EMP_HRA_CURR_CODE,M_EMP_HRA_FC_AMT;
    IF NVL(M_PR_HRA,0) > 0 THEN
        IF M_EMP_HRA_CURR_CODE <> P_CURRENCY THEN
             f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_HRA,'S',M_DATE,P_CURRENCY,M_PR_HRA,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
        ELSE
             M_PR_HRA := M_EMP_HRA_FC_AMT;
        END IF;
    END IF;
    M_HRA :=  M_PR_HRA;
    CLOSE EMP_HRA;

    OPEN  EMP_HRAD(I.Q_1_DP_EMP_CODE1) ;
    FETCH EMP_HRAD INTO M_PR_HRAD,M_EMP_HRAD_CURR_CODE,M_EMP_HRAD_FC_AMT;
    IF NVL(M_PR_HRAD,0) > 0 THEN
         IF M_EMP_HRAD_CURR_CODE <> P_CURRENCY THEN
          f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_HRAD,'S',M_DATE,P_CURRENCY,M_PR_HRAD,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
         ELSE
               M_PR_HRAD := M_EMP_HRAD_FC_AMT;
         END IF;
    END IF;
    M_HRAD :=  M_PR_HRAD;
    CLOSE EMP_HRAD;
  --DUMMY(16);
    OPEN  EMP_DBASIC(I.Q_1_DP_EMP_CODE1) ;
    FETCH EMP_DBASIC INTO M_PR_DBASIC,M_PR_DBASIC_CURR_CODE,M_PR_DBASIC_FC_AMT;
    IF NVL(M_PR_DBASIC,0) > 0 THEN
        IF M_PR_DBASIC_CURR_CODE <> P_CURRENCY THEN
         f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_DBASIC,'S',M_DATE,P_CURRENCY,M_PR_DBASIC,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
        ELSE
             M_PR_DBASIC := M_PR_DBASIC_FC_AMT;
        END IF;
    END IF;
    M_DBASIC :=  M_PR_DBASIC;
    CLOSE EMP_DBASIC;

--SRW.MESSAGE(0,'HRAD   ' || TO_CHAR(M_PR_HRAD));

    OPEN  EMP_EARN_1 (I.Q_1_DP_EMP_CODE1,M_PR_EARN_1);
    FETCH EMP_EARN_1 INTO M_PR_EARN_1,M_PR_EARN1_CURR_CODE,M_PR_EARN1_FC_AMT;
    IF NVL(M_PR_EARN_1,0) > 0 THEN
      IF M_PR_EARN1_CURR_CODE <> P_CURRENCY THEN
           f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_EARN_1,'S',M_DATE,P_CURRENCY,M_PR_EARN_1,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
      ELSE
           M_PR_EARN_1 := M_PR_EARN1_FC_AMT;
         M_EARN_1 := M_PR_EARN_1;
      END IF;
    ELSE
           M_EARN_1 := '' ;
  END IF;
    CLOSE EMP_EARN_1;

    OPEN EMP_EARN_2(I.Q_1_DP_EMP_CODE1,M_PR_EARN_2);
    FETCH EMP_EARN_2 INTO M_PR_EARN_2,M_PR_EARN2_CURR_CODE,M_PR_EARN2_FC_AMT;
    IF M_PR_EARN_2 > 0 THEN
        IF M_PR_EARN2_CURR_CODE <> P_CURRENCY THEN
         f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_EARN_2,'S',M_DATE,P_CURRENCY,M_PR_EARN_2,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
        ELSE
             M_PR_EARN_2 := M_PR_EARN2_FC_AMT;
             M_EARN_2 := M_PR_EARN_2;
        END IF;
    ELSE
     M_EARN_2:= '' ;
  END IF;
    CLOSE EMP_EARN_2;

    OPEN EMP_EARN_3(I.Q_1_DP_EMP_CODE1,M_PR_EARN_3);
    FETCH EMP_EARN_3 INTO M_PR_EARN_3,M_PR_EARN3_CURR_CODE,M_PR_EARN3_FC_AMT;
    IF M_PR_EARN_3 > 0 THEN
        IF M_PR_EARN2_CURR_CODE <> P_CURRENCY THEN
       f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_EARN_3,'S',M_DATE,P_CURRENCY,M_PR_EARN_3,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
    ELSE
       M_PR_EARN_3 := M_PR_EARN3_FC_AMT;
       M_EARN_3 := M_PR_EARN_3;
    END IF;
    ELSE
        M_EARN_3 := '' ;
  END IF;
    CLOSE EMP_EARN_3;


    OPEN EMP_EARN_4(I.Q_1_DP_EMP_CODE1,M_PR_EARN_4);
    FETCH EMP_EARN_4 INTO M_PR_EARN_4,M_PR_EARN4_CURR_CODE,M_PR_EARN4_FC_AMT;

        IF M_PR_EARN_4 > 0 THEN
            IF M_PR_EARN4_CURR_CODE <> P_CURRENCY THEN
               f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_EARN_4,'S',M_DATE,P_CURRENCY,M_PR_EARN_4,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
            ELSE
                 M_PR_EARN_4 := M_PR_EARN4_FC_AMT;
                 M_EARN_4 := M_PR_EARN_4;
            END IF;
          ELSE
               M_EARN_4 := '' ;
        END IF;
    CLOSE EMP_EARN_4;

    OPEN EMP_EARN_5(I.Q_1_DP_EMP_CODE1,M_PR_EARN_5);
    FETCH EMP_EARN_5 INTO M_PR_EARN_5,M_PR_EARN5_CURR_CODE,M_PR_EARN5_FC_AMT;

        IF M_PR_EARN_5 > 0 THEN
            IF M_PR_EARN5_CURR_CODE <> P_CURRENCY THEN
               f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_EARN_5,'S',M_DATE,P_CURRENCY,M_PR_EARN_5,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
            ELSE
                 M_PR_EARN_5 := M_PR_EARN5_FC_AMT;
               M_EARN_5 := M_PR_EARN_5;
            END IF;
          ELSE
               M_EARN_5 := '' ;
        END IF;
    CLOSE EMP_EARN_5;

    OPEN EMP_DED_1(I.Q_1_DP_EMP_CODE1,M_PR_DED_1);
    FETCH EMP_DED_1 INTO M_PR_DED_1,M_PR_DED1_CURR_CODE,M_PR_DED1_FC_AMT;

        IF M_PR_DED_1 > 0 THEN
            IF M_PR_DED1_CURR_CODE <> P_CURRENCY THEN
            f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_DED_1,'S',M_DATE,P_CURRENCY,M_PR_DED_1,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
            ELSE
                M_PR_DED_1 := M_PR_DED1_FC_AMT;
                M_DED_1 := M_PR_DED_1;
            END IF;
        ELSE
              M_DED_1 := '' ;
        END IF;
    CLOSE EMP_DED_1;


    OPEN EMP_DED_2(I.Q_1_DP_EMP_CODE1,M_PR_DED_2);
    FETCH EMP_DED_2 INTO M_PR_DED_2,M_PR_DED2_CURR_CODE,M_PR_DED2_FC_AMT;

        IF M_PR_DED_2 > 0 THEN
            IF M_PR_DED2_CURR_CODE <> P_CURRENCY THEN
               f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_DED_2,'S',M_DATE,P_CURRENCY,M_PR_DED_2,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
            ELSE
                M_PR_DED_2 := M_PR_DED2_FC_AMT;
              M_DED_2 := M_PR_DED_2;
            END IF;
          ELSE
              M_DED_2 := '' ;
        END IF;
    CLOSE EMP_DED_2;


    OPEN EMP_DED_3(I.Q_1_DP_EMP_CODE1,M_PR_DED_3);
    FETCH EMP_DED_3 INTO M_PR_DED_3,M_PR_DED3_CURR_CODE,M_PR_DED3_FC_AMT;

        IF M_PR_DED_3 > 0 THEN
            IF M_PR_DED3_CURR_CODE <> P_CURRENCY THEN
               f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_DED_3,'S',M_DATE,P_CURRENCY,M_PR_DED_3,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
            ELSE
                 M_PR_DED_3 := M_PR_DED3_FC_AMT;
               M_DED_3 := M_PR_DED_3;
            END IF;
          ELSE
               M_DED_3 := '' ;
          END IF;
    CLOSE EMP_DED_3;

    OPEN EMP_DED_4(I.Q_1_DP_EMP_CODE1,M_PR_DED_4);
    FETCH EMP_DED_4 INTO M_PR_DED_4,M_PR_DED4_CURR_CODE,M_PR_DED4_FC_AMT;

        IF M_PR_DED_4 > 0 THEN
            IF M_PR_DED4_CURR_CODE <> P_CURRENCY THEN
               f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_DED_4,'S',M_DATE,P_CURRENCY,M_PR_DED_4,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
            ELSE
                 M_PR_DED_4 := M_PR_DED4_FC_AMT;
                 M_DED_4 := M_PR_DED_4;
            END IF;
          ELSE
               M_DED_4 := '' ;
        END IF;
    CLOSE EMP_DED_4;

    OPEN EMP_DED_5(I.Q_1_DP_EMP_CODE1,M_PR_DED_5);
    FETCH EMP_DED_5 INTO M_PR_DED_5,M_PR_DED5_CURR_CODE,M_PR_DED5_FC_AMT;

        IF M_PR_DED_5 > 0 THEN
            IF M_PR_DED5_CURR_CODE <> P_CURRENCY THEN
               f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_DED_5,'S',M_DATE,P_CURRENCY,M_PR_DED_5,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
            ELSE
                 M_PR_DED_5 := M_PR_DED5_FC_AMT;
               M_DED_5 := M_PR_DED_5;
            END IF;
          ELSE
               M_DED_5 := '' ;
        END IF;
    CLOSE EMP_DED_5;

    OPEN EMP_EARN_OTHERS(I.Q_1_DP_EMP_CODE1);
    FETCH EMP_EARN_OTHERS INTO M_PR_EARN_OTH,M_PR_EARN_OTH_CURR_CODE,M_PR_EARN_OTH_FC_AMT;

        IF M_PR_EARN_OTH > 0 THEN
            IF M_PR_EARN_OTH_CURR_CODE <> P_CURRENCY THEN
               f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_EARN_OTH,'S',M_DATE,P_CURRENCY,M_PR_EARN_OTH,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
            ELSE
                 M_PR_EARN_OTH := M_PR_EARN_OTH_FC_AMT;
               M_EARN_OTH := M_PR_EARN_OTH;
            END IF;
          ELSE
               M_EARN_OTH := '' ;
          END IF;
    CLOSE EMP_EARN_OTHERS;

    OPEN EMP_DED_OTHERS(I.Q_1_DP_EMP_CODE1);
    FETCH EMP_DED_OTHERS INTO M_PR_DED_OTH,M_PR_DED_OTH_CURR_CODE,M_PR_DED_OTH_FC_AMT;

        IF M_PR_DED_OTH > 0 THEN
            IF M_PR_DED_OTH_CURR_CODE <> P_CURRENCY THEN
               f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_DED_OTH,'S',M_DATE,P_CURRENCY,M_PR_DED_OTH,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
            ELSE
                 M_PR_DED_OTH := M_PR_DED_OTH_FC_AMT;
               M_DED_OTH := M_PR_DED_OTH;
            END IF;
          ELSE
               M_DED_OTH := '' ;
          END IF;
    CLOSE EMP_DED_OTHERS;

    M_TOT_GROSS_EARN := NVL(M_ACT_BAS,0) + NVL(M_HRA,0) +
--    NVL(:CF_OT_HRS,0)  +
NVL(M_EARN_1,0) +
NVL(M_OT1,0)+ --Added
NVL(M_EARN_2,0) + NVL(M_EARN_3,0) + NVL(M_EARN_4,0) +
    NVL(M_EARN_5,0) + NVL(M_EARN_OTH,0) ;

    M_TOT_GROSS_DED := NVL(M_DBASIC,0)+ NVL(M_HRAD,0)+ NVL(M_DED_1,0) + NVL(M_DED_2,0) +
    NVL(M_DED_3,0) + NVL(M_DED_4,0) + NVL(M_DED_5,0) +
    NVL(M_DED_OTH,0) ;

    M_NET_SAL := NVL(M_TOT_GROSS_EARN,0) - NVL(M_TOT_GROSS_DED,0);

     INSERT INTO PW_FINAL_PAYROLL_FC ( FP_COMP_CODE,
                                       FP_REP_KEY_NO,
                                       FP_DEPT_DIVN_CODE,
                                       FP_DIVN_NAME,
                                       FP_DEPT_CODE,
                                       FP_DEPT_NAME,
                                       FP_EMP_CODE,
                                       FP_ORG_BASIC_FC_AMOUNT,
                                       FP_JOIN_DT,
                                       FP_ANAL_CODE_1,
                                       FP_NO_DAYS_PRSNT,
                                       FP_ORG_BAS,
                                       FP_ACT_BAS,
                                       FP_OT_HRS,
                                       FP_HRA,
                                       FP_EARN_1,
                                       FP_EARN_2,
                                       FP_EARN_3,
                                       FP_EARN_4,
                                       FP_EARN_5,
                                       FP_EARN_OTH,
                                       FP_TOT_GROSS_EARN,
                                       FP_NET_SAL,
                                       FP_DBASIC,
                                       FP_OT1,
                                       FP_HRAD,
                                       FP_DED_1,
                                       FP_DED_2,
                                       FP_DED_3,
                                       FP_DED_4,
                                       FP_DED_5,
                                       FP_DED_OTH,
                                       FP_TOT_GROSS_DED )
                               VALUES ( P_COMP_CODE,
                                       P_REP_KEY_NO,
                                       I.DEPT_DIVN_CODE,
                                       I.Q_1_DIVN_NAME,
                                       I.Q_1_DEPT_CODE,
                                       I.Q_1_DEPT_NAME,
                                       I.Q_1_DP_EMP_CODE1,
                                       I.Q_1_DP_ORG_BASIC_FC_AMOUNT,
                                       I.EMP_JOIN_DT,
                                       I.EMP_ANAL_CODE_1,
                                       M_NO_DAYS_PRSNT ,
                                       M_ORG_BAS,
                                       M_ACT_BAS,
                                       M_OT_HRS ,
                                       M_HRA    ,
                                       M_EARN_1 ,
                                       M_EARN_2 ,
                                       M_EARN_3 ,
                                       M_EARN_4 ,
                                       M_EARN_5 ,
                                       M_EARN_OTH,
                                       M_TOT_GROSS_EARN,
                                       M_NET_SAL      ,
                                       M_DBASIC       ,
                                       M_OT1          ,
                                       M_HRAD         ,
                                       M_DED_1        ,
                                       M_DED_2        ,
                                       M_DED_3        ,
                                       M_DED_4        ,
                                       M_DED_5        ,
                                       M_DED_OTH      ,
                                       M_TOT_GROSS_DED);


    --RETURN M_NAME;
  END LOOP;
  END LOOP;
  END LOOP;
END P_FINAL_PAYROLL_FC;

PROCEDURE P_PRE_PAYROLL_FC ( P_COMP_CODE     IN VARCHAR2,
                             P_REP_KEY_NO    IN NUMBER,
                             P_FM_EMP        IN VARCHAR2,
                             P_TO_EMP        IN VARCHAR2,
                             P_FM_DIVN       IN VARCHAR2,
                             P_TO_DIVN       IN VARCHAR2,
                             P_FM_DEPT       IN VARCHAR2,
                             P_TO_DEPT       IN VARCHAR2,
                             P_FM_LOCN       IN VARCHAR2,
                             P_TO_LOCN       IN VARCHAR2,
                             P_FM_CC         IN VARCHAR2,
                             P_TO_CC         IN VARCHAR2,
                             P_FM_CONT_TYPE  IN VARCHAR2,
                             P_TO_CONT_TYPE  IN VARCHAR2,
                             P_FM_COUNTRY    IN VARCHAR2,
                             P_TO_COUNTRY    IN VARCHAR2,
                             P_CURRENCY      IN VARCHAR2,
                             P_PROC_MTH      IN NUMBER,
                             P_MODE_TYPE     IN VARCHAR2,
                             P_PAY_TYPE      IN VARCHAR2,
                             P_SAL_YN        IN VARCHAR2,
                             P_PYBSDYFLAG_EA IN VARCHAR2 ) IS

MM_LANG_CODE VARCHAR2(240);
CURSOR C_PRE_PAY_FC IS
      SELECT DISTINCT DEPT_DIVN_CODE DEPT_DIVN_CODE,DECODE(MM_LANG_CODE, 'ENG',DIVN_NAME ,'LANG_01',DIVN_NAME_LANG_01,'LANG_02',DIVN_NAME_LANG_02,'LANG_03',
      DIVN_NAME_LANG_03,'LANG_04',DIVN_NAME_LANG_04,'LANG_05',DIVN_NAME_LANG_05,'LANG_06',DIVN_NAME_LANG_06,
     'LANG_07',DIVN_NAME_LANG_07,'LANG_08',DIVN_NAME_LANG_08,'LANG_09',DIVN_NAME_LANG_09,'LANG_10',DIVN_NAME_LANG_10)  Q_1_DIVN_NAME,
               DEPT_CODE Q_1_DEPT_CODE,DEPT_CODE C_DEPT_CODE,
               DECODE(MM_LANG_CODE, 'ENG',DEPT_NAME ,'LANG_01',DEPT_NAME_LANG_01,'LANG_02',DEPT_NAME_LANG_02,'LANG_03',
               DEPT_NAME_LANG_03,'LANG_04',DEPT_NAME_LANG_04,'LANG_05',DEPT_NAME_LANG_05,'LANG_06',DEPT_NAME_LANG_06,
               'LANG_07',DEPT_NAME_LANG_07,'LANG_08',DEPT_NAME_LANG_08,'LANG_09',DEPT_NAME_LANG_09,'LANG_10',DEPT_NAME_LANG_10) Q_1_DEPT_NAME,
               DECODE(MM_LANG_CODE, 'ENG',DEPT_NAME ,'LANG_01',DEPT_NAME_LANG_01,'LANG_02',DEPT_NAME_LANG_02,'LANG_03',
               DEPT_NAME_LANG_03,'LANG_04',DEPT_NAME_LANG_04,'LANG_05',DEPT_NAME_LANG_05,'LANG_06',DEPT_NAME_LANG_06,
               'LANG_07',DEPT_NAME_LANG_07,'LANG_08',DEPT_NAME_LANG_08,'LANG_09',DEPT_NAME_LANG_09,'LANG_10',DEPT_NAME_LANG_10)  C_DEPT_NAME,DP_EMP_CODE Q_1_DP_EMP_CODE1,
             DP_ORG_BASIC_FC_AMOUNT Q_1_DP_ORG_BASIC_FC_AMOUNT,
               EMP_JOIN_DT ,EMP_ANAL_CODE_1
        FROM      FM_DEPARTMENT, FM_DIVISION,PS_DUMMY_PROC , PM_EMP_PAY,PM_EMP_KEY
        WHERE  DEPT_COMP_CODE = P_COMP_CODE
        AND       DEPT_CODE      = DP_DEPT_CODE
        AND       DEPT_DIVN_CODE = DP_DIVN_CODE
        AND      DP_COMP_CODE   = DEPT_COMP_CODE
        AND       DP_EMP_CODE    BETWEEN P_FM_EMP  AND P_TO_EMP
        AND       DP_DIVN_CODE   BETWEEN P_FM_DIVN  AND P_TO_DIVN
        AND       DP_DEPT_CODE   BETWEEN P_FM_DEPT AND P_TO_DEPT
        AND       DP_LOCN_CODE   BETWEEN P_FM_LOCN     AND P_TO_LOCN
        AND    DP_CC_CODE     BETWEEN P_FM_CC  AND P_TO_CC
        AND       DP_CONT_TYPE_CODE   BETWEEN P_FM_CONT_TYPE AND P_TO_CONT_TYPE
        AND       NVL(DP_CNTRY_CODE,P_FM_COUNTRY)  BETWEEN  P_FM_COUNTRY  AND P_TO_COUNTRY
        AND    EMPY_COMP_CODE   = DEPT_COMP_CODE
        AND    EMPY_CODE        = DP_EMP_CODE
        AND    EMPY_PAY_TYPE    = DECODE(P_PAY_TYPE, 'H' , 'H' ,'D' , 'D','M' , 'M','A' , EMPY_PAY_TYPE)
        AND    EMPY_PAY_MODE =   DECODE(NVL(P_MODE_TYPE,'A'), 'B', 'B', 'Q', 'Q', 'C', 'C', 'A', EMPY_PAY_MODE)
        AND    DIVN_COMP_CODE = P_COMP_CODE
        AND    DIVN_CODE = DEPT_DIVN_CODE
        AND    EMPY_CODE  = EMP_CODE
        AND       EMP_COMP_CODE  = P_COMP_CODE
        AND    NVL(EMP_PROC_FLAG,'Z') = 'Y'
        AND       DP_PROC_MTH = NVL(P_PROC_MTH,DP_PROC_MTH)
        AND    ( DECODE(NVL(EMP_LVSAL_PROC_YN,'N'),'Y','Y','N','N')  <> P_SAL_YN
        OR      NVL(EMP_LVSAL_PROC_YN,'P')  = P_SAL_YN)
        ORDER BY DEPT_DIVN_CODE, DEPT_CODE,DP_EMP_CODE;

   M_NO_OF_DAYS_LEAVE                PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_DAYS_LV_DURING_CPMTH      PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_SL_LV_DAYS                    PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_DAYS_LWP_DURING_CPMTH     PW_FS.NO_OF_DAYS%TYPE;
   P_STATUS                          PW_FS.FLAG%TYPE := NULL;
   P_NO_OF_DAYS_OR_HRS_PRESENT       PW_FS.NO_OF_DAYS%TYPE; -- No. of days Absent
   M_NO_OF_DAY_BET_PERIOD  PW_FS.NO_OF_DAYS%TYPE; -- Total No. of days between Eff. dates
   M_NO_OF_DAYS_IN_MONTH   PW_FS.NO_OF_DAYS%TYPE; -- Total No. of days in Month

CURSOR B3 IS
        SELECT TO_DATE(PARA_VALUE, 'DD/MM/YYYY')
        FROM   PM_COMP_PARAMETER
        WHERE  PARA_CODE = 'CPFMDT'
        AND    PARA_COMP_CODE = P_COMP_CODE;

CURSOR B4 IS
        SELECT TO_DATE(PARA_VALUE, 'DD/MM/YYYY')
        FROM   PM_COMP_PARAMETER
        WHERE  PARA_CODE = 'CPTODT'
        AND    PARA_COMP_CODE = P_COMP_CODE;

CURSOR B5 IS
        SELECT TO_DATE(PARA_VALUE, 'DD/MM/YYYY')
        FROM   PM_COMP_PARAMETER
        WHERE  PARA_CODE = 'CPCOFFDT'
        AND    PARA_COMP_CODE = P_COMP_CODE;

CURSOR B6 IS
        SELECT TO_DATE(PARA_VALUE, 'DD/MM/YYYY')
        FROM   PM_COMP_PARAMETER
        WHERE  PARA_CODE = 'PRCOFFDT'
        AND    PARA_COMP_CODE = P_COMP_CODE;

CURSOR B7 IS
        SELECT NVL(PARA_VALUE,'N')
        FROM   PM_COMP_PARAMETER
        WHERE  PARA_CODE = 'OT_MIN_REP'
        AND    PARA_COMP_CODE = P_COMP_CODE;

CURSOR ALLW_EARN(P_DEPT_DIVN_CODE IN VARCHAR2,P_DEPT_CODE IN VARCHAR2) IS
        SELECT DISTINCT ALLW_CODE
        FROM   PS_DUMMY_PROC,PM_ALLOWANCE
        WHERE  DP_COMP_CODE    = P_COMP_CODE
        AND    DP_ALLW_CODE    = ALLW_CODE
        AND    ALLW_EARN_DEDUC = 'E'
        AND    DP_DIVN_CODE    = P_DEPT_DIVN_CODE
        AND    DP_DEPT_CODE    = P_DEPT_CODE
        AND    DP_PROC_MTH     = P_PROC_MTH
      AND    ALLW_TYPE > 4
        ORDER BY ALLW_CODE;

CURSOR ALLW_DED(P_DEPT_DIVN_CODE IN VARCHAR2,P_DEPT_CODE IN VARCHAR2) IS
        SELECT DISTINCT ALLW_CODE
        FROM   PS_DUMMY_PROC,PM_ALLOWANCE
        WHERE  DP_COMP_CODE    = P_COMP_CODE
        AND    DP_ALLW_CODE    = ALLW_CODE
        AND    ALLW_EARN_DEDUC = 'D'
        AND    DP_DIVN_CODE    = P_DEPT_DIVN_CODE
        AND    DP_DEPT_CODE    = P_DEPT_CODE
        AND    DP_PROC_MTH     = P_PROC_MTH
        AND    ALLW_TYPE > 4
        ORDER  BY ALLW_CODE;

CURSOR C_GET_NO_OF_DAYS_PRESENT(P_EMP_CODE IN VARCHAR2,P_PROC_START_DT IN DATE, P_PROC_END_DT IN DATE)IS
      SELECT SUM(NVL(ATND_HRS_DAYS,0))
      FROM   PT_ATTENDANCE_DETAIL , PT_ATTENDANCE_HEAD
      WHERE  ATNH_COMP_CODE       = P_COMP_CODE
      AND    ATND_ATNH_SYS_ID     = ATNH_SYS_ID
      AND    ATND_EMP_CODE        = P_EMP_CODE
      AND    ATNH_APPR_UID IS NOT NULL
      AND    ATND_DT      BETWEEN   P_PROC_START_DT AND P_PROC_END_DT ;

CURSOR C1(P_EMP_CODE IN VARCHAR2,P_PROC_START_DT IN DATE, P_PROC_END_DT IN DATE) IS
      SELECT NVL(LVAP_LWP_PAY_DAYS,0)
      FROM   PT_LEAVE_APPLICATION_HEAD, PT_LEAVE_SICK_PAY_CALC, PM_EMP_LEAVE , PM_LEAVE
      WHERE  LVAH_COMP_CODE  = P_COMP_CODE
      AND    LVAH_EMP_CODE   = P_EMP_CODE
      AND    LVAH_SYS_ID     = LVAP_LVAH_SYS_ID
      AND    LVAP_FHNL_L     = 'L'
        AND    LVAH_APPR_UID  IS NOT NULL
      AND    LVAH_CANC_UID IS NULL
      AND    EMPL_CODE     = P_EMP_CODE
      AND    LVAH_LV_CATG_CODE = EMPL_LV_CATG_CODE
      AND    LVAH_DT         BETWEEN P_PROC_START_DT AND P_PROC_END_DT
      AND    EMPL_LV_CATG_CODE = LV_CATG_CODE
      AND    LV_TYPE_CODE      = '3';


CURSOR C_EMP_LV_AND_RESUMPTION_DTLS(P_EMP_CODE IN VARCHAR2,P_PROC_START_DT IN DATE, P_PROC_END_DT IN DATE) IS
      SELECT 'W' A_LR_TYPE ,LWP_FROM_DT A_START_DT,LWP_UPTO_DT A_END_DT ,
              TO_DATE('') A_RESUMPTION_DT ,LWP_DAYS    A_NO_OF_DAYS_LEAVE
      FROM    PT_LWP
      WHERE   LWP_COMP_CODE = P_COMP_CODE
      AND     LWP_EMP_CODE  = P_EMP_CODE
      AND     ((LWP_FROM_DT BETWEEN P_PROC_START_DT AND P_PROC_END_DT
      OR       LWP_UPTO_DT           BETWEEN P_PROC_START_DT AND P_PROC_END_DT )
      OR      (P_PROC_START_DT                BETWEEN LWP_FROM_DT  AND LWP_UPTO_DT
          OR      P_PROC_END_DT             BETWEEN LWP_FROM_DT AND LWP_UPTO_DT))
      AND     LWP_APPR_UID  IS NOT NULL
      AND     LWP_REF_SYS_ID IS NULL --added by deebak on 29/08/2007 for ECAR-175836 (mukthar)
      UNION
      SELECT 'L' A_LR_TYPE ,LVAH_APPR_START_DT A_START_DT ,NVL(LVAH_RESU_DT,LVAH_APPR_END_DT) A_END_DT              ,
              TO_DATE('') A_RESUMPTION_DT,LVAH_APPR_DAYS A_NO_OF_DAYS_LEAVE
      FROM   PT_LEAVE_APPLICATION_HEAD  , PM_EMP_LEAVE , PM_LEAVE
      WHERE  LVAH_COMP_CODE             = P_COMP_CODE
      AND    LVAH_EMP_CODE              = P_EMP_CODE
      AND    ( LVAH_APPR_START_DT         BETWEEN P_PROC_START_DT AND P_PROC_END_DT
      OR     LVAH_APPR_END_DT           BETWEEN P_PROC_START_DT AND P_PROC_END_DT
      OR    P_PROC_START_DT  BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
      OR    P_PROC_END_DT    BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
      OR     LVAH_RESU_DT               BETWEEN P_PROC_START_DT AND P_PROC_END_DT
      OR     LVAH_RESU_DT IS NULL )
      AND    (DECODE(NVL(LV_RESU_REQD_YN,'N'),'N',LVAH_APPR_END_DT,LVAH_RESU_DT)<= DECODE(NVL(LV_RESU_REQD_YN,'N'),'N',P_PROC_END_DT,LVAH_APPR_END_DT)
      OR     P_PROC_START_DT  BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
      OR     P_PROC_END_DT    BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
      OR     LVAH_APPR_END_DT BETWEEN P_PROC_START_DT AND P_PROC_END_DT)
      AND    LVAH_EMP_CODE              = EMPL_CODE
      AND    LVAH_APPR_UID  IS NOT NULL
      AND    LVAH_LV_CATG_CODE          = EMPL_LV_CATG_CODE
      AND    EMPL_LV_CATG_CODE          = LV_CATG_CODE
      AND    LV_TYPE_CODE = '1'
      AND    (LVAH_CANC_UID IS NULL AND LVAH_CANC_DT IS NULL)
      UNION
      SELECT 'L' A_LR_TYPE ,LVAH_APPR_START_DT A_START_DT            ,
             NVL(LVAH_RESU_DT,LVAH_APPR_END_DT) A_END_DT              ,
             TO_DATE('') A_RESUMPTION_DT,LVAH_APPR_DAYS A_NO_OF_DAYS_LEAVE
      FROM   PT_LEAVE_APPLICATION_HEAD  , PM_EMP_LEAVE , PM_LEAVE,PT_LEAVE_RESU_HEAD
      WHERE  LVAH_COMP_CODE             = P_COMP_CODE
      AND    LVAH_EMP_CODE              = P_EMP_CODE
      AND   (LVAH_APPR_START_DT         BETWEEN P_PROC_START_DT AND P_PROC_END_DT
      OR     LVAH_APPR_END_DT           BETWEEN P_PROC_START_DT AND P_PROC_END_DT
      OR     P_PROC_START_DT  BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
      OR     P_PROC_END_DT    BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
      OR     LVAH_RESU_DT               BETWEEN P_PROC_START_DT AND P_PROC_END_DT
      OR     LVAH_RESU_DT IS NULL )
      AND    LVAH_RESU_DT > LVAH_APPR_END_DT
      AND    LVAH_TXN_CODE = LVRH_REF_TXN_CODE
      AND    LVAH_NO          = LVRH_REF_NO
      AND    LVAH_SYS_ID   = LVRH_REF_SYS_ID
      AND    LVRH_APPR_UID IS NOT NULL
      AND    LVAH_EMP_CODE = LVRH_EMP_CODE
      AND    LVAH_EMP_CODE              = EMPL_CODE
      AND    LVAH_APPR_UID  IS NOT NULL
      AND    LVAH_LV_CATG_CODE          = EMPL_LV_CATG_CODE
      AND    EMPL_LV_CATG_CODE          = LV_CATG_CODE
      AND    LV_TYPE_CODE = '1'
      AND   (LVAH_CANC_UID IS NULL AND LVAH_CANC_DT IS NULL);-- end


  M_NO_DAYS_PRSNT        NUMBER;

--   M_NAME      VARCHAR2(60);
   M_NAME      VARCHAR2(240); -- CORRECTED BY ASHIK TO RETRIEVE THE NAME AS ERROR WAS COMING WHILE RUNNING THE REPORT ON 06-FEB-2017
  M_ORG_BASIC      NUMBER(13,3);
  M_ORG_BAS      NUMBER(13,3);
  M_ACT_BASIC      NUMBER(13,3);
  M_ACT_BAS      NUMBER(13,3);
  M_PR_HRA          NUMBER;
  M_HRA          NUMBER;
  M_PR_HRAD      NUMBER;
  M_HRAD         NUMBER;
  M_PR_DBASIC    NUMBER;
  M_DBASIC       NUMBER;
  M_PR_OT1       NUMBER;
  M_OT1          NUMBER;
  --M_PR_OT2       NUMBER;
  M_PR_EARN_1    VARCHAR2(12);
  M_EARN_1       NUMBER;
  M_PR_EARN_2    VARCHAR2(12);
  M_EARN_2       NUMBER;
  M_PR_EARN_3    VARCHAR2(12);
  M_EARN_3       NUMBER;
  M_PR_EARN_4    VARCHAR2(12);
  M_EARN_4       NUMBER;
  M_PR_EARN_5    VARCHAR2(12);
  M_EARN_5       NUMBER;
  M_PR_DED_1     NUMBER;
  M_DED_1        NUMBER;
  M_PR_DED_2     NUMBER;
  M_DED_2        NUMBER;
  M_PR_DED_3     NUMBER;
  M_DED_3        NUMBER;
  M_PR_DED_4     NUMBER;
  M_DED_4        NUMBER;
  M_PR_DED_5     NUMBER;
  M_DED_5        NUMBER;
  M_PR_EARN_OTH  PS_DUMMY_PROC.dp_lc_amount%type;
  M_EARN_OTH     NUMBER;
  M_PR_DED_OTH   NUMBER;
  M_DED_OTH      NUMBER;
  M_TOT_GROSS_EARN NUMBER;
  M_TOT_GROSS_DED  NUMBER;
  M_NET_SAL NUMBER;
  M_BP_VALUE     VARCHAR2(100);
  M_ORG_BASIC_FC_AMT NUMBER;
  M_ACT_BASIC_CURR_CODE PS_DUMMY_PROC.DP_CURR_CODE%TYPE;
  M_ACT_BASIC_FC_AMT NUMBER;
  M_PR_HRA_CURR_CODE PS_DUMMY_PROC.DP_CURR_CODE%TYPE;
  M_PR_HRA_FC_AMT NUMBER;
  M_PR_HRAD_CURR_CODE PS_DUMMY_PROC.DP_CURR_CODE%TYPE;
  M_PR_HRAD_FC_AMT NUMBER;
  M_PR_DBASIC_CURR_CODE PS_DUMMY_PROC.DP_CURR_CODE%TYPE;
  M_PR_DBASIC_FC_AMT NUMBER;
  M_PR_OT1_CURR_CODE PS_DUMMY_PROC.DP_CURR_CODE%TYPE;
  M_PR_OT1_FC_AMT NUMBER;
  M_PR_EARN1_CURR_CODE PS_DUMMY_PROC.DP_CURR_CODE%TYPE;
  M_PR_EARN1_FC_AMT NUMBER;
  M_PR_EARN2_CURR_CODE PS_DUMMY_PROC.DP_CURR_CODE%TYPE;
  M_PR_EARN2_FC_AMT NUMBER;
  M_PR_EARN3_CURR_CODE PS_DUMMY_PROC.DP_CURR_CODE%TYPE;
  M_PR_EARN3_FC_AMT NUMBER;
  M_PR_EARN4_CURR_CODE PS_DUMMY_PROC.DP_CURR_CODE%TYPE;
  M_PR_EARN4_FC_AMT NUMBER;
  M_PR_EARN5_CURR_CODE PS_DUMMY_PROC.DP_CURR_CODE%TYPE;
  M_PR_EARN5_FC_AMT NUMBER;
  M_PR_DED1_CURR_CODE PS_DUMMY_PROC.DP_CURR_CODE%TYPE;
  M_PR_DED1_FC_AMT NUMBER;
  M_PR_DED2_CURR_CODE PS_DUMMY_PROC.DP_CURR_CODE%TYPE;
  M_PR_DED2_FC_AMT NUMBER;
  M_PR_DED3_CURR_CODE PS_DUMMY_PROC.DP_CURR_CODE%TYPE;
  M_PR_DED3_FC_AMT NUMBER;
  M_PR_DED4_CURR_CODE PS_DUMMY_PROC.DP_CURR_CODE%TYPE;
  M_PR_DED4_FC_AMT NUMBER;
  M_PR_DED5_CURR_CODE PS_DUMMY_PROC.DP_CURR_CODE%TYPE;
  M_PR_DED5_FC_AMT NUMBER;
  M_PR_EARN_OTH_CURR_CODE PS_DUMMY_PROC.DP_CURR_CODE%TYPE;
  M_PR_EARN_OTH_FC_AMT PS_DUMMY_PROC.DP_FC_AMOUNT%TYPE;
  M_PR_DED_OTH_CURR_CODE PS_DUMMY_PROC.DP_CURR_CODE%TYPE;
  M_PR_DED_OTH_FC_AMT NUMBER;
  M_PROC_START_DT DATE;
  M_PROC_END_DT DATE;
  M_PAYDAYS NUMBER;
  M_OT_MIN_REP  VARCHAR2(1);
  M_ALLW_DED_1 VARCHAR2(12);
  M_ALLW_DED_2 VARCHAR2(12);
  M_ALLW_DED_3 VARCHAR2(12);
  M_ALLW_DED_4 VARCHAR2(12);
  M_ALLW_DED_5 VARCHAR2(12);
  M_ALLW_EARN_1 VARCHAR2(12);
  M_ALLW_EARN_2 VARCHAR2(12);
  M_ALLW_EARN_3 VARCHAR2(12);
  M_ALLW_EARN_4 VARCHAR2(12);
  M_ALLW_EARN_5 VARCHAR2(12);

CURSOR EMP_OT_HRS(P_EMP_CODE IN VARCHAR2,P_PROC_START_DT IN DATE, P_PROC_END_DT IN DATE,P_PRVOFF_DT IN DATE,P_CUTOFF_DT IN DATE) IS
        SELECT SUM(NVL(OTD_TOTAL_OT_HRS, 0)) TOTAL_OT_HRS
      FROM   PT_OVERTIME_DETAIL        , PT_OVERTIME_HEAD
      WHERE  OTH_COMP_CODE             = P_COMP_CODE
      AND    OTD_OTH_SYS_ID            = OTH_SYS_ID
      AND    OTD_EMP_CODE              = P_EMP_CODE
      AND    (OTD_DT            BETWEEN  P_PRVOFF_DT AND P_PROC_START_DT
            OR       OTD_DT BETWEEN P_PROC_START_DT  AND P_CUTOFF_DT)
      AND    OTH_APPR_UID      IS NOT NULL;

CURSOR EMP_NAME(P_EMP_CODE IN VARCHAR2) IS
        SELECT DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',
      EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,
     'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10)
      FROM   PM_EMP_KEY
      WHERE  EMP_COMP_CODE = P_COMP_CODE
      AND    EMP_CODE      = P_EMP_CODE;

CURSOR EMP_ORG_BASIC(P_EMP_CODE IN VARCHAR2) IS
        SELECT EMPA_CURR_CODE, NVL(EMPA_LC_AMOUNT,0),NVL(EMPA_FC_AMOUNT,0)
      FROM   PM_EMP_ALLOWANCE , PM_ALLOWANCE
      WHERE  EMPA_COMP_CODE = P_COMP_CODE
        AND    EMPA_CODE      = P_EMP_CODE
      AND    ALLW_CODE      = EMPA_ALLW_CODE
        AND    EMPA_EXCLUDE_FROM_DT IS NULL
        AND    EMPA_EXCLUDE_UPTO_DT IS NULL
      AND    ALLW_TYPE      = '1'
GROUP BY EMPA_CURR_CODE,EMPA_LC_AMOUNT,EMPA_FC_AMOUNT;


CURSOR EMP_ACT_BASIC(P_EMP_CODE IN VARCHAR2) IS
        SELECT NVL(DP_LC_AMOUNT,0),DP_CURR_CODE,NVL(DP_FC_AMOUNT,0)
      FROM   PS_DUMMY_PROC , PM_ALLOWANCE
      WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE  = P_EMP_CODE
      AND    ALLW_CODE    = DP_ALLW_CODE
        AND         DP_PROC_MTH = NVL(P_PROC_MTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'E'          -- Added on 16th Sept
        AND    ALLW_TYPE    = '1'
GROUP BY DP_LC_AMOUNT,DP_CURR_CODE,DP_FC_AMOUNT ;

CURSOR EMP_HRA(P_EMP_CODE IN VARCHAR2) IS
        SELECT NVL(DP_LC_AMOUNT,0),DP_CURR_CODE,NVL(DP_FC_AMOUNT,0)
        FROM   PS_DUMMY_PROC  , PM_ALLOWANCE
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    ALLW_CODE   = DP_ALLW_CODE
        AND    DP_PROC_MTH = NVL(P_PROC_MTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'E'          -- Added on 16th Sept
        AND    ALLW_TYPE = '2'
        group by DP_LC_AMOUNT,DP_CURR_CODE,DP_FC_AMOUNT;

---the sum is added for ADIYAT-820830 issue on 30-dec-12
CURSOR EMP_HRAD(P_EMP_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0),DP_CURR_CODE,NVL(SUM(DP_FC_AMOUNT),0)
        FROM   PS_DUMMY_PROC  , PM_ALLOWANCE
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    ALLW_CODE   = DP_ALLW_CODE
        AND       DP_PROC_MTH = NVL(P_PROC_MTH,DP_PROC_MTH)
        AND    ALLW_TYPE = '2'
        AND       DP_EARN_DEDUC = 'D'
           group by DP_CURR_CODE;

CURSOR EMP_DBASIC(P_EMP_CODE IN VARCHAR2) IS
        SELECT NVL(sum(DP_LC_AMOUNT),0),DP_CURR_CODE,NVL(sum(DP_FC_AMOUNT),0)
        FROM   PS_DUMMY_PROC  , PM_ALLOWANCE
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE =  P_EMP_CODE
        AND    ALLW_CODE   =  DP_ALLW_CODE
        AND       DP_PROC_MTH = NVL(P_PROC_MTH,DP_PROC_MTH)
        AND    ALLW_TYPE = '1'
        AND       DP_EARN_DEDUC = 'D'
      GROUP by DP_CURR_CODE;


CURSOR EMP_OT1(P_EMP_CODE IN VARCHAR2) IS  -- ADDED BY YASHARTH ON 19/07/2006 FOR ISSUE ADVIND-118179
        SELECT  NVL(DP_LC_AMOUNT,0),DP_CURR_CODE,NVL(DP_FC_AMOUNT,0)
        FROM    PS_DUMMY_PROC , PM_ALLOWANCE
        WHERE   DP_COMP_CODE = P_COMP_CODE
        AND     DP_EMP_CODE  = P_EMP_CODE
        AND     ALLW_CODE    = DP_ALLW_CODE
        AND    DP_PROC_MTH = NVL(P_PROC_MTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'E'          -- Added on 16th Sept
        AND     ALLW_TYPE = '3'
        group by DP_LC_AMOUNT,DP_CURR_CODE,DP_FC_AMOUNT;


CURSOR EMP_EARN_1(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(DP_LC_AMOUNT,0),DP_CURR_CODE,NVL(DP_FC_AMOUNT,0)
      FROM   PS_DUMMY_PROC,PM_ALLOWANCE
      WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE   = P_EMP_CODE
        AND    DP_PROC_MTH   = NVL(P_PROC_MTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'E'          -- Added on 16th Sept
        AND    ALLW_CODE     = DP_ALLW_CODE  -- Added on 16th Sept
      AND    DP_ALLW_CODE  = P_ALLW_CODE          -- Added on 16th Sept
      GROUP BY DP_LC_AMOUNT,DP_CURR_CODE,DP_FC_AMOUNT;


CURSOR EMP_EARN_2 (P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2)IS
        SELECT NVL(DP_LC_AMOUNT,0),DP_CURR_CODE,NVL(DP_FC_AMOUNT,0)
        FROM   PS_DUMMY_PROC,PM_ALLOWANCE
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    DP_PROC_MTH = NVL(P_PROC_MTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'E'          -- Added on 16th Sept
        AND    ALLW_CODE    = DP_ALLW_CODE  -- Added on 16th Sept
      AND    DP_ALLW_CODE = P_ALLW_CODE          -- Added on 16th Sept
      GROUP BY DP_LC_AMOUNT,DP_CURR_CODE,DP_FC_AMOUNT;


CURSOR EMP_EARN_3 (P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2)IS
        SELECT NVL(DP_LC_AMOUNT,0),DP_CURR_CODE,NVL(DP_FC_AMOUNT,0)
         FROM   PS_DUMMY_PROC,PM_ALLOWANCE
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE  = P_EMP_CODE
        AND    DP_PROC_MTH = NVL(P_PROC_MTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE
        AND    DP_EARN_DEDUC = 'E'
        AND    ALLW_CODE    = DP_ALLW_CODE
        AND    ALLW_CODE    = P_ALLW_CODE;


CURSOR EMP_EARN_4(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(DP_LC_AMOUNT,0),DP_CURR_CODE,NVL(DP_FC_AMOUNT,0)
        FROM   PS_DUMMY_PROC,PM_ALLOWANCE
        WHERE  DP_COMP_CODE  = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
      AND       DP_PROC_MTH = NVL(P_PROC_MTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE
        AND    DP_EARN_DEDUC = 'E'          -- Added on 16th Sept
        AND    ALLW_CODE    = DP_ALLW_CODE  -- Added on 16th Sept
        AND    ALLW_CODE    = P_ALLW_CODE --ADDED ON 20/01/2004
      GROUP BY DP_LC_AMOUNT,DP_CURR_CODE,DP_FC_AMOUNT;

CURSOR EMP_EARN_5(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(DP_LC_AMOUNT,0),DP_CURR_CODE,NVL(DP_FC_AMOUNT,0)
        FROM   PS_DUMMY_PROC
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE  = P_EMP_CODE
        AND       DP_PROC_MTH  = NVL(P_PROC_MTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE
       GROUP BY DP_LC_AMOUNT,DP_CURR_CODE,DP_FC_AMOUNT;


CURSOR EMP_DED_1(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0),DP_CURR_CODE,NVL(DP_FC_AMOUNT,0)
        FROM   PS_DUMMY_PROC,PM_ALLOWANCE
        WHERE  DP_COMP_CODE  = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND       DP_PROC_MTH = NVL(P_PROC_MTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'D'          -- Added on 20/2/2004
        AND    ALLW_CODE    = DP_ALLW_CODE  -- Added on 20/2/2004
        AND    ALLW_CODE    = P_ALLW_CODE  --Added on 20/01/2004
        GROUP BY DP_LC_AMOUNT,DP_CURR_CODE,DP_FC_AMOUNT;

CURSOR EMP_DED_2 (P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2)IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0),DP_CURR_CODE,NVL(DP_FC_AMOUNT,0)
        FROM   PS_DUMMY_PROC,PM_ALLOWANCE
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND       DP_PROC_MTH = NVL(P_PROC_MTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'D'          -- Added on 20/4/2004
        AND    ALLW_CODE    = DP_ALLW_CODE  -- Added on 20/4/2004
        AND    ALLW_CODE = P_ALLW_CODE
        GROUP BY DP_LC_AMOUNT,DP_CURR_CODE,DP_FC_AMOUNT;


CURSOR EMP_DED_3 (P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2)IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0),DP_CURR_CODE,NVL(DP_FC_AMOUNT,0)
        FROM   PS_DUMMY_PROC
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    DP_PROC_MTH = NVL(P_PROC_MTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE
        GROUP by DP_LC_AMOUNT,DP_CURR_CODE,DP_FC_AMOUNT;


CURSOR EMP_DED_4(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0),DP_CURR_CODE,NVL(DP_FC_AMOUNT,0)
        FROM   PS_DUMMY_PROC
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    DP_PROC_MTH = NVL(P_PROC_MTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE
      GROUP BY DP_LC_AMOUNT,DP_CURR_CODE,DP_FC_AMOUNT;

CURSOR EMP_DED_5(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0),DP_CURR_CODE,NVL(DP_FC_AMOUNT,0)
        FROM   PS_DUMMY_PROC
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    DP_PROC_MTH = NVL(P_PROC_MTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE
        GROUP BY DP_LC_AMOUNT,DP_CURR_CODE,DP_FC_AMOUNT;


CURSOR EMP_EARN_OTHERS(P_EMP_CODE IN VARCHAR2) IS
        SELECT NVL(DP_LC_AMOUNT,0),DP_CURR_CODE,NVL(DP_FC_AMOUNT,0)
         FROM   PS_DUMMY_PROC , PM_ALLOWANCE
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    ALLW_CODE    = DP_ALLW_CODE
        AND    DP_EMP_CODE  = P_EMP_CODE
        AND    DP_ALLW_CODE NOT IN (M_ALLW_EARN_1,M_ALLW_EARN_2,
                   M_ALLW_EARN_3,M_ALLW_EARN_4,M_ALLW_EARN_5)
        AND    DP_EARN_DEDUC = 'E'
        AND    DP_PROC_MTH = NVL(P_PROC_MTH,DP_PROC_MTH)
        AND    ALLW_TYPE NOT IN ('1','2','3','4')
       GROUP by DP_LC_AMOUNT,DP_CURR_CODE,DP_FC_AMOUNT;


CURSOR EMP_DED_OTHERS(P_EMP_CODE IN VARCHAR2) IS
        SELECT NVL(DP_LC_AMOUNT,0),DP_CURR_CODE,NVL(DP_FC_AMOUNT,0)
        FROM   PS_DUMMY_PROC , PM_ALLOWANCE
        WHERE  DP_COMP_CODE  = P_COMP_CODE
        AND    ALLW_CODE    =  DP_ALLW_CODE
        AND    DP_EMP_CODE  =  P_EMP_CODE
        AND    DP_ALLW_CODE NOT IN (M_ALLW_DED_1,M_ALLW_DED_2,
                   M_ALLW_DED_3,M_ALLW_DED_4,M_ALLW_DED_5)
        AND    DP_EARN_DEDUC = 'D'
        AND       DP_PROC_MTH = NVL(P_PROC_MTH,DP_PROC_MTH)
        AND    ALLW_TYPE NOT IN ('1','2','3','4')
        GROUP BY DP_LC_AMOUNT,DP_CURR_CODE,DP_FC_AMOUNT;






  --ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012 STARTS
    CURSOR C_CURR IS
       SELECT PARA_VALUE
       FROM PM_PARAMETER
       WHERE PARA_TYPE  ='BASECURR' AND PARA_CODE ='BASECURR';

  M_PARA_VALUE PM_PARAMETER.PARA_VALUE%TYPE;
  CURSOR C_DATE IS
  SELECT TRUNC(To_Date(PARA_VALUE,'DD/MM/RRRR'))
  FROM PM_COMP_PARAMETER WHERE PARA_CODE= 'CPTODT'
  AND PARA_COMP_CODE = P_COMP_CODE;

  CURSOR C2 IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

  M_DATE          DATE;
  M_CURR_CODE     FM_CURRENCY.CURR_CODE%TYPE;
  M_EMP_CURR_CODE PM_EMP_ALLOWANCE.EMPA_CURR_CODE%TYPE;

  M_OT_HRS_MIN NUMBER(12,2);
  M_CUTOFF_DT DATE;
  M_PRVOFF_DT DATE;
  M_OT_HRS NUMBER;
  M_ALLW  VARCHAR2(20);
  CNT     NUMBER(2);
  M_ALLW1 VARCHAR2(20);
  CNT1    NUMBER(2);

BEGIN

dummy('TAMIL  INSIDE LOOP P_FM_EMP-'||P_FM_EMP);

      DELETE FROM PW_PRE_PAYROLL_FC WHERE PP_REP_KEY_NO = P_REP_KEY_NO;

   MM_LANG_CODE := NULL;

    IF C2%ISOPEN THEN
       CLOSE C2;
    END IF;

    OPEN C2;
    FETCH C2 INTO MM_LANG_CODE;
    CLOSE C2;
   IF B3%ISOPEN THEN
      CLOSE B3;
   END IF;

   OPEN B3;
   FETCH B3 INTO M_PROC_START_DT;
   CLOSE B3;

   IF B4%ISOPEN THEN
      CLOSE B4;
   END IF;

   OPEN B4;
   FETCH B4 INTO M_PROC_END_DT;
   CLOSE B4;

   IF B5%ISOPEN THEN
      CLOSE B5;
   END IF;

   OPEN B5;
   FETCH B5 INTO M_CUTOFF_DT;
   CLOSE B5;

   IF B6%ISOPEN THEN
      CLOSE B6;
   END IF;

   OPEN B6;
   FETCH B6 INTO M_PRVOFF_DT;
   CLOSE B6;

   IF B7%ISOPEN THEN
      CLOSE B7;
   END IF;

   OPEN B7;
   FETCH B7 INTO M_OT_MIN_REP;
   CLOSE B7;

   FOR I IN C_PRE_PAY_FC
   LOOP

      P_STATUS := '0' ;
      P_NO_OF_DAYS_OR_HRS_PRESENT := 0;

   /* commented by deebak on 24/06/2007 for DANEM-164291
      IF NVL(:CP_PYBSDYFLAG_EA, '*') = 'E' THEN
         M_NO_OF_DAYS_IN_MONTH  := :CP_PAYDAYS ;
      ELSE   */
          --The above commented code reverted back by Rajasekaran on 11/02/2008 for ASIC-201070
        IF NVL(P_PYBSDYFLAG_EA, '*') = 'E' THEN
           M_NO_OF_DAYS_IN_MONTH  := M_PAYDAYS ;
        ELSE
             M_NO_OF_DAYS_IN_MONTH := M_PROC_END_DT - M_PROC_START_DT + 1;
          END IF ;

    -- Initialised by Vidyadhar since dedn will not be calculated for abseteeism below
    -- if PYBSDYFLAG-'E' and 'PYBSDYS-30, and actual days in the month is 31.
      M_NO_OF_DAY_BET_PERIOD := M_NO_OF_DAYS_IN_MONTH ;
    -- added by yasharth on 16-Aug-2006 for issue ALFOZAN-121913
      IF I.EMP_JOIN_DT BETWEEN M_PROC_START_DT AND M_PROC_END_DT THEN
--        M_NO_OF_DAY_BET_PERIOD := M_NO_OF_DAY_BET_PERIOD - (:EMP_JOIN_DT - M_PROC_START_DT);
-- COMMENTED ABOVE AND ADDED BELOW BY ASHIK FOR THE ISSUE ALFOZAN-310248 ON 21/06/2009
            M_NO_OF_DAY_BET_PERIOD := M_PROC_END_DT - I.EMP_JOIN_DT + 1; -- ASHIK
      END IF;
    -- end

      OPEN  C_GET_NO_OF_DAYS_PRESENT(I.Q_1_DP_EMP_CODE1,M_PROC_START_DT,M_PROC_END_DT);
      FETCH C_GET_NO_OF_DAYS_PRESENT INTO P_NO_OF_DAYS_OR_HRS_PRESENT ;
      CLOSE C_GET_NO_OF_DAYS_PRESENT ;

      OPEN C1(I.Q_1_DP_EMP_CODE1,M_PROC_START_DT,M_PROC_END_DT);
      FETCH C1 INTO     M_NO_OF_SL_LV_DAYS;
      CLOSE C1;

      P_NO_OF_DAYS_OR_HRS_PRESENT := NVL(P_NO_OF_DAYS_OR_HRS_PRESENT, 0) + NVL(M_NO_OF_SL_LV_DAYS,0);

      IF P_PAY_TYPE IN ('M','T','W','B') THEN -- 'W','B' Added for weekly, biweekly DAF

      FOR C_LEAVE_REC IN C_EMP_LV_AND_RESUMPTION_DTLS(I.Q_1_DP_EMP_CODE1,M_PROC_START_DT,M_PROC_END_DT)
      LOOP
        dummy('TAMIL  INSIDE LOOP C_EMP_LV_AND_RESUMPTION_DTLS P_FM_EMP-'||P_FM_EMP);
         IF C_LEAVE_REC.A_LR_TYPE = 'L' THEN   -- Leave Details
            IF C_LEAVE_REC.A_START_DT >= M_PROC_START_DT AND
               C_LEAVE_REC.A_END_DT   <=M_PROC_END_DT   THEN
               --Commented by Manjula for ORIONQC-GDC-814532 on 14/02/2006
               /*IF NVL(:CP_ADV_LV_SAL,'N') = 'Y' THEN  -- MEA issues, since salary for the first to leave start paid alrealy
                       M_NO_OF_DAYS_LV_DURING_CPMTH   :=    C_LEAVE_REC.A_END_DT
                                                       - M_PROC_START_DT
                                                       + 1 ;
                ELSE    */
                M_NO_OF_DAYS_LV_DURING_CPMTH   :=    C_LEAVE_REC.A_END_DT
                                                       - C_LEAVE_REC.A_START_DT
                                                        + 1 ;

                --END IF;
            ELSIF ((C_LEAVE_REC.A_START_DT <= M_PROC_START_DT) AND
                   (C_LEAVE_REC.A_END_DT   >= M_PROC_END_DT)) THEN  -- For the Whole month
                M_NO_OF_DAYS_LV_DURING_CPMTH   := M_PROC_END_DT - M_PROC_START_DT + 1;

            ELSIF C_LEAVE_REC.A_START_DT BETWEEN M_PROC_START_DT AND M_PROC_END_DT THEN
               IF C_LEAVE_REC.A_END_DT > M_PROC_END_DT THEN -- If leave doesn't fall within this Proc. Month
                  M_NO_OF_DAYS_LV_DURING_CPMTH   :=
                                                  ( M_PROC_END_DT  - C_LEAVE_REC.A_START_DT + 1 ) ;
               ELSE
                  M_NO_OF_DAYS_LV_DURING_CPMTH   := NVL(M_NO_OF_DAYS_LV_DURING_CPMTH, 0) +
                                                    M_NO_OF_DAYS_LEAVE ;
               END IF ;

            ELSIF C_LEAVE_REC.A_END_DT BETWEEN M_PROC_START_DT AND M_PROC_END_DT THEN
              M_NO_OF_DAYS_LV_DURING_CPMTH    :=    C_LEAVE_REC.A_END_DT
                                              - M_PROC_START_DT
                                              + 1 ;
            END IF ;
            M_NO_OF_DAYS_LWP_DURING_CPMTH  := NVL( M_NO_OF_DAYS_LWP_DURING_CPMTH ,0) +
                                              NVL(M_NO_OF_DAYS_LV_DURING_CPMTH,0);
            ELSE  -- MEA issues, since salary for the first to leave start paid alrealy

            IF C_LEAVE_REC.A_START_DT >= M_PROC_START_DT AND
               C_LEAVE_REC.A_END_DT   <= M_PROC_END_DT   THEN
                M_NO_OF_DAYS_LV_DURING_CPMTH   :=    C_LEAVE_REC.A_END_DT
                                                     - C_LEAVE_REC.A_START_DT
                                                     + 1 ;
            ELSIF ((C_LEAVE_REC.A_START_DT <= M_PROC_START_DT) AND
                   (C_LEAVE_REC.A_END_DT   >= M_PROC_END_DT)) THEN  -- For the Whole month
                M_NO_OF_DAYS_LV_DURING_CPMTH   := M_PROC_END_DT - M_PROC_START_DT + 1;

            ELSIF C_LEAVE_REC.A_START_DT BETWEEN M_PROC_START_DT AND M_PROC_END_DT THEN

               IF C_LEAVE_REC.A_END_DT > M_PROC_END_DT THEN -- If leave doesn't fall within this Proc. Month
                  M_NO_OF_DAYS_LV_DURING_CPMTH   :=
                                                  ( M_PROC_END_DT  - C_LEAVE_REC.A_START_DT + 1 ) ;
               ELSE
                  M_NO_OF_DAYS_LV_DURING_CPMTH   := NVL(M_NO_OF_DAYS_LV_DURING_CPMTH, 0) +
                                                    M_NO_OF_DAYS_LEAVE ;
               END IF ;

            ELSIF C_LEAVE_REC.A_END_DT BETWEEN M_PROC_START_DT AND M_PROC_END_DT THEN
              M_NO_OF_DAYS_LV_DURING_CPMTH    :=    C_LEAVE_REC.A_END_DT
                                              - M_PROC_START_DT
                                              + 1 ;
            END IF ;
            M_NO_OF_DAYS_LWP_DURING_CPMTH  := NVL( M_NO_OF_DAYS_LWP_DURING_CPMTH ,0) +
                                              NVL(M_NO_OF_DAYS_LV_DURING_CPMTH,0);
       END IF;
       END LOOP ;
      --Total number of days abscent during the period..
      P_NO_OF_DAYS_OR_HRS_PRESENT := NVL(P_NO_OF_DAYS_OR_HRS_PRESENT,0) +
                                     NVL(M_NO_OF_DAYS_LWP_DURING_CPMTH , 0);

      --Total number of days present during the period...
      M_NO_DAYS_PRSNT := NVL((M_NO_OF_DAY_BET_PERIOD - P_NO_OF_DAYS_OR_HRS_PRESENT), 0);

      END IF;

    --RETURN M_NO_DAYS_PRSNT;

      OPEN EMP_OT_HRS(I.Q_1_DP_EMP_CODE1,M_PROC_START_DT,M_PROC_END_DT,M_PRVOFF_DT,M_CUTOFF_DT);  -- BAYOUNI-1441293 changed by partha
      FETCH EMP_OT_HRS INTO M_OT_HRS;
      CLOSE EMP_OT_HRS;



-- ADDED BY ASHIK FOR THE ISSUE NPI-658844 ON 29/JAN/2012
      IF M_OT_MIN_REP = 'Y' THEN
             M_OT_HRS_MIN := ROUND(FLOOR(M_OT_HRS) + (MOD(M_OT_HRS,FLOOR(M_OT_HRS))*60/100),2);
             --RETURN NVL(M_OT_HRS_MIN,0);
      ELSE
-- ADDED BY ASHIK FOR THE ISSUE NPI-658844 ON 29/JAN/2012
            --RETURN NVL(M_OT_HRS,0);
          M_OT_HRS := NVL(M_OT_HRS,0);
      END IF;

      CNT := 1;
     FOR J IN ALLW_EARN(I.DEPT_DIVN_CODE,I.Q_1_DEPT_CODE)
     LOOP
      dummy('TAMIL  INSIDE LOOP ALLW_EARN P_FM_EMP-'||P_FM_EMP);
      EXIT WHEN CNT > 5 ;
       IF CNT = 1 THEN
         M_ALLW_EARN_1 := J.ALLW_CODE;
       ELSIF CNT = 2 THEN
         M_ALLW_EARN_2 := J.ALLW_CODE;
       ELSIF CNT = 3 THEN
         M_ALLW_EARN_3 := J.ALLW_CODE;
       ELSIF CNT = 4 THEN
         M_ALLW_EARN_4 := J.ALLW_CODE;
       ELSIF CNT = 5 THEN
         M_ALLW_EARN_5 := J.ALLW_CODE;
       END IF;
       CNT := CNT + 1 ;

      END LOOP;
     CNT1 := 1;
     FOR K IN ALLW_DED(I.DEPT_DIVN_CODE,I.Q_1_DEPT_CODE)
     LOOP
     DUMMY('TAMIL  INSIDE LOOP ALLW_DED P_FM_EMP-'||P_FM_EMP);

      EXIT WHEN CNT1 > 5;
        IF CNT1 = 1 THEN
           M_ALLW_DED_1 := K.ALLW_CODE;
        ELSIF CNT1 = 2 THEN
           M_ALLW_DED_2 := K.ALLW_CODE;
        ELSIF CNT1 = 3 THEN
           M_ALLW_DED_3 := K.ALLW_CODE;
        ELSIF CNT1 = 4 THEN
           M_ALLW_DED_4 := K.ALLW_CODE;
        ELSIF CNT1 = 5 THEN
           M_ALLW_DED_5 := K.ALLW_CODE;
        END IF;
        CNT1 := CNT1 + 1;

      /*SRW.REFERENCE(:Q_1_DP_EMP_CODE1);
    SRW.REFERENCE(:CP_PR_EARN_1);
    SRW.REFERENCE(:CP_PR_EARN_2);
    SRW.REFERENCE(:CP_PR_EARN_3);
    SRW.REFERENCE(:CP_PR_EARN_4);
    SRW.REFERENCE(:CP_PR_EARN_5);
    SRW.REFERENCE(:CP_PR_DED_1);
    SRW.REFERENCE(:CP_PR_DED_2);
    SRW.REFERENCE(:CP_PR_DED_3);
    SRW.REFERENCE(:CP_PR_DED_4);
    SRW.REFERENCE(:CP_PR_DED_5);
    SRW.REFERENCE(:CP_ORG_BAS);
    SRW.REFERENCE(:CP_ACT_BAS);
    SRW.REFERENCE(:CP_OT1);
    SRW.REFERENCE(:CP_HRA);  */
      END LOOP;
   OPEN  EMP_NAME (I.Q_1_DP_EMP_CODE1);
     FETCH EMP_NAME INTO M_NAME;
     CLOSE EMP_NAME;

  --ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012 STARTS
   IF C_DATE%ISOPEN THEN
        CLOSE C_DATE;
   END IF;

   OPEN C_DATE;
   FETCH C_DATE INTO M_DATE;
   CLOSE C_DATE;

  /* IF C_CURR%ISOPEN THEN
        CLOSE C_CURR;
   END IF;

   OPEN C_CURR;
   FETCH C_CURR INTO M_CURR_CODE;
   CLOSE C_CURR;  */

   M_CURR_CODE:=F_GET_BASE_CURR(P_COMP_CODE);

  --ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012 ENDS
     OPEN EMP_ORG_BASIC(I.Q_1_DP_EMP_CODE1);
     FETCH EMP_ORG_BASIC INTO M_EMP_CURR_CODE, M_ORG_BASIC,M_ORG_BASIC_FC_AMT;

   IF M_ORG_BASIC > 0 THEN
          IF M_EMP_CURR_CODE <> P_CURRENCY THEN
           F_DCONV_RATE_FM_CURR_TO_CURR(M_EMP_CURR_CODE,M_ORG_BASIC,'S',M_DATE,P_CURRENCY,M_ORG_BASIC,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012 -- Commented by Sudhakar on 09-JUL-2012
          ELSE
               M_ORG_BASIC := M_ORG_BASIC_FC_AMT;
        END IF;

         M_ORG_BAS := M_ORG_BASIC;

   END IF;
     CLOSE EMP_ORG_BASIC;

     OPEN EMP_ACT_BASIC(I.Q_1_DP_EMP_CODE1);
     FETCH EMP_ACT_BASIC INTO M_ACT_BASIC,M_ACT_BASIC_CURR_CODE,M_ACT_BASIC_FC_AMT;

   IF M_ACT_BASIC >0 THEN
           IF M_ACT_BASIC_CURR_CODE <> P_CURRENCY THEN
           f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_ACT_BASIC,'S',M_DATE,P_CURRENCY,M_ACT_BASIC,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
          ELSE
                 M_ACT_BASIC := M_ACT_BASIC_FC_AMT;
       END IF;
              M_ACT_BAS := M_ACT_BASIC;
     END IF;

   CLOSE EMP_ACT_BASIC;

     OPEN  EMP_HRA(I.Q_1_DP_EMP_CODE1) ;
     FETCH EMP_HRA INTO M_PR_HRA,M_PR_HRA_CURR_CODE,M_PR_HRA_FC_AMT;

   IF M_PR_HRA > 0 THEN
          IF M_PR_HRA_CURR_CODE <> P_CURRENCY THEN
           f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_HRA,'S',M_DATE,P_CURRENCY,M_PR_HRA,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
          ELSE
               M_PR_HRA := M_PR_HRA_FC_AMT;
          END IF;
           M_HRA :=  M_PR_HRA;
     END IF;
     CLOSE EMP_HRA;

     OPEN  EMP_HRAD(I.Q_1_DP_EMP_CODE1) ;
     FETCH EMP_HRAD INTO M_PR_HRAD,M_PR_HRAD_CURR_CODE,M_PR_HRAD_FC_AMT;
     IF M_PR_HRAD > 0 THEN
          IF M_PR_HRAD_CURR_CODE <> P_CURRENCY THEN
           f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_HRAD,'S',M_DATE,P_CURRENCY,M_PR_HRAD,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
          ELSE
               M_PR_HRAD := M_PR_HRAD_FC_AMT;
          END IF;
         M_HRAD :=  M_PR_HRAD;
   END IF;
     CLOSE EMP_HRAD;

     OPEN  EMP_DBASIC(I.Q_1_DP_EMP_CODE1) ;
     FETCH EMP_DBASIC INTO M_PR_DBASIC,M_PR_DBASIC_CURR_CODE,M_PR_DBASIC_FC_AMT;
    --srw.message(111,P_COMP_CODE||'  '||:Q_1_DP_EMP_CODE1||'  '||:cp_proc_mth||'  '||M_PR_DBASIC);
     --IF M_PR_DBASIC >= 0 THEN
          IF M_PR_DBASIC_CURR_CODE <> P_CURRENCY THEN
          F_DCONV_RATE_FM_CURR_TO_CURR(M_CURR_CODE,M_PR_DBASIC,'S',M_DATE,P_CURRENCY,M_PR_DBASIC,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
          ELSE
                M_PR_DBASIC := M_PR_DBASIC_FC_AMT;
                --srw.message(112,M_PR_DBASIC_FC_AMT);
          END IF;
          M_DBASIC :=  M_PR_DBASIC;
          --srw.message(113,M_PR_DBASIC);
     --END IF;
     CLOSE EMP_DBASIC;


  -- ADDED BY YASHARTH ON 19/07/2006 FOR ISSUE ADVIND-118179 START
     OPEN EMP_OT1(I.Q_1_DP_EMP_CODE1);
     FETCH EMP_OT1 INTO M_PR_OT1,M_PR_OT1_CURR_CODE,M_PR_OT1_FC_AMT;
    IF M_PR_OT1 > 0 THEN
        IF M_PR_OT1_CURR_CODE <> P_CURRENCY THEN
         f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_OT1,'S',M_DATE,P_CURRENCY,M_PR_OT1,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
        ELSE
             M_PR_OT1 := M_PR_OT1_FC_AMT;
        END IF;
           M_OT1 := M_PR_OT1;
  END IF;
    CLOSE EMP_OT1;
    --END

  OPEN  EMP_EARN_1(I.Q_1_DP_EMP_CODE1,M_PR_EARN_1) ;
    FETCH EMP_EARN_1 INTO M_PR_EARN_1,M_PR_EARN1_CURR_CODE,M_PR_EARN1_FC_AMT;
     IF M_PR_EARN_1 > 0 THEN
          IF M_PR_EARN1_CURR_CODE <> P_CURRENCY THEN
          f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_EARN_1,'S',M_DATE,P_CURRENCY,M_PR_EARN_1,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
          ELSE
                M_PR_EARN_1 := M_PR_EARN1_FC_AMT;
                M_EARN_1 := M_PR_EARN_1;
          END IF;
   ELSE
          M_EARN_1 := '' ;
  END IF;
    CLOSE EMP_EARN_1;

    OPEN EMP_EARN_2(I.Q_1_DP_EMP_CODE1,M_PR_EARN_2);
    FETCH EMP_EARN_2 INTO M_PR_EARN_2,M_PR_EARN2_CURR_CODE,M_PR_EARN2_FC_AMT;
    IF M_PR_EARN_2 > 0 THEN
          IF M_PR_EARN2_CURR_CODE <> P_CURRENCY THEN
          f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_EARN_2,'S',M_DATE,P_CURRENCY,M_PR_EARN_2,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
      ELSE
                M_PR_EARN_2 := M_PR_EARN2_FC_AMT;
                M_EARN_2 := M_PR_EARN_2;
          END IF;
   ELSE
          M_EARN_2 := '' ;
  END IF;
    CLOSE EMP_EARN_2;

    OPEN EMP_EARN_3(I.Q_1_DP_EMP_CODE1,M_PR_EARN_3);
    FETCH EMP_EARN_3 INTO M_PR_EARN_3,M_PR_EARN3_CURR_CODE,M_PR_EARN3_FC_AMT;
    IF M_PR_EARN_3 > 0 THEN
          IF M_PR_EARN3_CURR_CODE <> P_CURRENCY THEN
          f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_EARN_3,'S',M_DATE,P_CURRENCY,M_PR_EARN_3,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
     ELSE
                M_PR_EARN_3 := M_PR_EARN3_FC_AMT;
                M_EARN_3 := M_PR_EARN_3;
          END IF;
   ELSE
          M_EARN_3 := '' ;
  END IF;
    CLOSE EMP_EARN_3;


    OPEN EMP_EARN_4(I.Q_1_DP_EMP_CODE1,M_PR_EARN_4);
    FETCH EMP_EARN_4 INTO M_PR_EARN_4,M_PR_EARN4_CURR_CODE,M_PR_EARN4_FC_AMT;
    IF M_PR_EARN_4 > 0 THEN
          IF M_PR_EARN4_CURR_CODE <> P_CURRENCY THEN
          f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_EARN_4,'S',M_DATE,P_CURRENCY,M_PR_EARN_4,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
        ELSE
                M_PR_EARN_4 := M_PR_EARN4_FC_AMT;
                M_EARN_4 := M_PR_EARN_4;
          END IF;
   ELSE
          M_EARN_4 := '' ;
  END IF;
    CLOSE EMP_EARN_4;

    OPEN EMP_EARN_5(I.Q_1_DP_EMP_CODE1,M_PR_EARN_5);
    FETCH EMP_EARN_5 INTO M_PR_EARN_5,M_PR_EARN5_CURR_CODE,M_PR_EARN5_FC_AMT;
    IF M_PR_EARN_5 > 0 THEN
          IF M_PR_EARN5_CURR_CODE <> P_CURRENCY THEN
          f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_EARN_5,'S',M_DATE,P_CURRENCY,M_PR_EARN_5,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
     ELSE
                M_PR_EARN_5 := M_PR_EARN5_FC_AMT;
                M_EARN_5 := M_PR_EARN_5;
          END IF;
   ELSE
          M_EARN_5 := '' ;
  END IF;
    CLOSE EMP_EARN_5;

    OPEN EMP_DED_1(I.Q_1_DP_EMP_CODE1,M_PR_DED_1);
    FETCH EMP_DED_1 INTO M_PR_DED_1,M_PR_DED1_CURR_CODE,M_PR_DED1_FC_AMT;
 --SRW.MESSAGE(100,M_PR_DED_1||' '||M_PR_DED1_CURR_CODE||'  '||M_PR_DED1_FC_AMT);
     IF M_PR_DED_1 > 0 THEN
          IF M_PR_DED1_CURR_CODE <> P_CURRENCY THEN
          f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_DED_1,'S',M_DATE,P_CURRENCY,M_PR_DED_1,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
          ELSE
                M_PR_DED_1 := M_PR_DED1_FC_AMT;
                --SRW.MESSAGE(101,M_PR_DED_1||'  '||M_PR_DED1_FC_AMT);
                M_DED_1 := M_PR_DED_1;
                --SRW.MESSAGE(102,M_DED_1||' '||M_PR_DED_1);
          END IF;
          ELSE
              --srw.message(103,'else');
--          M_DED_1 := '' ; commanded for testing
          --srw.message(104,M_DED_1);
          null;
   END IF;
    CLOSE EMP_DED_1;
--srw.message(110,'M_DED_1 = ' || M_DED_1);
    OPEN EMP_DED_2(I.Q_1_DP_EMP_CODE1,M_PR_DED_2);
    FETCH EMP_DED_2 INTO M_PR_DED_2,M_PR_DED2_CURR_CODE,M_PR_DED2_FC_AMT;
    IF M_PR_DED_2 > 0 THEN
          IF M_PR_DED2_CURR_CODE <> P_CURRENCY THEN
          f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_DED_2,'S',M_DATE,P_CURRENCY,M_PR_DED_2,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
      ELSE
                M_PR_DED_2 := M_PR_DED2_FC_AMT;
                M_DED_2 := M_PR_DED_2;
           END IF;
   ELSE
          --M_DED_2 := '' ;commanded for testing
          null;
   END IF;
    CLOSE EMP_DED_2;

    OPEN EMP_DED_3(I.Q_1_DP_EMP_CODE1,M_PR_DED_3);
    FETCH EMP_DED_3 INTO M_PR_DED_3,M_PR_DED3_CURR_CODE,M_PR_DED3_FC_AMT;
    IF M_PR_DED_3 > 0 THEN
          IF M_PR_DED3_CURR_CODE <> P_CURRENCY THEN
          f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_DED_3,'S',M_DATE,P_CURRENCY,M_PR_DED_3,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
     ELSE
                M_PR_DED_3 := M_PR_DED3_FC_AMT;
                M_DED_3 := M_PR_DED_3;
          END IF;
   ELSE
          --M_DED_3 := '' ;commanded for testing
          null;
   END IF;
    CLOSE EMP_DED_3;

    OPEN EMP_DED_4(I.Q_1_DP_EMP_CODE1,M_PR_DED_4);
    FETCH EMP_DED_4 INTO M_PR_DED_4,M_PR_DED4_CURR_CODE,M_PR_DED4_FC_AMT;
    IF M_PR_DED_4 > 0 THEN
          IF M_PR_DED4_CURR_CODE <> P_CURRENCY THEN
          f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_DED_4,'S',M_DATE,P_CURRENCY,M_PR_DED_4,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
     ELSE
                M_PR_DED_4 := M_PR_DED4_FC_AMT;
                M_DED_4 := M_PR_DED_4;
          END IF;
   ELSE
          --M_DED_4 := '' ; commanded for testing
          null;
   END IF;
    CLOSE EMP_DED_4;

    OPEN EMP_DED_5(I.Q_1_DP_EMP_CODE1,M_PR_DED_5);
    FETCH EMP_DED_5 INTO M_PR_DED_5,M_PR_DED5_CURR_CODE,M_PR_DED5_FC_AMT;
    IF M_PR_DED_5 > 0 THEN
          IF M_PR_DED5_CURR_CODE <> P_CURRENCY THEN
          f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_DED_5,'S',M_DATE,P_CURRENCY,M_PR_DED_5,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
     ELSE
                M_PR_DED_5 := M_PR_DED5_FC_AMT;
                M_DED_5 := M_PR_DED_5;
          END IF;
   ELSE
          --M_DED_5 := '' ; commanded for testing
          null;
   END IF;
    CLOSE EMP_DED_5;

    OPEN EMP_EARN_OTHERS(I.Q_1_DP_EMP_CODE1);
    FETCH EMP_EARN_OTHERS INTO M_PR_EARN_OTH,M_PR_EARN_OTH_CURR_CODE,M_PR_EARN_OTH_FC_AMT;
    IF M_PR_EARN_OTH > 0 THEN
        IF M_PR_EARN_OTH_CURR_CODE <> P_CURRENCY THEN
         f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_EARN_OTH,'S',M_DATE,P_CURRENCY,M_PR_EARN_OTH,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
        ELSE
             M_PR_EARN_OTH := M_PR_EARN_OTH_FC_AMT;
             M_EARN_OTH := M_PR_EARN_OTH;
        END IF;
     ELSE
         M_EARN_OTH := '' ;
    END IF;
    CLOSE EMP_EARN_OTHERS;

    OPEN EMP_DED_OTHERS(I.Q_1_DP_EMP_CODE1);
    FETCH EMP_DED_OTHERS INTO M_PR_DED_OTH,M_PR_DED_OTH_CURR_CODE,M_PR_DED_OTH_FC_AMT;
     IF M_PR_DED_OTH > 0 THEN
          IF M_PR_DED_OTH_CURR_CODE <> P_CURRENCY THEN
          f_dconv_rate_fm_curr_to_curr(M_CURR_CODE,M_PR_DED_OTH,'S',M_DATE,P_CURRENCY,M_PR_DED_OTH,'E');--ADDED BY SUDHAKAR FOR BINDASMAL ON 31-MAY-2012
          ELSE
                M_PR_DED_OTH := M_PR_DED_OTH_FC_AMT;
                M_DED_OTH := M_PR_DED_OTH;
          END IF;
   ELSE
          --M_DED_OTH := '' ;commanded for testing
          null;
    END IF;
    CLOSE EMP_DED_OTHERS;


    M_TOT_GROSS_EARN := NVL(M_ACT_BAS,0) + NVL(M_HRA,0) +
    --NVL(:CF_OT_HRS,0) +
    NVL(M_EARN_1,0) +
    NVL(M_OT1,0)+  -- ADDED BY YASHARTH ON 19/07/2006 FOR ISSUE ADVIND-118179
    NVL(M_EARN_2,0) + NVL(M_EARN_3,0) + NVL(M_EARN_4,0) +
    NVL(M_EARN_5,0) + NVL(M_EARN_OTH,0) ;



    M_TOT_GROSS_DED := NVL(M_DBASIC,0)+ NVL(M_HRAD,0)+ NVL(M_DED_1,0) + NVL(M_DED_2,0) +
    NVL(M_DED_3,0) + NVL(M_DED_4,0) + NVL(M_DED_5,0) +
    NVL(M_DED_OTH,0) ;


    M_NET_SAL := NVL(M_TOT_GROSS_EARN,0) - NVL(M_TOT_GROSS_DED,0);

    --RETURN M_NAME;
  /*EXCEPTION
     WHEN OTHERS THEN SRW.MESSAGE(111,'Exchange rate not defined between '||M_CURR_CODE||' and '||P_CURRENCY);
     RETURN M_NAME;       */
      DUMMY('TAMIL  INSIDE LOOP PW_PRE_PAYROLL_FC P_FM_EMP-'||P_FM_EMP);
      INSERT INTO PW_PRE_PAYROLL_FC (  PP_COMP_CODE,
                                       PP_REP_KEY_NO,
                                       PP_DEPT_DIVN_CODE,
                                       PP_DIVN_NAME,
                                       PP_DEPT_CODE,
                                       PP_DEPT_NAME,
                                       PP_EMP_CODE,
                                       PP_ORG_BASIC_FC_AMOUNT,
                                       PP_JOIN_DT,
                                       PP_ANAL_CODE_1,
                                       PP_NO_DAYS_PRSNT,
                                       PP_ORG_BAS,
                                       PP_ACT_BAS,
                                       PP_OT_HRS,
                                       PP_HRA,
                                       PP_EARN_1,
                                       PP_EARN_2,
                                       PP_EARN_3,
                                       PP_EARN_4,
                                       PP_EARN_5,
                                       PP_EARN_OTH,
                                       PP_TOT_GROSS_EARN,
                                       PP_NET_SAL,
                                       PP_DBASIC,
                                       PP_OT1,
                                       PP_HRAD,
                                       PP_DED_1,
                                       PP_DED_2,
                                       PP_DED_3,
                                       PP_DED_4,
                                       PP_DED_5,
                                       PP_DED_OTH,
                                       PP_TOT_GROSS_DED )
                               VALUES ( P_COMP_CODE,
                                       P_REP_KEY_NO,
                                       I.DEPT_DIVN_CODE,
                                       I.Q_1_DIVN_NAME,
                                       I.Q_1_DEPT_CODE,
                                       I.Q_1_DEPT_NAME,
                                       I.Q_1_DP_EMP_CODE1,
                                       I.Q_1_DP_ORG_BASIC_FC_AMOUNT,
                                       I.EMP_JOIN_DT,
                                       I.EMP_ANAL_CODE_1,
                                       M_NO_DAYS_PRSNT ,
                                       M_ORG_BAS,
                                       M_ACT_BAS,
                                       M_OT_HRS ,
                                       M_HRA    ,
                                       M_EARN_1 ,
                                       M_EARN_2 ,
                                       M_EARN_3 ,
                                       M_EARN_4 ,
                                       M_EARN_5 ,
                                       M_EARN_OTH,
                                       M_TOT_GROSS_EARN,
                                       M_NET_SAL      ,
                                       M_DBASIC       ,
                                       M_OT1          ,
                                       M_HRAD         ,
                                       M_DED_1        ,
                                       M_DED_2        ,
                                       M_DED_3        ,
                                       M_DED_4        ,
                                       M_DED_5        ,
                                       M_DED_OTH      ,
                                       M_TOT_GROSS_DED);

  -- END LOOP;
   --END LOOP;
   END LOOP;
DELETE  FROM PW_PRE_PAYROLL_FC
WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM PW_PRE_PAYROLL_FC
GROUP BY PP_COMP_CODE,PP_REP_KEY_NO,PP_DEPT_DIVN_CODE,PP_DIVN_NAME,PP_DEPT_CODE,PP_DEPT_NAME,PP_EMP_CODE,PP_ORG_BASIC_FC_AMOUNT,
         PP_JOIN_DT,PP_ANAL_CODE_1,PP_NO_DAYS_PRSNT,PP_ORG_BAS,PP_ACT_BAS,PP_OT_HRS,PP_HRA,PP_EARN_1,PP_EARN_2,PP_EARN_3,PP_EARN_4,
         PP_EARN_5,PP_EARN_OTH,PP_TOT_GROSS_EARN,PP_NET_SAL,PP_DBASIC,PP_OT1,PP_HRAD,PP_DED_1,PP_DED_2,PP_DED_3,PP_DED_4,PP_DED_5,
         PP_DED_OTH,PP_TOT_GROSS_DED,PP_CLIENT_ID,PP_INST_CODE,PP_SECURITY_CODE);

END P_PRE_PAYROLL_FC;



PROCEDURE P_PRE_PAYROLL ( P_COMP_CODE     IN VARCHAR2,
                          P_REP_KEY_NO    IN NUMBER,
                          P_FM_EMP        IN VARCHAR2,
                          P_TO_EMP        IN VARCHAR2,
                          P_FM_DIVN       IN VARCHAR2,
                          P_TO_DIVN       IN VARCHAR2,
                          P_FM_DEPT       IN VARCHAR2,
                          P_TO_DEPT       IN VARCHAR2,
                          P_FM_LOCN       IN VARCHAR2,
                          P_TO_LOCN       IN VARCHAR2,
                          P_FM_CC         IN VARCHAR2,
                          P_TO_CC         IN VARCHAR2,
                          P_FM_CONT_TYPE  IN VARCHAR2,
                          P_TO_CONT_TYPE  IN VARCHAR2,
                          P_FM_COUNTRY    IN VARCHAR2,
                          P_TO_COUNTRY    IN VARCHAR2,
                          P_FM_CURR       IN VARCHAR2,
                          P_TO_CURR       IN VARCHAR2,
                          P_MODE_TYPE     IN VARCHAR2,
                          P_PAY_TYPE      IN VARCHAR2,
                          P_SAL_YN        IN VARCHAR2,
                          P_PYBSDYFLAG_EA IN VARCHAR2 ) IS

MM_LANG_CODE VARCHAR2(240);
  M_CPMTH              VARCHAR2(30);
CURSOR C_FINAL_PAYROLL IS
       SELECT DISTINCT DEPT_DIVN_CODE , DECODE(MM_LANG_CODE,'ENG',DIVN_NAME, 'LANG_01',DIVN_NAME_LANG_01, 'LANG_02', DIVN_NAME_LANG_02, 'LANG_03', DIVN_NAME_LANG_03, 'LANG_04',
              DIVN_NAME_LANG_04, 'LANG_05', DIVN_NAME_LANG_05, 'LANG_06',DIVN_NAME_LANG_06, 'LANG_07',DIVN_NAME_LANG_07, 'LANG_08',DIVN_NAME_LANG_08,
              'LANG_09',DIVN_NAME_LANG_09, 'LANG_10', DIVN_NAME_LANG_10)  Q_1_DIVN_NAME,
               DEPT_CODE Q_1_DEPT_CODE,DEPT_CODE C_DEPT_CODE,
               DECODE(MM_LANG_CODE,'ENG',DEPT_NAME, 'LANG_01',DEPT_NAME_LANG_01, 'LANG_02', DEPT_NAME_LANG_02, 'LANG_03', DEPT_NAME_LANG_03, 'LANG_04',
              DEPT_NAME_LANG_04, 'LANG_05', DEPT_NAME_LANG_05, 'LANG_06',DEPT_NAME_LANG_06, 'LANG_07',DEPT_NAME_LANG_07, 'LANG_08',DEPT_NAME_LANG_08,
              'LANG_09',DEPT_NAME_LANG_09, 'LANG_10', DEPT_NAME_LANG_10)  Q_1_DEPT_NAME,
               DECODE(MM_LANG_CODE,'ENG',DEPT_NAME, 'LANG_01',DEPT_NAME_LANG_01, 'LANG_02', DEPT_NAME_LANG_02, 'LANG_03', DEPT_NAME_LANG_03, 'LANG_04',
              DEPT_NAME_LANG_04, 'LANG_05', DEPT_NAME_LANG_05, 'LANG_06',DEPT_NAME_LANG_06, 'LANG_07',DEPT_NAME_LANG_07, 'LANG_08',DEPT_NAME_LANG_08,
              'LANG_09',DEPT_NAME_LANG_09, 'LANG_10', DEPT_NAME_LANG_10)  C_DEPT_NAME,
               DP_EMP_CODE Q_1_DP_EMP_CODE1,DP_ORG_BASIC_FC_AMOUNT Q_1_DP_ORG_BASIC_FC_AMOUNT,
               DP_CURR_CODE Q_1_DP_CURR_CODE,EMP_JOIN_DT /* ADDED BY YASHARTH ON 15-AUG-2006 FOR ISSUE ALFOZAN-121913 */,
             EMP_ANAL_CODE_1 ,  /*ADDED BY BINSO ON 27/06/07 FOR ISSUE    */
             Decode(EMPY_PAY_MODE,'B','Bank','C','Cash','Q','Cheque') EMPY_PAY_MODE  -- -- ADDED BY PARTHA     BHG_INT-1443833
      FROM      FM_DEPARTMENT, FM_DIVISION,PS_DUMMY_PROC , PM_EMP_PAY,PM_EMP_KEY  --, PT_ATTENDANCE_DETAIL , PT_ATTENDANCE_HEAD -- COMMENTED BY YASHARTH ON 17/7/2006 FOR ISSUE SSAPL-117745
      WHERE  DEPT_COMP_CODE = P_COMP_CODE
      AND       DEPT_CODE      = DP_DEPT_CODE
      AND       DEPT_DIVN_CODE =  DP_DIVN_CODE
      AND      DP_COMP_CODE   =  DEPT_COMP_CODE
      AND       DP_EMP_CODE   BETWEEN P_FM_EMP  AND P_TO_EMP
      AND       DP_DIVN_CODE  BETWEEN P_FM_DIVN AND P_TO_DIVN
      AND       DP_DEPT_CODE  BETWEEN P_FM_DEPT AND P_TO_DEPT
      AND       DP_LOCN_CODE  BETWEEN P_FM_LOCN AND P_TO_LOCN
      AND      DP_CC_CODE    BETWEEN P_FM_CC   AND P_TO_CC
      AND       DP_CONT_TYPE_CODE   BETWEEN P_FM_CONT_TYPE AND P_TO_CONT_TYPE
      AND       NVL(DP_CNTRY_CODE,P_FM_COUNTRY)  BETWEEN  P_FM_COUNTRY  AND P_TO_COUNTRY
      AND    EMPY_COMP_CODE = DEPT_COMP_CODE
      AND    EMPY_CODE             = DP_EMP_CODE
      AND    EMPY_PAY_TYPE    = DECODE(P_PAY_TYPE, 'H' , 'H' ,'D' , 'D','M' , 'M','A' , EMPY_PAY_TYPE)
      AND    EMPY_PAY_MODE    =   DECODE(NVL(P_MODE_TYPE,'A'), 'B', 'B', 'Q', 'Q', 'C', 'C', 'A', EMPY_PAY_MODE)
      AND    DIVN_COMP_CODE = P_COMP_CODE
      AND    DIVN_CODE = DEPT_DIVN_CODE
      AND    EMPY_CODE  = EMP_CODE
      AND       EMP_COMP_CODE = P_COMP_CODE
      AND    NVL(EMP_PROC_FLAG,'Z') = 'Y'
      AND       DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
      AND       NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN  P_FM_CURR  AND  P_TO_CURR
    --  AND         DP_CURR_CODE =  f_get_base_curr(P_COMP_CODE) -- ADDED BY PARTHA
      AND    ( DECODE(NVL(EMP_LVSAL_PROC_YN,'N'),'Y','Y','N','N')  <> P_SAL_YN
      OR     NVL(EMP_LVSAL_PROC_YN,'P')  = P_SAL_YN)
      ORDER BY DEPT_DIVN_CODE, DEPT_CODE,DP_EMP_CODE;

CURSOR B3 IS
        SELECT TO_DATE(PARA_VALUE, 'DD/MM/YYYY')--'DD/MM/YYYY')
        FROM   PM_COMP_PARAMETER
        WHERE  PARA_CODE = 'CPFMDT'
        AND    PARA_COMP_CODE = P_COMP_CODE;

CURSOR B4 IS
        SELECT TO_DATE(PARA_VALUE, 'DD/MM/YYYY')--'DD/MM/YYYY')
        FROM   PM_COMP_PARAMETER
        WHERE  PARA_CODE = 'CPTODT'
        AND    PARA_COMP_CODE = P_COMP_CODE;

CURSOR B7 IS
        SELECT NVL(PARA_VALUE,'N')
        FROM   PM_COMP_PARAMETER
        WHERE  PARA_CODE = 'OT_MIN_REP'
        AND    PARA_COMP_CODE = P_COMP_CODE;

CURSOR B6 IS
        SELECT TO_DATE(PARA_VALUE, 'DD/MM/YYYY')
        FROM   PM_COMP_PARAMETER
        WHERE  PARA_CODE = 'PRCOFFDT'
        AND    PARA_COMP_CODE = P_COMP_CODE;

CURSOR B5 IS
        SELECT TO_DATE(PARA_VALUE, 'DD/MM/YYYY')
        FROM   PM_COMP_PARAMETER
        WHERE  PARA_CODE = 'CPCOFFDT'
        AND    PARA_COMP_CODE = P_COMP_CODE;



   M_NO_OF_DAYS_LEAVE                PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_DAYS_LV_DURING_CPMTH      PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_SL_LV_DAYS                    PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_DAYS_LWP_DURING_CPMTH     PW_FS.NO_OF_DAYS%TYPE;
   P_STATUS                          PW_FS.FLAG%TYPE := NULL;
   P_NO_OF_DAYS_OR_HRS_PRESENT       PW_FS.NO_OF_DAYS%TYPE; -- NO. OF DAYS ABSENT
   M_NO_OF_DAY_BET_PERIOD  PW_FS.NO_OF_DAYS%TYPE; -- TOTAL NO. OF DAYS BETWEEN EFF. DATES
   M_NO_OF_DAYS_IN_MONTH   PW_FS.NO_OF_DAYS%TYPE; -- TOTAL NO. OF DAYS IN MONTH

CURSOR C_GET_NO_OF_DAYS_PRESENT(P_EMP_CODE IN VARCHAR2,P_PROC_START_DT IN DATE,P_PROC_END_DT IN DATE ) IS
      SELECT SUM(NVL(ATND_HRS_DAYS,0))
      FROM   PT_ATTENDANCE_DETAIL , PT_ATTENDANCE_HEAD
      WHERE  ATNH_COMP_CODE       = P_COMP_CODE
      AND    ATND_ATNH_SYS_ID     = ATNH_SYS_ID
      AND    ATND_EMP_CODE        = P_EMP_CODE
      AND    ATNH_APPR_UID IS NOT NULL
      AND    ATND_DT      BETWEEN   P_PROC_START_DT AND P_PROC_END_DT ;

CURSOR C1(P_EMP_CODE IN VARCHAR2,P_PROC_START_DT IN DATE,P_PROC_END_DT IN DATE ) IS
      SELECT   NVL(LVAP_LWP_PAY_DAYS,0)
      FROM   PT_LEAVE_APPLICATION_HEAD, PT_LEAVE_SICK_PAY_CALC, PM_EMP_LEAVE , PM_LEAVE
      WHERE   LVAH_COMP_CODE                 = P_COMP_CODE
      AND   LVAH_EMP_CODE                  = P_EMP_CODE
      AND   LVAH_SYS_ID                = LVAP_LVAH_SYS_ID
      AND   LVAP_FHNL_L   = 'L'
        AND   LVAH_APPR_UID  IS NOT NULL
      AND   LVAH_CANC_UID IS NULL
      AND   EMPL_CODE                  = P_EMP_CODE
      AND   LVAH_LV_CATG_CODE          = EMPL_LV_CATG_CODE
      AND   LVAH_DT         BETWEEN P_PROC_START_DT AND P_PROC_END_DT
      AND   EMPL_LV_CATG_CODE          = LV_CATG_CODE
      AND   LV_TYPE_CODE               = '3';





CURSOR C_EMP_LV_AND_RESUMPTION_DTLS(P_EMP_CODE IN VARCHAR2,P_PROC_START_DT IN DATE,P_PROC_END_DT IN DATE ) IS
      SELECT 'W' A_LR_TYPE ,LWP_FROM_DT A_START_DT,LWP_UPTO_DT A_END_DT,
              TO_DATE('')A_RESUMPTION_DT ,LWP_DAYS A_NO_OF_DAYS_LEAVE
      FROM   PT_LWP
      WHERE  LWP_COMP_CODE = P_COMP_CODE
      AND    LWP_EMP_CODE  = P_EMP_CODE
      AND  ((LWP_FROM_DT    BETWEEN P_PROC_START_DT AND P_PROC_END_DT
             OR LWP_UPTO_DT BETWEEN P_PROC_START_DT AND P_PROC_END_DT )
             OR (P_PROC_START_DT BETWEEN LWP_FROM_DT AND LWP_UPTO_DT
                 OR P_PROC_END_DT    BETWEEN LWP_FROM_DT AND LWP_UPTO_DT))
      AND    LWP_APPR_UID  IS NOT NULL
      AND    LWP_REF_SYS_ID IS NULL --ADDED BY DEEBAK ON 29/08/2007 FOR ECAR-175836 (MUKTHAR)
      UNION
      SELECT 'L' A_LR_TYPE ,LVAH_APPR_START_DT A_START_DT ,NVL(LVAH_RESU_DT,LVAH_APPR_END_DT) A_END_DT ,
              TO_DATE('') A_RESUMPTION_DT,LVAH_APPR_DAYS A_NO_OF_DAYS_LEAVE
      FROM   PT_LEAVE_APPLICATION_HEAD  , PM_EMP_LEAVE , PM_LEAVE
      WHERE  LVAH_COMP_CODE             = P_COMP_CODE
      AND    LVAH_EMP_CODE              = P_EMP_CODE
      AND  ( LVAH_APPR_START_DT         BETWEEN P_PROC_START_DT AND P_PROC_END_DT
              OR LVAH_APPR_END_DT           BETWEEN P_PROC_START_DT AND P_PROC_END_DT
              OR P_PROC_START_DT  BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
              OR P_PROC_END_DT    BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
              OR LVAH_RESU_DT               BETWEEN P_PROC_START_DT AND P_PROC_END_DT
              OR LVAH_RESU_DT IS NULL )
      AND    (DECODE(NVL(LV_RESU_REQD_YN,'N'),'N',LVAH_APPR_END_DT,LVAH_RESU_DT)<= DECODE(NVL(LV_RESU_REQD_YN,'N'),'N',P_PROC_END_DT,LVAH_APPR_END_DT)
              OR P_PROC_START_DT  BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
              OR P_PROC_END_DT    BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
              OR LVAH_APPR_END_DT BETWEEN P_PROC_START_DT AND P_PROC_END_DT)
      AND     LVAH_EMP_CODE              = EMPL_CODE
      AND     LVAH_APPR_UID  IS NOT NULL
      AND     LVAH_LV_CATG_CODE          = EMPL_LV_CATG_CODE
      AND     EMPL_LV_CATG_CODE          = LV_CATG_CODE
      AND     (LVAH_CANC_UID IS NULL AND LVAH_CANC_DT IS NULL)
      UNION
      SELECT 'L'A_LR_TYPE ,LVAH_APPR_START_DT A_START_DT ,NVL(LVAH_RESU_DT,LVAH_APPR_END_DT) A_END_DT ,
              TO_DATE('') A_RESUMPTION_DT,LVAH_APPR_DAYS A_NO_OF_DAYS_LEAVE
      FROM   PT_LEAVE_APPLICATION_HEAD  , PM_EMP_LEAVE , PM_LEAVE,PT_LEAVE_RESU_HEAD
      WHERE  LVAH_COMP_CODE             = P_COMP_CODE
      AND    LVAH_EMP_CODE              = P_EMP_CODE
      AND  ( LVAH_APPR_START_DT         BETWEEN P_PROC_START_DT AND P_PROC_END_DT
              OR LVAH_APPR_END_DT           BETWEEN P_PROC_START_DT AND P_PROC_END_DT
              OR P_PROC_START_DT  BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
              OR P_PROC_END_DT    BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
              OR LVAH_RESU_DT               BETWEEN P_PROC_START_DT AND P_PROC_END_DT
              OR LVAH_RESU_DT IS NULL )
      AND     LVAH_RESU_DT > LVAH_APPR_END_DT
      AND     LVAH_TXN_CODE = LVRH_REF_TXN_CODE
      AND     LVAH_NO          = LVRH_REF_NO
      AND     LVAH_SYS_ID   = LVRH_REF_SYS_ID
      AND     LVRH_APPR_UID IS NOT NULL
      AND     LVAH_EMP_CODE = LVRH_EMP_CODE
      AND     LVAH_EMP_CODE              = EMPL_CODE
      AND     LVAH_APPR_UID  IS NOT NULL
      AND     LVAH_LV_CATG_CODE          = EMPL_LV_CATG_CODE
      AND     EMPL_LV_CATG_CODE          = LV_CATG_CODE
      AND     (LVAH_CANC_UID IS NULL AND LVAH_CANC_DT IS NULL);-- END


  M_NO_DAYS_PRSNT        NUMBER;

M_OT_HRS       NUMBER;

CURSOR EMP_OT_HRS(P_EMP_CODE IN VARCHAR2,P_PROC_START_DT IN DATE,P_PROC_END_DT IN DATE , P_PRVOFF_DT IN DATE,P_CUTOFF_DT IN DATE)IS
        SELECT SUM(NVL(OTD_TOTAL_OT_HRS, 0)) TOTAL_OT_HRS
      FROM   PT_OVERTIME_DETAIL        , PT_OVERTIME_HEAD
      WHERE  OTH_COMP_CODE    = P_COMP_CODE
      AND    OTD_OTH_SYS_ID   = OTH_SYS_ID
      AND    OTD_EMP_CODE     = P_EMP_CODE
      AND    (OTD_DT          BETWEEN  P_PRVOFF_DT AND P_PROC_END_DT
            OR     OTD_DT           BETWEEN P_PROC_START_DT  AND P_CUTOFF_DT)
      AND    OTH_APPR_UID     IS NOT NULL;

M_OT_HRS_MIN NUMBER(12,2);


  M_NAME      VARCHAR2(240);
  M_ORG_BASIC      NUMBER(13,3);
  M_ORG_BAS      NUMBER(13,3);
  M_ACT_BASIC      NUMBER(13,3);
  M_ACT_BAS      NUMBER(13,3);
  M_PR_HRA          NUMBER;
  M_HRA          NUMBER;
  M_PR_HRAD      NUMBER;
  M_HRAD         NUMBER;
  M_PR_DBASIC    NUMBER;
  M_DBASIC       NUMBER;
  M_PR_OT1       NUMBER;
  M_OT1          NUMBER;
  --M_PR_OT2       NUMBER;
  M_PR_EARN_1    VARCHAR2(12);
  M_EARN_1       VARCHAR2(12);
  M_PR_EARN_2    VARCHAR2(12);
  M_EARN_2       VARCHAR2(12);
  M_PR_EARN_3    VARCHAR2(12);
  M_EARN_3       VARCHAR2(12);
  M_PR_EARN_4    VARCHAR2(12);
  M_EARN_4       VARCHAR2(12);
  M_PR_EARN_5    VARCHAR2(12);
  M_EARN_5       VARCHAR2(12);
  M_PR_EARN_6    VARCHAR2(12);
  M_EARN_6       VARCHAR2(12);
  M_PR_EARN_7    VARCHAR2(12);
  M_EARN_7       VARCHAR2(12);
  M_PR_EARN_8    VARCHAR2(12);
  M_EARN_8       VARCHAR2(12);
  M_PR_EARN_9    VARCHAR2(12);
  M_EARN_9       VARCHAR2(12);
  M_PR_EARN_10    VARCHAR2(12);
  M_EARN_10       VARCHAR2(12);
  M_PR_EARN_11    VARCHAR2(12);
  M_EARN_11       VARCHAR2(12);
  M_PR_EARN_12    VARCHAR2(12);
  M_EARN_12       VARCHAR2(12);
  M_PR_EARN_13    VARCHAR2(12);
  M_EARN_13       VARCHAR2(12);
  M_PR_EARN_14    VARCHAR2(12);
  M_EARN_14       VARCHAR2(12);
  M_PR_EARN_15    VARCHAR2(12);
  M_EARN_15       VARCHAR2(12);
  M_PR_DED_1     VARCHAR2(12);
  M_DED_1        VARCHAR2(12);
  M_PR_DED_2     VARCHAR2(12);
  M_DED_2        VARCHAR2(12);
  M_PR_DED_3     VARCHAR2(12);
  M_DED_3        VARCHAR2(12);
  M_PR_DED_4     VARCHAR2(12);
  M_DED_4        VARCHAR2(12);
  M_PR_DED_5     VARCHAR2(12);
  M_DED_5        VARCHAR2(12);
  M_PR_DED_6     VARCHAR2(12);
  M_DED_6        VARCHAR2(12);
  M_PR_DED_7     VARCHAR2(12);
  M_DED_7        VARCHAR2(12);
  M_PR_DED_8     VARCHAR2(12);
  M_DED_8        VARCHAR2(12);
  M_PR_DED_9     VARCHAR2(12);
  M_DED_9        VARCHAR2(12);
  M_PR_DED_10     VARCHAR2(12);
  M_DED_10        VARCHAR2(12);
  M_PR_DED_11     VARCHAR2(12);
  M_DED_11        VARCHAR2(12);
  M_PR_DED_12     VARCHAR2(12);
  M_DED_12        VARCHAR2(12);
  M_PR_DED_13     VARCHAR2(12);
  M_DED_13        VARCHAR2(12);
  M_PR_DED_14     VARCHAR2(12);
  M_DED_14        VARCHAR2(12);
  M_PR_DED_15     VARCHAR2(12);
  M_DED_15        VARCHAR2(12);
  M_PR_EARN_OTH  NUMBER;
  M_EARN_OTH     NUMBER;
  M_PR_DED_OTH   NUMBER;
  M_DED_OTH      NUMBER;
  M_TOT_GROSS_EARN NUMBER;
  M_TOT_GROSS_DED  NUMBER;
  M_NET_SAL        NUMBER;
  M_BP_VALUE     VARCHAR2(100);

  M_PR_EARN_1_CODE VARCHAR2(12);
  M_PR_EARN_2_CODE VARCHAR2(12);
  M_PR_EARN_3_CODE VARCHAR2(12);
  M_PR_EARN_4_CODE VARCHAR2(12);
  M_PR_EARN_5_CODE VARCHAR2(12);
  M_PR_EARN_6_CODE VARCHAR2(12);
  M_PR_EARN_7_CODE VARCHAR2(12);
  M_PR_EARN_8_CODE VARCHAR2(12);
  M_PR_EARN_9_CODE VARCHAR2(12);
  M_PR_EARN_10_CODE VARCHAR2(12);
  M_PR_EARN_11_CODE VARCHAR2(12);
  M_PR_EARN_12_CODE VARCHAR2(12);
  M_PR_EARN_13_CODE VARCHAR2(12);
  M_PR_EARN_14_CODE VARCHAR2(12);
  M_PR_EARN_15_CODE VARCHAR2(12);

  M_PR_DED_1_CODE VARCHAR2(12);
  M_PR_DED_2_CODE VARCHAR2(12);
  M_PR_DED_3_CODE VARCHAR2(12);
  M_PR_DED_4_CODE VARCHAR2(12);
  M_PR_DED_5_CODE VARCHAR2(12);
  M_PR_DED_6_CODE VARCHAR2(12);
  M_PR_DED_7_CODE VARCHAR2(12);
  M_PR_DED_8_CODE VARCHAR2(12);
  M_PR_DED_9_CODE VARCHAR2(12);
  M_PR_DED_10_CODE VARCHAR2(12);
  M_PR_DED_11_CODE VARCHAR2(12);
  M_PR_DED_12_CODE VARCHAR2(12);
  M_PR_DED_13_CODE VARCHAR2(12);
  M_PR_DED_14_CODE VARCHAR2(12);
  M_PR_DED_15_CODE VARCHAR2(12);

CURSOR ALLW_EARN(P_DEPT_DIVN IN VARCHAR2,P_DEPT_CODE IN VARCHAR2) IS
      SELECT DISTINCT ALLW_CODE ,ALLW_TYPE
        FROM   PS_DUMMY_PROC,PM_ALLOWANCE
        WHERE  DP_COMP_CODE    = P_COMP_CODE
        AND    DP_ALLW_CODE    = ALLW_CODE
        AND    ALLW_EARN_DEDUC = 'E'
        AND    DP_DIVN_CODE    = P_DEPT_DIVN
        AND    DP_DEPT_CODE    = P_DEPT_CODE
        AND    DP_PROC_MTH     = M_CPMTH
      AND    ALLW_TYPE > 4
        ORDER BY ALLW_CODE,ALLW_TYPE;

CURSOR ALLW_DED(P_DEPT_DIVN IN VARCHAR2,P_DEPT_CODE IN VARCHAR2) IS
        SELECT DISTINCT ALLW_CODE
        FROM   PS_DUMMY_PROC,PM_ALLOWANCE
        WHERE  DP_COMP_CODE    = P_COMP_CODE
        AND    DP_ALLW_CODE    =ALLW_CODE
        AND    ALLW_EARN_DEDUC = 'D'
        AND    DP_DIVN_CODE    = P_DEPT_DIVN
        AND    DP_DEPT_CODE    = P_DEPT_CODE
        AND    DP_PROC_MTH     = M_CPMTH
        AND    ALLW_TYPE > 4
        ORDER  BY ALLW_CODE;

  M_ALLW  VARCHAR2(20);
  CNT     NUMBER(2);
  M_ALLW1 VARCHAR2(20);
  CNT1    NUMBER(2);

CURSOR EMP_NAME(P_EMP_CODE IN VARCHAR2) IS
        SELECT DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01',EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04',
              EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',EMP_NAME_LANG_06, 'LANG_07',EMP_NAME_LANG_07, 'LANG_08',EMP_NAME_LANG_08,
              'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10)
      FROM   PM_EMP_KEY
      WHERE  EMP_COMP_CODE = P_COMP_CODE
      AND    EMP_CODE      = P_EMP_CODE;

CURSOR EMP_ORG_BASIC(P_EMP_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(EMPA_LC_AMOUNT),0)
      FROM   PM_EMP_ALLOWANCE , PM_ALLOWANCE
      WHERE  EMPA_COMP_CODE = P_COMP_CODE
        AND    EMPA_CODE      = P_EMP_CODE
      AND    ALLW_CODE      = EMPA_ALLW_CODE
        AND    EMPA_EXCLUDE_FROM_DT IS NULL
        AND    EMPA_EXCLUDE_UPTO_DT IS NULL
      AND    ALLW_TYPE      = '1' ;

CURSOR EMP_ACT_BASIC(P_EMP_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
      FROM   PS_DUMMY_PROC , PM_ALLOWANCE
      WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE  = P_EMP_CODE
      AND    ALLW_CODE    = DP_ALLW_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN  P_FM_CURR  AND  P_TO_CURR
        AND         DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'E'          -- ADDED ON 16TH SEPT
        AND    ALLW_TYPE    = '1';

CURSOR EMP_HRA(P_EMP_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC  , PM_ALLOWANCE
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    ALLW_CODE   = DP_ALLW_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN P_FM_CURR  AND  P_TO_CURR
        AND       DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'E'          -- ADDED ON 16TH SEPT
        AND    ALLW_TYPE = '2';

CURSOR EMP_HRAD(P_EMP_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC  , PM_ALLOWANCE
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    ALLW_CODE   = DP_ALLW_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN P_FM_CURR  AND  P_TO_CURR
        AND       DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    ALLW_TYPE = '2'
        AND       DP_EARN_DEDUC = 'D';

CURSOR EMP_DBASIC(P_EMP_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC  , PM_ALLOWANCE
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE =  P_EMP_CODE
        AND    ALLW_CODE   =  DP_ALLW_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN P_FM_CURR  AND  P_TO_CURR
        AND       DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    ALLW_TYPE = '1'
        AND       DP_EARN_DEDUC = 'D';

CURSOR EMP_OT1(P_EMP_CODE IN VARCHAR2) IS  -- ADDED BY YASHARTH ON 19/07/2006 FOR ISSUE ADVIND-118179
         SELECT  NVL(SUM(DP_LC_AMOUNT),0)
        FROM    PS_DUMMY_PROC , PM_ALLOWANCE
        WHERE   DP_COMP_CODE = P_COMP_CODE
        AND     DP_EMP_CODE  = P_EMP_CODE
        AND     ALLW_CODE    = DP_ALLW_CODE
        AND     NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN P_FM_CURR  AND  P_TO_CURR
        AND        DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND     DP_EARN_DEDUC = 'E'          -- ADDED ON 16TH SEPT
        AND     ALLW_TYPE = '3';

CURSOR EMP_EARN_1(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
      FROM   PS_DUMMY_PROC,
               PM_ALLOWANCE                 -- ADDED ON 16TH SEPT
      WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE  = P_EMP_CODE
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'E'          -- ADDED ON 16TH SEPT
        AND    ALLW_CODE    = DP_ALLW_CODE  -- ADDED ON 16TH SEPT
--  AND    ALLW_TYPE    = '1'--ADDED ON 20/01/2004
      AND    DP_ALLW_CODE = P_ALLW_CODE;          -- ADDED ON 16TH SEPT

CURSOR EMP_EARN_2(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC,PM_ALLOWANCE
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'E'          -- ADDED ON 16TH SEPT
        AND    ALLW_CODE    = DP_ALLW_CODE  -- ADDED ON 16TH SEPT
--        AND    ALLW_TYPE    = '2'   --COMMENTED ON 20/01/2004
      AND    DP_ALLW_CODE = P_ALLW_CODE;          -- ADDED ON 16TH SEPT

CURSOR EMP_EARN_3(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
         FROM   PS_DUMMY_PROC,
              PM_ALLOWANCE                 -- ADDED ON 16TH SEPT
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN
           P_FM_CURR  AND  P_TO_CURR
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE
        AND    DP_EARN_DEDUC = 'E'          -- ADDED ON 16TH SEPT
        AND    ALLW_CODE    = DP_ALLW_CODE  -- ADDED ON 16TH SEPT
        AND    ALLW_CODE    = P_ALLW_CODE;-- ADDED ON 20/01/2004
--    AND    ALLW_TYPE    = '3';          -- ADDED ON 16TH SEPT;

CURSOR EMP_EARN_4(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC,
                  PM_ALLOWANCE                 -- ADDED ON 16TH SEPT
        WHERE  DP_COMP_CODE  = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN
           P_FM_CURR  AND  P_TO_CURR
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE
        AND    DP_EARN_DEDUC = 'E'          -- ADDED ON 16TH SEPT
        AND    ALLW_CODE    = DP_ALLW_CODE  -- ADDED ON 16TH SEPT
        AND    ALLW_CODE    = P_ALLW_CODE; --ADDED ON 20/01/2004
--    AND    ALLW_TYPE    = '4';          -- ADDED ON 16TH SEPT;

CURSOR EMP_EARN_5(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN
           P_FM_CURR  AND  P_TO_CURR
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE;

CURSOR EMP_EARN_6(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
      FROM   PS_DUMMY_PROC,
               PM_ALLOWANCE                 -- ADDED ON 16TH SEPT
      WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE  = P_EMP_CODE
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'E'          -- ADDED ON 16TH SEPT
        AND    ALLW_CODE    = DP_ALLW_CODE  -- ADDED ON 16TH SEPT
--  AND    ALLW_TYPE    = '1'--ADDED ON 20/01/2004
      AND    DP_ALLW_CODE = P_ALLW_CODE;          -- ADDED ON 16TH SEPT

CURSOR EMP_EARN_7(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC,PM_ALLOWANCE
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'E'          -- ADDED ON 16TH SEPT
        AND    ALLW_CODE    = DP_ALLW_CODE  -- ADDED ON 16TH SEPT
--        AND    ALLW_TYPE    = '2'   --COMMENTED ON 20/01/2004
      AND    DP_ALLW_CODE = P_ALLW_CODE;          -- ADDED ON 16TH SEPT

CURSOR EMP_EARN_8(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
         FROM   PS_DUMMY_PROC,
              PM_ALLOWANCE                 -- ADDED ON 16TH SEPT
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN
           P_FM_CURR  AND  P_TO_CURR
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE
        AND    DP_EARN_DEDUC = 'E'          -- ADDED ON 16TH SEPT
        AND    ALLW_CODE    = DP_ALLW_CODE  -- ADDED ON 16TH SEPT
        AND    ALLW_CODE    = P_ALLW_CODE;-- ADDED ON 20/01/2004
--    AND    ALLW_TYPE    = '3';          -- ADDED ON 16TH SEPT;

CURSOR EMP_EARN_9(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC,
                  PM_ALLOWANCE                 -- ADDED ON 16TH SEPT
        WHERE  DP_COMP_CODE  = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN
           P_FM_CURR  AND  P_TO_CURR
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE
        AND    DP_EARN_DEDUC = 'E'          -- ADDED ON 16TH SEPT
        AND    ALLW_CODE    = DP_ALLW_CODE  -- ADDED ON 16TH SEPT
        AND    ALLW_CODE    = P_ALLW_CODE; --ADDED ON 20/01/2004
--    AND    ALLW_TYPE    = '4';          -- ADDED ON 16TH SEPT;

CURSOR EMP_EARN_10(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN
           P_FM_CURR  AND  P_TO_CURR
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE;


CURSOR EMP_EARN_11(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
      FROM   PS_DUMMY_PROC,
               PM_ALLOWANCE                 -- ADDED ON 16TH SEPT
      WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE  = P_EMP_CODE
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'E'          -- ADDED ON 16TH SEPT
        AND    ALLW_CODE    = DP_ALLW_CODE  -- ADDED ON 16TH SEPT
--  AND    ALLW_TYPE    = '1'--ADDED ON 20/01/2004
      AND    DP_ALLW_CODE = P_ALLW_CODE;          -- ADDED ON 16TH SEPT

CURSOR EMP_EARN_12(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC,PM_ALLOWANCE
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'E'          -- ADDED ON 16TH SEPT
        AND    ALLW_CODE    = DP_ALLW_CODE  -- ADDED ON 16TH SEPT
--        AND    ALLW_TYPE    = '2'   --COMMENTED ON 20/01/2004
      AND    DP_ALLW_CODE = P_ALLW_CODE;          -- ADDED ON 16TH SEPT

CURSOR EMP_EARN_13(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
         FROM   PS_DUMMY_PROC,
              PM_ALLOWANCE                 -- ADDED ON 16TH SEPT
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN
           P_FM_CURR  AND  P_TO_CURR
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE
        AND    DP_EARN_DEDUC = 'E'          -- ADDED ON 16TH SEPT
        AND    ALLW_CODE    = DP_ALLW_CODE  -- ADDED ON 16TH SEPT
        AND    ALLW_CODE    = P_ALLW_CODE;-- ADDED ON 20/01/2004
--    AND    ALLW_TYPE    = '3';          -- ADDED ON 16TH SEPT;

CURSOR EMP_EARN_14(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC,
                  PM_ALLOWANCE                 -- ADDED ON 16TH SEPT
        WHERE  DP_COMP_CODE  = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN
           P_FM_CURR  AND  P_TO_CURR
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE
        AND    DP_EARN_DEDUC = 'E'          -- ADDED ON 16TH SEPT
        AND    ALLW_CODE    = DP_ALLW_CODE  -- ADDED ON 16TH SEPT
        AND    ALLW_CODE    = P_ALLW_CODE; --ADDED ON 20/01/2004
--    AND    ALLW_TYPE    = '4';          -- ADDED ON 16TH SEPT;

CURSOR EMP_EARN_15(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN
           P_FM_CURR  AND  P_TO_CURR
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE;




CURSOR EMP_DED_1(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC,
                 PM_ALLOWANCE       --ADDED ON 20/2/2004
        WHERE  DP_COMP_CODE  = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND       DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'D'          -- ADDED ON 20/2/2004
        AND    ALLW_CODE    = DP_ALLW_CODE  -- ADDED ON 20/2/2004
        AND    ALLW_CODE    = P_ALLW_CODE;  --ADDED ON 20/01/2004



CURSOR EMP_DED_2(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC,
           PM_ALLOWANCE              --ADDED ON 20/4/2004
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND       DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'D'          -- ADDED ON 20/4/2004
        AND    ALLW_CODE    = DP_ALLW_CODE  -- ADDED ON 20/4/2004
        AND    ALLW_CODE = P_ALLW_CODE;

CURSOR EMP_DED_3(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN
           P_FM_CURR  AND  P_TO_CURR
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE;

CURSOR EMP_DED_4(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN
           P_FM_CURR  AND  P_TO_CURR
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE;

CURSOR EMP_DED_5(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN
           P_FM_CURR  AND  P_TO_CURR
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE;

CURSOR EMP_DED_6(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC,
                 PM_ALLOWANCE       --ADDED ON 20/2/2004
        WHERE  DP_COMP_CODE  = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND       DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'D'          -- ADDED ON 20/2/2004
        AND    ALLW_CODE    = DP_ALLW_CODE  -- ADDED ON 20/2/2004
        AND    ALLW_CODE    = P_ALLW_CODE;  --ADDED ON 20/01/2004



CURSOR EMP_DED_7(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC,
           PM_ALLOWANCE              --ADDED ON 20/4/2004
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND       DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'D'          -- ADDED ON 20/4/2004
        AND    ALLW_CODE    = DP_ALLW_CODE  -- ADDED ON 20/4/2004
        AND    ALLW_CODE = P_ALLW_CODE;

CURSOR EMP_DED_8(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN
           P_FM_CURR  AND  P_TO_CURR
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE;

CURSOR EMP_DED_9(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN
           P_FM_CURR  AND  P_TO_CURR
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE;

CURSOR EMP_DED_10(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN
           P_FM_CURR  AND  P_TO_CURR
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE;

CURSOR EMP_DED_11(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC,
                 PM_ALLOWANCE       --ADDED ON 20/2/2004
        WHERE  DP_COMP_CODE  = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND       DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'D'          -- ADDED ON 20/2/2004
        AND    ALLW_CODE    = DP_ALLW_CODE  -- ADDED ON 20/2/2004
        AND    ALLW_CODE    = P_ALLW_CODE;  --ADDED ON 20/01/2004



CURSOR EMP_DED_12(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC,
           PM_ALLOWANCE              --ADDED ON 20/4/2004
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND       DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_EARN_DEDUC = 'D'          -- ADDED ON 20/4/2004
        AND    ALLW_CODE    = DP_ALLW_CODE  -- ADDED ON 20/4/2004
        AND    ALLW_CODE = P_ALLW_CODE;

CURSOR EMP_DED_13(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN
           P_FM_CURR  AND  P_TO_CURR
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE;

CURSOR EMP_DED_14(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN
           P_FM_CURR  AND  P_TO_CURR
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE;

CURSOR EMP_DED_15(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    DP_EMP_CODE = P_EMP_CODE
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN
           P_FM_CURR  AND  P_TO_CURR
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    DP_ALLW_CODE = P_ALLW_CODE;


CURSOR EMP_EARN_OTHERS(P_EMP_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC , PM_ALLOWANCE
        WHERE  DP_COMP_CODE = P_COMP_CODE
        AND    ALLW_CODE    = DP_ALLW_CODE
        AND    DP_EMP_CODE  = P_EMP_CODE
        AND    DP_ALLW_CODE NOT IN (M_PR_EARN_1,M_PR_EARN_2,
                M_PR_EARN_3,M_PR_EARN_4,M_PR_EARN_5)
        AND    DP_EARN_DEDUC = 'E'
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN
           P_FM_CURR  AND  P_TO_CURR
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    ALLW_TYPE NOT IN ('1','2','3','4') ;

CURSOR EMP_DED_OTHERS(P_EMP_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(DP_LC_AMOUNT),0)
        FROM   PS_DUMMY_PROC , PM_ALLOWANCE
        WHERE  DP_COMP_CODE  = P_COMP_CODE
        AND    ALLW_CODE    =  DP_ALLW_CODE
        AND    DP_EMP_CODE  =  P_EMP_CODE
        AND    DP_ALLW_CODE NOT IN (M_PR_DED_1,M_PR_DED_2,
                M_PR_DED_3,M_PR_DED_4,M_PR_DED_5)
        AND    DP_EARN_DEDUC = 'D'
        AND    NVL(DP_CURR_CODE,P_FM_CURR)  BETWEEN
               P_FM_CURR  AND  P_TO_CURR
        AND    DP_PROC_MTH = NVL(M_CPMTH,DP_PROC_MTH)
        AND    ALLW_TYPE NOT IN ('1','2','3','4') ;

   M_PROC_START_DT  DATE;
     M_PROC_END_DT    DATE;
   M_OT_MIN_REP  VARCHAR2(1);
   M_PAYDAYS NUMBER(13,3);
   M_CUTOFF_DT DATE;
   M_PRVOFF_DT DATE;

   TEMP            PW_FS.NAME%TYPE ;
   TEMP_NUM        PW_FS.FLAG_NUM%TYPE ;

CURSOR C_ALLW(P_EMP_CODE IN VARCHAR2) IS
SELECT ALLW_CODE,allw_desc ,ALLW_TYPE,ROWNUM,DP_EMP_CODE FROM
      (SELECT DISTINCT DP_ALLW_CODE ALLW_CODE,DECODE(MM_LANG_CODE,'ENG',ALLW_SHORT_DESC, 'LANG_01',ALLW_SHORT_DESC_LANG_01, 'LANG_02', ALLW_SHORT_DESC_LANG_02, 'LANG_03', ALLW_SHORT_DESC_LANG_03, 'LANG_04',
              ALLW_SHORT_DESC_LANG_04, 'LANG_05', ALLW_SHORT_DESC_LANG_05, 'LANG_06',ALLW_SHORT_DESC_LANG_06, 'LANG_07',ALLW_SHORT_DESC_LANG_07, 'LANG_08',ALLW_SHORT_DESC_LANG_08,
              'LANG_09',ALLW_SHORT_DESC_LANG_09, 'LANG_10', ALLW_SHORT_DESC_LANG_10)allw_desc,ALLW_TYPE,DP_EMP_CODE
        FROM   PS_DUMMY_PROC,PM_ALLOWANCE
        WHERE  DP_COMP_CODE    = P_COMP_CODE
        AND    DP_ALLW_CODE    = ALLW_CODE
        AND    ALLW_EARN_DEDUC = 'E'
        --AND    DP_DIVN_CODE    = P_DEPT_DIVN
        --AND    DP_DEPT_CODE    = P_DEPT_CODE
        AND    DP_EMP_CODE   BETWEEN P_FM_EMP  AND P_TO_EMP
        AND    DP_DIVN_CODE  BETWEEN P_FM_DIVN AND P_TO_DIVN
        AND    DP_DEPT_CODE  BETWEEN P_FM_DEPT AND P_TO_DEPT
        AND    DP_LOCN_CODE  BETWEEN P_FM_LOCN AND P_TO_LOCN
        AND    DP_CC_CODE    BETWEEN P_FM_CC   AND P_TO_CC
        AND    DP_CONT_TYPE_CODE   BETWEEN P_FM_CONT_TYPE AND P_TO_CONT_TYPE
        AND    NVL(DP_CNTRY_CODE,P_FM_COUNTRY)  BETWEEN  P_FM_COUNTRY  AND P_TO_COUNTRY
        AND    DP_PROC_MTH     = M_CPMTH
      AND    ALLW_TYPE > 2
        ORDER BY DP_ALLW_CODE,ALLW_TYPE)
        WHERE DP_EMP_CODE = P_EMP_CODE ;

CURSOR C_DEDUC IS
SELECT ALLW_CODE,allw_desc ,ALLW_TYPE,ROWNUM FROM
      (SELECT DISTINCT DP_ALLW_CODE ALLW_CODE,DECODE(MM_LANG_CODE,'ENG',ALLW_SHORT_DESC, 'LANG_01',ALLW_SHORT_DESC_LANG_01, 'LANG_02', ALLW_SHORT_DESC_LANG_02, 'LANG_03', ALLW_SHORT_DESC_LANG_03, 'LANG_04',
              ALLW_SHORT_DESC_LANG_04, 'LANG_05', ALLW_SHORT_DESC_LANG_05, 'LANG_06',ALLW_SHORT_DESC_LANG_06, 'LANG_07',ALLW_SHORT_DESC_LANG_07, 'LANG_08',ALLW_SHORT_DESC_LANG_08,
              'LANG_09',ALLW_SHORT_DESC_LANG_09, 'LANG_10', ALLW_SHORT_DESC_LANG_10) allw_desc,ALLW_TYPE
        FROM   PS_DUMMY_PROC,PM_ALLOWANCE
        WHERE  DP_COMP_CODE    = P_COMP_CODE
        AND    DP_ALLW_CODE    = ALLW_CODE
        AND    ALLW_EARN_DEDUC = 'D'
        --AND    DP_DIVN_CODE    = P_DEPT_DIVN
        --AND    DP_DEPT_CODE    = P_DEPT_CODE
        AND    DP_EMP_CODE   BETWEEN P_FM_EMP  AND P_TO_EMP
        AND    DP_DIVN_CODE  BETWEEN P_FM_DIVN AND P_TO_DIVN
        AND    DP_DEPT_CODE  BETWEEN P_FM_DEPT AND P_TO_DEPT
        AND    DP_LOCN_CODE  BETWEEN P_FM_LOCN AND P_TO_LOCN
        AND    DP_CC_CODE    BETWEEN P_FM_CC   AND P_TO_CC
        AND    DP_CONT_TYPE_CODE   BETWEEN P_FM_CONT_TYPE AND P_TO_CONT_TYPE
        AND    NVL(DP_CNTRY_CODE,P_FM_COUNTRY)  BETWEEN  P_FM_COUNTRY  AND P_TO_COUNTRY
        AND    DP_PROC_MTH     = M_CPMTH
     -- AND    ALLW_TYPE > 4
        ORDER BY DP_ALLW_CODE,ALLW_TYPE);

        CURSOR C2 IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

    M_PYBSDYFLAG_EA             VARCHAR2(30);

    M_PARA_VALUE      VARCHAR2(30);
    M_PYBSDYS                   NUMBER;

BEGIN

/*dummy(    'P_COMP_CODE    ' || P_COMP_CODE    ||
          'P_REP_KEY_NO   ' || P_REP_KEY_NO   ||
          'P_FM_EMP       ' || P_FM_EMP       ||
          'P_TO_EMP       ' || P_TO_EMP       ||
          'P_FM_DIVN      ' || P_FM_DIVN      ||
          'P_TO_DIVN      ' || P_TO_DIVN      ||
          'P_FM_DEPT      ' || P_FM_DEPT      ||
          'P_TO_DEPT      ' || P_TO_DEPT      ||
          'P_FM_LOCN      ' || P_FM_LOCN      ||
          'P_TO_LOCN      ' || P_TO_LOCN      ||
          'P_FM_CC        ' || P_FM_CC        ||
          'P_TO_CC        ' || P_TO_CC        ||
          'P_FM_CONT_TYPE ' || P_FM_CONT_TYPE ||
          'P_TO_CONT_TYPE ' || P_TO_CONT_TYPE ||
          'P_FM_COUNTRY   ' || P_FM_COUNTRY   ||
          'P_TO_COUNTRY   ' || P_TO_COUNTRY   ||
          'P_FM_CURR      ' || P_FM_CURR      ||
          'P_TO_CURR      ' || P_TO_CURR      ||
          'P_MODE_TYPE    ' || P_MODE_TYPE    ||
          'P_PAY_TYPE     ' || P_PAY_TYPE     ||
          'P_SAL_YN       ' || P_SAL_YN       ||
          'P_PYBSDYFLAG_EA' || P_PYBSDYFLAG_EA  );*/


HRMSDBPKG_PAY_VALID.P_VAL_COMP_PARA(P_COMP_CODE, 'CPMTH',  'CPMTH',  TEMP, M_CPMTH, TEMP_NUM, 'E');
DELETE FROM OW_REP_COLS WHERE REP_KEY_NO = P_REP_KEY_NO;
MM_LANG_CODE := NULL;

    IF C2%ISOPEN THEN
       CLOSE C2;
    END IF;

    OPEN C2;
    FETCH C2 INTO MM_LANG_CODE;
    CLOSE C2;

INSERT INTO OW_REP_COLS
(REP_SYS_ID, REP_NAME, COL_TYPE, COL_NAME, COL_TAB_NAME, COL_LEVEL, COL_LINK_LEVEL, COL_LINK, LINK_COLUMN_YN, COL_SEQ, SUB_WHERE_COND, SUB_TAB_NAME, SUB_RET_NAME, COL_LABEL_NAME, COL_ORDER_YN, COL_ORDER_SEQ, COL_FORMAT_MASK, COL_WIDTH, COL_ORDER_ASC_DESC, COL_MATRIX_TYPE, COL_FORMULA, COL_FOR_DATA_TYPE, REP_TYPE_FLAG, REP_USER_ID, COL_DISP_YN, REP_COL_SYS_ID, COL_ALIGN, COL_CASE, REP_COL_CR_UID, REP_COL_CR_DT, REP_COL_UPD_UID, REP_COL_UPD_DT, COL_LABEL_BL_NAME, COL_FORMULA_YN, COL_EXPORT_WIDTH, COL_EXPORT_WRAP_YN, SUB_CLIENT_ID, SUB_INST_CODE, SUB_SECURITY_CODE, REP_CLIENT_ID, REP_INST_CODE, REP_SECURITY_CODE, LINK_CLIENT_ID, LINK_INST_CODE, LINK_SECURITY_CODE, COL_CLIENT_ID, COL_INST_CODE, COL_SECURITY_CODE, CURR_FORMAT_YN_NUM, CURR_FORMAT_LC_FC, CURR_COL_NAME, REP_KEY_NO,COL_LABEL_NAME_LANG_01,COL_LABEL_NAME_LANG_02,COL_LABEL_NAME_LANG_03,COL_LABEL_NAME_LANG_04,COL_LABEL_NAME_LANG_05,COL_LABEL_NAME_LANG_06,COL_LABEL_NAME_LANG_07,COL_LABEL_NAME_LANG_08,COL_LABEL_NAME_LANG_09,COL_LABEL_NAME_LANG_10)
SELECT REP_SYS_ID, REP_NAME, COL_TYPE, COL_NAME, COL_TAB_NAME, COL_LEVEL, COL_LINK_LEVEL, COL_LINK, LINK_COLUMN_YN, COL_SEQ, SUB_WHERE_COND, SUB_TAB_NAME, SUB_RET_NAME, COL_LABEL_NAME, COL_ORDER_YN, COL_ORDER_SEQ, COL_FORMAT_MASK, COL_WIDTH, COL_ORDER_ASC_DESC, COL_MATRIX_TYPE, COL_FORMULA, COL_FOR_DATA_TYPE, REP_TYPE_FLAG, REP_USER_ID, COL_DISP_YN, REP_COL_SYS_ID, COL_ALIGN, COL_CASE, REP_COL_CR_UID, REP_COL_CR_DT, REP_COL_UPD_UID, REP_COL_UPD_DT, COL_LABEL_BL_NAME, COL_FORMULA_YN, COL_EXPORT_WIDTH, COL_EXPORT_WRAP_YN, SUB_CLIENT_ID, SUB_INST_CODE, SUB_SECURITY_CODE, C.REP_CLIENT_ID, C.REP_INST_CODE, C.REP_SECURITY_CODE, LINK_CLIENT_ID, LINK_INST_CODE, LINK_SECURITY_CODE, COL_CLIENT_ID, COL_INST_CODE, COL_SECURITY_CODE, CURR_FORMAT_YN_NUM, CURR_FORMAT_LC_FC, CURR_COL_NAME, P_REP_KEY_NO,COL_LABEL_NAME_LANG_01,COL_LABEL_NAME_LANG_02,COL_LABEL_NAME_LANG_03,COL_LABEL_NAME_LANG_04,COL_LABEL_NAME_LANG_05,COL_LABEL_NAME_LANG_06,COL_LABEL_NAME_LANG_07,COL_LABEL_NAME_LANG_08,COL_LABEL_NAME_LANG_09,COL_LABEL_NAME_LANG_10 FROM REP_COLS C, IP_REP_INFO WHERE REP_SYS_ID = REP_ID AND  REP_KEY_NO = P_REP_KEY_NO;

UPDATE IP_REP_INFO SET REP_VALUE_6 = 'Payroll Register - Pre Payroll For the Month' ||' '|| M_CPMTH WHERE REP_KEY_NO = P_REP_KEY_NO;
COMMIT;
COMMIT;

--DUMMY('M_CPMTH 1'||M_CPMTH);


 HRMSDBPKG_PAY_VALID.P_VAL_COMP_PARA(P_COMP_CODE,
                      'PYBSDYFLAG',
                      'PYBSDYFLAG',
                      TEMP,
                      M_PYBSDYFLAG_EA,
                      TEMP_NUM,
                      'E'
                      );

HRMSDBPKG_PAY_VALID.P_VAL_COMP_PARA(P_COMP_CODE,
                      'WPYBSDYFLG',
                      'WPYBSDYFLG',
                      TEMP,
                      M_PYBSDYFLAG_EA,
                      TEMP_NUM,
                      'E');

HRMSDBPKG_PAY_VALID.P_VAL_COMP_PARA(P_COMP_CODE,
                      'BPYBSDYFLG',
                      'BPYBSDYFLG',
                      TEMP,
                      M_PYBSDYFLAG_EA,
                      TEMP_NUM,
                      'E');

 HRMSDBPKG_PAY_VALID.P_VAL_COMP_PARA(P_COMP_CODE,
                      'PYBSDYS',
                      'PYBSDYS',
                      TEMP,
                      M_PARA_VALUE,
                      TEMP_NUM,
                      'E');
M_PYBSDYS := TO_NUMBER(M_PARA_VALUE);

 HRMSDBPKG_PAY_VALID.P_VAL_COMP_PARA(P_COMP_CODE,
                      'WPYBSDYS',
                      'WPYBSDYS',
                      TEMP,
                      M_PARA_VALUE,
                      TEMP_NUM,
                      'E');
M_PYBSDYS := TO_NUMBER(M_PARA_VALUE);


      HRMSDBPKG_PAY_VALID.P_VAL_COMP_PARA(P_COMP_CODE,
                      'BPYBSDYS',
                      'BPYBSDYS',
                      TEMP,
                      M_PARA_VALUE,
                      TEMP_NUM,
                      'E');

M_PYBSDYS := TO_NUMBER(M_PARA_VALUE);

--DUMMY('M_CPMTH 2'||M_CPMTH);
     --DUMMY('P_SAL_YN'||P_SAL_YN);
      DELETE FROM PW_PRE_PAYROLL_REGISTER WHERE PPR_REP_KEY_NO = P_REP_KEY_NO;

      IF B3%ISOPEN THEN
         CLOSE B3;
      END IF;

      OPEN B3;
      FETCH B3 INTO M_PROC_START_DT;
      CLOSE B3;

      IF B4%ISOPEN THEN
         CLOSE B4;
      END IF;

      OPEN B4;
      FETCH B4 INTO M_PROC_END_DT;
      CLOSE B4;

      IF B7%ISOPEN THEN
         CLOSE B7;
      END IF;

      OPEN B7;
      FETCH B7 INTO M_OT_MIN_REP;
      CLOSE B7;

   IF B5%ISOPEN THEN
      CLOSE B5;
   END IF;

   OPEN B5;
   FETCH B5 INTO M_CUTOFF_DT;
   CLOSE B5;

   IF B6%ISOPEN THEN
      CLOSE B6;
   END IF;

   OPEN B6;
   FETCH B6 INTO M_PRVOFF_DT;
   CLOSE B6;

   IF B7%ISOPEN THEN
      CLOSE B7;
   END IF;
      --DUMMY(123);
   FOR I IN C_FINAL_PAYROLL
   LOOP
      --DUMMY(12345);
      P_STATUS := '0' ;
      P_NO_OF_DAYS_OR_HRS_PRESENT := 0;

      --DUMMY('P_PYBSDYFLAG_EA '|| M_PYBSDYFLAG_EA);
        IF NVL(M_PYBSDYFLAG_EA, '*') = 'E' THEN
           M_NO_OF_DAYS_IN_MONTH  := M_PYBSDYS ;
        ELSE
             M_NO_OF_DAYS_IN_MONTH := M_PROC_END_DT - M_PROC_START_DT + 1;
          END IF ;

    -- INITIALISED BY VIDYADHAR SINCE DEDN WILL NOT BE CALCULATED FOR ABSETEEISM BELOW
    -- IF PYBSDYFLAG-'E' AND 'PYBSDYS-30, AND ACTUAL DAYS IN THE MONTH IS 31.
      M_NO_OF_DAY_BET_PERIOD := M_NO_OF_DAYS_IN_MONTH ;
    -- ADDED BY YASHARTH ON 16-AUG-2006 FOR ISSUE ALFOZAN-121913
    --DUMMY('I.EMP_JOIN_DT'||I.EMP_JOIN_DT);
      IF I.EMP_JOIN_DT BETWEEN M_PROC_START_DT AND M_PROC_END_DT THEN
--        M_NO_OF_DAY_BET_PERIOD := M_NO_OF_DAY_BET_PERIOD - (:EMP_JOIN_DT - M_PROC_START_DT);
-- COMMENTED ABOVE AND ADDED BELOW BY ASHIK FOR THE ISSUE ALFOZAN-310248 ON 21/06/2009
           M_NO_OF_DAY_BET_PERIOD := M_PROC_END_DT - I.EMP_JOIN_DT + 1; -- ASHIK
         --DUMMY('M_NO_OF_DAY_BET_PERIOD'||M_NO_OF_DAY_BET_PERIOD);
      END IF;
    -- END
      --DUMMY('M_PROC_START_DT    = '||M_PROC_START_DT||'M_PROC_END_DT    = '||M_PROC_END_DT);
      OPEN  C_GET_NO_OF_DAYS_PRESENT(I.Q_1_DP_EMP_CODE1,M_PROC_START_DT,M_PROC_END_DT) ;
      FETCH C_GET_NO_OF_DAYS_PRESENT INTO P_NO_OF_DAYS_OR_HRS_PRESENT ;
      CLOSE C_GET_NO_OF_DAYS_PRESENT ;

/* COMMENTED BY ASHIK ON 13/MAR/2013 FOR THE ISSUE AMZ_INT-858847
      OPEN C1;
      FETCH C1 INTO     M_NO_OF_SL_LV_DAYS;
      CLOSE C1;
*/
      P_NO_OF_DAYS_OR_HRS_PRESENT := NVL(P_NO_OF_DAYS_OR_HRS_PRESENT, 0) + NVL(M_NO_OF_SL_LV_DAYS,0);

      IF P_PAY_TYPE IN ('M','T','W','B') THEN -- 'W','B' ADDED FOR WEEKLY, BIWEEKLY DAF

      FOR C_LEAVE_REC IN C_EMP_LV_AND_RESUMPTION_DTLS(I.Q_1_DP_EMP_CODE1,M_PROC_START_DT,M_PROC_END_DT)
      LOOP
    --    DUMMY('abcd->'||C_LEAVE_REC.A_START_DT||'<>'||C_LEAVE_REC.A_END_DT||'<>'||C_LEAVE_REC.A_LR_TYPE);
         IF C_LEAVE_REC.A_LR_TYPE = 'L' THEN   -- LEAVE DETAILS
         --DUMMY('abcde');
         DUMMY('a' ||'M_PROC_START_DT'||M_PROC_START_DT||'M_PROC_END_DT'||M_PROC_END_DT);
            IF C_LEAVE_REC.A_START_DT >= M_PROC_START_DT AND
               C_LEAVE_REC.A_END_DT   <=M_PROC_END_DT   THEN
               --COMMENTED BY MANJULA FOR ORIONQC-GDC-814532 ON 14/02/2006
               /*IF NVL(:CP_ADV_LV_SAL,'N') = 'Y' THEN  -- MEA ISSUES, SINCE SALARY FOR THE FIRST TO LEAVE START PAID ALREALY
                       M_NO_OF_DAYS_LV_DURING_CPMTH   :=    C_LEAVE_REC.A_END_DT
                                                       - M_PROC_START_DT
                                                       + 1 ;
                ELSE    */
                        M_NO_OF_DAYS_LV_DURING_CPMTH   :=    C_LEAVE_REC.A_END_DT
                                                       - C_LEAVE_REC.A_START_DT
                                                        + 1 ;

                --END IF;
            ELSIF ((C_LEAVE_REC.A_START_DT <= M_PROC_START_DT) AND
                   (C_LEAVE_REC.A_END_DT   >= M_PROC_END_DT)) THEN  -- FOR THE WHOLE MONTH
                M_NO_OF_DAYS_LV_DURING_CPMTH   := M_PROC_END_DT - M_PROC_START_DT + 1;

            ELSIF C_LEAVE_REC.A_START_DT BETWEEN M_PROC_START_DT AND M_PROC_END_DT THEN
               IF C_LEAVE_REC.A_END_DT > M_PROC_END_DT THEN -- IF LEAVE DOESN'T FALL WITHIN THIS PROC. MONTH
                  M_NO_OF_DAYS_LV_DURING_CPMTH   :=
                                                  ( M_PROC_END_DT  - C_LEAVE_REC.A_START_DT + 1 ) ;
               ELSE
                  M_NO_OF_DAYS_LV_DURING_CPMTH   := NVL(M_NO_OF_DAYS_LV_DURING_CPMTH, 0) +
                                                    M_NO_OF_DAYS_LEAVE ;
               END IF ;

            ELSIF C_LEAVE_REC.A_END_DT BETWEEN M_PROC_START_DT AND M_PROC_END_DT THEN
              M_NO_OF_DAYS_LV_DURING_CPMTH    :=    C_LEAVE_REC.A_END_DT
                                              - M_PROC_START_DT
                                              + 1 ;
            END IF ;
            M_NO_OF_DAYS_LWP_DURING_CPMTH  := NVL( M_NO_OF_DAYS_LWP_DURING_CPMTH ,0) +
                                              NVL(M_NO_OF_DAYS_LV_DURING_CPMTH,0);
            ELSE  -- MEA ISSUES, SINCE SALARY FOR THE FIRST TO LEAVE START PAID ALREALY

            IF C_LEAVE_REC.A_START_DT >= M_PROC_START_DT AND
               C_LEAVE_REC.A_END_DT   <= M_PROC_END_DT   THEN
                M_NO_OF_DAYS_LV_DURING_CPMTH   :=    C_LEAVE_REC.A_END_DT
                                                     - C_LEAVE_REC.A_START_DT
                                                     + 1 ;
            ELSIF ((C_LEAVE_REC.A_START_DT <= M_PROC_START_DT) AND
                   (C_LEAVE_REC.A_END_DT   >= M_PROC_END_DT)) THEN  -- FOR THE WHOLE MONTH
                M_NO_OF_DAYS_LV_DURING_CPMTH   := M_PROC_END_DT - M_PROC_START_DT + 1;

            ELSIF C_LEAVE_REC.A_START_DT BETWEEN M_PROC_START_DT AND M_PROC_END_DT THEN

               IF C_LEAVE_REC.A_END_DT > M_PROC_END_DT THEN -- IF LEAVE DOESN'T FALL WITHIN THIS PROC. MONTH
                  M_NO_OF_DAYS_LV_DURING_CPMTH   :=
                                                  ( M_PROC_END_DT  - C_LEAVE_REC.A_START_DT + 1 ) ;
               ELSE
                  M_NO_OF_DAYS_LV_DURING_CPMTH   := NVL(M_NO_OF_DAYS_LV_DURING_CPMTH, 0) +
                                                    M_NO_OF_DAYS_LEAVE ;
               END IF ;

            ELSIF C_LEAVE_REC.A_END_DT BETWEEN M_PROC_START_DT AND M_PROC_END_DT THEN
         --   DUMMY('FINAL_PAY_LV_DAYS->'||C_LEAVE_REC.A_END_DT||'<>'||M_PROC_START_DT);
              M_NO_OF_DAYS_LV_DURING_CPMTH    :=    C_LEAVE_REC.A_END_DT
                                              - M_PROC_START_DT
                                              + 1 ;
            END IF ;
         --   DUMMY('FINAL_PAY_LWP_DAYS->'||M_NO_OF_DAYS_LWP_DURING_CPMTH||'<>'||M_NO_OF_DAYS_LV_DURING_CPMTH);
            M_NO_OF_DAYS_LWP_DURING_CPMTH  := NVL( M_NO_OF_DAYS_LWP_DURING_CPMTH ,0) +
                                              NVL(M_NO_OF_DAYS_LV_DURING_CPMTH,0);
       END IF;
      END LOOP ;
      --TOTAL NUMBER OF DAYS ABSCENT DURING THE PERIOD..
      P_NO_OF_DAYS_OR_HRS_PRESENT := NVL(P_NO_OF_DAYS_OR_HRS_PRESENT,0) +
                                     NVL(M_NO_OF_DAYS_LWP_DURING_CPMTH , 0);
          --DUMMY('P_NO_OF_DAYS_OR_HRS_PRESENT'||P_NO_OF_DAYS_OR_HRS_PRESENT);
      --TOTAL NUMBER OF DAYS PRESENT DURING THE PERIOD...

      --DUMMY('M_NO_OF_DAY_BET_PERIOD'||M_NO_OF_DAY_BET_PERIOD||'P_NO_OF_DAYS_OR_HRS_PRESENT'||P_NO_OF_DAYS_OR_HRS_PRESENT);
      M_NO_DAYS_PRSNT := NVL((M_NO_OF_DAY_BET_PERIOD - P_NO_OF_DAYS_OR_HRS_PRESENT), 0);
      --DUMMY('M_NO_DAYS_PRSNT'||M_NO_DAYS_PRSNT);

  END IF;
      M_NO_DAYS_PRSNT := HRDBP_NO_DAYS_PRESENT_ABSENT(P_COMP_CODE,I.Q_1_DP_EMP_CODE1, M_CPMTH,'P');
    --RETURN M_NO_DAYS_PRSNT;
     /*DUMMY('I.Q_1_DP_EMP_CODE1'||I.Q_1_DP_EMP_CODE1||'M_PROC_START_DT'||M_PROC_START_DT
     ||'M_PROC_END_DT'||M_PROC_END_DT||'M_CUTOFF_DT'||M_CUTOFF_DT||'M_PRVOFF_DT'||M_PRVOFF_DT);  */
      OPEN EMP_OT_HRS(I.Q_1_DP_EMP_CODE1,M_PROC_START_DT,M_PROC_END_DT,M_PRVOFF_DT,M_CUTOFF_DT);-- BAYOUNI-1441293 changed by partha
      FETCH EMP_OT_HRS INTO M_OT_HRS;
      --DUMMY('M_OT_HRS'||M_OT_HRS);
      CLOSE EMP_OT_HRS;

-- ADDED BY ASHIK FOR THE ISSUE NPI-658844 ON 29/JAN/2012
      IF M_OT_MIN_REP = 'Y' THEN
            M_OT_HRS_MIN := ROUND(FLOOR(M_OT_HRS) + (MOD(M_OT_HRS,FLOOR(M_OT_HRS))*60/100),2);
         M_OT_HRS_MIN := NVL(M_OT_HRS_MIN,0);
     --RETURN NVL(M_OT_HRS_MIN,0);
      ELSE
-- ADDED BY ASHIK FOR THE ISSUE NPI-658844 ON 29/JAN/2012
         --RETURN NVL(M_OT_HRS,0);
         M_OT_HRS := NVL(M_OT_HRS,0);
      END IF;



      CNT := 1;
      --DUMMY('I.DEPT_DIVN_CODE'||I.DEPT_DIVN_CODE||'I.Q_1_DEPT_CODE'||I.Q_1_DEPT_CODE||'M_CPMTH'||M_CPMTH);
     FOR J IN ALLW_EARN(I.DEPT_DIVN_CODE,I.Q_1_DEPT_CODE)
     LOOP
   --  UPDATE OW_REP_COLS SET COL_LABEL_NAME = J.ALLW_CODE WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_EARN_1';
     --UPDATE OW_REP_COLS SET COL_LABEL_NAME = J.ALLW_CODE WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_EARN_2';
     --UPDATE OW_REP_COLS SET COL_LABEL_NAME = J.ALLW_CODE WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_EARN_3';
    -- UPDATE OW_REP_COLS SET COL_LABEL_NAME = J.ALLW_CODE WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_EARN_4';
    -- UPDATE OW_REP_COLS SET COL_LABEL_NAME = J.ALLW_CODE WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_EARN_5'       ;
      EXIT WHEN CNT > 5 ;


        --DUMMY('CNT'||CNT);
       IF CNT = 1 THEN
         M_PR_EARN_1 := J.ALLW_CODE;
       ELSIF CNT = 2 THEN
         M_PR_EARN_2 := J.ALLW_CODE;
       ELSIF CNT = 3 THEN
         M_PR_EARN_3 := J.ALLW_CODE;
       ELSIF CNT = 4 THEN
         M_PR_EARN_4 := J.ALLW_CODE;
       ELSIF CNT = 5 THEN
         M_PR_EARN_5 := J.ALLW_CODE;
       END IF;
       CNT := CNT + 1 ;
      END LOOP;

     CNT1 := 1;
     FOR K IN ALLW_DED(I.DEPT_DIVN_CODE,I.Q_1_DEPT_CODE)
     LOOP
      EXIT WHEN CNT1 > 5;
        IF CNT1 = 1 THEN
           M_PR_DED_1 := K.ALLW_CODE;
        ELSIF CNT1 = 2 THEN
           M_PR_DED_2 := K.ALLW_CODE;
        ELSIF CNT1 = 3 THEN
           M_PR_DED_3 := K.ALLW_CODE;
        ELSIF CNT1 = 4 THEN
           M_PR_DED_4 := K.ALLW_CODE;
        ELSIF CNT1 = 5 THEN
           M_PR_DED_5 := K.ALLW_CODE;
        END IF;
        CNT1 := CNT1 + 1;
         END LOOP;
      /*SRW.REFERENCE(:Q_1_DP_EMP_CODE1);
    SRW.REFERENCE(:CP_PR_EARN_1);
    SRW.REFERENCE(:CP_PR_EARN_2);
    SRW.REFERENCE(:CP_PR_EARN_3);
    SRW.REFERENCE(:CP_PR_EARN_4);
    SRW.REFERENCE(:CP_PR_EARN_5);
    SRW.REFERENCE(:CP_PR_DED_1);
    SRW.REFERENCE(:CP_PR_DED_2);
    SRW.REFERENCE(:CP_PR_DED_3);
    SRW.REFERENCE(:CP_PR_DED_4);
    SRW.REFERENCE(:CP_PR_DED_5);
    SRW.REFERENCE(:CP_ORG_BAS);
    SRW.REFERENCE(:CP_ACT_BAS);
    SRW.REFERENCE(:CP_OT1);
    SRW.REFERENCE(:CP_HRA);*/

    OPEN  EMP_NAME(I.Q_1_DP_EMP_CODE1) ;
    FETCH EMP_NAME INTO M_NAME;
    CLOSE EMP_NAME;

    OPEN EMP_ORG_BASIC(I.Q_1_DP_EMP_CODE1);
    FETCH EMP_ORG_BASIC INTO M_ORG_BASIC;
    M_ORG_BAS := M_ORG_BASIC;
    CLOSE EMP_ORG_BASIC;

    OPEN EMP_ACT_BASIC(I.Q_1_DP_EMP_CODE1);
    FETCH EMP_ACT_BASIC INTO M_ACT_BASIC;
    M_ACT_BAS := M_ACT_BASIC;
    CLOSE EMP_ACT_BASIC;

    OPEN  EMP_HRA(I.Q_1_DP_EMP_CODE1) ;
    FETCH EMP_HRA INTO M_PR_HRA;
    M_HRA :=  M_PR_HRA;
    CLOSE EMP_HRA;

    OPEN  EMP_HRAD(I.Q_1_DP_EMP_CODE1) ;
    FETCH EMP_HRAD INTO M_PR_HRAD;
    M_HRAD :=  M_PR_HRAD;
    CLOSE EMP_HRAD;

    OPEN  EMP_DBASIC(I.Q_1_DP_EMP_CODE1) ;
    FETCH EMP_DBASIC INTO M_PR_DBASIC;
    M_DBASIC :=  M_PR_DBASIC;
    CLOSE EMP_DBASIC;


  -- ADDED BY YASHARTH ON 19/07/2006 FOR ISSUE ADVIND-118179 START
    OPEN EMP_OT1(I.Q_1_DP_EMP_CODE1);
    FETCH EMP_OT1 INTO M_PR_OT1;
    M_OT1 := M_PR_OT1;
    CLOSE EMP_OT1;
    --END
  FOR A IN C_ALLW(I.Q_1_DP_EMP_CODE1) LOOP
     IF A.ROWNUM = 1 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_EARN_1';
     UPDATE IP_REP_INFO SET REP_VALUE_51 = A.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     --DUMMY('*******'||A.allw_desc||'******');
     M_PR_EARN_1_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
     OPEN  EMP_EARN_1(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE) ;
    FETCH EMP_EARN_1 INTO M_PR_EARN_1;
  IF M_PR_EARN_1 > 0 THEN
      M_EARN_1 := M_PR_EARN_1;
    ELSE
    M_EARN_1 := '' ;
  END IF;
    CLOSE EMP_EARN_1;

     ELSIF  A.ROWNUM = 2 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_EARN_2';
     UPDATE IP_REP_INFO SET REP_VALUE_52 = A.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_EARN_2_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
         OPEN EMP_EARN_2(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_2 INTO M_PR_EARN_2;
        IF M_PR_EARN_2 > 0 THEN
    M_EARN_2 := M_PR_EARN_2;
    ELSE
    M_EARN_2 := '' ;
        END IF;
    CLOSE EMP_EARN_2;
     ELSIF  A.ROWNUM = 3 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_EARN_3';
     UPDATE IP_REP_INFO SET REP_VALUE_53 = A.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_EARN_3_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_EARN_3(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_3 INTO M_PR_EARN_3;
        IF M_PR_EARN_3 > 0 THEN
    M_EARN_3 := M_PR_EARN_3;
    ELSE
    M_EARN_3 := '' ;
        END IF;
    CLOSE EMP_EARN_3;

     ELSIF  A.ROWNUM = 4 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_EARN_4';
     UPDATE IP_REP_INFO SET REP_VALUE_54 = A.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_EARN_4_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
         OPEN EMP_EARN_4(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_4 INTO M_PR_EARN_4;
        IF M_PR_EARN_4 > 0 THEN
    M_EARN_4 := M_PR_EARN_4;
    ELSE
    M_EARN_4 := '' ;
        END IF;
    CLOSE EMP_EARN_4;

     ELSIF  A.ROWNUM = 5 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_EARN_5'       ;
     UPDATE IP_REP_INFO SET REP_VALUE_55 = A.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_EARN_5_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_EARN_5(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_5 INTO M_PR_EARN_5;
        IF M_PR_EARN_5 > 0 THEN
    M_EARN_5 := M_PR_EARN_5;
    ELSE
    M_EARN_5 := '' ;
        END IF;
    CLOSE EMP_EARN_5;

  ELSIF  A.ROWNUM = 6 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_EARN_6'       ;
     UPDATE IP_REP_INFO SET REP_VALUE_56 = A.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_EARN_6_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_EARN_6(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_6 INTO M_PR_EARN_6;
        IF M_PR_EARN_6 > 0 THEN
    M_EARN_6 := M_PR_EARN_6;
    ELSE
    M_EARN_6 := '' ;
        END IF;
    CLOSE EMP_EARN_6;
  ELSIF  A.ROWNUM = 7 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_EARN_7'       ;
     UPDATE IP_REP_INFO SET REP_VALUE_57 = A.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_EARN_7_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_EARN_7(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_7 INTO M_PR_EARN_7;
        IF M_PR_EARN_7 > 0 THEN
    M_EARN_7 := M_PR_EARN_7;
    ELSE
    M_EARN_7 := '' ;
        END IF;
    CLOSE EMP_EARN_7;
  ELSIF  A.ROWNUM = 8 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_EARN_8'       ;
     UPDATE IP_REP_INFO SET REP_VALUE_58 = A.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_EARN_8_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_EARN_8(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_8 INTO M_PR_EARN_8;
        IF M_PR_EARN_8 > 0 THEN
    M_EARN_8 := M_PR_EARN_8;
    ELSE
    M_EARN_8 := '' ;
        END IF;
    CLOSE EMP_EARN_8;
  ELSIF  A.ROWNUM = 9 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_EARN_9'       ;
     UPDATE IP_REP_INFO SET REP_VALUE_59 = A.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_EARN_9_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_EARN_9(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_9 INTO M_PR_EARN_9;
        IF M_PR_EARN_9 > 0 THEN
    M_EARN_9 := M_PR_EARN_9;
    ELSE
    M_EARN_9 := '' ;
        END IF;
    CLOSE EMP_EARN_9;
  ELSIF  A.ROWNUM = 10 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_EARN_10'       ;
     UPDATE IP_REP_INFO SET REP_VALUE_60 = A.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_EARN_10_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_EARN_10(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_10 INTO M_PR_EARN_10;
        IF M_PR_EARN_10 > 0 THEN
    M_EARN_10 := M_PR_EARN_10;
    ELSE
    M_EARN_10 := '' ;
        END IF;
    CLOSE EMP_EARN_10;

  ELSIF  A.ROWNUM = 11 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_EARN_11'       ;
     M_PR_EARN_11_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_EARN_11(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_11 INTO M_PR_EARN_11;
        IF M_PR_EARN_11 > 0 THEN
    M_EARN_11 := M_PR_EARN_11;
    ELSE
    M_EARN_11 := '' ;
        END IF;
    CLOSE EMP_EARN_11;
  ELSIF  A.ROWNUM = 12 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_EARN_12'       ;
     M_PR_EARN_12_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_EARN_12(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_12 INTO M_PR_EARN_12;
        IF M_PR_EARN_12 > 0 THEN
    M_EARN_12 := M_PR_EARN_12;
    ELSE
    M_EARN_12 := '' ;
        END IF;
    CLOSE EMP_EARN_12;
  ELSIF  A.ROWNUM = 13 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_EARN_13'       ;
     M_PR_EARN_13_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_EARN_13(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_13 INTO M_PR_EARN_13;
        IF M_PR_EARN_13 > 0 THEN
    M_EARN_13 := M_PR_EARN_13;
    ELSE
    M_EARN_13 := '' ;
        END IF;
    CLOSE EMP_EARN_13;
  ELSIF  A.ROWNUM = 14 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_EARN_14'       ;
     M_PR_EARN_14_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_EARN_14(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_14 INTO M_PR_EARN_14;
        IF M_PR_EARN_14 > 0 THEN
    M_EARN_14 := M_PR_EARN_14;
    ELSE
    M_EARN_14 := '' ;
        END IF;
    CLOSE EMP_EARN_14;
  ELSIF  A.ROWNUM = 15 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_EARN_15'       ;
     M_PR_EARN_15_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_EARN_15(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_15 INTO M_PR_EARN_15;
        IF M_PR_EARN_15 > 0 THEN
    M_EARN_15 := M_PR_EARN_15;
    ELSE
    M_EARN_15 := '' ;
        END IF;
    CLOSE EMP_EARN_15;

     END IF;
  END LOOP;

  FOR B IN C_DEDUC LOOP
 --DUMMY('DED LOOP IN');
  IF B.ROWNUM = 1 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_DED_1';
     UPDATE IP_REP_INFO SET REP_VALUE_61 = B.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_DED_1_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
     OPEN  EMP_DED_1(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE) ;
    FETCH EMP_DED_1 INTO M_PR_DED_1;
  --DUMMY('M_PR_DED_1'||M_PR_DED_1);
  IF M_PR_DED_1 > 0 THEN
      M_DED_1 := M_PR_DED_1;
    ELSE
    M_DED_1 := '' ;
  END IF;
    CLOSE EMP_DED_1;

     ELSIF  B.ROWNUM = 2 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_DED_2';
     UPDATE IP_REP_INFO SET REP_VALUE_62 = B.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_DED_2_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
         OPEN EMP_DED_2(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_2 INTO M_PR_DED_2;
        IF M_PR_DED_2 > 0 THEN
    M_DED_2 := M_PR_DED_2;
    ELSE
    M_DED_2 := '' ;
        END IF;
    CLOSE EMP_DED_2;
     ELSIF  B.ROWNUM = 3 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_DED_3';
     UPDATE IP_REP_INFO SET REP_VALUE_63 = B.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_DED_3_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_DED_3(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_3 INTO M_PR_DED_3;
        IF M_PR_DED_3 > 0 THEN
    M_DED_3 := M_PR_DED_3;
    ELSE
    M_DED_3 := '' ;
        END IF;
    CLOSE EMP_DED_3;

     ELSIF  B.ROWNUM = 4 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_DED_4';
     UPDATE IP_REP_INFO SET REP_VALUE_64 = B.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_DED_4_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
         OPEN EMP_DED_4(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_4 INTO M_PR_DED_4;
        IF M_PR_DED_4 > 0 THEN
    M_DED_4 := M_PR_DED_4;
    ELSE
    M_DED_4 := '' ;
        END IF;
    CLOSE EMP_DED_4;

     ELSIF  B.ROWNUM = 5 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_DED_5'       ;
     UPDATE IP_REP_INFO SET REP_VALUE_65 = B.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_DED_5_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_DED_5(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_5 INTO M_PR_DED_5;
        IF M_PR_DED_5 > 0 THEN
    M_DED_5 := M_PR_DED_5;
    ELSE
    M_DED_5 := '' ;
        END IF;
    CLOSE EMP_DED_5;

  ELSIF  B.ROWNUM = 6 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_DED_6'       ;
     UPDATE IP_REP_INFO SET REP_VALUE_66 = B.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_DED_6_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_DED_6(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_6 INTO M_PR_DED_6;
        IF M_PR_DED_6 > 0 THEN
    M_DED_6 := M_PR_DED_6;
    ELSE
    M_DED_6 := '' ;
        END IF;
    CLOSE EMP_DED_6;
  ELSIF  B.ROWNUM = 7 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_DED_7'       ;
     UPDATE IP_REP_INFO SET REP_VALUE_67 = B.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_DED_7_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_DED_7(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_7 INTO M_PR_DED_7;
        IF M_PR_DED_7 > 0 THEN
    M_DED_7 := M_PR_DED_7;
    ELSE
    M_DED_7 := '' ;
        END IF;
    CLOSE EMP_DED_7;
  ELSIF  B.ROWNUM = 8 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_DED_8'       ;
     UPDATE IP_REP_INFO SET REP_VALUE_68 = B.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_DED_8_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_DED_8(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_8 INTO M_PR_DED_8;
        IF M_PR_DED_8 > 0 THEN
    M_DED_8 := M_PR_DED_8;
    ELSE
    M_DED_8 := '' ;
        END IF;
    CLOSE EMP_DED_8;
  ELSIF  B.ROWNUM = 9 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_DED_9'       ;
     UPDATE IP_REP_INFO SET REP_VALUE_69 = B.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_DED_9_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_DED_9(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_9 INTO M_PR_DED_9;
        IF M_PR_DED_9 > 0 THEN
    M_DED_9 := M_PR_DED_9;
    ELSE
    M_DED_9 := '' ;
        END IF;
    CLOSE EMP_DED_9;
  ELSIF  B.ROWNUM = 10 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_DED_10'       ;
     UPDATE IP_REP_INFO SET REP_VALUE_70 = B.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_DED_10_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_DED_10(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_10 INTO M_PR_DED_10;
        IF M_PR_DED_10 > 0 THEN
    M_DED_10 := M_PR_DED_10;
    ELSE
    M_DED_10 := '' ;
        END IF;
    CLOSE EMP_DED_10;

  ELSIF  B.ROWNUM = 11 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_DED_11'       ;
     M_PR_DED_11_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_DED_11(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_11 INTO M_PR_DED_11;
        IF M_PR_DED_11 > 0 THEN
    M_DED_11 := M_PR_DED_11;
    ELSE
    M_DED_11 := '' ;
        END IF;
    CLOSE EMP_DED_11;
  ELSIF  B.ROWNUM = 12 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_DED_12'       ;
     M_PR_DED_12_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_DED_12(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_12 INTO M_PR_DED_12;
        IF M_PR_DED_12 > 0 THEN
    M_DED_12 := M_PR_DED_12;
    ELSE
    M_DED_12 := '' ;
        END IF;
    CLOSE EMP_DED_12;
  ELSIF  B.ROWNUM = 13 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_DED_13'       ;
     M_PR_DED_13_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_DED_13(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_13 INTO M_PR_DED_13;
        IF M_PR_DED_13 > 0 THEN
    M_DED_13 := M_PR_DED_13;
    ELSE
    M_DED_13 := '' ;
        END IF;
    CLOSE EMP_DED_13;
  ELSIF  B.ROWNUM = 14 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_DED_14'       ;
     M_PR_DED_14_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_DED_14(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_14 INTO M_PR_DED_14;
        IF M_PR_DED_14 > 0 THEN
    M_DED_14 := M_PR_DED_14;
    ELSE
    M_DED_14 := '' ;
        END IF;
    CLOSE EMP_DED_14;
  ELSIF  B.ROWNUM = 15 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'PPR_DED_15'       ;
     M_PR_DED_15_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_DED_15(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_15 INTO M_PR_DED_15;
        IF M_PR_DED_15 > 0 THEN
    M_DED_15 := M_PR_DED_15;
    ELSE
    M_DED_15 := '' ;
        END IF;
    CLOSE EMP_DED_15;

     END IF;


  END LOOP;



    OPEN EMP_EARN_OTHERS(I.Q_1_DP_EMP_CODE1);
    FETCH EMP_EARN_OTHERS INTO M_PR_EARN_OTH;
        IF M_PR_EARN_OTH > 0 THEN
    M_EARN_OTH := M_PR_EARN_OTH;
    ELSE
    M_EARN_OTH := '' ;
    END IF;
    CLOSE EMP_EARN_OTHERS;

    OPEN EMP_DED_OTHERS(I.Q_1_DP_EMP_CODE1);
    FETCH EMP_DED_OTHERS INTO M_PR_DED_OTH;
        IF M_PR_DED_OTH > 0 THEN
    M_DED_OTH := M_PR_DED_OTH;
    ELSE
    M_DED_OTH := '' ;
    END IF;
    CLOSE EMP_DED_OTHERS;

     /*DUMMY('FOR THE EMPLOYEE ' || I.Q_1_DP_EMP_CODE1 || ' :: M_ACT_BAS = '|| M_ACT_BAS||' :: M_HRA = '||M_HRA ||
     ':: M_OT1'|| M_OT1||
' = M_EARN_1 = '||M_PR_EARN_1_CODE || ' = ' ||M_EARN_1||
' :: M_EARN_2 = '||M_PR_EARN_2_CODE || ' = ' || M_EARN_2||
':: M_EARN_3 = '|| M_PR_EARN_3_CODE || ' = ' || M_EARN_3||
':: M_EARN_4 = '||M_PR_EARN_4_CODE || ' = ' || M_EARN_4 ||
' :: M_EARN_5 = '||M_PR_EARN_5_CODE || ' = ' || M_EARN_5||
' :: M_EARN_6 = '||M_PR_EARN_6_CODE || ' = ' || M_EARN_6||
' :: M_EARN_7 = '||M_PR_EARN_7_CODE || ' = ' || M_EARN_7||
' :: M_EARN_8 = '||M_PR_EARN_8_CODE || ' = ' || M_EARN_8||
' :: M_EARN_9 = '||M_PR_EARN_9_CODE || ' = ' || M_EARN_9||
' :: M_EARN_10 = '||M_PR_EARN_10_CODE || ' = ' || M_EARN_10||
' :: M_EARN_11 = '||M_PR_EARN_11_CODE || ' = ' || M_EARN_11||
' :: M_EARN_12 = '||M_PR_EARN_12_CODE || ' = ' || M_EARN_12||
' :: M_EARN_13 = '||M_PR_EARN_13_CODE || ' = ' || M_EARN_13||
' :: M_EARN_14 = '||M_PR_EARN_14_CODE || ' = ' || M_EARN_14||
' :: M_EARN_15 = '||M_PR_EARN_15_CODE || ' = ' || M_EARN_15||
':: M_EARN_OTH = ' || M_EARN_OTH);   */
    M_TOT_GROSS_EARN := NVL(M_ACT_BAS,0) + NVL(M_HRA,0) +    --NVL(:CF_OT_HRS,0) +
    NVL(M_EARN_1,0) +
    --NVL(M_OT1,0)+  -- ADDED BY YASHARTH ON 19/07/2006 FOR ISSUE ADVIND-118179
    NVL(M_EARN_2,0) + NVL(M_EARN_3,0) + NVL(M_EARN_4,0) +
    NVL(M_EARN_5,0)+ NVL(M_EARN_6,0)+NVL(M_EARN_7,0)+NVL(M_EARN_8,0)+
  NVL(M_EARN_9,0)+NVL(M_EARN_10,0)+NVL(M_EARN_11,0)+NVL(M_EARN_12,0)+NVL(M_EARN_13,0)+NVL(M_EARN_14,0)+NVL(M_EARN_15,0);
--  + NVL(M_EARN_OTH,0) ;



    M_TOT_GROSS_DED := --NVL(M_DBASIC,0)+ NVL(M_HRAD,0)+
  NVL(M_DED_1,0) + NVL(M_DED_2,0) +
    NVL(M_DED_3,0) + NVL(M_DED_4,0) + NVL(M_DED_5,0) + NVL(M_DED_6,0) + NVL(M_DED_7,0)   + NVL(M_DED_8,0)+
  NVL(M_DED_9,0)+ NVL(M_DED_10,0) + NVL(M_DED_11,0)+NVL(M_DED_12,0)+NVL(M_DED_13,0)+NVL(M_DED_14,0)+NVL(M_DED_15,0);-- + NVL(M_DED_OTH,0) ;

     /*DUMMY('FOR THE EMPLOYEE ' || I.Q_1_DP_EMP_CODE1 || ' :: M_ACT_BAS = '|| M_ACT_BAS||' :: M_HRA = '||M_HRA ||
     ':: M_OT1'|| M_OT1||
' = M_DED_1 = '||M_PR_DED_1_CODE || ' = ' || M_DED_1||
' :: M_DED_2 = '||M_PR_DED_2_CODE || ' = ' || M_DED_2||
':: M_DED_3 = '||M_PR_DED_3_CODE || ' = ' || M_DED_3||
':: M_DED_4 = '||M_PR_DED_4_CODE || ' = ' || M_DED_4 ||
' :: M_DED_5 = '||M_PR_DED_5_CODE || ' = ' || M_DED_5||
' :: M_DED_6 = '||M_PR_DED_6_CODE || ' = ' || M_DED_6||
' :: M_DED_7 = '||M_PR_DED_7_CODE || ' = ' || M_DED_7||
' :: M_DED_8 = '||M_PR_DED_8_CODE || ' = ' || M_DED_8||
' :: M_DED_9 = '||M_PR_DED_9_CODE || ' = ' || M_DED_9||
' :: M_DED_10 = '||M_PR_DED_10_CODE || ' = ' || M_DED_10||
' :: M_DED_11 = '||M_PR_DED_11_CODE || ' = ' || M_DED_11||
' :: M_DED_12 = '||M_PR_DED_12_CODE || ' = ' || M_DED_12||
' :: M_DED_13 = '||M_PR_DED_13_CODE || ' = ' || M_DED_13||
' :: M_DED_14 = '||M_PR_DED_14_CODE || ' = ' || M_DED_14||
' :: M_DED_15 = '||M_PR_DED_15_CODE || ' = ' || M_DED_15||
':: M_DED_OTH = ' || M_DED_OTH);    */

    M_NET_SAL := NVL(M_TOT_GROSS_EARN,0) - NVL(M_TOT_GROSS_DED,0);
    --M_NET_SAL := Round(M_NET_SAL,0);     --ADDED BY PARTHA ON 06/01/2018 FOR FRAC-1566087  -- Commented by MathanKumar P for issue in Call ID : ETIHAD_INT-1751610
--    RETURN M_NAME;

INSERT INTO PW_PRE_PAYROLL_REGISTER (  PPR_COMP_CODE,
                                       PPR_REP_KEY_NO,
                                       PPR_DEPT_DIVN_CODE,
                                       PPR_DIVN_NAME,
                                       PPR_DEPT_CODE,
                                       PPR_DEPT_NAME,
                                       PPR_EMP_CODE,
                                       PPR_ORG_BASIC_FC_AMOUNT,
                                       PPR_JOIN_DT,
                                       PPR_ANAL_CODE_1,
                                       PPR_NO_DAYS_PRSNT,
                                       PPR_ORG_BAS,
                                       PPR_ACT_BAS,
                                       PPR_OT_HRS,
                                       PPR_HRA,
                                       PPR_EARN_1,
                                       PPR_EARN_2,
                                       PPR_EARN_3,
                                       PPR_EARN_4,
                                       PPR_EARN_5,
                                       PPR_EARN_OTH,
                                       PPR_TOT_GROSS_EARN,
                                       PPR_NET_SAL,
                                       PPR_DBASIC,
                                       PPR_OT1,
                                       PPR_HRAD,
                                       PPR_DED_1,
                                       PPR_DED_2,
                                       PPR_DED_3,
                                       PPR_DED_4,
                                       PPR_DED_5,
                                       PPR_DED_OTH,
                                       PPR_TOT_GROSS_DED,
                                       ppr_earn_6, ppr_earn_7, ppr_earn_8, ppr_earn_9, ppr_earn_10,
                                       ppr_earn_11,
                                       ppr_earn_12,
                                       ppr_earn_13,
                                       ppr_earn_14,
                                       ppr_earn_15,
                                       PPR_DED_6,
                                       PPR_DED_7,
                                       PPR_DED_8,
                                       PPR_DED_9,
                                       PPR_DED_10,
                                       PPR_DED_11,
                                       PPR_DED_12,
                                       PPR_DED_13,
                                       PPR_DED_14,
                                       PPR_DED_15,
                                       PPR_PAY_MODE)
                              VALUES ( P_COMP_CODE,
                                       P_REP_KEY_NO,
                                       I.DEPT_DIVN_CODE,
                                       I.Q_1_DIVN_NAME,
                                       I.Q_1_DEPT_CODE,
                                       I.Q_1_DEPT_NAME,
                                       I.Q_1_DP_EMP_CODE1,
                                       I.Q_1_DP_ORG_BASIC_FC_AMOUNT,
                                       I.EMP_JOIN_DT,
                                       I.EMP_ANAL_CODE_1,
                                       M_NO_DAYS_PRSNT ,
                                       M_ORG_BAS,
                                       M_ACT_BAS,
                                       M_OT_HRS ,
                                       M_HRA    ,
                                       M_EARN_1 ,
                                       M_EARN_2 ,
                                       M_EARN_3 ,
                                       M_EARN_4 ,
                                       M_EARN_5 ,
                                       M_EARN_OTH,
                                       M_TOT_GROSS_EARN,
                                       M_NET_SAL      ,
                                       M_DBASIC       ,
                                       M_OT1          ,
                                       M_HRAD         ,
                                       M_DED_1        ,
                                       M_DED_2        ,
                                       M_DED_3        ,
                                       M_DED_4        ,
                                       M_DED_5        ,
                                       M_DED_OTH      ,
                                       M_TOT_GROSS_DED,M_EARN_6 ,
                                       M_EARN_7 ,
                                       M_EARN_8 ,
                                       M_EARN_9 ,
                                       M_EARN_10,
                                       M_EARN_11 ,
                                       M_EARN_12 ,
                                       M_EARN_13 ,
                                       M_EARN_14 ,
                                       M_EARN_15,
                                       M_DED_6        ,
                                       M_DED_7        ,
                                       M_DED_8        ,
                                       M_DED_9        ,
                                       M_DED_10        ,
                                       M_DED_11        ,
                                       M_DED_12        ,
                                       M_DED_13        ,
                                       M_DED_14        ,
                                       M_DED_15,
                                       I.EMPY_PAY_MODE);


  -- END LOOP;
 ---  END LOOP;
   END LOOP;

END P_PRE_PAYROLL;



PROCEDURE P_FINAL_PAYROLL ( P_COMP_CODE     IN VARCHAR2,
                            P_REP_KEY_NO    IN NUMBER,
                            P_FM_EMP        IN VARCHAR2,
                            P_TO_EMP        IN VARCHAR2,
                            P_FM_DIVN       IN VARCHAR2,
                            P_TO_DIVN       IN VARCHAR2,
                            P_FM_DEPT       IN VARCHAR2,
                            P_TO_DEPT       IN VARCHAR2,
                            P_FM_LOCN       IN VARCHAR2,
                            P_TO_LOCN       IN VARCHAR2,
                            P_FM_CC         IN VARCHAR2,
                            P_TO_CC         IN VARCHAR2,
                            P_FM_CONT_TYPE  IN VARCHAR2,
                            P_TO_CONT_TYPE  IN VARCHAR2,
                            P_FM_COUNTRY    IN VARCHAR2,
                            P_TO_COUNTRY    IN VARCHAR2,
                            P_FM_CURR       IN VARCHAR2,
                            P_TO_CURR       IN VARCHAR2,
                            P_PROC_MTH      IN NUMBER,
                            P_MODE_TYPE     IN VARCHAR2,
                            P_PAY_TYPE      IN VARCHAR2,
                            P_SAL_YN        IN VARCHAR2,
                            P_PYBSDYFLAG_EA IN VARCHAR2 ) IS
MM_LANG_CODE VARCHAR2(240);

CURSOR C_FINAL_PAY IS
      SELECT DISTINCT DEPT_DIVN_CODE ,DECODE(MM_LANG_CODE,'ENG',DIVN_NAME, 'LANG_01',DIVN_NAME_LANG_01, 'LANG_02', DIVN_NAME_LANG_02, 'LANG_03', DIVN_NAME_LANG_03, 'LANG_04',
              DIVN_NAME_LANG_04, 'LANG_05', DIVN_NAME_LANG_05, 'LANG_06',DIVN_NAME_LANG_06, 'LANG_07',DIVN_NAME_LANG_07, 'LANG_08',DIVN_NAME_LANG_08,
              'LANG_09',DIVN_NAME_LANG_09, 'LANG_10', DIVN_NAME_LANG_10)  Q_1_DIVN_NAME,
               DEPT_CODE Q_1_DEPT_CODE,DEPT_CODE C_DEPT_CODE,
               DECODE(MM_LANG_CODE,'ENG',DEPT_NAME, 'LANG_01',DEPT_NAME_LANG_01, 'LANG_02', DEPT_NAME_LANG_02, 'LANG_03', DEPT_NAME_LANG_03, 'LANG_04',
              DEPT_NAME_LANG_04, 'LANG_05', DEPT_NAME_LANG_05, 'LANG_06',DEPT_NAME_LANG_06, 'LANG_07',DEPT_NAME_LANG_07, 'LANG_08',DEPT_NAME_LANG_08,
              'LANG_09',DEPT_NAME_LANG_09, 'LANG_10', DEPT_NAME_LANG_10)  Q_1_DEPT_NAME,
              DECODE(MM_LANG_CODE,'ENG',DEPT_NAME, 'LANG_01',DEPT_NAME_LANG_01, 'LANG_02', DEPT_NAME_LANG_02, 'LANG_03', DEPT_NAME_LANG_03, 'LANG_04',
              DEPT_NAME_LANG_04, 'LANG_05', DEPT_NAME_LANG_05, 'LANG_06',DEPT_NAME_LANG_06, 'LANG_07',DEPT_NAME_LANG_07, 'LANG_08',DEPT_NAME_LANG_08,
              'LANG_09',DEPT_NAME_LANG_09, 'LANG_10', DEPT_NAME_LANG_10)  C_DEPT_NAME,FP_EMP_CODE Q_1_DP_EMP_CODE1,
             DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',
             EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',
             EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) EMP_NAME ,
             FP_ORG_BASIC_FC_AMOUNT Q_1_DP_ORG_BASIC_FC_AMOUNT,FP_CURR_CODE Q_1_DP_CURR_CODE,
             EMP_JOIN_DT,EMP_ANAL_CODE_1  ,
             Decode(EMPY_PAY_MODE,'B','Bank','C','Cash','Q','Cheque') EMPY_PAY_MODE  -- ADDED BY PARTHA     BHG_INT-1443833
      FROM      FM_DEPARTMENT, FM_DIVISION,PS_FINAL_PROC , PM_EMP_PAY,  PM_EMP_KEY
      WHERE  DEPT_COMP_CODE   = P_COMP_CODE
      AND       DEPT_CODE        = FP_DEPT_CODE
      AND       DEPT_DIVN_CODE   = FP_DIVN_CODE
      AND    FP_COMP_CODE     =  DEPT_COMP_CODE
      AND       FP_EMP_CODE     BETWEEN P_FM_EMP   AND P_TO_EMP
      AND       FP_DIVN_CODE    BETWEEN P_FM_DIVN  AND P_TO_DIVN
      AND    FP_DEPT_CODE    BETWEEN P_FM_DEPT  AND P_TO_DEPT
      AND       FP_LOCN_CODE    BETWEEN P_FM_LOCN    AND P_TO_LOCN
      AND    FP_CC_CODE      BETWEEN P_FM_CC  AND P_TO_CC
      AND       FP_CONT_TYPE_CODE   BETWEEN P_FM_CONT_TYPE AND P_TO_CONT_TYPE
      AND       NVL(FP_CNTRY_CODE,P_FM_COUNTRY)  BETWEEN  P_FM_COUNTRY  AND  P_TO_COUNTRY
      AND    EMPY_COMP_CODE = DEPT_COMP_CODE
      AND    EMPY_CODE      = FP_EMP_CODE
      AND    EMPY_PAY_TYPE  = DECODE(P_PAY_TYPE, 'H' , 'H' ,'D' , 'D','M' , 'M','A' , EMPY_PAY_TYPE)
      AND    EMPY_PAY_MODE  = DECODE (NVL(P_MODE_TYPE,'A'), 'C', 'C', 'B', 'B', 'Q', 'Q', 'A', EMPY_PAY_MODE)
      AND    DIVN_COMP_CODE = P_COMP_CODE
      AND    DIVN_CODE  = DEPT_DIVN_CODE
      AND    EMPY_CODE  = EMP_CODE
      AND       EMP_COMP_CODE = P_COMP_CODE
      AND    NVL(EMP_PROC_FLAG,'Z') = 'Y'
      AND    (EMP_STATUS IN('1','2','3','9')  OR EMP_END_OF_SERVICE_DT >  LAST_DAY(TO_DATE(P_PROC_MTH, 'YYYYMM') ))/*Above line commented added by Rajasekar on 24/07/2007 for SDRS-170082*/
      AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
      AND    NOT EXISTS (SELECT PARA_VALUE FROM PM_COMP_PARAMETER WHERE PARA_COMP_CODE = P_COMP_CODE AND PARA_CODE = 'RSGEMPFEG' AND PARA_VALUE = 'N'
      AND    EXISTS (SELECT 'X' FROM PS_FINAL_PROC_EOS WHERE FP_EMP_CODE = EMP_CODE AND FP_PROC_MTH = P_PROC_MTH) )
      AND    ( DECODE(NVL(EMP_LVSAL_PROC_YN,'N'),'Y','Y','N','N')  <> P_SAL_YN
      OR     NVL(EMP_LVSAL_PROC_YN,'P')  = P_SAL_YN)
      ORDER BY DEPT_DIVN_CODE, DEPT_CODE ,FP_EMP_CODE;

   M_NO_OF_DAYS_LEAVE                PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_DAYS_LV_DURING_CPMTH      PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_SL_LV_DAYS                    PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_DAYS_LWP_DURING_CPMTH     PW_FS.NO_OF_DAYS%TYPE;
   P_STATUS                          PW_FS.FLAG%TYPE := NULL;
   P_NO_OF_DAYS_OR_HRS_PRESENT       PW_FS.NO_OF_DAYS%TYPE; -- No. of days Absent
   M_NO_OF_DAY_BET_PERIOD  PW_FS.NO_OF_DAYS%TYPE; -- Total No. of days between Eff. dates
   M_NO_OF_DAYS_IN_MONTH   PW_FS.NO_OF_DAYS%TYPE; -- Total No. of days in Month

CURSOR B3 IS
        SELECT TO_DATE(PARA_VALUE, 'DD/MM/YYYY')
        FROM   PM_COMP_PARAMETER
        WHERE  PARA_CODE = 'CPFMDT'
        AND    PARA_COMP_CODE = P_COMP_CODE;

CURSOR B4 IS
        SELECT TO_DATE(PARA_VALUE, 'DD/MM/YYYY')
        FROM   PM_COMP_PARAMETER
        WHERE  PARA_CODE = 'CPTODT'
        AND    PARA_COMP_CODE = P_COMP_CODE;

CURSOR B5 IS
        SELECT TO_DATE(PARA_VALUE, 'DD/MM/YYYY')
        FROM   PM_COMP_PARAMETER
        WHERE  PARA_CODE = 'CPCOFFDT'
        AND    PARA_COMP_CODE = P_COMP_CODE;

CURSOR B6 IS
        SELECT TO_DATE(PARA_VALUE, 'DD/MM/YYYY')
        FROM   PM_COMP_PARAMETER
        WHERE  PARA_CODE = 'PRCOFFDT'
        AND    PARA_COMP_CODE = P_COMP_CODE;

CURSOR B7 IS
        SELECT NVL(PARA_VALUE,'N')
        FROM   PM_COMP_PARAMETER
        WHERE  PARA_CODE = 'OT_MIN_REP'
        AND    PARA_COMP_CODE = P_COMP_CODE;

CURSOR C_GET_NO_OF_DAYS_PRESENT(P_EMP_CODE IN VARCHAR2,P_PROC_START_DT IN DATE,P_PROC_END_DT IN DATE) IS
      SELECT SUM(NVL(ATND_HRS_DAYS,0))
      FROM   PT_ATTENDANCE_DETAIL , PT_ATTENDANCE_HEAD
      WHERE  ATNH_COMP_CODE       = P_COMP_CODE
      AND    ATND_ATNH_SYS_ID     = ATNH_SYS_ID
      AND    ATND_EMP_CODE        = P_EMP_CODE
      AND    ATNH_APPR_UID IS NOT NULL
      AND    ATND_DT      BETWEEN   P_PROC_START_DT AND P_PROC_END_DT ;

CURSOR C1(P_EMP_CODE IN VARCHAR2,P_PROC_START_DT IN DATE,P_PROC_END_DT IN DATE) IS
      SELECT   NVL(LVAP_LWP_PAY_DAYS,0)
      FROM   PT_LEAVE_APPLICATION_HEAD, PT_LEAVE_SICK_PAY_CALC, PM_EMP_LEAVE , PM_LEAVE
      WHERE   LVAH_COMP_CODE                 = P_COMP_CODE
      AND   LVAH_EMP_CODE                  = P_EMP_CODE
      AND   LVAH_SYS_ID                = LVAP_LVAH_SYS_ID
      AND   LVAP_FHNL_L   = 'L'
        AND   LVAH_APPR_UID  IS NOT NULL
      AND   LVAH_CANC_UID IS NULL
      AND   EMPL_CODE                  = P_EMP_CODE
      AND   LVAH_LV_CATG_CODE          = EMPL_LV_CATG_CODE
      AND   LVAH_DT         BETWEEN P_PROC_START_DT AND P_PROC_END_DT
      AND   EMPL_LV_CATG_CODE          = LV_CATG_CODE
      AND   LV_TYPE_CODE               = '3';

CURSOR C_EMP_LV_AND_RESUMPTION_DTLS(P_EMP_CODE IN VARCHAR2,P_PROC_START_DT IN DATE,P_PROC_END_DT IN DATE) IS
      SELECT 'W' A_LR_TYPE ,LWP_FROM_DT A_START_DT ,LWP_UPTO_DT A_END_DT ,
              TO_DATE('') A_RESUMPTION_DT,LWP_DAYS A_NO_OF_DAYS_LEAVE
      FROM   PT_LWP
      WHERE  LWP_COMP_CODE             = P_COMP_CODE
      AND    LWP_EMP_CODE              = P_EMP_CODE
      AND  ((LWP_FROM_DT               BETWEEN P_PROC_START_DT AND P_PROC_END_DT
             OR LWP_UPTO_DT           BETWEEN P_PROC_START_DT AND P_PROC_END_DT )
             OR (P_PROC_START_DT                BETWEEN LWP_FROM_DT  AND LWP_UPTO_DT
                 OR P_PROC_END_DT             BETWEEN LWP_FROM_DT AND LWP_UPTO_DT))
      AND    LWP_APPR_UID  IS NOT NULL
      AND    LWP_REF_SYS_ID IS NULL --added by deebak on 29/08/2007 for ECAR-175836 (mukthar)
      UNION
      SELECT 'L' A_LR_TYPE,LVAH_APPR_START_DT A_START_DT,NVL(LVAH_RESU_DT,LVAH_APPR_END_DT)A_END_DT              ,
              TO_DATE('')A_RESUMPTION_DT ,LVAH_APPR_DAYS A_NO_OF_DAYS_LEAVE
      FROM   PT_LEAVE_APPLICATION_HEAD  , PM_EMP_LEAVE , PM_LEAVE
      WHERE  LVAH_COMP_CODE             = P_COMP_CODE
      AND    LVAH_EMP_CODE              = P_EMP_CODE
      AND  ( LVAH_APPR_START_DT         BETWEEN P_PROC_START_DT AND P_PROC_END_DT
              OR LVAH_APPR_END_DT           BETWEEN P_PROC_START_DT AND P_PROC_END_DT
              OR P_PROC_START_DT  BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
              OR P_PROC_END_DT    BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
              OR LVAH_RESU_DT               BETWEEN P_PROC_START_DT AND P_PROC_END_DT
              OR LVAH_RESU_DT IS NULL )
      AND (DECODE(NVL(LV_RESU_REQD_YN,'N'),'N',LVAH_APPR_END_DT,LVAH_RESU_DT)<= DECODE(NVL(LV_RESU_REQD_YN,'N'),'N',P_PROC_END_DT,LVAH_APPR_END_DT)
              OR P_PROC_START_DT  BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
              OR P_PROC_END_DT    BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
              OR LVAH_APPR_END_DT BETWEEN P_PROC_START_DT AND P_PROC_END_DT)
      AND    LVAH_EMP_CODE              = EMPL_CODE
      AND    LVAH_APPR_UID  IS NOT NULL
      AND    LVAH_LV_CATG_CODE          = EMPL_LV_CATG_CODE
      AND    EMPL_LV_CATG_CODE          = LV_CATG_CODE
      AND (LVAH_CANC_UID IS NULL AND LVAH_CANC_DT IS NULL)
      UNION -- union added by yasharth on 16-Aug-2006 for issue ALFOZAN-121913 start(for late resumption)
      SELECT 'L' A_LR_TYPE,LVAH_APPR_START_DT A_START_DT,NVL(LVAH_RESU_DT,LVAH_APPR_END_DT)            A_END_DT              ,
              TO_DATE('')                  A_RESUMPTION_DT,LVAH_APPR_DAYS A_NO_OF_DAYS_LEAVE
      FROM   PT_LEAVE_APPLICATION_HEAD  , PM_EMP_LEAVE , PM_LEAVE,PT_LEAVE_RESU_HEAD
      WHERE  LVAH_COMP_CODE             = P_COMP_CODE
      AND    LVAH_EMP_CODE              = P_EMP_CODE
      AND  ( LVAH_APPR_START_DT         BETWEEN P_PROC_START_DT AND P_PROC_END_DT
              OR LVAH_APPR_END_DT           BETWEEN P_PROC_START_DT AND P_PROC_END_DT
              OR P_PROC_START_DT  BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
              OR P_PROC_END_DT    BETWEEN LVAH_APPR_START_DT AND LVAH_APPR_END_DT
              OR LVAH_RESU_DT               BETWEEN P_PROC_START_DT AND P_PROC_END_DT
              OR LVAH_RESU_DT IS NULL )
      AND LVAH_RESU_DT > LVAH_APPR_END_DT
      AND LVAH_TXN_CODE = LVRH_REF_TXN_CODE
      AND LVAH_NO          = LVRH_REF_NO
      AND LVAH_SYS_ID   = LVRH_REF_SYS_ID
      AND LVRH_APPR_UID IS NOT NULL
      AND LVAH_EMP_CODE = LVRH_EMP_CODE
      AND    LVAH_EMP_CODE              = EMPL_CODE
      AND    LVAH_APPR_UID  IS NOT NULL
      AND    LVAH_LV_CATG_CODE          = EMPL_LV_CATG_CODE
      AND    EMPL_LV_CATG_CODE          = LV_CATG_CODE
      AND (LVAH_CANC_UID IS NULL AND LVAH_CANC_DT IS NULL);-- end


   M_NO_DAYS_PRSNT        NUMBER;

     M_NAME      VARCHAR2(240);
  M_EMP_CODE  VARCHAR2(12);
  M_ORG_BASIC      NUMBER(13,3);
  M_ORG_BAS      NUMBER(13,3);
  M_ACT_BASIC      NUMBER(13,3);
  M_ACT_BAS     NUMBER(13,3);
  M_PR_HRA        NUMBER;
  M_PR_HRAD        NUMBER;
  M_HRAD         NUMBER;
  M_HRA          NUMBER;
  M_PR_DBASIC    NUMBER;
  M_DBASIC       NUMBER;
  M_PR_OT1       NUMBER;
  M_OT1          NUMBER;
  M_PR_OT2       NUMBER;
  M_PR_EARN_1    VARCHAR2(12);
  M_EARN_1       VARCHAR2(12);
  M_PR_EARN_2    VARCHAR2(12);
  M_EARN_2       VARCHAR2(12);
  M_PR_EARN_3    VARCHAR2(12);
  M_EARN_3       VARCHAR2(12);
  M_PR_EARN_4    VARCHAR2(12);
  M_EARN_4       VARCHAR2(12);
  M_PR_EARN_5    VARCHAR2(12);
  M_PR_EARN_6    VARCHAR2(12);
  M_EARN_5       VARCHAR2(12);
  M_EARN_6       VARCHAR2(12);
  M_PR_EARN_7    VARCHAR2(12);
  M_EARN_7       VARCHAR2(12);
  M_PR_EARN_8    VARCHAR2(12);
  M_EARN_8       VARCHAR2(12);
  M_PR_EARN_9    VARCHAR2(12);
  M_EARN_9       VARCHAR2(12);
  M_PR_EARN_10    VARCHAR2(12);
  M_EARN_10       VARCHAR2(12);
  M_EARN_11       VARCHAR2(12);
  M_PR_EARN_11    VARCHAR2(12);
  M_PR_EARN_12    VARCHAR2(12);
  M_EARN_12       VARCHAR2(12);
  M_PR_EARN_13    VARCHAR2(12);
  M_EARN_13       VARCHAR2(12);
  M_PR_EARN_14    VARCHAR2(12);
  M_EARN_14       VARCHAR2(12);
  M_PR_EARN_15    VARCHAR2(12);
  M_EARN_15       VARCHAR2(12);
  M_PR_DED_1     VARCHAR2(12);
  M_DED_1        VARCHAR2(12);
  M_PR_DED_2     VARCHAR2(12);
  M_DED_2        VARCHAR2(12);
  M_PR_DED_3     VARCHAR2(12);
  M_DED_3        VARCHAR2(12);
  M_PR_DED_4     VARCHAR2(12);
  M_DED_4        VARCHAR2(12);
  M_PR_DED_5     VARCHAR2(12);
  M_DED_5        VARCHAR2(12);
  M_PR_DED_6     VARCHAR2(12);
  M_DED_6        VARCHAR2(12);
  M_PR_DED_7     VARCHAR2(12);
  M_DED_7        VARCHAR2(12);
  M_PR_DED_8     VARCHAR2(12);
  M_DED_8        VARCHAR2(12);
  M_PR_DED_9     VARCHAR2(12);
  M_DED_9        VARCHAR2(12);
  M_PR_DED_10     VARCHAR2(12);
  M_DED_10        VARCHAR2(12);
  M_PR_DED_11     VARCHAR2(12);
  M_DED_11        VARCHAR2(12);
  M_PR_DED_12     VARCHAR2(12);
  M_DED_12        VARCHAR2(12);
  M_PR_DED_13     VARCHAR2(12);
  M_DED_13        VARCHAR2(12);
  M_PR_DED_14     VARCHAR2(12);
  M_DED_14        VARCHAR2(12);
  M_PR_DED_15     VARCHAR2(12);
  M_DED_15        VARCHAR2(12);
  M_PR_EARN_OTH  NUMBER;
  M_EARN_OTH     NUMBER;
  M_PR_DED_OTH   NUMBER;
  M_DED_OTH      NUMBER;
  M_TOT_GROSS_EARN NUMBER;
  M_TOT_GROSS_DED  NUMBER;
  M_NET_SAL        NUMBER;

  M_BP_VALUE     VARCHAR2(100);

  M_PR_EARN_1_CODE VARCHAR2(12);
  M_PR_EARN_2_CODE VARCHAR2(12);
  M_PR_EARN_3_CODE VARCHAR2(12);
  M_PR_EARN_4_CODE VARCHAR2(12);
  M_PR_EARN_5_CODE VARCHAR2(12);
  M_PR_EARN_6_CODE VARCHAR2(12);
  M_PR_EARN_7_CODE VARCHAR2(12);
  M_PR_EARN_8_CODE VARCHAR2(12);
  M_PR_EARN_9_CODE VARCHAR2(12);
  M_PR_EARN_10_CODE VARCHAR2(12);
  M_PR_EARN_11_CODE VARCHAR2(12);
  M_PR_EARN_12_CODE VARCHAR2(12);
  M_PR_EARN_13_CODE VARCHAR2(12);
  M_PR_EARN_14_CODE VARCHAR2(12);
  M_PR_EARN_15_CODE VARCHAR2(12);

  M_PR_DED_1_CODE VARCHAR2(12);
  M_PR_DED_2_CODE VARCHAR2(12);
  M_PR_DED_3_CODE VARCHAR2(12);
  M_PR_DED_4_CODE VARCHAR2(12);
  M_PR_DED_5_CODE VARCHAR2(12);
  M_PR_DED_6_CODE VARCHAR2(12);
  M_PR_DED_7_CODE VARCHAR2(12);
  M_PR_DED_8_CODE VARCHAR2(12);
  M_PR_DED_9_CODE VARCHAR2(12);
  M_PR_DED_10_CODE VARCHAR2(12);
  M_PR_DED_11_CODE VARCHAR2(12);
  M_PR_DED_12_CODE VARCHAR2(12);
  M_PR_DED_13_CODE VARCHAR2(12);
  M_PR_DED_14_CODE VARCHAR2(12);
  M_PR_DED_15_CODE VARCHAR2(12);

CURSOR ALLW_EARN(P_DEPT_DIVN IN VARCHAR2,P_DEPT_CODE IN VARCHAR2) IS
        SELECT DISTINCT ALLW_CODE
        FROM   PS_FINAL_PROC,PM_ALLOWANCE
        WHERE  FP_COMP_CODE    = P_COMP_CODE
        AND    FP_ALLW_CODE    = ALLW_CODE
        AND    ALLW_EARN_DEDUC = 'E'
        AND    FP_DIVN_CODE    = P_DEPT_DIVN
        AND    FP_DEPT_CODE    = P_DEPT_CODE
        AND    FP_PROC_MTH     = P_PROC_MTH
--     AND    DP_EMP_CODE     = :Q_1_DP_EMP_CODE1--ADDED ON 20/01/2004
        AND    ALLW_TYPE > 4
        ORDER BY ALLW_CODE;

CURSOR ALLW_DED (P_DEPT_DIVN IN VARCHAR2,P_DEPT_CODE IN VARCHAR2)IS
         SELECT DISTINCT ALLW_CODE
        FROM   PS_FINAL_PROC,PM_ALLOWANCE
        WHERE  FP_COMP_CODE    = P_COMP_CODE
        AND    FP_ALLW_CODE    =ALLW_CODE
        AND    ALLW_EARN_DEDUC = 'D'
        AND    FP_DIVN_CODE    = P_DEPT_DIVN
        AND    FP_DEPT_CODE    = P_DEPT_CODE
        AND    FP_PROC_MTH     = P_PROC_MTH
--     AND    DP_EMP_CODE     = :Q_1_DP_EMP_CODE1--ADDED ON 20/01/2004
--     AND    ALLW_TYPE > 4 COMMENTED BY ASHIK FOR THE ISSUE HANCO-607212 ON 09/OCT/2011
        AND    ALLW_TYPE > 2 -- ADDED BY ASHIK FOR THE ISSUE HANCO-607212 ON 09/OCT/2011
        ORDER  BY ALLW_CODE;

CURSOR EMP_OT_HRS(P_EMP_CODE IN VARCHAR2,P_PROC_START_DT IN DATE,P_PROC_END_DT IN DATE,P_PRVOFF_DT IN DATE,P_CUTOFF_DT IN DATE ) IS
        SELECT SUM(NVL(OTD_TOTAL_OT_HRS, 0)) "TOTAL_OT_HRS"
      FROM   PT_OVERTIME_DETAIL,PT_OVERTIME_HEAD
      WHERE  OTH_COMP_CODE  = P_COMP_CODE
      AND    OTD_OTH_SYS_ID = OTH_SYS_ID
      AND    OTD_EMP_CODE   = P_EMP_CODE
      AND    (OTD_DT      BETWEEN P_PRVOFF_DT AND P_PROC_START_DT
                            OR    OTD_DT  BETWEEN P_PROC_START_DT  AND P_CUTOFF_DT)
      AND    OTH_APPR_UID IS NOT NULL;

CURSOR EMP_NAME(P_EMP_CODE IN VARCHAR2) IS
        SELECT DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01',EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04',
              EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',EMP_NAME_LANG_06, 'LANG_07',EMP_NAME_LANG_07, 'LANG_08',EMP_NAME_LANG_08,
              'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10)
      FROM   PM_EMP_KEY
      WHERE  EMP_COMP_CODE = P_COMP_CODE
      AND    EMP_CODE      = P_EMP_CODE;

CURSOR EMP_ORG_BASIC(P_EMP_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(EMPA_LC_AMOUNT),0)
      FROM   PM_EMP_ALLOWANCE , PM_ALLOWANCE
      WHERE  EMPA_COMP_CODE = P_COMP_CODE
        AND    EMPA_CODE      = P_EMP_CODE
      AND    ALLW_CODE      = EMPA_ALLW_CODE
        AND    EMPA_EXCLUDE_FROM_DT IS NULL
        AND    EMPA_EXCLUDE_UPTO_DT IS NULL
      AND    ALLW_TYPE      = '1'
      AND    EMPA_FRZ_FLAG ='N';

CURSOR EMP_ACT_BASIC(P_EMP_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
      FROM   PS_FINAL_PROC , PM_ALLOWANCE
      WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE  = P_EMP_CODE
      AND    ALLW_CODE    = FP_ALLW_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_EARN_DEDUC = 'E'   -- Added on 20/4/2004
        AND    ALLW_TYPE    = '1';


CURSOR EMP_HRA(P_EMP_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC  , PM_ALLOWANCE
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE  = P_EMP_CODE
        AND    ALLW_CODE    = FP_ALLW_CODE
        AND       FP_PROC_MTH  = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND       FP_EARN_DEDUC = 'E'
        AND    ALLW_TYPE = '2';


CURSOR EMP_HRAD(P_EMP_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC  , PM_ALLOWANCE
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND    ALLW_CODE   = FP_ALLW_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    ALLW_TYPE = '2'
        AND       FP_EARN_DEDUC = 'D';

CURSOR EMP_DBASIC(P_EMP_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC  , PM_ALLOWANCE
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND    ALLW_CODE   = FP_ALLW_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    ALLW_TYPE = '1'
        AND       FP_EARN_DEDUC = 'D';

    --The Below cursor is added by Rajendra for issue ALFOZAN-120388 on 04-Aug-2006
CURSOR EMP_OT1(P_EMP_CODE IN VARCHAR2) IS
        SELECT  NVL(SUM(FP_FC_AMOUNT),0)
        FROM    PS_FINAL_PROC , PM_ALLOWANCE
        WHERE   FP_COMP_CODE = P_COMP_CODE
        AND     FP_EMP_CODE  = P_EMP_CODE
        AND     ALLW_CODE    = FP_ALLW_CODE
        AND        FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND     FP_EARN_DEDUC = 'E'
        AND     ALLW_TYPE = '3';

CURSOR EMP_EARN_1(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
      FROM   PS_FINAL_PROC,
               PM_ALLOWANCE    --Added on 20/02/2004
      WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE  = P_EMP_CODE
        AND    FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_EARN_DEDUC = 'E'          -- Added on 20/2/2004
        AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20/2/2004
        AND    FP_ALLW_CODE = P_ALLW_CODE;


CURSOR EMP_EARN_2(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC,
           PM_ALLOWANCE                -- Added on 20th Feb 2004
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_EARN_DEDUC = 'E'          -- Added on 20th feb 2004
        AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20th FEB 2004
        AND    FP_ALLW_CODE = P_ALLW_CODE;


CURSOR EMP_EARN_3(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
         FROM   PS_FINAL_PROC,
               PM_ALLOWANCE           --   Added on 20/2/2004
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_EARN_DEDUC = 'E'          -- Added on 20th feb 2004
        AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20th feb 2004
        AND    FP_ALLW_CODE = P_ALLW_CODE;

CURSOR EMP_EARN_4(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC,
           PM_ALLOWANCE             --Added 20/2/2004
        WHERE  FP_COMP_CODE  = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_EARN_DEDUC = 'E'          -- Added on 20/2/2004
        AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20/2/2004
          AND    FP_ALLW_CODE = P_ALLW_CODE;


CURSOR EMP_EARN_5(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_ALLW_CODE = P_ALLW_CODE;

CURSOR EMP_EARN_6(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
      FROM   PS_FINAL_PROC,
               PM_ALLOWANCE    --Added on 20/02/2004
      WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE  = P_EMP_CODE
        AND    FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_EARN_DEDUC = 'E'          -- Added on 20/2/2004
        AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20/2/2004
        AND    FP_ALLW_CODE = P_ALLW_CODE;


CURSOR EMP_EARN_7(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC,
           PM_ALLOWANCE                -- Added on 20th Feb 2004
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_EARN_DEDUC = 'E'          -- Added on 20th feb 2004
        AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20th FEB 2004
        AND    FP_ALLW_CODE = P_ALLW_CODE;


CURSOR EMP_EARN_8(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
         FROM   PS_FINAL_PROC,
               PM_ALLOWANCE           --   Added on 20/2/2004
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_EARN_DEDUC = 'E'          -- Added on 20th feb 2004
        AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20th feb 2004
        AND    FP_ALLW_CODE = P_ALLW_CODE;

CURSOR EMP_EARN_9(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC,
           PM_ALLOWANCE             --Added 20/2/2004
        WHERE  FP_COMP_CODE  = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_EARN_DEDUC = 'E'          -- Added on 20/2/2004
        AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20/2/2004
          AND    FP_ALLW_CODE = P_ALLW_CODE;


CURSOR EMP_EARN_10(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_ALLW_CODE = P_ALLW_CODE;
-- FOR ALKHAMIS ISSUE
CURSOR EMP_EARN_11(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
      FROM   PS_FINAL_PROC,
               PM_ALLOWANCE    --Added on 20/02/2004
      WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE  = P_EMP_CODE
        AND    FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_EARN_DEDUC = 'E'          -- Added on 20/2/2004
        AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20/2/2004
        AND    FP_ALLW_CODE = P_ALLW_CODE;


CURSOR EMP_EARN_12(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC,
           PM_ALLOWANCE                -- Added on 20th Feb 2004
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_EARN_DEDUC = 'E'          -- Added on 20th feb 2004
        AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20th FEB 2004
        AND    FP_ALLW_CODE = P_ALLW_CODE;


CURSOR EMP_EARN_13(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
         FROM   PS_FINAL_PROC,
               PM_ALLOWANCE           --   Added on 20/2/2004
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_EARN_DEDUC = 'E'          -- Added on 20th feb 2004
        AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20th feb 2004
        AND    FP_ALLW_CODE = P_ALLW_CODE;

CURSOR EMP_EARN_14(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC,
           PM_ALLOWANCE             --Added 20/2/2004
        WHERE  FP_COMP_CODE  = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_EARN_DEDUC = 'E'          -- Added on 20/2/2004
        AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20/2/2004
          AND    FP_ALLW_CODE = P_ALLW_CODE;


CURSOR EMP_EARN_15(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_ALLW_CODE = P_ALLW_CODE;


CURSOR EMP_DED_1(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC,
                 PM_ALLOWANCE       --ADDED ON 20/2/2004
        WHERE  FP_COMP_CODE  = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_EARN_DEDUC = 'D'          -- Added on 20/2/2004
        AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20/2/2004
        AND    ALLW_CODE    = P_ALLW_CODE;  --Added on 20/01/2004

CURSOR EMP_DED_2(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC,
           PM_ALLOWANCE              --aDDED ON 20/4/2004
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_EARN_DEDUC = 'D'          -- Added on 20/4/2004
        AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20/4/2004
        AND    ALLW_CODE = P_ALLW_CODE;


CURSOR EMP_DED_3(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_ALLW_CODE = P_ALLW_CODE;



CURSOR EMP_DED_4(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_ALLW_CODE = P_ALLW_CODE;


CURSOR EMP_DED_5(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_ALLW_CODE = P_ALLW_CODE;

CURSOR EMP_DED_6(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC,
                 PM_ALLOWANCE       --ADDED ON 20/2/2004
        WHERE  FP_COMP_CODE  = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_EARN_DEDUC = 'D'          -- Added on 20/2/2004
        AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20/2/2004
        AND    ALLW_CODE    = P_ALLW_CODE;  --Added on 20/01/2004

CURSOR EMP_DED_7(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC,
           PM_ALLOWANCE              --aDDED ON 20/4/2004
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_EARN_DEDUC = 'D'          -- Added on 20/4/2004
        AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20/4/2004
        AND    ALLW_CODE = P_ALLW_CODE;


CURSOR EMP_DED_8(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_ALLW_CODE = P_ALLW_CODE;



CURSOR EMP_DED_9(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_ALLW_CODE = P_ALLW_CODE;


CURSOR EMP_DED_10(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_ALLW_CODE = P_ALLW_CODE;
-- FOR ALKHAMIS ISSUE

CURSOR EMP_DED_11(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC,
                 PM_ALLOWANCE       --ADDED ON 20/2/2004
        WHERE  FP_COMP_CODE  = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_EARN_DEDUC = 'D'          -- Added on 20/2/2004
        AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20/2/2004
        AND    ALLW_CODE    = P_ALLW_CODE;  --Added on 20/01/2004

CURSOR EMP_DED_12(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC,
           PM_ALLOWANCE              --aDDED ON 20/4/2004
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_EARN_DEDUC = 'D'          -- Added on 20/4/2004
        AND    ALLW_CODE    = FP_ALLW_CODE  -- Added on 20/4/2004
        AND    ALLW_CODE = P_ALLW_CODE;


CURSOR EMP_DED_13(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_ALLW_CODE = P_ALLW_CODE;



CURSOR EMP_DED_14(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_ALLW_CODE = P_ALLW_CODE;


CURSOR EMP_DED_15(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    FP_EMP_CODE = P_EMP_CODE
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_ALLW_CODE = P_ALLW_CODE;


CURSOR EMP_EARN_OTHERS(P_EMP_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC , PM_ALLOWANCE
        WHERE  FP_COMP_CODE = P_COMP_CODE
        AND    ALLW_CODE    = FP_ALLW_CODE
        AND    FP_EMP_CODE  = P_EMP_CODE
        /*AND    FP_LC_AMOUNT NOT IN (M_PR_EARN_1,M_PR_EARN_2,
                   M_PR_EARN_3,M_PR_EARN_4,M_PR_EARN_5,M_PR_EARN_6,M_PR_EARN_7,M_PR_EARN_8,M_PR_EARN_9,M_PR_EARN_10)*/
        AND FP_ALLW_CODE NOT IN (M_PR_EARN_1_CODE, M_PR_EARN_2_CODE, M_PR_EARN_3_CODE,
        M_PR_EARN_4_CODE , M_PR_EARN_5_CODE , M_PR_EARN_6_CODE , M_PR_EARN_7_CODE ,
        M_PR_EARN_8_CODE , M_PR_EARN_9_CODE , M_PR_EARN_10_CODE , M_PR_EARN_11_CODE ,
        M_PR_EARN_12_CODE , M_PR_EARN_13_CODE , M_PR_EARN_14_CODE , M_PR_EARN_15_CODE)
        AND    FP_EARN_DEDUC = 'E'
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    ALLW_TYPE NOT IN ('1','2','3','4') ;


CURSOR EMP_DED_OTHERS(P_EMP_CODE IN VARCHAR2) IS
        SELECT NVL(SUM(FP_LC_AMOUNT),0)
        FROM   PS_FINAL_PROC , PM_ALLOWANCE
        WHERE  FP_COMP_CODE  = P_COMP_CODE
        AND    ALLW_CODE    =  FP_ALLW_CODE
        AND    FP_EMP_CODE  =  P_EMP_CODE
        /*AND    FP_LC_AMOUNT NOT IN (M_PR_DED_1,M_PR_DED_2,
                M_PR_DED_3,M_PR_DED_4,M_PR_DED_5,M_PR_DED_6,M_PR_DED_7,M_PR_DED_8,M_PR_DED_9,M_PR_DED_10) */
        AND   FP_ALLW_CODE NOT IN (M_PR_DED_1_CODE,  M_PR_DED_2_CODE, M_PR_DED_3_CODE,
                        M_PR_DED_4_CODE,  M_PR_DED_5_CODE, M_PR_DED_6_CODE, M_PR_DED_7_CODE ,
                        M_PR_DED_8_CODE , M_PR_DED_9_CODE , M_PR_DED_10_CODE , M_PR_DED_11_CODE ,
                        M_PR_DED_12_CODE , M_PR_DED_13_CODE , M_PR_DED_14_CODE , M_PR_DED_15_CODE)
        AND       FP_PROC_MTH = NVL(P_PROC_MTH,FP_PROC_MTH)
        AND    FP_EARN_DEDUC = 'D'
        AND    ALLW_TYPE NOT IN ('1','2','3','4');

   M_PROC_START_DT  DATE;
   M_PROC_END_DT    DATE;
   M_CUTOFF_DT      DATE;
   M_PRVOFF_DT      DATE;
   M_OT_MIN_REP     VARCHAR2(1);
   M_PAYDAYS        NUMBER;
   M_OT_HRS       NUMBER;
    M_ALLW  VARCHAR2(20);
  CNT     NUMBER(2);
  M_ALLW1 VARCHAR2(20);
  CNT1    NUMBER(2);

  M_PROC_START_DATE DATE;
  M_PROC_END_DATE DATE;
  M_CUTOFF_DATE DATE;

CURSOR C_ALLW IS
SELECT ALLW_CODE,allw_desc ,ALLW_TYPE,ROWNUM FROM
      (SELECT DISTINCT FP_ALLW_CODE ALLW_CODE,DECODE(MM_LANG_CODE,'ENG',allw_desc, 'LANG_01',allw_desc_LANG_01, 'LANG_02', allw_desc_LANG_02, 'LANG_03', allw_desc_LANG_03, 'LANG_04',
              allw_desc_LANG_04, 'LANG_05', allw_desc_LANG_05, 'LANG_06',allw_desc_LANG_06, 'LANG_07',allw_desc_LANG_07, 'LANG_08',allw_desc_LANG_08,
              'LANG_09',allw_desc_LANG_09, 'LANG_10', allw_desc_LANG_10) allw_desc ,ALLW_TYPE
        FROM   PS_FINAL_PROC,PM_ALLOWANCE
        WHERE  FP_COMP_CODE    = P_COMP_CODE
        AND    FP_ALLW_CODE    = ALLW_CODE
        AND    ALLW_EARN_DEDUC = 'E'
        --AND    DP_DIVN_CODE    = P_DEPT_DIVN
        --AND    DP_DEPT_CODE    = P_DEPT_CODE
        AND    FP_EMP_CODE   BETWEEN P_FM_EMP  AND P_TO_EMP
        AND    FP_DIVN_CODE  BETWEEN P_FM_DIVN AND P_TO_DIVN
        AND    FP_DEPT_CODE  BETWEEN P_FM_DEPT AND P_TO_DEPT
        AND    FP_LOCN_CODE  BETWEEN P_FM_LOCN AND P_TO_LOCN
        AND    FP_CC_CODE    BETWEEN P_FM_CC   AND P_TO_CC
        AND    FP_CONT_TYPE_CODE   BETWEEN P_FM_CONT_TYPE AND P_TO_CONT_TYPE
        AND    NVL(FP_CNTRY_CODE,P_FM_COUNTRY)  BETWEEN  P_FM_COUNTRY  AND P_TO_COUNTRY
        AND    FP_PROC_MTH     = P_PROC_MTH
      AND    ALLW_TYPE > 2
        ORDER BY FP_ALLW_CODE,ALLW_TYPE);

CURSOR C_DEDUC IS
SELECT ALLW_CODE,allw_desc ,ALLW_TYPE,ROWNUM FROM
      (SELECT DISTINCT FP_ALLW_CODE ALLW_CODE,DECODE(MM_LANG_CODE,'ENG',allw_desc, 'LANG_01',allw_desc_LANG_01, 'LANG_02', allw_desc_LANG_02, 'LANG_03', allw_desc_LANG_03, 'LANG_04',
              allw_desc_LANG_04, 'LANG_05', allw_desc_LANG_05, 'LANG_06',allw_desc_LANG_06, 'LANG_07',allw_desc_LANG_07, 'LANG_08',allw_desc_LANG_08,
              'LANG_09',allw_desc_LANG_09, 'LANG_10', allw_desc_LANG_10) allw_desc,ALLW_TYPE
        FROM   PS_FINAL_PROC,PM_ALLOWANCE
        WHERE  FP_COMP_CODE    = P_COMP_CODE
        AND    FP_ALLW_CODE    = ALLW_CODE
        AND    ALLW_EARN_DEDUC = 'D'
        --AND    DP_DIVN_CODE    = P_DEPT_DIVN
        --AND    DP_DEPT_CODE    = P_DEPT_CODE
        AND    FP_EMP_CODE   BETWEEN P_FM_EMP  AND P_TO_EMP
        AND    FP_DIVN_CODE  BETWEEN P_FM_DIVN AND P_TO_DIVN
        AND    FP_DEPT_CODE  BETWEEN P_FM_DEPT AND P_TO_DEPT
        AND    FP_LOCN_CODE  BETWEEN P_FM_LOCN AND P_TO_LOCN
        AND    FP_CC_CODE    BETWEEN P_FM_CC   AND P_TO_CC
        AND    FP_CONT_TYPE_CODE   BETWEEN P_FM_CONT_TYPE AND P_TO_CONT_TYPE
        AND    NVL(FP_CNTRY_CODE,P_FM_COUNTRY)  BETWEEN  P_FM_COUNTRY  AND P_TO_COUNTRY
        AND    FP_PROC_MTH     = P_PROC_MTH
     -- AND    ALLW_TYPE > 4
        ORDER BY FP_ALLW_CODE,ALLW_TYPE);


CURSOR D1 IS
SELECT Trunc(To_Date(P_PROC_MTH,'RRRRMM')) FROM DUAL;

CURSOR D2 IS
SELECT LAST_DAY(To_Date(P_PROC_MTH,'RRRRMM')) FROM DUAL;

   CURSOR C2 IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

BEGIN
UPDATE IP_REP_INFO SET REP_VALUE_6 = 'Payroll Register - Final Payroll for month ' | | P_PROC_MTH WHERE REP_KEY_NO = P_REP_KEY_NO;
   DELETE FROM OW_REP_COLS WHERE REP_KEY_NO = P_REP_KEY_NO;

     MM_LANG_CODE := NULL;

    IF C2%ISOPEN THEN
       CLOSE C2;
    END IF;

    OPEN C2;
    FETCH C2 INTO MM_LANG_CODE;
    CLOSE C2;

INSERT INTO OW_REP_COLS
(REP_SYS_ID, REP_NAME, COL_TYPE, COL_NAME, COL_TAB_NAME, COL_LEVEL, COL_LINK_LEVEL, COL_LINK, LINK_COLUMN_YN, COL_SEQ, SUB_WHERE_COND, SUB_TAB_NAME, SUB_RET_NAME, COL_LABEL_NAME, COL_ORDER_YN, COL_ORDER_SEQ, COL_FORMAT_MASK, COL_WIDTH, COL_ORDER_ASC_DESC, COL_MATRIX_TYPE, COL_FORMULA, COL_FOR_DATA_TYPE, REP_TYPE_FLAG, REP_USER_ID, COL_DISP_YN, REP_COL_SYS_ID, COL_ALIGN, COL_CASE, REP_COL_CR_UID, REP_COL_CR_DT, REP_COL_UPD_UID, REP_COL_UPD_DT, COL_LABEL_BL_NAME, COL_FORMULA_YN, COL_EXPORT_WIDTH, COL_EXPORT_WRAP_YN, SUB_CLIENT_ID, SUB_INST_CODE, SUB_SECURITY_CODE, REP_CLIENT_ID, REP_INST_CODE, REP_SECURITY_CODE, LINK_CLIENT_ID, LINK_INST_CODE, LINK_SECURITY_CODE, COL_CLIENT_ID, COL_INST_CODE, COL_SECURITY_CODE, CURR_FORMAT_YN_NUM, CURR_FORMAT_LC_FC, CURR_COL_NAME, REP_KEY_NO,COL_LABEL_NAME_LANG_01,COL_LABEL_NAME_LANG_02,COL_LABEL_NAME_LANG_03,COL_LABEL_NAME_LANG_04,COL_LABEL_NAME_LANG_05,COL_LABEL_NAME_LANG_06,COL_LABEL_NAME_LANG_07,COL_LABEL_NAME_LANG_08,COL_LABEL_NAME_LANG_09,COL_LABEL_NAME_LANG_10)
SELECT REP_SYS_ID, REP_NAME, COL_TYPE, COL_NAME, COL_TAB_NAME, COL_LEVEL, COL_LINK_LEVEL, COL_LINK, LINK_COLUMN_YN, COL_SEQ, SUB_WHERE_COND, SUB_TAB_NAME, SUB_RET_NAME, COL_LABEL_NAME, COL_ORDER_YN, COL_ORDER_SEQ, COL_FORMAT_MASK, COL_WIDTH, COL_ORDER_ASC_DESC, COL_MATRIX_TYPE, COL_FORMULA, COL_FOR_DATA_TYPE, REP_TYPE_FLAG, REP_USER_ID, COL_DISP_YN, REP_COL_SYS_ID, COL_ALIGN, COL_CASE, REP_COL_CR_UID, REP_COL_CR_DT, REP_COL_UPD_UID, REP_COL_UPD_DT, COL_LABEL_BL_NAME, COL_FORMULA_YN, COL_EXPORT_WIDTH, COL_EXPORT_WRAP_YN, SUB_CLIENT_ID, SUB_INST_CODE, SUB_SECURITY_CODE, C.REP_CLIENT_ID, C.REP_INST_CODE, C.REP_SECURITY_CODE, LINK_CLIENT_ID, LINK_INST_CODE, LINK_SECURITY_CODE, COL_CLIENT_ID, COL_INST_CODE, COL_SECURITY_CODE, CURR_FORMAT_YN_NUM, CURR_FORMAT_LC_FC, CURR_COL_NAME, P_REP_KEY_NO,COL_LABEL_NAME_LANG_01,COL_LABEL_NAME_LANG_02,COL_LABEL_NAME_LANG_03,COL_LABEL_NAME_LANG_04,COL_LABEL_NAME_LANG_05,COL_LABEL_NAME_LANG_06,COL_LABEL_NAME_LANG_07,COL_LABEL_NAME_LANG_08,COL_LABEL_NAME_LANG_09,COL_LABEL_NAME_LANG_10 FROM REP_COLS C, IP_REP_INFO WHERE REP_SYS_ID = REP_ID AND  REP_KEY_NO = P_REP_KEY_NO;
COMMIT;
    --DUMMY(1);
   DELETE FROM PW_FINAL_PAYROLL_REGISTER WHERE FPR_REP_KEY_NO = P_REP_KEY_NO;


    IF D1%ISOPEN THEN
      CLOSE D1;
    END IF;

     OPEN D1;
   FETCH D1 INTO M_PROC_START_DATE;
   CLOSE D1;


    IF D2%ISOPEN THEN
      CLOSE D2;
    END IF;

       OPEN D2;
   FETCH D2 INTO M_PROC_END_DATE;
   CLOSE D2;


   IF B3%ISOPEN THEN
      CLOSE B3;
   END IF;

   OPEN B3;
   FETCH B3 INTO M_PROC_START_DT;
   CLOSE B3;
    --DUMMY(2);
   IF B4%ISOPEN THEN
      CLOSE B4;
   END IF;

   OPEN B4;
   FETCH B4 INTO M_PROC_END_DT;
   CLOSE B4;

   IF B5%ISOPEN THEN
      CLOSE B5;
   END IF;

   OPEN B5;
   FETCH B5 INTO M_CUTOFF_DT;
   CLOSE B5;

   IF B6%ISOPEN THEN
      CLOSE B6;
   END IF;

   OPEN B6;
   FETCH B6 INTO M_PRVOFF_DT;
   CLOSE B6;

   IF B7%ISOPEN THEN
      CLOSE B7;
   END IF;

   OPEN B7;
   FETCH B7 INTO M_OT_MIN_REP;
   CLOSE B7;

   FOR I IN C_FINAL_PAY
   LOOP

   P_STATUS := '0' ;
   P_NO_OF_DAYS_OR_HRS_PRESENT := 0;


        IF NVL(P_PYBSDYFLAG_EA, '*') = 'E' THEN
           M_NO_OF_DAYS_IN_MONTH  := M_PAYDAYS ;
        ELSE
             M_NO_OF_DAYS_IN_MONTH := M_PROC_END_DT - M_PROC_START_DT + 1;
          END IF ;

      M_NO_OF_DAY_BET_PERIOD := M_NO_OF_DAYS_IN_MONTH ;
    -- added by yasharth on 16-Aug-2006 for issue ALFOZAN-121913

    IF I.EMP_JOIN_DT BETWEEN M_PROC_START_DT AND M_PROC_END_DT THEN
--        M_NO_OF_DAY_BET_PERIOD := M_NO_OF_DAY_BET_PERIOD - (:EMP_JOIN_DT - M_PROC_START_DT);
-- COMMENTED ABOVE AND ADDED BELOW BY ASHIK FOR THE ISSUE ALFOZAN-310248 ON 21/06/2009
         M_NO_OF_DAY_BET_PERIOD := M_PROC_END_DT - I.EMP_JOIN_DT + 1; -- ASHIK
    END IF;
    -- end

      OPEN  C_GET_NO_OF_DAYS_PRESENT(I.Q_1_DP_EMP_CODE1,M_PROC_START_DT,M_PROC_END_DT );
      FETCH C_GET_NO_OF_DAYS_PRESENT INTO P_NO_OF_DAYS_OR_HRS_PRESENT ;
      CLOSE C_GET_NO_OF_DAYS_PRESENT ;
/*
      OPEN C1;
      FETCH C1 INTO     M_NO_OF_SL_LV_DAYS;
      CLOSE C1;
*/
-- COMMENTED BY ASHIK ON 16-JUL-2013 FOR THE ISSUE AMZ_INT

      P_NO_OF_DAYS_OR_HRS_PRESENT := NVL(P_NO_OF_DAYS_OR_HRS_PRESENT, 0) + NVL(M_NO_OF_SL_LV_DAYS,0);

     IF P_PAY_TYPE IN ('M','T','W','B') THEN -- 'W','B' Added for weekly, biweekly DAF
      --DUMMY(3);
     FOR C_LEAVE_REC IN C_EMP_LV_AND_RESUMPTION_DTLS(I.Q_1_DP_EMP_CODE1,M_PROC_START_DT,M_PROC_END_DT )
      LOOP
    --    DUMMY('FINAL_PAY->'||C_LEAVE_REC.A_LR_TYPE||'<>'||C_LEAVE_REC.A_START_DT||'<>'||C_LEAVE_REC.A_END_DT);
         IF C_LEAVE_REC.A_LR_TYPE = 'L' THEN   -- Leave Details
            IF C_LEAVE_REC.A_START_DT >= M_PROC_START_DT AND
               C_LEAVE_REC.A_END_DT   <=M_PROC_END_DT   THEN
               --Commented by Manjula for ORIONQC-GDC-814532 on 14/02/2006
               /*IF NVL(:CP_ADV_LV_SAL,'N') = 'Y' THEN  -- MEA issues, since salary for the first to leave start paid alrealy
                       M_NO_OF_DAYS_LV_DURING_CPMTH   :=    C_LEAVE_REC.A_END_DT
                                                       - M_PROC_START_DT
                                                       + 1 ;
                ELSE    */
                        M_NO_OF_DAYS_LV_DURING_CPMTH   :=    C_LEAVE_REC.A_END_DT
                                                       - C_LEAVE_REC.A_START_DT
                                                        + 1 ;

                --END IF;
            ELSIF ((C_LEAVE_REC.A_START_DT <= M_PROC_START_DT) AND
                   (C_LEAVE_REC.A_END_DT   >= M_PROC_END_DT)) THEN  -- For the Whole month
                M_NO_OF_DAYS_LV_DURING_CPMTH   := M_PROC_END_DT - M_PROC_START_DT + 1;

            ELSIF C_LEAVE_REC.A_START_DT BETWEEN M_PROC_START_DT AND M_PROC_END_DT THEN
               IF C_LEAVE_REC.A_END_DT > M_PROC_END_DT THEN -- If leave doesn't fall within this Proc. Month
                  M_NO_OF_DAYS_LV_DURING_CPMTH   :=
                                                  ( M_PROC_END_DT  - C_LEAVE_REC.A_START_DT + 1 ) ;
               ELSE
                  M_NO_OF_DAYS_LV_DURING_CPMTH   := NVL(M_NO_OF_DAYS_LV_DURING_CPMTH, 0) +
                                                    M_NO_OF_DAYS_LEAVE ;
               END IF ;

            ELSIF C_LEAVE_REC.A_END_DT BETWEEN M_PROC_START_DT AND M_PROC_END_DT THEN
              M_NO_OF_DAYS_LV_DURING_CPMTH    :=    C_LEAVE_REC.A_END_DT
                                              - M_PROC_START_DT
                                              + 1 ;
            END IF ;
            M_NO_OF_DAYS_LWP_DURING_CPMTH  := NVL( M_NO_OF_DAYS_LWP_DURING_CPMTH ,0) +
                                              NVL(M_NO_OF_DAYS_LV_DURING_CPMTH,0);
            ELSE  -- MEA issues, since salary for the first to leave start paid alrealy

            IF C_LEAVE_REC.A_START_DT >= M_PROC_START_DT AND
               C_LEAVE_REC.A_END_DT   <= M_PROC_END_DT   THEN
                M_NO_OF_DAYS_LV_DURING_CPMTH   :=    C_LEAVE_REC.A_END_DT
                                                     - C_LEAVE_REC.A_START_DT
                                                     + 1 ;
            ELSIF ((C_LEAVE_REC.A_START_DT <= M_PROC_START_DT) AND
                   (C_LEAVE_REC.A_END_DT   >= M_PROC_END_DT)) THEN  -- For the Whole month
                M_NO_OF_DAYS_LV_DURING_CPMTH   := M_PROC_END_DT - M_PROC_START_DT + 1;

            ELSIF C_LEAVE_REC.A_START_DT BETWEEN M_PROC_START_DT AND M_PROC_END_DT THEN

               IF C_LEAVE_REC.A_END_DT > M_PROC_END_DT THEN -- If leave doesn't fall within this Proc. Month
                  M_NO_OF_DAYS_LV_DURING_CPMTH   :=
                                                  ( M_PROC_END_DT  - C_LEAVE_REC.A_START_DT + 1 ) ;
               ELSE
                  M_NO_OF_DAYS_LV_DURING_CPMTH   := NVL(M_NO_OF_DAYS_LV_DURING_CPMTH, 0) +
                                                    M_NO_OF_DAYS_LEAVE ;
               END IF ;

            ELSIF C_LEAVE_REC.A_END_DT BETWEEN M_PROC_START_DT AND M_PROC_END_DT THEN
              M_NO_OF_DAYS_LV_DURING_CPMTH    :=    C_LEAVE_REC.A_END_DT
                                              - M_PROC_START_DT
                                              + 1 ;
            END IF ;
            M_NO_OF_DAYS_LWP_DURING_CPMTH  := NVL( M_NO_OF_DAYS_LWP_DURING_CPMTH ,0) +
                                              NVL(M_NO_OF_DAYS_LV_DURING_CPMTH,0);
       END IF;
      END LOOP ;
          --Total number of days abscent during the period..
      P_NO_OF_DAYS_OR_HRS_PRESENT := NVL(P_NO_OF_DAYS_OR_HRS_PRESENT,0) +
                                     NVL(M_NO_OF_DAYS_LWP_DURING_CPMTH , 0);

      --Total number of days present during the period...
      M_NO_DAYS_PRSNT := NVL((M_NO_OF_DAY_BET_PERIOD - P_NO_OF_DAYS_OR_HRS_PRESENT), 0);

  END IF;
  --DUMMY(5);
  M_NO_DAYS_PRSNT := HRDBP_NO_DAYS_PRESENT_ABSENT(P_COMP_CODE,I.Q_1_DP_EMP_CODE1, P_PROC_MTH,'P');
    --RETURN M_NO_DAYS_PRSNT;
    --DUMMY('123');
    M_CUTOFF_DATE := M_PROC_END_DATE;
   OPEN EMP_OT_HRS(I.Q_1_DP_EMP_CODE1,M_PROC_START_DATE,M_PROC_END_DATE,M_PRVOFF_DT,M_CUTOFF_DATE);
   --DUMMY('M_PRVOFF_DT'||M_PRVOFF_DT||'M_PROC_START_DATE'||M_PROC_START_DATE||'M_PROC_END_DATE'||M_PROC_END_DATE||'M_CUTOFF_DATE'||M_CUTOFF_DATE);
   FETCH EMP_OT_HRS INTO M_OT_HRS;
   CLOSE EMP_OT_HRS;
   --RETURN NVL(M_OT_HRS,0);
   M_OT_HRS := Nvl(M_OT_HRS,0);

   CNT := 1;
   --DUMMY(6);
     FOR J IN ALLW_EARN(I.DEPT_DIVN_CODE,I.Q_1_DEPT_CODE)
     LOOP
      EXIT WHEN CNT > 5 ;
       IF CNT = 1 THEN
         M_PR_EARN_1 := J.ALLW_CODE;
       ELSIF CNT = 2 THEN
         M_PR_EARN_2 := J.ALLW_CODE;
       ELSIF CNT = 3 THEN
         M_PR_EARN_3 := J.ALLW_CODE;
       ELSIF CNT = 4 THEN
         M_PR_EARN_4 := J.ALLW_CODE;
       ELSIF CNT = 5 THEN
         M_PR_EARN_5 := J.ALLW_CODE;
       END IF;
       CNT := CNT + 1 ;

       END LOOP;

     CNT1 := 1;
     --DUMMY(7);
     FOR K IN ALLW_DED(I.DEPT_DIVN_CODE,I.Q_1_DEPT_CODE)
     LOOP
      EXIT WHEN CNT1 > 5;
        IF CNT1 = 1 THEN
           M_PR_DED_1 := K.ALLW_CODE;
        ELSIF CNT1 = 2 THEN
           M_PR_DED_2 := K.ALLW_CODE;
        ELSIF CNT1 = 3 THEN
           M_PR_DED_3 := K.ALLW_CODE;
        ELSIF CNT1 = 4 THEN
           M_PR_DED_4 := K.ALLW_CODE;
        ELSIF CNT1 = 5 THEN
           M_PR_DED_5 := K.ALLW_CODE;
        END IF;
        CNT1 := CNT1 + 1;
      END LOOP;


   /*SRW.REFERENCE(:Q_1_DP_EMP_CODE1);
    SRW.REFERENCE(:CP_PR_EARN_1);
    SRW.REFERENCE(:CP_PR_EARN_2);
    SRW.REFERENCE(:CP_PR_EARN_3);
    SRW.REFERENCE(:CP_PR_EARN_4);
    SRW.REFERENCE(:CP_PR_EARN_5);
    SRW.REFERENCE(:CP_PR_DED_1);
    SRW.REFERENCE(:CP_PR_DED_2);
    SRW.REFERENCE(:CP_PR_DED_3);
    SRW.REFERENCE(:CP_PR_DED_4);
    SRW.REFERENCE(:CP_PR_DED_5);
    SRW.REFERENCE(:CP_ORG_BAS);
    SRW.REFERENCE(:CP_ACT_BAS);
    SRW.REFERENCE(:CF_OT_HRS);
    SRW.REFERENCE(:CP_HRA); */

    --The Below code is added by Rajendra for issue ALFOZAN-120388 on 04-Aug-2006
  --DUMMY(8);
    OPEN EMP_OT1(I.Q_1_DP_EMP_CODE1);
    FETCH EMP_OT1 INTO M_PR_OT1;
    M_OT1 := M_PR_OT1;
    CLOSE EMP_OT1;
    --END

    OPEN  EMP_NAME(I.Q_1_DP_EMP_CODE1) ;
    FETCH EMP_NAME INTO M_NAME;
    CLOSE EMP_NAME;
    M_NAME := SUBSTR(M_NAME,1,30); -- ADDED BY ASHIK FOR THE ISSUE LIGHTSPEED-941501 ON 28-AUG-2013

    OPEN EMP_ORG_BASIC(I.Q_1_DP_EMP_CODE1);
    FETCH EMP_ORG_BASIC INTO M_ORG_BASIC;
    M_ORG_BAS := M_ORG_BASIC;
    CLOSE EMP_ORG_BASIC;

    OPEN EMP_ACT_BASIC(I.Q_1_DP_EMP_CODE1);
    FETCH EMP_ACT_BASIC INTO M_ACT_BASIC;
    M_ACT_BAS := M_ACT_BASIC;
    CLOSE EMP_ACT_BASIC;

    OPEN  EMP_HRA(I.Q_1_DP_EMP_CODE1) ;
    FETCH EMP_HRA INTO M_PR_HRA;
    M_HRA :=  M_PR_HRA;
    CLOSE EMP_HRA;

    OPEN  EMP_HRAD(I.Q_1_DP_EMP_CODE1) ;
    FETCH EMP_HRAD INTO M_PR_HRAD;
    M_HRAD :=  M_PR_HRAD;
    CLOSE EMP_HRAD;

    OPEN  EMP_DBASIC(I.Q_1_DP_EMP_CODE1) ;
    FETCH EMP_DBASIC INTO M_PR_DBASIC;
    M_DBASIC :=  M_PR_DBASIC;
    CLOSE EMP_DBASIC;

--SRW.MESSAGE(0,'HRAD   ' || TO_CHAR(M_PR_HRAD));

    FOR A IN C_ALLW LOOP
     IF A.ROWNUM = 1 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_EARN_1';
     UPDATE IP_REP_INFO SET REP_VALUE_51 = A.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_EARN_1_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
     OPEN  EMP_EARN_1(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE) ;
    FETCH EMP_EARN_1 INTO M_PR_EARN_1;
  IF M_PR_EARN_1 > 0 THEN
      M_EARN_1 := M_PR_EARN_1;
    ELSE
    M_EARN_1 := '' ;
  END IF;
    CLOSE EMP_EARN_1;

     ELSIF  A.ROWNUM = 2 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_EARN_2';
     UPDATE IP_REP_INFO SET REP_VALUE_52 = A.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;

     M_PR_EARN_2_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
         OPEN EMP_EARN_2(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_2 INTO M_PR_EARN_2;
        IF M_PR_EARN_2 > 0 THEN
    M_EARN_2 := M_PR_EARN_2;
    ELSE
    M_EARN_2 := '' ;
        END IF;
    CLOSE EMP_EARN_2;
     ELSIF  A.ROWNUM = 3 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_EARN_3';
     UPDATE IP_REP_INFO SET REP_VALUE_53 = A.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_EARN_3_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_EARN_3(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_3 INTO M_PR_EARN_3;
        IF M_PR_EARN_3 > 0 THEN
    M_EARN_3 := M_PR_EARN_3;
    ELSE
    M_EARN_3 := '' ;
        END IF;
    CLOSE EMP_EARN_3;

     ELSIF  A.ROWNUM = 4 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_EARN_4';
     UPDATE IP_REP_INFO SET REP_VALUE_54 = A.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_EARN_4_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
         OPEN EMP_EARN_4(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_4 INTO M_PR_EARN_4;
        IF M_PR_EARN_4 > 0 THEN
    M_EARN_4 := M_PR_EARN_4;
    ELSE
    M_EARN_4 := '' ;
        END IF;
    CLOSE EMP_EARN_4;

     ELSIF  A.ROWNUM = 5 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_EARN_5';
     UPDATE IP_REP_INFO SET REP_VALUE_55 = A.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
    M_PR_EARN_5_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_EARN_5(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_5 INTO M_PR_EARN_5;
        IF M_PR_EARN_5 > 0 THEN
    M_EARN_5 := M_PR_EARN_5;
    ELSE
    M_EARN_5 := '' ;
        END IF;
    CLOSE EMP_EARN_5;

  ELSIF  A.ROWNUM = 6 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_EARN_6' ;
     UPDATE IP_REP_INFO SET REP_VALUE_56 = A.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
    M_PR_EARN_6_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_EARN_6(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_6 INTO M_PR_EARN_6;
        IF M_PR_EARN_6 > 0 THEN
    M_EARN_6 := M_PR_EARN_6;
    ELSE
    M_EARN_6 := '' ;
        END IF;
    CLOSE EMP_EARN_6;
  ELSIF  A.ROWNUM = 7 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_EARN_7';
     UPDATE IP_REP_INFO SET REP_VALUE_57 = A.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
    M_PR_EARN_7_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_EARN_7(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_7 INTO M_PR_EARN_7;
        IF M_PR_EARN_7 > 0 THEN
    M_EARN_7 := M_PR_EARN_7;
    ELSE
    M_EARN_7 := '' ;
        END IF;
    CLOSE EMP_EARN_7;
  ELSIF  A.ROWNUM = 8 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_EARN_8';
     UPDATE IP_REP_INFO SET REP_VALUE_58 = A.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
    M_PR_EARN_8_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_EARN_8(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_8 INTO M_PR_EARN_8;
        IF M_PR_EARN_8 > 0 THEN
    M_EARN_8 := M_PR_EARN_8;
    ELSE
    M_EARN_8 := '' ;
        END IF;
    CLOSE EMP_EARN_8;
  ELSIF  A.ROWNUM = 9 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_EARN_9' ;
     UPDATE IP_REP_INFO SET REP_VALUE_59 = A.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
    M_PR_EARN_9_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_EARN_9(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_9 INTO M_PR_EARN_9;
        IF M_PR_EARN_9 > 0 THEN
    M_EARN_9 := M_PR_EARN_9;
    ELSE
    M_EARN_9 := '' ;
        END IF;
    CLOSE EMP_EARN_9;
  ELSIF  A.ROWNUM = 10 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_EARN_10';
     UPDATE IP_REP_INFO SET REP_VALUE_60 = A.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
    M_PR_EARN_10_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_EARN_10(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_10 INTO M_PR_EARN_10;
        IF M_PR_EARN_10 > 0 THEN
    M_EARN_10 := M_PR_EARN_10;
    ELSE
    M_EARN_10 := '' ;
        END IF;
    CLOSE EMP_EARN_10;
   ELSIF  A.ROWNUM = 11 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_EARN_11'       ;
     M_PR_EARN_11_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_EARN_11(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_11 INTO M_PR_EARN_11;
        IF M_PR_EARN_11 > 0 THEN
    M_EARN_11 := M_PR_EARN_11;
    ELSE
    M_EARN_11 := '' ;
        END IF;
    CLOSE EMP_EARN_11;
  ELSIF  A.ROWNUM = 12 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_EARN_12'       ;
     M_PR_EARN_12_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_EARN_12(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_12 INTO M_PR_EARN_12;
        IF M_PR_EARN_12 > 0 THEN
    M_EARN_12 := M_PR_EARN_12;
    ELSE
    M_EARN_12 := '' ;
        END IF;
    CLOSE EMP_EARN_12;
  ELSIF  A.ROWNUM = 13 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_EARN_13'       ;
     M_PR_EARN_13_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_EARN_13(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_13 INTO M_PR_EARN_13;
        IF M_PR_EARN_13 > 0 THEN
    M_EARN_13 := M_PR_EARN_13;
    ELSE
    M_EARN_13 := '' ;
        END IF;
    CLOSE EMP_EARN_13;
  ELSIF  A.ROWNUM = 14 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_EARN_14'       ;
     M_PR_EARN_14_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_EARN_14(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_14 INTO M_PR_EARN_14;
        IF M_PR_EARN_14 > 0 THEN
    M_EARN_14 := M_PR_EARN_14;
    ELSE
    M_EARN_14 := '' ;
        END IF;
    CLOSE EMP_EARN_14;
  ELSIF  A.ROWNUM = 15 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = A.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_EARN_15'       ;
     M_PR_EARN_15_CODE := A.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_EARN_15(I.Q_1_DP_EMP_CODE1,A.ALLW_CODE);
    FETCH EMP_EARN_15 INTO M_PR_EARN_15;
        IF M_PR_EARN_15 > 0 THEN
    M_EARN_15 := M_PR_EARN_15;
    ELSE
    M_EARN_15 := '' ;
        END IF;
    CLOSE EMP_EARN_15;

     END IF;
  END LOOP;

  FOR B IN C_DEDUC LOOP
 --DUMMY('DED LOOP IN');
  IF B.ROWNUM = 1 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_DED_1';
     UPDATE IP_REP_INFO SET REP_VALUE_61 = B.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_DED_1_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
     OPEN  EMP_DED_1(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE) ;
    FETCH EMP_DED_1 INTO M_PR_DED_1;
  --DUMMY('M_PR_DED_1'||M_PR_DED_1);
  IF M_PR_DED_1 > 0 THEN
      M_DED_1 := M_PR_DED_1;
    ELSE
    M_DED_1 := '' ;
  END IF;
    CLOSE EMP_DED_1;

     ELSIF  B.ROWNUM = 2 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_DED_2';
     UPDATE IP_REP_INFO SET REP_VALUE_62 = B.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_DED_2_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
         OPEN EMP_DED_2(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_2 INTO M_PR_DED_2;
        IF M_PR_DED_2 > 0 THEN
    M_DED_2 := M_PR_DED_2;
    ELSE
    M_DED_2 := '' ;
        END IF;
    CLOSE EMP_DED_2;
     ELSIF  B.ROWNUM = 3 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_DED_3';
     UPDATE IP_REP_INFO SET REP_VALUE_63 = B.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
    M_PR_DED_3_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_DED_3(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_3 INTO M_PR_DED_3;
        IF M_PR_DED_3 > 0 THEN
    M_DED_3 := M_PR_DED_3;
    ELSE
    M_DED_3 := '' ;
        END IF;
    CLOSE EMP_DED_3;

     ELSIF  B.ROWNUM = 4 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_DED_4';
     UPDATE IP_REP_INFO SET REP_VALUE_64 = B.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_DED_4_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
         OPEN EMP_DED_4(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_4 INTO M_PR_DED_4;
        IF M_PR_DED_4 > 0 THEN
    M_DED_4 := M_PR_DED_4;
    ELSE
    M_DED_4 := '' ;
        END IF;
    CLOSE EMP_DED_4;

     ELSIF  B.ROWNUM = 5 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_DED_5';
     UPDATE IP_REP_INFO SET REP_VALUE_65 = B.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
    M_PR_DED_5_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_DED_5(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_5 INTO M_PR_DED_5;
        IF M_PR_DED_5 > 0 THEN
    M_DED_5 := M_PR_DED_5;
    ELSE
    M_DED_5 := '' ;
        END IF;
    CLOSE EMP_DED_5;

  ELSIF  B.ROWNUM = 6 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_DED_6' ;
     UPDATE IP_REP_INFO SET REP_VALUE_66 = B.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_DED_6_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_DED_6(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_6 INTO M_PR_DED_6;
        IF M_PR_DED_6 > 0 THEN
    M_DED_6 := M_PR_DED_6;
    ELSE
    M_DED_6 := '' ;
        END IF;
    CLOSE EMP_DED_6;
  ELSIF  B.ROWNUM = 7 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_DED_7' ;
     UPDATE IP_REP_INFO SET REP_VALUE_67 = B.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
    M_PR_DED_7_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_DED_7(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_7 INTO M_PR_DED_7;
        IF M_PR_DED_7 > 0 THEN
    M_DED_7 := M_PR_DED_7;
    ELSE
    M_DED_7 := '' ;
        END IF;
    CLOSE EMP_DED_7;
  ELSIF  B.ROWNUM = 8 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_DED_8' ;
     UPDATE IP_REP_INFO SET REP_VALUE_68 = B.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
   M_PR_DED_8_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_DED_8(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_8 INTO M_PR_DED_8;
        IF M_PR_DED_8 > 0 THEN
    M_DED_8 := M_PR_DED_8;
    ELSE
    M_DED_8 := '' ;
        END IF;
    CLOSE EMP_DED_8;
  ELSIF  B.ROWNUM = 9 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_DED_9';
     UPDATE IP_REP_INFO SET REP_VALUE_69 = B.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
     M_PR_DED_9_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_DED_9(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_9 INTO M_PR_DED_9;
        IF M_PR_DED_9 > 0 THEN
    M_DED_9 := M_PR_DED_9;
    ELSE
    M_DED_9 := '' ;
        END IF;
    CLOSE EMP_DED_9;
  ELSIF  B.ROWNUM = 10 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_DED_10';
     UPDATE IP_REP_INFO SET REP_VALUE_70 = B.allw_desc WHERE REP_KEY_NO = P_REP_KEY_NO;
    M_PR_DED_10_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017
    OPEN EMP_DED_10(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_10 INTO M_PR_DED_10;
        IF M_PR_DED_10 > 0 THEN
    M_DED_10 := M_PR_DED_10;
    ELSE
    M_DED_10 := '' ;
        END IF;
    CLOSE EMP_DED_10;

    ELSIF  B.ROWNUM = 11 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_DED_11'       ;
     M_PR_DED_11_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_DED_11(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_11 INTO M_PR_DED_11;
        IF M_PR_DED_11 > 0 THEN
    M_DED_11 := M_PR_DED_11;
    ELSE
    M_DED_11 := '' ;
        END IF;
    CLOSE EMP_DED_11;
  ELSIF  B.ROWNUM = 12 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_DED_12'       ;
     M_PR_DED_12_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_DED_12(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_12 INTO M_PR_DED_12;
        IF M_PR_DED_12 > 0 THEN
    M_DED_12 := M_PR_DED_12;
    ELSE
    M_DED_12 := '' ;
        END IF;
    CLOSE EMP_DED_12;
  ELSIF  B.ROWNUM = 13 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_DED_13'       ;
     M_PR_DED_13_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_DED_13(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_13 INTO M_PR_DED_13;
        IF M_PR_DED_13 > 0 THEN
    M_DED_13 := M_PR_DED_13;
    ELSE
    M_DED_13 := '' ;
        END IF;
    CLOSE EMP_DED_13;
  ELSIF  B.ROWNUM = 14 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_DED_14'       ;
     M_PR_DED_14_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_DED_14(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_14 INTO M_PR_DED_14;
        IF M_PR_DED_14 > 0 THEN
    M_DED_14 := M_PR_DED_14;
    ELSE
    M_DED_14 := '' ;
        END IF;
    CLOSE EMP_DED_14;
  ELSIF  B.ROWNUM = 15 THEN
     UPDATE OW_REP_COLS SET COL_LABEL_NAME = B.allw_desc WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'FPR_DED_15'       ;
     M_PR_DED_15_CODE := B.ALLW_CODE; -- ASHIK FOR ALKHAMIS REPORT ISSUE ON 12-DEC-2017

    OPEN EMP_DED_15(I.Q_1_DP_EMP_CODE1,B.ALLW_CODE);
    FETCH EMP_DED_15 INTO M_PR_DED_15;
        IF M_PR_DED_15 > 0 THEN
    M_DED_15 := M_PR_DED_15;
    ELSE
    M_DED_15 := '' ;
        END IF;
    CLOSE EMP_DED_15;

     END IF;


  END LOOP;


    OPEN EMP_EARN_OTHERS(I.Q_1_DP_EMP_CODE1);
    FETCH EMP_EARN_OTHERS INTO M_PR_EARN_OTH;
        IF M_PR_EARN_OTH > 0 THEN
    M_EARN_OTH := M_PR_EARN_OTH;
    ELSE
    M_EARN_OTH := '' ;
    END IF;
    CLOSE EMP_EARN_OTHERS;

    OPEN EMP_DED_OTHERS(I.Q_1_DP_EMP_CODE1);
    FETCH EMP_DED_OTHERS INTO M_PR_DED_OTH;
        IF M_PR_DED_OTH > 0 THEN
    M_DED_OTH := M_PR_DED_OTH;
    ELSE
    M_DED_OTH := '' ;
    END IF;
    CLOSE EMP_DED_OTHERS;

    /* dummy('M_EARN_1'||M_EARN_1||'M_OT1'||M_OT1||'M_EARN_2'||M_EARN_2||'M_EARN_3'||M_EARN_3||'M_EARN_4'||M_EARN_4
  ||'M_EARN_5'||M_EARN_5||'M_ACT_BAS'||M_ACT_BAS||'M_HRA'||M_HRA);
    M_TOT_GROSS_EARN := NVL(M_ACT_BAS,0) + NVL(M_HRA,0) +
    --NVL(:CF_OT_HRS,0) +

    NVL(M_EARN_1,0) +
--    NVL(M_OT1,0)+  -- ADDED BY YASHARTH ON 19/07/2006 FOR ISSUE ADVIND-118179
    NVL(M_EARN_2,0) + NVL(M_EARN_3,0) + NVL(M_EARN_4,0) +
    NVL(M_EARN_5,0)+ NVL(M_EARN_6,0)+NVL(M_EARN_7,0)+NVL(M_EARN_8,0)+
  NVL(M_EARN_9,0)+NVL(M_EARN_10,0); --+ NVL(M_EARN_OTH,0) ;



    M_TOT_GROSS_DED := --NVL(M_DBASIC,0)+ NVL(M_HRAD,0)+
  NVL(M_DED_1,0) + NVL(M_DED_2,0) +
    NVL(M_DED_3,0) + NVL(M_DED_4,0) + NVL(M_DED_5,0) + NVL(M_DED_6,0) + NVL(M_DED_7,0)   + NVL(M_DED_8,0)+
  NVL(M_DED_9,0)+ NVL(M_DED_10,0)  +
    NVL(M_DED_OTH,0) ;

     */

     M_TOT_GROSS_EARN := NVL(M_ACT_BAS,0) + NVL(M_HRA,0) +    --NVL(:CF_OT_HRS,0) +
    NVL(M_EARN_1,0) +
    --NVL(M_OT1,0)+  -- ADDED BY YASHARTH ON 19/07/2006 FOR ISSUE ADVIND-118179
    NVL(M_EARN_2,0) + NVL(M_EARN_3,0) + NVL(M_EARN_4,0) +
    NVL(M_EARN_5,0)+ NVL(M_EARN_6,0)+NVL(M_EARN_7,0)+NVL(M_EARN_8,0)+
  NVL(M_EARN_9,0)+NVL(M_EARN_10,0)+NVL(M_EARN_11,0)+NVL(M_EARN_12,0)+NVL(M_EARN_13,0)+NVL(M_EARN_14,0)+NVL(M_EARN_15,0);
  --+ NVL(M_EARN_OTH,0) ;



    M_TOT_GROSS_DED := --NVL(M_DBASIC,0)+ NVL(M_HRAD,0)+
  NVL(M_DED_1,0) + NVL(M_DED_2,0) +
    NVL(M_DED_3,0) + NVL(M_DED_4,0) + NVL(M_DED_5,0) + NVL(M_DED_6,0) + NVL(M_DED_7,0)   + NVL(M_DED_8,0)+
  NVL(M_DED_9,0)+ NVL(M_DED_10,0) + NVL(M_DED_11,0)+NVL(M_DED_12,0)+NVL(M_DED_13,0)+NVL(M_DED_14,0)+NVL(M_DED_15,0);-- + NVL(M_DED_OTH,0) ;


   --M_NET_SAL := Round(NVL(M_TOT_GROSS_EARN,0)) - Round(NVL(M_TOT_GROSS_DED,0)); --- ROUND ADDED BY PARTHA     BAYOUNI-1459008 -- Commented by MathanKumar P for issue in Call ID : ETIHAD_INT-1753189
   M_NET_SAL := NVL(M_TOT_GROSS_EARN,0) - NVL(M_TOT_GROSS_DED,0);  -- Added by MathanKumar P for issue in Call ID : ETIHAD_INT-1753189

    --RETURN M_NAME;
           --DUMMY(10);
      INSERT INTO PW_FINAL_PAYROLL_REGISTER ( FPR_COMP_CODE,
                                       FPR_REP_KEY_NO,
                                       FPR_DEPT_DIVN_CODE,
                                       FPR_DIVN_NAME,
                                       FPR_DEPT_CODE,
                                       FPR_DEPT_NAME,
                                       FPR_EMP_CODE,
                                       FPR_ORG_BASIC_FC_AMOUNT,
                                       FPR_JOIN_DT,
                                       FPR_ANAL_CODE_1,
                                       FPR_NO_DAYS_PRSNT,
                                       FPR_ORG_BAS,
                                       FPR_ACT_BAS,
                                       FPR_OT_HRS,
                                       FPR_HRA,
                                       FPR_EARN_1,
                                       FPR_EARN_2,
                                       FPR_EARN_3,
                                       FPR_EARN_4,
                                       FPR_EARN_5,
                                       FPR_EARN_6,
                                       FPR_EARN_7,
                                       FPR_EARN_8,
                                       FPR_EARN_9,
                                       FPR_EARN_10,
                                       FPR_EARN_OTH,
                                       FPR_TOT_GROSS_EARN,
                                       FPR_NET_SAL,
                                       FPR_DBASIC,
                                       FPR_OT1,
                                       FPR_HRAD,
                                       FPR_DED_1,
                                       FPR_DED_2,
                                       FPR_DED_3,
                                       FPR_DED_4,
                                       FPR_DED_5,
                                       FPR_DED_6,
                                       FPR_DED_7,
                                       FPR_DED_8,
                                       FPR_DED_9,
                                       FPR_DED_10,
                                       FPR_DED_OTH,
                                       FPR_TOT_GROSS_DED,
                                       FPR_PAY_MODE,
                                       FPR_EMP_NAME,
                                       FPR_EARN_11,
                                        FPR_EARN_12,
                                        FPR_EARN_13,
                                        FPR_EARN_14,
                                        FPR_EARN_15,
                                        FPR_DED_11,
                                        FPR_DED_12,
                                        FPR_DED_13,
                                        FPR_DED_14,
                                        FPR_DED_15 )
                              VALUES ( P_COMP_CODE,
                                       P_REP_KEY_NO,
                                       I.DEPT_DIVN_CODE,
                                       I.Q_1_DIVN_NAME,
                                       I.Q_1_DEPT_CODE,
                                       I.Q_1_DEPT_NAME,
                                       I.Q_1_DP_EMP_CODE1,
                                       I.Q_1_DP_ORG_BASIC_FC_AMOUNT,
                                       I.EMP_JOIN_DT,
                                       I.EMP_ANAL_CODE_1,
                                       M_NO_DAYS_PRSNT ,
                                       M_ORG_BAS,
                                       M_ACT_BAS,
                                       M_OT_HRS ,
                                       M_HRA    ,
                                       M_EARN_1 ,
                                       M_EARN_2 ,
                                       M_EARN_3 ,
                                       M_EARN_4 ,
                                       M_EARN_5 ,
                                       M_EARN_6 ,
                                       M_EARN_7 ,
                                       M_EARN_8 ,
                                       M_EARN_9 ,
                                       M_EARN_10 ,
                                       M_EARN_OTH,
                                       M_TOT_GROSS_EARN,
                                       M_NET_SAL      ,
                                       M_DBASIC       ,
                                       M_OT1          ,
                                       M_HRAD         ,
                                       M_DED_1        ,
                                       M_DED_2        ,
                                       M_DED_3        ,
                                       M_DED_4        ,
                                       M_DED_5        ,
                                       M_DED_6        ,
                                       M_DED_7        ,
                                       M_DED_8        ,
                                       M_DED_9        ,
                                       M_DED_10        ,
                                       M_DED_OTH      ,
                                       M_TOT_GROSS_DED,
                                       I.EMPY_PAY_MODE,
                                       I.EMP_NAME,
                                       M_EARN_11 ,
                                       M_EARN_12 ,
                                       M_EARN_13 ,
                                       M_EARN_14 ,
                                       M_EARN_15 ,
                                       M_DED_11        ,
                                       M_DED_12        ,
                                       M_DED_13        ,
                                       M_DED_14        ,
                                       M_DED_15);


   END LOOP;



END P_FINAL_PAYROLL;

PROCEDURE P_DENO_PAYROLL ( P_COMP_CODE      IN VARCHAR2,
                           P_REP_KEY_NO     IN NUMBER,
                           P_FM_DIVN        IN VARCHAR2,
                           P_TO_DIVN        IN VARCHAR2,
                           P_FM_DEPT        IN VARCHAR2,
                           P_TO_DEPT        IN VARCHAR2,
                           P_FM_LOCN        IN VARCHAR2,
                           P_TO_LOCN        IN VARCHAR2,
                           P_FM_CC          IN VARCHAR2,
                           P_TO_CC          IN VARCHAR2,
                           P_FM_CONT_TYPE   IN VARCHAR2,
                           P_TO_CONT_TYPE   IN VARCHAR2,
                           P_M_CPMTH        IN NUMBER) IS

    MM_LANG_CODE VARCHAR2(240);


CURSOR C_DENO_PAY IS
      SELECT DISTINCT DEPT_DIVN_CODE,DEPT_CODE Q_1_DEPT_CODE, FP_EMP_CODE Q_1_FP_EMP_CODE,
               DECODE(MM_LANG_CODE ,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02',
       EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05',
       EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06, 'LANG_07', EMP_NAME_LANG_07, 'LANG_08',
       EMP_NAME_LANG_08, 'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10) Q_1_EMP_NAME
      FROM   FM_DEPARTMENT,PS_FINAL_PROC,PM_EMP_KEY,PM_EMP_PAY
      WHERE  DEPT_COMP_CODE = P_COMP_CODE
      AND       DEPT_CODE      = FP_DEPT_CODE
      AND       DEPT_DIVN_CODE = FP_DIVN_CODE
      AND      FP_COMP_CODE   = DEPT_COMP_CODE
      AND    FP_PROC_MTH    = P_M_CPMTH
      AND       EMPY_COMP_CODE = FP_COMP_CODE
      AND    EMP_COMP_CODE  = EMPY_COMP_CODE
      AND       EMPY_CODE        = EMP_CODE
      AND       EMPY_PAY_MODE    = 'C'
      AND       FP_DIVN_CODE       BETWEEN P_FM_DIVN      AND P_TO_DIVN
      AND       FP_DEPT_CODE       BETWEEN P_FM_DEPT      AND P_TO_DEPT
      AND      FP_CC_CODE         BETWEEN P_FM_CC        AND P_TO_CC
      AND       FP_CONT_TYPE_CODE  BETWEEN P_FM_CONT_TYPE AND P_TO_CONT_TYPE
      AND    EMP_COMP_CODE = DEPT_COMP_CODE
      AND    EMP_CODE             = FP_EMP_CODE
      AND    EMP_STATUS IN ('1','2','3')
      AND    EMP_END_OF_SERVICE_DT IS NULL
      ORDER BY DEPT_DIVN_CODE, DEPT_CODE,FP_EMP_CODE;

   M_EARN    PW_FS.AMOUNT%TYPE;
   M_DEDUC   PW_FS.AMOUNT%TYPE;
   EMP_SAL   PW_FS.AMOUNT%TYPE;

CURSOR EARN(P_EMP_CODE IN VARCHAR2) IS
      SELECT SUM(NVL(FP_LC_AMOUNT,0))
        FROM   PS_FINAL_PROC
      WHERE  FP_COMP_CODE  = P_COMP_CODE
        AND    FP_EMP_CODE   = P_EMP_CODE
      AND    FP_PROC_MTH   = P_M_CPMTH
      AND    FP_EARN_DEDUC = 'E';

CURSOR DEDUC(P_EMP_CODE IN VARCHAR2) IS
      SELECT SUM(NVL(FP_LC_AMOUNT,0))
        FROM   PS_FINAL_PROC
      WHERE  FP_COMP_CODE  = P_COMP_CODE
        AND    FP_EMP_CODE   = P_EMP_CODE
      AND    FP_PROC_MTH   = P_M_CPMTH
      AND    FP_EARN_DEDUC = 'D';

   SAL PW_FS.AMOUNT%TYPE;
   X PW_FS.AMOUNT%TYPE;
   Y PW_FS.AMOUNT%TYPE;
   CNT NUMBER(10);
CURSOR C1 IS
      SELECT *
      FROM PM_DENOMINATION
      ORDER BY DENO_NOTE DESC;

CURSOR DENO IS
        SELECT *
         FROM PM_DENOMINATION
        ORDER BY DENO_NOTE DESC ;

   M_DENO_VALUE_1  NUMBER(13,3);
   M_DENO_VALUE_2  NUMBER(13,3);
   M_DENO_VALUE_3  NUMBER(13,3);
   M_DENO_VALUE_4  NUMBER(13,3);
   M_DENO_VALUE_5  NUMBER(13,3);
   M_DENO_VALUE_6  NUMBER(13,3);
   M_DENO_VALUE_7  NUMBER(13,3);
   M_DENO_VALUE_8  NUMBER(13,3);
   M_DENO_VALUE_9  NUMBER(13,3);
   M_DENO_VALUE_10 NUMBER(13,3);
   M_BALANCE_VALUE NUMBER(13,3);
   M_SAL           NUMBER(5);
   M_DENO_1        NUMBER(13,3);
   M_DENO_2        NUMBER(13,3);
   M_DENO_3        NUMBER(13,3);
   M_DENO_4        NUMBER(13,3);
   M_DENO_5        NUMBER(13,3);
   M_DENO_6        NUMBER(13,3);
   M_DENO_7        NUMBER(13,3);
   M_DENO_8        NUMBER(13,3);
   M_DENO_9        NUMBER(13,3);
   M_DENO_10        NUMBER(13,3);


CURSOR C2 IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;
BEGIN

   DELETE FROM PW_DENO_PAYROLL WHERE DP_REP_KEY_NO = P_REP_KEY_NO;

   DELETE FROM OW_REP_COLS WHERE REP_KEY_NO = P_REP_KEY_NO;

    MM_LANG_CODE := NULL;

    IF C2%ISOPEN THEN
       CLOSE C2;
    END IF;

    OPEN C2;
    FETCH C2 INTO MM_LANG_CODE;
    CLOSE C2;
INSERT INTO OW_REP_COLS
(REP_SYS_ID, REP_NAME, COL_TYPE, COL_NAME, COL_TAB_NAME, COL_LEVEL, COL_LINK_LEVEL, COL_LINK, LINK_COLUMN_YN, COL_SEQ, SUB_WHERE_COND, SUB_TAB_NAME, SUB_RET_NAME, COL_LABEL_NAME, COL_ORDER_YN, COL_ORDER_SEQ, COL_FORMAT_MASK, COL_WIDTH, COL_ORDER_ASC_DESC, COL_MATRIX_TYPE, COL_FORMULA, COL_FOR_DATA_TYPE, REP_TYPE_FLAG, REP_USER_ID, COL_DISP_YN, REP_COL_SYS_ID, COL_ALIGN, COL_CASE, REP_COL_CR_UID, REP_COL_CR_DT, REP_COL_UPD_UID, REP_COL_UPD_DT, COL_LABEL_BL_NAME, COL_FORMULA_YN, COL_EXPORT_WIDTH, COL_EXPORT_WRAP_YN, SUB_CLIENT_ID, SUB_INST_CODE, SUB_SECURITY_CODE, REP_CLIENT_ID, REP_INST_CODE, REP_SECURITY_CODE, LINK_CLIENT_ID, LINK_INST_CODE, LINK_SECURITY_CODE, COL_CLIENT_ID, COL_INST_CODE, COL_SECURITY_CODE, CURR_FORMAT_YN_NUM, CURR_FORMAT_LC_FC, CURR_COL_NAME, REP_KEY_NO,COL_LABEL_NAME_LANG_01,COL_LABEL_NAME_LANG_02,COL_LABEL_NAME_LANG_03,COL_LABEL_NAME_LANG_04,COL_LABEL_NAME_LANG_05,COL_LABEL_NAME_LANG_06,COL_LABEL_NAME_LANG_07,COL_LABEL_NAME_LANG_08,COL_LABEL_NAME_LANG_09,COL_LABEL_NAME_LANG_10)
SELECT REP_SYS_ID, REP_NAME, COL_TYPE, COL_NAME, COL_TAB_NAME, COL_LEVEL, COL_LINK_LEVEL, COL_LINK, LINK_COLUMN_YN, COL_SEQ, SUB_WHERE_COND, SUB_TAB_NAME, SUB_RET_NAME, COL_LABEL_NAME, COL_ORDER_YN, COL_ORDER_SEQ, COL_FORMAT_MASK, COL_WIDTH, COL_ORDER_ASC_DESC, COL_MATRIX_TYPE, COL_FORMULA, COL_FOR_DATA_TYPE, REP_TYPE_FLAG, REP_USER_ID, COL_DISP_YN, REP_COL_SYS_ID, COL_ALIGN, COL_CASE, REP_COL_CR_UID, REP_COL_CR_DT, REP_COL_UPD_UID, REP_COL_UPD_DT, COL_LABEL_BL_NAME, COL_FORMULA_YN, COL_EXPORT_WIDTH, COL_EXPORT_WRAP_YN, SUB_CLIENT_ID, SUB_INST_CODE, SUB_SECURITY_CODE, C.REP_CLIENT_ID, C.REP_INST_CODE, C.REP_SECURITY_CODE, LINK_CLIENT_ID, LINK_INST_CODE, LINK_SECURITY_CODE, COL_CLIENT_ID, COL_INST_CODE, COL_SECURITY_CODE, CURR_FORMAT_YN_NUM, CURR_FORMAT_LC_FC, CURR_COL_NAME, P_REP_KEY_NO,COL_LABEL_NAME_LANG_01,COL_LABEL_NAME_LANG_02,COL_LABEL_NAME_LANG_03,COL_LABEL_NAME_LANG_04,COL_LABEL_NAME_LANG_05,COL_LABEL_NAME_LANG_06,COL_LABEL_NAME_LANG_07,COL_LABEL_NAME_LANG_08,COL_LABEL_NAME_LANG_09,COL_LABEL_NAME_LANG_10 FROM REP_COLS C, IP_REP_INFO WHERE REP_SYS_ID = REP_ID AND  REP_KEY_NO = P_REP_KEY_NO;

   FOR I IN C_DENO_PAY
   LOOP

      OPEN EARN(I.Q_1_FP_EMP_CODE);
      FETCH EARN INTO M_EARN;
      CLOSE EARN;

      OPEN DEDUC(I.Q_1_FP_EMP_CODE);
      FETCH DEDUC INTO M_DEDUC;
      CLOSE DEDUC;
      ----DUMMY('E: '||M_EARN||' D: '||M_DEDUC);
      --RETURN(NVL(M_EARN,0) - NVL(M_DEDUC,0));
      EMP_SAL := (NVL(M_EARN,0) - NVL(M_DEDUC,0));
     -- --DUMMY('EMP_SAL: '||EMP_SAL);
      M_SAL := EMP_SAL;
      SAL := EMP_SAL;
    --  --DUMMY('SAL :'||SAL);
   CNT := 1 ;

   M_DENO_VALUE_1 := '';
   M_DENO_VALUE_2 := '';
   M_DENO_VALUE_3 := '';
   M_DENO_VALUE_4 := '';
   M_DENO_VALUE_5 := '';
   M_DENO_VALUE_6 := '';
   M_DENO_VALUE_7 := '';
   M_DENO_VALUE_8 := '';
   M_DENO_VALUE_9 := '';
   M_DENO_VALUE_10 := '';

   FOR I IN C1
   LOOP
  -- --DUMMY('CNT: '||CNT||'sal: '||sal);
      EXIT WHEN CNT > 10 OR SAL <= 0;
      ----DUMMY('I.DENO_NOTE :'||I.DENO_NOTE);
      IF SAL >= I.DENO_NOTE THEN
         X := SAL/I.DENO_NOTE;
         IF CNT = 1 THEN
            M_DENO_VALUE_1 := FLOOR(X);
            SAL := MOD(SAL,I.DENO_NOTE);
          ELSIF CNT = 2 THEN
            M_DENO_VALUE_2 := FLOOR(X);
            SAL := MOD(SAL,I.DENO_NOTE);
          ELSIF CNT = 3 THEN
            M_DENO_VALUE_3 := FLOOR(X);
            SAL := MOD(SAL,I.DENO_NOTE);
          ELSIF CNT = 4 THEN
            M_DENO_VALUE_4 := FLOOR(X);
            SAL := MOD(SAL,I.DENO_NOTE);
          ELSIF CNT = 5 THEN
            M_DENO_VALUE_5 := FLOOR(X);
            SAL := MOD(SAL,I.DENO_NOTE);
          ELSIF CNT = 6 THEN
            M_DENO_VALUE_6 := FLOOR(X);
            SAL := MOD(SAL,I.DENO_NOTE);
          ELSIF CNT = 7 THEN
            M_DENO_VALUE_7 := FLOOR(X);
            SAL := MOD(SAL,I.DENO_NOTE);
          ELSIF CNT = 8 THEN
            M_DENO_VALUE_8 := FLOOR(X);
            SAL := MOD(SAL,I.DENO_NOTE);
          ELSIF CNT = 9 THEN
            M_DENO_VALUE_9 := FLOOR(X);
            SAL := MOD(SAL,I.DENO_NOTE);
          ELSIF CNT = 10 THEN
            M_DENO_VALUE_10 := FLOOR(X);
            SAL := MOD(SAL,I.DENO_NOTE);
          END IF;
      END IF;
      CNT := CNT + 1;
     M_BALANCE_VALUE := NVL(SAL,0);
   END LOOP;
      CNT := 1;

      -- coding start added by partha BHG_INT-1404061
      FOR I IN DENO

      LOOP

         EXIT WHEN DENO%NOTFOUND OR CNT > 10;
         IF CNT = 1 THEN
         --DUMMY('I.DENO_NOTE'||I.DENO_NOTE);
         UPDATE OW_REP_COLS SET COL_LABEL_NAME = I.DENO_NOTE WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'DP_DENO_VALUE_1';
            M_DENO_1 := I.DENO_NOTE;
          --  --DUMMY('M_DENO_1'||M_DENO_1);

     ELSIF CNT = 2 THEN
        M_DENO_2 := I.DENO_NOTE;
      UPDATE OW_REP_COLS SET COL_LABEL_NAME = M_DENO_2 WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'DP_DENO_VALUE_2';
     ELSIF CNT = 3 THEN
        M_DENO_3 := I.DENO_NOTE;
      UPDATE OW_REP_COLS SET COL_LABEL_NAME = M_DENO_3 WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'DP_DENO_VALUE_3';
     ELSIF CNT = 4 THEN
        M_DENO_4 := I.DENO_NOTE;
      UPDATE OW_REP_COLS SET COL_LABEL_NAME = M_DENO_4 WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'DP_DENO_VALUE_4';
     ELSIF CNT = 5 THEN
        M_DENO_5 := I.DENO_NOTE;
      UPDATE OW_REP_COLS SET COL_LABEL_NAME = M_DENO_5 WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'DP_DENO_VALUE_5';
     ELSIF CNT = 6 THEN
        M_DENO_6 := I.DENO_NOTE;
      UPDATE OW_REP_COLS SET COL_LABEL_NAME = M_DENO_6 WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'DP_DENO_VALUE_6';
     ELSIF CNT = 7 THEN
        M_DENO_7 := I.DENO_NOTE;
      UPDATE OW_REP_COLS SET COL_LABEL_NAME = M_DENO_7 WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'DP_DENO_VALUE_7';
     ELSIF CNT = 8 THEN
        M_DENO_8 := I.DENO_NOTE;
      UPDATE OW_REP_COLS SET COL_LABEL_NAME = M_DENO_8 WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'DP_DENO_VALUE_8';
     ELSIF CNT = 9 THEN
        M_DENO_9 := I.DENO_NOTE;
      UPDATE OW_REP_COLS SET COL_LABEL_NAME = M_DENO_9 WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'DP_DENO_VALUE_9';
     ELSIF CNT = 10 THEN
        M_DENO_10 := I.DENO_NOTE;
      UPDATE OW_REP_COLS SET COL_LABEL_NAME = M_DENO_10 WHERE P_REP_KEY_NO = P_REP_KEY_NO AND COL_NAME = 'DP_DENO_VALUE_10';
         END IF;
        CNT := CNT + 1;
       END LOOP;

      INSERT INTO PW_DENO_PAYROLL ( DP_COMP_CODE,
                                    DP_REP_KEY_NO,
                                    DP_DEPT_DIVN,
                                    DP_DEPT_CODE,
                                    DP_EMP_CODE,
                                    DP_EMP_NAME,
                                    DP_NET_PAY,
                                    DP_DENO_VALUE_1,
                                    DP_DENO_VALUE_2,
                                    DP_DENO_VALUE_3,
                                    DP_DENO_VALUE_4,
                                    DP_DENO_VALUE_5,
                                    DP_DENO_VALUE_6,
                                    DP_DENO_VALUE_7,
                                    DP_DENO_VALUE_8,
                                    DP_DENO_VALUE_9,
                                    DP_DENO_VALUE_10,
                                    DP_BAL_VALUE )
                           VALUES ( P_COMP_CODE,
                                    P_REP_KEY_NO,
                                    I.DEPT_DIVN_CODE,
                                    I.Q_1_DEPT_CODE,
                                    I.Q_1_FP_EMP_CODE,
                                    I.Q_1_EMP_NAME,
                                    M_SAL,
                                    M_DENO_VALUE_1,
                                    M_DENO_VALUE_2,
                                    M_DENO_VALUE_3,
                                    M_DENO_VALUE_4,
                                    M_DENO_VALUE_5,
                                    M_DENO_VALUE_6,
                                    M_DENO_VALUE_7,
                                    M_DENO_VALUE_8,
                                    M_DENO_VALUE_9,
                                    M_DENO_VALUE_10,
                                    M_BALANCE_VALUE);


   END LOOP;

END P_DENO_PAYROLL;

PROCEDURE P_LEAVE_SALARY ( P_COMP_CODE     IN VARCHAR2,
                           P_REP_KEY_NO    IN NUMBER,
                           P_FM_EMP        IN VARCHAR2,
                           P_TO_EMP        IN VARCHAR2,
                           P_FM_DIVN       IN VARCHAR2,
                           P_TO_DIVN       IN VARCHAR2,
                           P_FM_DEPT       IN VARCHAR2,
                           P_TO_DEPT       IN VARCHAR2,
                           P_FM_LOCN       IN VARCHAR2,
                           P_TO_LOCN       IN VARCHAR2,
                           P_FM_CC         IN VARCHAR2,
                           P_TO_CC         IN VARCHAR2,
                           P_FM_CONT_TYPE  IN VARCHAR2,
                           P_TO_CONT_TYPE  IN VARCHAR2,
                           P_FM_COUNTRY    IN VARCHAR2,
                           P_TO_COUNTRY    IN VARCHAR2,
                           P_FM_CURR       IN VARCHAR2,
                           P_TO_CURR       IN VARCHAR2,
                           P_M_CPMTH       IN NUMBER,
                           P_LEVEL_NO      IN VARCHAR2,
                           P_ADV_SAL       IN VARCHAR2) IS

MM_LANG_CODE VARCHAR2(240);

CURSOR C_COMP_PARA  IS
      SELECT  DECODE(MM_LANG_CODE ,'ENG',PARA_NAME, 'LANG_01', PARA_NAME_LANG_01, 'LANG_02',
       PARA_NAME_LANG_02, 'LANG_03', PARA_NAME_LANG_03, 'LANG_04', PARA_NAME_LANG_04, 'LANG_05',
       PARA_NAME_LANG_05, 'LANG_06', PARA_NAME_LANG_06, 'LANG_07', PARA_NAME_LANG_07, 'LANG_08',
       PARA_NAME_LANG_08, 'LANG_09',PARA_NAME_LANG_09, 'LANG_10', PARA_NAME_LANG_10) PARA_NAME,
       PARA_VALUE, PARA_VALUE_NUM
      FROM    PM_COMP_PARAMETER
      WHERE   PARA_COMP_CODE = P_COMP_CODE;

M_PARA_DATE VARCHAR2(20);

CURSOR CQ1 IS
      SELECT DISTINCT EMP_COMP_CODE E_COMP_CODE,EMP_CODE E_CODE,DECODE(MM_LANG_CODE ,'ENG',EMP_LONG_NAME, 'LANG_01', EMP_LONG_NAME_LANG_01, 'LANG_02',
             EMP_LONG_NAME_LANG_02, 'LANG_03', EMP_LONG_NAME_LANG_03, 'LANG_04', EMP_LONG_NAME_LANG_04, 'LANG_05',
             EMP_LONG_NAME_LANG_05, 'LANG_06', EMP_LONG_NAME_LANG_06, 'LANG_07', EMP_LONG_NAME_LANG_07, 'LANG_08',
             EMP_LONG_NAME_LANG_08, 'LANG_09',EMP_LONG_NAME_LANG_09, 'LANG_10', EMP_LONG_NAME_LANG_10) E_NAME,
             EMP_JOIN_DT,LVAH_NO,LVAH_SYS_ID,LVAH_dT,LVAH_DAYS,TO_NUMBER(TO_CHAR(LVAH_DT,'YYYYMM')  )  LV_MTH,
             LVAH_APPR_START_DT    LV_START_DT,DECODE(TO_CHAR(LVAH_APPR_START_DT,'MM'),
             To_char(To_DATE(M_PARA_DATE,'DD/MM/YYYY'),'MM'),LVAH_APPR_START_DT,To_Date(M_PARA_DATE,'DD/MM/YYYY') )  LV_CALC_START_DT,
             LVAH_APPR_END_DT LV_END_DT,LVAH_LV_BAL LV_ENTITLEMENT,
             LVAH_APPR_DAYS LVAH_APPR_DAYS,LVAH_LV_CATG_CODE LVAH_LV_CATG_CODE,
             NVL(LVAH_COMP_PAY,0) LVAH_COMP_PAY,LVAH_ACTUAL_LV_DAYS LVAH_ACTUAL_LV_DAYS,
             DECODE(MM_LANG_CODE ,'ENG',DIVN_NAME, 'LANG_01', DIVN_NAME_LANG_01, 'LANG_02',
             DIVN_NAME_LANG_02, 'LANG_03', DIVN_NAME_LANG_03, 'LANG_04', DIVN_NAME_LANG_04, 'LANG_05',
             DIVN_NAME_LANG_05, 'LANG_06', DIVN_NAME_LANG_06, 'LANG_07', DIVN_NAME_LANG_07, 'LANG_08',
             DIVN_NAME_LANG_08, 'LANG_09',DIVN_NAME_LANG_09, 'LANG_10', DIVN_NAME_LANG_10) DEPT_NAME,
             DECODE(MM_LANG_CODE ,'ENG',DEPT_NAME, 'LANG_01', DEPT_NAME_LANG_01, 'LANG_02',
             DEPT_NAME_LANG_02, 'LANG_03', DEPT_NAME_LANG_03, 'LANG_04', DEPT_NAME_LANG_04, 'LANG_05',
             DEPT_NAME_LANG_05, 'LANG_06', DEPT_NAME_LANG_06, 'LANG_07', DEPT_NAME_LANG_07, 'LANG_08',
             DEPT_NAME_LANG_08, 'LANG_09',DEPT_NAME_LANG_09, 'LANG_10', DEPT_NAME_LANG_10) DIVN_NAME
      FROM   PM_EMP_KEY,PT_LEAVE_APPLICATION_HEAD,FM_DEPARTMENT,FM_DIVISION
      WHERE  LVAH_COMP_CODE     = P_COMP_CODE
      AND    LVAH_TXN_CODE      = P_LEVEL_NO
      AND    LVAH_EMP_CODE      =  EMP_CODE
      AND    (NVL(LVAH_PROC_STATUS, 'N') = 'Y'
-- ADDED BELOW BY ASHIK FOR THE COLAS TO SHOW IF ANY REFERENCE DOCUMENT IS ALSO THERE
             OR EXISTS (SELECT 'X' FROM PT_VAR_ALLW_HEAD
                        WHERE VAH_EMP_CODE = LVAH_EMP_CODE
                        AND VAH_REF_TXN_CODE = LVAH_TXN_CODE
                        AND VAH_REF_SYS_ID = LVAH_SYS_ID
                        AND VAH_REF_NO = LVAH_NO)
             )
      AND    EMP_CODE           BETWEEN P_FM_EMP       AND P_TO_EMP
      AND    EMP_DIVN_CODE      BETWEEN P_FM_DIVN      AND P_TO_DIVN
      AND    EMP_DEPT_CODE      BETWEEN P_FM_DEPT      AND P_TO_DEPT
      AND    EMP_LOCN_CODE      BETWEEN P_FM_LOCN         AND P_TO_LOCN
      AND    EMP_CC_CODE        BETWEEN P_FM_CC        AND P_TO_CC
      AND    EMP_CONT_TYPE_CODE BETWEEN P_FM_CONT_TYPE AND P_TO_CONT_TYPE
      AND    DEPT_COMP_CODE=EMP_COMP_CODE
      AND    DIVN_COMP_CODE=EMP_COMP_CODE
      AND    DEPT_CODE= EMP_DEPT_CODE
      AND    DIVN_CODE = EMP_DIVN_CODE
      AND    DEPT_DIVN_CODE = EMP_DIVN_CODE
      AND    LVAH_APPR_UID IS NOT NULL
      AND    TO_CHAR(LVAH_APPR_START_DT  , 'YYYYMM') >= P_M_CPMTH
      AND    LVAH_CANC_UID IS NULL;

CURSOR C_LVS_TXN_REF(P_NO IN NUMBER,P_EMP_CODE IN VARCHAR2) IS
    SELECT VAH_TXN_CODE || ' # ' || VAH_NO || ' Dated : ' || TO_CHAR(VAH_DT,'DD/MM/YYYY') || ' Generated For : ' || VAH_REMARKS TXN_REF
    FROM PT_VAR_ALLW_HEAD, PT_LEAVE_APPLICATION_HEAD
    WHERE VAH_REF_SYS_ID = LVAH_SYS_ID
    AND LVAH_NO = P_NO
    AND LVAH_EMP_CODE = P_EMP_CODE;
    M_TXN_REF VARCHAR2(100);

TEMP             PW_FS.NAME%TYPE ;
TEMP_NUM         PW_FS.FLAG_NUM%TYPE ;

CURSOR C_LST_LV(P_START_DT IN DATE,P_EMP_CODE IN VARCHAR2) IS
SELECT MAX(LVAH_START_DT)
FROM   PT_LEAVE_APPLICATION_HEAD
WHERE  LVAH_START_DT   < P_START_DT
AND       LVAH_EMP_CODE   = P_EMP_CODE
AND       LVAH_COMP_CODE  = P_COMP_CODE
AND       LVAH_LV_TYPE_CODE='1';

LST_DT DATE;


CURSOR C_LST_RES(P_EMP_CODE IN VARCHAR2) IS
      SELECT LVRH_RESU_DT
      FROM   PT_LEAVE_RESU_HEAD
      WHERE    LVRH_EMP_CODE   = P_EMP_CODE
      AND       LVRH_COMP_CODE  = P_COMP_CODE;

LST_RES_DT DATE;

CURSOR CQ4(P_COMP_CODE IN VARCHAR2,P_EMP_CODE IN VARCHAR2) IS
      SELECT ROWNUM SRLNO,EMPA_COMP_CODE EMPA_COMP_CODE,
             EMPA_CODE EMPA_CODE,EMPA_FROM_DT,EMPA_UPTO_DT,
             EMPA_ALLW_CODE EMPA_ALLW_CODE,
             DECODE(MM_LANG_CODE ,'ENG',ALLW_DESC, 'LANG_01', ALLW_DESC_LANG_01, 'LANG_02',
       ALLW_DESC_LANG_02, 'LANG_03', ALLW_DESC_LANG_03, 'LANG_04', ALLW_DESC_LANG_04, 'LANG_05',
       ALLW_DESC_LANG_05, 'LANG_06', ALLW_DESC_LANG_06, 'LANG_07', ALLW_DESC_LANG_07, 'LANG_08',
       ALLW_DESC_LANG_08, 'LANG_09',ALLW_DESC_LANG_09, 'LANG_10', ALLW_DESC_LANG_10) ALLW_DESC,
       (NVL(EMPA_FC_AMOUNT,0)) EMPA_FC_AMOUNT
      FROM   PM_ALLOWANCE,PM_EMP_ALLOWANCE
      WHERE  EMPA_ALLW_CODE   = ALLW_CODE
      AND    EMPA_COMP_CODE   = P_COMP_CODE
      AND    EMPA_CODE        = P_EMP_CODE
      AND    EMPA_EXCLUDE_FROM_DT IS NULL
      AND    ALLW_EARN_DEDUC  = 'E';

M_ALLW2    VARCHAR2(60);
CURSOR ALLW2(P_ALLW_CODE IN VARCHAR2) IS
        SELECT    DECODE(MM_LANG_CODE ,'ENG',ALLW_DESC, 'LANG_01', ALLW_DESC_LANG_01, 'LANG_02',
                  ALLW_DESC_LANG_02, 'LANG_03', ALLW_DESC_LANG_03, 'LANG_04', ALLW_DESC_LANG_04, 'LANG_05',
                  ALLW_DESC_LANG_05, 'LANG_06', ALLW_DESC_LANG_06, 'LANG_07', ALLW_DESC_LANG_07, 'LANG_08',
                  ALLW_DESC_LANG_08, 'LANG_09',ALLW_DESC_LANG_09, 'LANG_10', ALLW_DESC_LANG_10) ALLW_DESC
        FROM      PM_ALLOWANCE
        WHERE     ALLW_CODE = P_ALLW_CODE;
M_ALLW1    VARCHAR2(60);
CURSOR    ALLW1(P_ALLW_CODE IN VARCHAR2) IS
        SELECT    DECODE(MM_LANG_CODE ,'ENG',ALLW_DESC, 'LANG_01', ALLW_DESC_LANG_01, 'LANG_02',
                 ALLW_DESC_LANG_02, 'LANG_03', ALLW_DESC_LANG_03, 'LANG_04', ALLW_DESC_LANG_04, 'LANG_05',
                 ALLW_DESC_LANG_05, 'LANG_06', ALLW_DESC_LANG_06, 'LANG_07', ALLW_DESC_LANG_07, 'LANG_08',
                 ALLW_DESC_LANG_08, 'LANG_09',ALLW_DESC_LANG_09, 'LANG_10', ALLW_DESC_LANG_10) ALLW_DESC
      FROM      PM_ALLOWANCE
        WHERE     ALLW_CODE = P_ALLW_CODE;

CURSOR CQ3 (P_EMP_CODE IN VARCHAR2)IS
      SELECT FP_EMP_CODE,FP_PROC_MTH,ALLWD_BASE_CODE ALLW_CODE_SAL,
             SUM(DECODE(ALLW_EARN_DEDUC,'E',NVL(FP_LC_AMOUNT,0),0)) - SUM(DECODE(ALLW_EARN_DEDUC,'D',NVL(FP_LC_AMOUNT,0),0)) AMT
      FROM PS_FINAL_PROC,PM_ALLOWANCE_DEDUC,PM_ALLOWANCE
      WHERE (FP_ALLW_CODE = ALLWD_BASE_CODE OR FP_ALLW_CODE=ALLWD_CODE)
      AND ALLW_CODE = FP_ALLW_CODE
      AND FP_EMP_CODE = P_EMP_CODE
      AND (FP_PROC_MTH IN ( SELECT TO_NUMBER(TO_CHAR(LVAH_START_DT,'YYYYMM'))
                                       FROM  PT_LEAVE_APPLICATION_HEAD
                                         WHERE LVAH_TXN_CODE  = P_LEVEL_NO
                            AND   LVAH_COMP_CODE = P_COMP_CODE
                                         AND   LVAH_EMP_CODE  = FP_EMP_CODE))
GROUP BY  FP_EMP_CODE,FP_PROC_MTH,ALLWD_BASE_CODE;

CURSOR CQ2 (P_DATE IN DATE,P_EMP_CODE IN VARCHAR2)IS
      SELECT VAH_EMP_CODE,VAH_DT,VAD_VAH_SYS_ID,ALLW_CODE  ALLW_CODE_VAD,
             SUM(DECODE(ALLW_EARN_DEDUC,'E',NVL(VAD_LC_AMOUNT,0),0)) - SUM(DECODE(ALLW_EARN_DEDUC,'D',NVL(VAD_LC_AMOUNT,0),0) ) VAD_LC_AMOUNT
      FROM   PT_VAR_ALLW_DETAIL,PM_ALLOWANCE,PT_VAR_ALLW_HEAD               ------------,PM_ALLOWANCE_DEDUC
      WHERE  ALLW_CODE=VAD_ALLW_CODE
      AND    VAH_DT = P_DATE
      AND    VAH_EMP_CODE = P_EMP_CODE
      AND    VAH_SYS_ID =  VAD_VAH_SYS_ID
      AND    VAH_APPR_UID IS NOT NULL
      GROUP BY VAH_EMP_CODE,VAH_DT,VAD_VAH_SYS_ID,ALLW_CODE
      UNION ALL SELECT VAH_EMP_CODE,VAH_DT,VAD_VAH_SYS_ID,ALLW_CODE,
            SUM(DECODE(ALLW_EARN_DEDUC,'E',NVL(VAD_LC_AMOUNT,0),0)) - SUM(DECODE(ALLW_EARN_DEDUC,'D',NVL(VAD_LC_AMOUNT,0),0) ) VAD_LC_AMOUNT
      FROM  PT_VAR_ALLW_DETAIL,PM_ALLOWANCE,PT_VAR_ALLW_HEAD
      WHERE ALLW_CODE=VAD_ALLW_CODE
      AND   VAH_DT = P_DATE
      AND   VAH_EMP_CODE = P_EMP_CODE
      AND   VAH_SYS_ID =  VAD_VAH_SYS_ID
      AND   VAH_TXN_CODE = 'AIR'
      AND   VAH_APPR_UID IS NOT NULL
      GROUP BY VAH_EMP_CODE,VAH_DT,VAD_VAH_SYS_ID, ALLW_CODE;

CURSOR C_GET_NO_OF_DAYS_PRESENT(P_EMP_CODE IN VARCHAR2,P_START_DATE IN DATE) IS
      SELECT SUM(NVL(ATND_HRS_DAYS,0))
      FROM   PT_ATTENDANCE_DETAIL , PT_ATTENDANCE_HEAD
      WHERE  ATNH_COMP_CODE       =  P_COMP_CODE
      AND    ATND_ATNH_SYS_ID     = ATNH_SYS_ID
      AND    ATND_EMP_CODE        = P_EMP_CODE
      AND    ATNH_APPR_UID IS NOT NULL
      AND    ATND_DT      BETWEEN   To_Date(M_PARA_DATE,'DD/MM/YYYY') AND P_START_DATE ;

accrued_days number;


CURSOR C_MTH_SAL (P_NO IN NUMBER)IS
      SELECT SUM(VAD_LC_AMOUNT * DECODE(ALLW_EARN_DEDUC,'E',1,-1))
          FROM   PT_VAR_ALLW_DETAIL,PT_VAR_ALLW_HEAD,PT_LEAVE_APPLICATION_HEAD,PM_ALLOWANCE
          WHERE  VAD_EMP_CODE   = LVAH_EMP_CODE
        AND   (VAH_DT = LVAH_APPR_START_DT OR VAH_DT = To_Date(M_PARA_DATE,'DD/MM/YYYY')) -- ADDED BY VINOD
          AND   LVAH_TXN_CODE  = P_LEVEL_NO
          AND   LVAH_NO        = P_NO-- TO_NUMBER( :CP_LV_NO)
          AND   LVAH_COMP_CODE =P_COMP_CODE
          AND   VAD_VAH_SYS_ID = VAH_SYS_ID
          AND   VAH_REF_SYS_ID = LVAH_SYS_ID -- ADDED BY ASHIK FOR THE ISSUE CMSL-501013 ON 09/FEB/2011
          AND   VAH_APPR_UID IS NOT NULL
          AND   VAD_ALLW_CODE=ALLW_CODE
        AND   VAD_ALLW_CODE NOT IN (SELECT ALLWM_LV_ALLW_CODE FROM PM_ALLOWANCE_MAPPING
        WHERE ALLWM_ALLW_CODE IN (SELECT LVA_ALLW_CODE FROM PM_LEAVE_ALLOWANCE ,PT_LEAVE_APPLICATION_HEAD
      WHERE LVAH_NO = P_NO
        AND LVAH_TXN_CODE = P_LEVEL_NO
        AND LVAH_COMP_CODE =P_COMP_CODE
        AND LVAH_LV_CATG_CODE = LVA_CATG_CODE
        AND LVAH_LV_TYPE_CODE = LVA_TYPE_CODE)
        AND ALLWM_LV_CATG_CODE = LVAH_LV_CATG_CODE);

   M_MTH_SAL     NUMBER;

CURSOR C_LEAVE_SAL(P_NO IN NUMBER) IS
      SELECT SUM(VAD_LC_AMOUNT)
          FROM PT_VAR_ALLW_DETAIL,PT_VAR_ALLW_HEAD,PT_LEAVE_APPLICATION_HEAD
          WHERE VAD_EMP_CODE   = LVAH_EMP_CODE
      AND (VAH_DT = LVAH_APPR_START_DT OR VAH_DT = To_Date(M_PARA_DATE,'DD/MM/YYYY'))-- ADDED BY VINOD
          AND   LVAH_TXN_CODE  = P_LEVEL_NO
          AND   LVAH_NO        =  P_NO--TO_NUMBER(:CP_LV_NO)
          AND    LVAH_COMP_CODE = P_COMP_CODE
          AND   VAD_VAH_SYS_ID = VAH_SYS_ID
          AND VAH_APPR_UID IS NOT NULL
      AND VAD_ALLW_CODE IN (SELECT DISTINCT ALLWM_LV_ALLW_CODE FROM PM_ALLOWANCE_MAPPING);

     P_NO_OF_DAYS_OR_HRS_PRESENT NUMBER(5,2);
     M_NO_OF_DAYS_MTH NUMBER;
     --M_MTH_SAL     NUMBER;
     M_LEAVE_SAL   NUMBER;
     M_TOT_PAY_SAL NUMBER;


CURSOR CQ5 (P_EMP_CODE IN VARCHAR2)IS
      SELECT DISTINCT LNAH_COMP_CODE, LNAH_EMP_CODE,  LNAH_LA_CODE "LOAN_TYPE",
             NVL(LNAH_PRINCIPAL_LC_AMOUNT, 0) - NVL(LNAH_PAID_LC_AMOUNT, 0) "LOANPENDING"
      FROM     PT_LOAN_ADV_HEAD,PS_FINAL_PROC
      WHERE  FP_COMP_CODE  = P_COMP_CODE
      AND    FP_EARN_DEDUC = 'E'
      AND      FP_COMP_CODE  = LNAH_COMP_CODE
      AND    LNAH_EMP_CODE = P_EMP_CODE
      AND    FP_ALLW_CODE  = LNAH_ALLW_CODE
      AND      LNAH_APPR_UID IS NOT NULL
      GROUP BY LNAH_COMP_CODE,LNAH_EMP_CODE,LNAH_LA_CODE,LNAH_PRINCIPAL_LC_AMOUNT,LNAH_PAID_LC_AMOUNT;

CURSOR C_AC(P_START_DT IN DATE,P_EMP_CODE IN VARCHAR2,P_CATG_CODE IN VARCHAR2) IS
        SELECT SUM(NVL(LVAC_ACCRUED_DAYS,0)) - SUM(NVL(LVAC_AVAILED_DAYS,0))
        FROM   PS_LEAVE_ACCRUAL_CURR
        WHERE  LVAC_YEAR * 100 + LVAC_MONTH <= TO_NUMBER(TO_CHAR(P_START_DT,'YYYYMM')) -- ADDED BY ASHIK FOR THE ISSUE ALFOZAN-607507ON 10/OCT/2011
        AND    LVAC_EMP_CODE = P_EMP_CODE
        AND    LVAC_LV_CODE  = P_CATG_CODE;

CURSOR C_GET_LANG_CODE IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;


BEGIN

   hrmsdbpkg_pay_valid.P_VAL_COMP_PARA(P_COMP_CODE, 'CPTODT', 'CPTODT', TEMP, M_PARA_DATE, TEMP_NUM, 'E');
   DELETE FROM PW_LEAVE_SALARY WHERE  LS_REP_KEY_NO = P_REP_KEY_NO;
   DELETE FROM  PW_LEAVE_SALARY_Q1 WHERE lsq_rep_key_no = p_rep_key_no;
   DELETE FROM  PW_LEAVE_SALARY_SAL WHERE lss_rep_key_no = p_rep_key_no;
   DELETE FROM  PW_LEAVE_SALARY_LOAN WHERE lsl_rep_key_no = p_rep_key_no;

      DELETE FROM OW_REP_COLS WHERE REP_KEY_NO = P_REP_KEY_NO;


    MM_LANG_CODE := NULL;

    IF C_GET_LANG_CODE%ISOPEN THEN
       CLOSE C_GET_LANG_CODE;
    END IF;

    OPEN C_GET_LANG_CODE;
    FETCH C_GET_LANG_CODE INTO MM_LANG_CODE;
    CLOSE C_GET_LANG_CODE;

  INSERT INTO OW_REP_COLS
(REP_SYS_ID, REP_NAME, COL_TYPE, COL_NAME, COL_TAB_NAME, COL_LEVEL, COL_LINK_LEVEL, COL_LINK, LINK_COLUMN_YN, COL_SEQ, SUB_WHERE_COND, SUB_TAB_NAME, SUB_RET_NAME, COL_LABEL_NAME, COL_ORDER_YN, COL_ORDER_SEQ, COL_FORMAT_MASK, COL_WIDTH, COL_ORDER_ASC_DESC, COL_MATRIX_TYPE, COL_FORMULA, COL_FOR_DATA_TYPE, REP_TYPE_FLAG, REP_USER_ID, COL_DISP_YN, REP_COL_SYS_ID, COL_ALIGN, COL_CASE, REP_COL_CR_UID, REP_COL_CR_DT, REP_COL_UPD_UID, REP_COL_UPD_DT, COL_LABEL_BL_NAME, COL_FORMULA_YN, COL_EXPORT_WIDTH, COL_EXPORT_WRAP_YN, SUB_CLIENT_ID, SUB_INST_CODE, SUB_SECURITY_CODE, REP_CLIENT_ID, REP_INST_CODE, REP_SECURITY_CODE, LINK_CLIENT_ID, LINK_INST_CODE, LINK_SECURITY_CODE, COL_CLIENT_ID, COL_INST_CODE, COL_SECURITY_CODE, CURR_FORMAT_YN_NUM, CURR_FORMAT_LC_FC, CURR_COL_NAME, REP_KEY_NO,COL_LABEL_NAME_LANG_01,COL_LABEL_NAME_LANG_02,COL_LABEL_NAME_LANG_03,COL_LABEL_NAME_LANG_04,COL_LABEL_NAME_LANG_05,COL_LABEL_NAME_LANG_06,COL_LABEL_NAME_LANG_07,COL_LABEL_NAME_LANG_08,COL_LABEL_NAME_LANG_09,COL_LABEL_NAME_LANG_10)
SELECT REP_SYS_ID, REP_NAME, COL_TYPE, COL_NAME, COL_TAB_NAME, COL_LEVEL, COL_LINK_LEVEL, COL_LINK, LINK_COLUMN_YN, COL_SEQ, SUB_WHERE_COND, SUB_TAB_NAME, SUB_RET_NAME, COL_LABEL_NAME, COL_ORDER_YN, COL_ORDER_SEQ, COL_FORMAT_MASK, COL_WIDTH, COL_ORDER_ASC_DESC, COL_MATRIX_TYPE, COL_FORMULA, COL_FOR_DATA_TYPE, REP_TYPE_FLAG, REP_USER_ID, COL_DISP_YN, REP_COL_SYS_ID, COL_ALIGN, COL_CASE, REP_COL_CR_UID, REP_COL_CR_DT, REP_COL_UPD_UID, REP_COL_UPD_DT, COL_LABEL_BL_NAME, COL_FORMULA_YN, COL_EXPORT_WIDTH, COL_EXPORT_WRAP_YN, SUB_CLIENT_ID, SUB_INST_CODE, SUB_SECURITY_CODE, C.REP_CLIENT_ID, C.REP_INST_CODE, C.REP_SECURITY_CODE, LINK_CLIENT_ID, LINK_INST_CODE, LINK_SECURITY_CODE, COL_CLIENT_ID, COL_INST_CODE, COL_SECURITY_CODE, CURR_FORMAT_YN_NUM, CURR_FORMAT_LC_FC, CURR_COL_NAME, P_REP_KEY_NO,COL_LABEL_NAME_LANG_01,COL_LABEL_NAME_LANG_02,COL_LABEL_NAME_LANG_03,COL_LABEL_NAME_LANG_04,COL_LABEL_NAME_LANG_05,COL_LABEL_NAME_LANG_06,COL_LABEL_NAME_LANG_07,COL_LABEL_NAME_LANG_08,COL_LABEL_NAME_LANG_09,COL_LABEL_NAME_LANG_10 FROM REP_COLS C, IP_REP_INFO WHERE REP_SYS_ID = REP_ID AND  REP_KEY_NO = P_REP_KEY_NO;



   --DUMMY(2);
   FOR I IN CQ1
   LOOP
   IF C_LVS_TXN_REF%ISOPEN THEN
      CLOSE C_LVS_TXN_REF;
   END IF;

   OPEN C_LVS_TXN_REF(I.LVAH_NO,I.E_CODE);
   FETCH C_LVS_TXN_REF INTO M_TXN_REF;
   CLOSE C_LVS_TXN_REF;

   IF C_LST_LV%ISOPEN THEN
        CLOSE C_LST_LV;
   END IF;

   OPEN C_LST_LV(I.LV_START_DT,I.E_CODE);
   FETCH C_LST_LV INTO LST_DT;
   CLOSE C_LST_LV;

   IF C_LST_RES%ISOPEN THEN
        CLOSE C_LST_RES;
   END IF;

   OPEN C_LST_RES(I.E_CODE);
     FETCH C_LST_RES INTO LST_RES_DT;
     CLOSE C_LST_RES;

   FOR M IN CQ4(I.E_COMP_CODE,I.E_CODE)
            LOOP

            INSERT INTO PW_LEAVE_SALARY_Q1 ( LSQ_COMP_CODE, LSQ_REP_KEY_NO,LSQ_ROW_NO,
                                             LSQ_EMPA_COMP_CODE,
                                             LSQ_EMPA_CODE,
                                             LSQ_EMPA_FROM_DT,
                                             LSQ_EMPA_UPTO_DT,
                                             LSQ_EMPA_ALLW_CODE,
                                             LSQ_ALLW_DESC,
                                             LSQ_EMPA_FC_AMOUNT )
                                    VALUES ( P_COMP_CODE,
                                             P_REP_KEY_NO,M.SRLNO,
                                             M.EMPA_COMP_CODE,
                                             M.EMPA_CODE,
                                             M.EMPA_FROM_DT,
                                             M.EMPA_UPTO_DT,
                                             M.EMPA_ALLW_CODE,
                                             M.ALLW_DESC,
                                             M.EMPA_FC_AMOUNT);
             END LOOP;

   FOR K IN CQ3(I.E_CODE)
         LOOP

                OPEN ALLW2(K.ALLW_CODE_SAL);
                  FETCH ALLW2 INTO M_ALLW2;
                              CLOSE ALLW2;
         INSERT INTO PW_LEAVE_SALARY_SAL ( LSS_COMP_CODE,
                                           LSS_REP_KEY_NO,
                                           LSS_EMP_CODE,
                                           LSS_MONTH,
                                           LSS_ALLW_CODE,
                                           LSS_AMOUNT )
                                  VALUES ( P_COMP_CODE,
                                           P_REP_KEY_NO,
                                           K.FP_EMP_CODE,
                                           K.FP_PROC_MTH,
                                           K.ALLW_CODE_SAL||'-'||M_ALLW2,
                                           K.AMT);



          END LOOP;

   FOR J IN CQ2(I.LV_CALC_START_DT,I.E_CODE)
      LOOP

      OPEN ALLW1(j.ALLW_CODE_VAD);
                  FETCH ALLW1 INTO M_ALLW1;
                  CLOSE ALLW1;

         INSERT INTO  PW_LEAVE_SALARY_SAL ( LSS_COMP_CODE, LSS_REP_KEY_NO,
                                             LSS_EMP_CODE,
                                             LSS_ALLW_CODE,
                                             LSS_AMOUNT)
                                    VALUES ( P_COMP_CODE,
                                             P_REP_KEY_NO,
                                             j.VAH_EMP_CODE,
                                             j.ALLW_CODE_VAD||'-'||M_ALLW1,
                                             j.VAD_LC_AMOUNT);
         END LOOP;

         P_NO_OF_DAYS_OR_HRS_PRESENT := 0;

                  OPEN  C_GET_NO_OF_DAYS_PRESENT(I.E_CODE,I.LV_START_DT) ;
                  FETCH C_GET_NO_OF_DAYS_PRESENT INTO P_NO_OF_DAYS_OR_HRS_PRESENT ;
                  CLOSE C_GET_NO_OF_DAYS_PRESENT ;
  M_NO_OF_DAYS_MTH := HRDBP_NO_DAYS_PRESENT_ABSENT (P_COMP_CODE, I.E_CODE, P_M_CPMTH, 'P');    -- Added by MathanKumar P for MARJAN_INT-1684959 on 16/03/2020

          IF C_MTH_SAL%ISOPEN THEN
                 CLOSE C_MTH_SAL;
            END IF;

          OPEN C_MTH_SAL(I.LVAH_NO);
            FETCH C_MTH_SAL INTO M_MTH_SAL;
            --RETURN NVL(M_MTH_SAL,0);
            CLOSE C_MTH_SAL;

          IF C_LEAVE_SAL%ISOPEN THEN
                 CLOSE C_LEAVE_SAL;
            END IF;
            OPEN C_LEAVE_SAL(I.LVAH_NO);

            FETCH C_LEAVE_SAL INTO M_LEAVE_SAL;

    --RETURN NVL(M_MTH_SAL,0);
            CLOSE C_LEAVE_SAL;

           M_TOT_PAY_SAL := ( NVL(M_MTH_SAL ,0) + NVL(M_LEAVE_SAL ,0));

    FOR N IN CQ5(I.E_CODE)
               LOOP
             --
               INSERT INTO PW_LEAVE_SALARY_LOAN (lsl_comp_code, lsl_rep_key_no, LSL_LNAH_COMP_CODE,
                                                  LSQ_LNAH_EMP_CODE,
                                                  LSQ_LOAN_TYPE,
                                                  LSQ_LOAN_PENDING)
                                         VALUES ( p_comp_code,
                                             p_rep_key_no,N.LNAH_COMP_CODE,
                                                  N.LNAH_EMP_CODE,
                                                  N.LOAN_TYPE,
                                                  N.LOANPENDING);
               END LOOP;

                 IF C_AC%ISOPEN THEN
                         CLOSE C_AC;
                    END IF;

                    OPEN C_AC(I.LV_START_DT,I.E_CODE,I.LVAH_LV_CATG_CODE);
                      FETCH C_AC INTO ACCRUED_DAYS;
                    CLOSE C_AC;
 INSERT INTO PW_LEAVE_SALARY ( LS_COMP_CODE,
                                         LS_REP_KEY_NO,
                                         LS_EMP_CODE,
                                         LS_EMP_NAME,
                                         LS_DIVN_NAME,
                                         LS_DEPT_NAME,
                                         LS_TXN_REF,
                                         LS_LST_DT,
                                         LS_RES_DT,
                                         LS_START_DT,
                                         LS_END_DT,
                                         LS_APPR_DAYS,
                                         LS_ACCRUED_DAYS,
                                         LS_ALLW_SAL,
                                         LS_VAD_DESC,
                                         LS_NO_OF_DAYS_MTH,
                                         LS_MONTH_SAL,
                                         LS_LEAVE_SAL,
                                         LS_ACTUAL_LV_DAYS,
                                         LS_TOTAL_PAY)
                                VALUES ( P_COMP_CODE,
                                         P_REP_KEY_NO,
                                         I.E_CODE,
                                         I.E_NAME,
                                         I.DIVN_NAME,
                                         I.DEPT_NAME,
                                         M_TXN_REF,
                                         LST_DT,
                                         LST_RES_DT,
                                         I.LV_START_DT,
                                         I.LV_END_DT,
                                         I.LVAH_APPR_DAYS,
                                         ACCRUED_DAYS,
                                         M_ALLW1,
                                         M_ALLW2,
                                         M_NO_OF_DAYS_MTH,
                                         M_MTH_SAL,
                                         M_LEAVE_SAL,
                                         I.LVAH_ACTUAL_LV_DAYS,
                                         M_TOT_PAY_SAL);

   END LOOP;

END P_LEAVE_SALARY;


PROCEDURE P_PAYSLIP_PRINT ( P_COMP_CODE     IN VARCHAR2,
                            P_REP_KEY_NO    IN NUMBER,
                            P_FM_EMP        IN VARCHAR2,
                            P_TO_EMP        IN VARCHAR2,
                            P_FM_DIVN       IN VARCHAR2,
                            P_TO_DIVN       IN VARCHAR2,
                            P_FM_DEPT       IN VARCHAR2,
                            P_TO_DEPT       IN VARCHAR2,
                            P_FM_LOCN       IN VARCHAR2,
                            P_TO_LOCN       IN VARCHAR2,
                            P_FM_CC         IN VARCHAR2,
                            P_TO_CC         IN VARCHAR2,
                            P_FM_CONT_TYPE  IN VARCHAR2,
                            P_TO_CONT_TYPE  IN VARCHAR2,
                            P_FM_GRADE      IN VARCHAR2,
                            P_TO_GRADE      IN VARCHAR2,
                            P_FM_COUNTRY    IN VARCHAR2,
                            P_TO_COUNTRY    IN VARCHAR2,
                            P_PROC_MTH      IN NUMBER,
                            P_MODE_TYPE     IN VARCHAR2,
                            P_PAY_TYPE      IN VARCHAR2,
                            P_PYBSDYFLAG_EA IN VARCHAR2) IS

MM_LANG_CODE VARCHAR2(240);

CURSOR C_Q1 IS
      SELECT DISTINCT EMP_COMP_CODE  Q_1_EMP_COMP_CODE,EMP_DIVN_CODE Q_1_EMP_DIVN_CODE,EMP_DEPT_CODE Q_1_EMP_DEPT_CODE,
               EMP_CODE Q_1_EMP_CODE,EMP_JOB_TITLE_CODE Q_1_EMP_JOB_TITLE_CODE,
       DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',
             EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',
             EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10)      Q_1_EMP_NAME,
             EMPY_PAY_TYPE,DECODE(EMPY_PAY_MODE,'C','CASH','B','BANK','Q','CHEQUE')EMPY_PAY_MODE,
               BANK_AC_NO Q_1_EMPY_BANK_CODE,
               DECODE(MM_LANG_CODE,'ENG',BANK_SHORT_NAME, 'LANG_01',BANK_SHORT_NAME_LANG_01, 'LANG_02', BANK_SHORT_NAME_LANG_02, 'LANG_03', BANK_SHORT_NAME_LANG_03, 'LANG_04',
              BANK_SHORT_NAME_LANG_04, 'LANG_05', BANK_SHORT_NAME_LANG_05, 'LANG_06',BANK_SHORT_NAME_LANG_06, 'LANG_07',BANK_SHORT_NAME_LANG_07, 'LANG_08',BANK_SHORT_NAME_LANG_08,
              'LANG_09',BANK_SHORT_NAME_LANG_09, 'LANG_10', BANK_SHORT_NAME_LANG_10) Q_1_BANK_NAME,
               EMPY_BANK_REMARKS Q_1_EMPY_BANK_REMARKS,
               DECODE(MM_LANG_CODE,'ENG',DIVN_SHORT_NAME, 'LANG_01',DIVN_SHORT_NAME_LANG_01, 'LANG_02', DIVN_SHORT_NAME_LANG_02, 'LANG_03', DIVN_SHORT_NAME_LANG_03, 'LANG_04',
              DIVN_SHORT_NAME_LANG_04, 'LANG_05', DIVN_SHORT_NAME_LANG_05, 'LANG_06',DIVN_SHORT_NAME_LANG_06, 'LANG_07',DIVN_SHORT_NAME_LANG_07, 'LANG_08',DIVN_SHORT_NAME_LANG_08,
              'LANG_09',DIVN_SHORT_NAME_LANG_09, 'LANG_10', DIVN_SHORT_NAME_LANG_10)  Q_1_DIVN_SHORT_NAME,
               DECODE(MM_LANG_CODE,'ENG',DEPT_SHORT_NAME, 'LANG_01',DEPT_SHORT_NAME_LANG_01, 'LANG_02', DEPT_SHORT_NAME_LANG_02, 'LANG_03', DEPT_SHORT_NAME_LANG_03, 'LANG_04',
              DEPT_SHORT_NAME_LANG_04, 'LANG_05', DEPT_SHORT_NAME_LANG_05, 'LANG_06',DEPT_SHORT_NAME_LANG_06, 'LANG_07',DEPT_SHORT_NAME_LANG_07, 'LANG_08',DEPT_SHORT_NAME_LANG_08,
              'LANG_09',DEPT_SHORT_NAME_LANG_09, 'LANG_10', DEPT_SHORT_NAME_LANG_10)    Q_1_DEPT_SHORT_NAME,
              DECODE(MM_LANG_CODE,'ENG',JOB_TITLE_SHORT_DESC, 'LANG_01',JOB_TITLE_SHORT_DESC_LANG_01, 'LANG_02', JOB_TITLE_SHORT_DESC_LANG_02, 'LANG_03', JOB_TITLE_SHORT_DESC_LANG_03, 'LANG_04',
              JOB_TITLE_SHORT_DESC_LANG_04, 'LANG_05', JOB_TITLE_SHORT_DESC_LANG_05, 'LANG_06',JOB_TITLE_SHORT_DESC_LANG_06, 'LANG_07',JOB_TITLE_SHORT_DESC_LANG_07, 'LANG_08',JOB_TITLE_SHORT_DESC_LANG_08,
              'LANG_09',JOB_TITLE_SHORT_DESC_LANG_09, 'LANG_10', JOB_TITLE_SHORT_DESC_LANG_10)   Q_1_JOB_TITLE_SHORT_DESC ,
             EMP_JOIN_DT  Q1_EMP_JOIN_DT ,EMPOD_OFF_MAIL_ID
      FROM   PM_EMP_KEY, FM_DIVISION, FM_DEPARTMENT,PM_JOB_TITLE, PM_EMP_PAY, PM_EMP_PERS,PM_BANK, PS_FINAL_PROC ,
      PM_EMP_OFFICIAL_DETL
      WHERE  EMP_CODE       BETWEEN P_FM_EMP      AND P_TO_EMP
      AND    Nvl(EMP_DIVN_CODE,0)    BETWEEN P_FM_DIVN       AND P_TO_DIVN
      AND    Nvl(EMP_DEPT_CODE,0)     BETWEEN P_FM_DEPT       AND P_TO_DEPT
      AND    Nvl(EMP_LOCN_CODE,0)    BETWEEN P_FM_LOCN       AND P_TO_LOCN
      AND    Nvl(EMP_CC_CODE,0)      BETWEEN P_FM_CC          AND P_TO_CC
      AND    Nvl(EMP_CONT_TYPE_CODE,0)   BETWEEN P_FM_CONT_TYPE    AND  P_TO_CONT_TYPE
      AND    Nvl(EMP_PERSONAL_GRADE,0)   BETWEEN P_FM_GRADE AND P_TO_GRADE
      AND    EMPS_CNTRY_CODE(+)       BETWEEN P_FM_COUNTRY AND P_TO_COUNTRY
      AND       EMP_COMP_CODE =     P_COMP_CODE
      AND      BANK_CODE(+)     =    EMPY_BANK_CODE
      AND    JOB_TITLE_CODE(+) =     EMP_JOB_TITLE_CODE
      AND       EMPY_COMP_CODE  =          EMP_COMP_CODE
      AND    EMPY_CODE = EMP_CODE
      AND    DIVN_CODE(+) = EMP_DIVN_CODE
      AND    DIVN_COMP_CODE(+) =         EMP_COMP_CODE
      AND    DEPT_CODE(+) = EMP_DEPT_CODE
      AND    DEPT_COMP_CODE(+) =               EMP_COMP_CODE
      AND    DEPT_DIVN_CODE(+) =                   EMP_DIVN_CODE
      AND    EMPS_COMP_CODE(+) = EMP_COMP_CODE
      AND    EMPS_CODE(+) = EMP_CODE
      AND    EMPOD_EMP_CODE(+) = EMP_CODE
      AND    (EMP_STATUS IN('1','2','3')  OR EMP_END_OF_SERVICE_DT > LAST_DAY(TO_DATE(P_PROC_MTH, 'YYYYMM') )) -- added by ashik for the issue ALSCO-666890 on 14/feb/2012
      AND    FP_COMP_CODE = P_COMP_CODE
      AND    FP_EMP_CODE = EMP_CODE
      AND    FP_PROC_MTH = P_PROC_MTH
      AND    EMPY_PAY_TYPE = P_PAY_TYPE
      AND    EMPY_PAY_MODE = DECODE(P_MODE_TYPE,'C','C','Q','Q','B','B','A',FP_PAY_MODE) -- added by deebak on 03/06/2007 for ALJABER-160431
      ORDER BY EMP_DIVN_CODE,EMP_DEPT_CODE,EMP_CODE;

CURSOR C_Q2(P_EMP_CODE IN VARCHAR2) IS
      SELECT FP_ALLW_CODE Q_2_FP_ALLW_CODE, FP_CURR_CODE Q_2_FP_CURR_CODE,
             FP_EMP_CODE Q_2_FP_EMP_CODE,NVL(FP_FC_AMOUNT, 0) Q_2_FP_FC_AMOUNT,
             NVL(FP_LC_AMOUNT, 0) Q_2_FP_LC_AMOUNT,ALLW_TYPE Q_2_ALLW_TYPE,
               FP_COMP_CODE Q_2_FP_COMP_CODE,
               DECODE(MM_LANG_CODE,'ENG',ALLW_SHORT_DESC, 'LANG_01',ALLW_SHORT_DESC_LANG_01, 'LANG_02', ALLW_SHORT_DESC_LANG_02, 'LANG_03', ALLW_SHORT_DESC_LANG_03, 'LANG_04',
              ALLW_SHORT_DESC_LANG_04, 'LANG_05', ALLW_SHORT_DESC_LANG_05, 'LANG_06',ALLW_SHORT_DESC_LANG_06, 'LANG_07',ALLW_SHORT_DESC_LANG_07, 'LANG_08',ALLW_SHORT_DESC_LANG_08,
              'LANG_09',ALLW_SHORT_DESC_LANG_09, 'LANG_10', ALLW_SHORT_DESC_LANG_10)  Q_2_ALLW_SHORT_DESC
      FROM     PS_FINAL_PROC , PM_ALLOWANCE
      WHERE  FP_COMP_CODE  = P_COMP_CODE
      AND    FP_EMP_CODE   = P_EMP_CODE
      AND    FP_PROC_MTH   = P_PROC_MTH
      AND    ALLW_CODE     = FP_ALLW_CODE
      AND    FP_EARN_DEDUC = 'E'
      ORDER BY ALLW_TYPE;

CURSOR C_Q2_SUM(P_EMP_CODE IN VARCHAR2) IS
      SELECT Sum(NVL(FP_FC_AMOUNT, 0)) Q_2_FP_FC_AMOUNT,
             Sum(NVL(FP_LC_AMOUNT, 0)) Q_2_FP_LC_AMOUNT
        FROM     PS_FINAL_PROC , PM_ALLOWANCE
      WHERE  FP_COMP_CODE  = P_COMP_CODE
      AND    FP_EMP_CODE   = P_EMP_CODE
      AND    FP_PROC_MTH   = P_PROC_MTH
      AND    ALLW_CODE     = FP_ALLW_CODE
      AND    FP_EARN_DEDUC = 'E'
      ORDER BY ALLW_TYPE;




CURSOR C_Q3_SUM(P_EMP_CODE IN VARCHAR2) IS
      SELECT Sum(Nvl(FP_LC_AMOUNT,0))Q_3_FP_LC_AMOUNT,
             Sum(Nvl(FP_FC_AMOUNT,0))Q_3_FP_FC_AMOUNT
      FROM     PS_FINAL_PROC , PM_ALLOWANCE
      WHERE  FP_COMP_CODE  = P_COMP_CODE
      AND    FP_EMP_CODE   = P_EMP_CODE
      AND    FP_PROC_MTH   = P_PROC_MTH
      AND    ALLW_CODE     = FP_ALLW_CODE
      AND    FP_EARN_DEDUC = 'D'
      ORDER BY ALLW_TYPE;

CURSOR C_Q3(P_EMP_CODE IN VARCHAR2) IS
      SELECT FP_ALLW_CODE Q_3_FP_ALLW_CODE,FP_CURR_CODE Q_3_FP_CURR_CODE,
             FP_EMP_CODE Q_3_FP_EMP_CODE,NVL(FP_FC_AMOUNT, 0) Q_3_FP_FC_AMOUNT,
             NVL(FP_LC_AMOUNT, 0) Q_3_FP_LC_AMOUNT,ALLW_TYPE Q_3_ALLW_TYPE,
               FP_COMP_CODE Q_3_FP_COMP_CODE,
               DECODE(MM_LANG_CODE,'ENG',ALLW_SHORT_DESC, 'LANG_01',ALLW_SHORT_DESC_LANG_01, 'LANG_02', ALLW_SHORT_DESC_LANG_02, 'LANG_03', ALLW_SHORT_DESC_LANG_03, 'LANG_04',
              ALLW_SHORT_DESC_LANG_04, 'LANG_05', ALLW_SHORT_DESC_LANG_05, 'LANG_06',ALLW_SHORT_DESC_LANG_06, 'LANG_07',ALLW_SHORT_DESC_LANG_07, 'LANG_08',ALLW_SHORT_DESC_LANG_08,
              'LANG_09',ALLW_SHORT_DESC_LANG_09, 'LANG_10', ALLW_SHORT_DESC_LANG_10) Q_3_ALLW_SHORT_DESC
      FROM     PS_FINAL_PROC , PM_ALLOWANCE
      WHERE  FP_COMP_CODE  = P_COMP_CODE
      AND    FP_EMP_CODE   = P_EMP_CODE
      AND    FP_PROC_MTH   = P_PROC_MTH
      AND    ALLW_CODE     = FP_ALLW_CODE
      AND    FP_EARN_DEDUC = 'D'
      ORDER BY ALLW_TYPE;



CURSOR C_Q4(P_EMP_CODE IN VARCHAR2) IS
      SELECT SUM(ATND_HRS_DAYS)     Q_4_ATND_HRS_DAYS
      FROM   PT_ATTENDANCE_DETAIL,     PT_ATTENDANCE_HEAD, PM_EMP_KEY
      WHERE  ATNH_COMP_CODE    = P_COMP_CODE
      AND    ATND_ATNH_SYS_ID  =  ATNH_SYS_ID
      AND    EMP_COMP_CODE     = P_COMP_CODE
      AND    EMP_CODE          = ATND_EMP_CODE
      AND    EMP_DIVN_CODE     =  ATND_DIVN_CODE
      AND    EMP_DEPT_CODE     = ATND_DEPT_CODE
      AND    EMP_CODE          = P_EMP_CODE
      AND    EMP_STATUS IN ('1','2','3','9')
      AND    ATND_DT BETWEEN To_Date(P_PROC_MTH,'YYYYMM')  AND Last_Day(To_Date(P_PROC_MTH,'YYYYMM'));

   M_NO_OF_DAYS_LEAVE                PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_DAYS_LV_DURING_CPMTH      PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_SL_LV_DAYS                    PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_DAYS_LWP_DURING_CPMTH     PW_FS.NO_OF_DAYS%TYPE;
   P_STATUS                          PW_FS.FLAG%TYPE := NULL;
   P_NO_OF_DAYS_OR_HRS_PRESENT       PW_FS.NO_OF_DAYS%TYPE; -- No. of days Absent
   M_NO_OF_DAY_BET_PERIOD  PW_FS.NO_OF_DAYS%TYPE; -- Total No. of days between Eff. dates
   M_NO_OF_DAYS_IN_MONTH   PW_FS.NO_OF_DAYS%TYPE; -- Total No. of days in Month

CURSOR C_GET_NO_OF_DAYS_PRESENT(P_EMP_CODE IN VARCHAR2) IS
      SELECT SUM(NVL(ATND_HRS_DAYS,0))
      FROM   PT_ATTENDANCE_DETAIL , PT_ATTENDANCE_HEAD
      WHERE  ATNH_COMP_CODE       = P_COMP_CODE
      AND    ATND_ATNH_SYS_ID     = ATNH_SYS_ID
      AND    ATND_EMP_CODE        = P_EMP_CODE
      AND    ATNH_APPR_UID IS NOT NULL
      AND    ATND_DT BETWEEN   To_Date(P_PROC_MTH,'YYYYMM') AND Last_Day(To_Date(P_PROC_MTH,'YYYYMM'));

CURSOR C1(P_EMP_CODE IN VARCHAR2) IS
      SELECT NVL(LVAP_LWP_PAY_DAYS,0)
      FROM   PT_LEAVE_APPLICATION_HEAD, PT_LEAVE_SICK_PAY_CALC, PM_EMP_LEAVE , PM_LEAVE
      WHERE  LVAH_COMP_CODE       = P_COMP_CODE
      AND    LVAH_EMP_CODE        = P_EMP_CODE
      AND    LVAH_SYS_ID          = LVAP_LVAH_SYS_ID
      AND    LVAP_FHNL_L          = 'L'
        AND    LVAH_APPR_UID  IS NOT NULL
      AND    LVAH_CANC_UID IS NULL
      AND    EMPL_CODE            = P_EMP_CODE
      AND    LVAH_LV_CATG_CODE    = EMPL_LV_CATG_CODE
      AND    LVAH_DT         BETWEEN To_Date(P_PROC_MTH,'YYYYMM') AND Last_Day(To_Date(P_PROC_MTH,'YYYYMM'))
      AND    EMPL_LV_CATG_CODE    = LV_CATG_CODE
      AND    LV_TYPE_CODE         = '3';


CURSOR C_EMP_LV_AND_RESUMPTION_DTLS(P_EMP_CODE IN VARCHAR2) IS
      SELECT 'W' A_LR_TYPE ,LWP_FROM_DT A_START_DT ,LWP_UPTO_DT A_END_DT ,
              TO_DATE('') A_RESUMPTION_DT ,LWP_DAYS    A_NO_OF_DAYS_LEAVE
      FROM    PT_LWP
      WHERE  LWP_COMP_CODE = P_COMP_CODE
      AND    LWP_EMP_CODE  = P_EMP_CODE
      AND   ((LWP_FROM_DT  BETWEEN To_Date(P_PROC_MTH,'YYYYMM') AND Last_Day(To_Date(P_PROC_MTH,'YYYYMM'))
      OR     LWP_UPTO_DT   BETWEEN To_Date(P_PROC_MTH,'YYYYMM') AND Last_Day(To_Date(P_PROC_MTH,'YYYYMM')) )
      OR     (To_Date(P_PROC_MTH,'YYYYMM')      BETWEEN LWP_FROM_DT  AND LWP_UPTO_DT
          OR      Last_Day(To_Date(P_PROC_MTH,'YYYYMM'))      BETWEEN LWP_FROM_DT AND LWP_UPTO_DT))
      AND    LWP_APPR_UID  IS NOT NULL
      AND    LWP_REF_SYS_ID IS NULL --added by deebak on 30/09/2007 for DANA-176884
      UNION
      SELECT 'L' A_LR_TYPE ,LVAH_APPR_START_DT A_START_DT ,
              NVL(LVAH_RESU_DT,LVAH_APPR_END_DT) A_END_DT ,
              TO_DATE('') A_RESUMPTION_DT ,LVAH_APPR_DAYS A_NO_OF_DAYS_LEAVE
      FROM    PT_LEAVE_APPLICATION_HEAD  , PM_EMP_LEAVE , PM_LEAVE
      WHERE   LVAH_COMP_CODE             = P_COMP_CODE
      AND     LVAH_EMP_CODE              = P_EMP_CODE
      AND    (LVAH_APPR_START_DT         BETWEEN To_Date(P_PROC_MTH,'YYYYMM') AND Last_Day(To_Date(P_PROC_MTH,'YYYYMM'))
      OR      LVAH_APPR_END_DT           BETWEEN To_Date(P_PROC_MTH,'YYYYMM') AND Last_Day(To_Date(P_PROC_MTH,'YYYYMM'))
      OR      LVAH_RESU_DT               BETWEEN To_Date(P_PROC_MTH,'YYYYMM') AND Last_Day(To_Date(P_PROC_MTH,'YYYYMM'))
      OR      LVAH_RESU_DT IS NULL )
      AND     LVAH_EMP_CODE              = EMPL_CODE
      AND     LVAH_APPR_UID  IS NOT NULL
      AND     LVAH_LV_CATG_CODE          = EMPL_LV_CATG_CODE
      AND     EMPL_LV_CATG_CODE          = LV_CATG_CODE
      AND     LV_TYPE_CODE = '1'
      AND     (LVAH_CANC_UID IS NULL AND LVAH_CANC_DT IS NULL);

CURSOR C_JOIN_DT(P_EMP_CODE IN VARCHAR2) IS
       SELECT EMP_JOIN_DT
         FROM   PM_EMP_KEY
         WHERE  EMP_CODE = P_EMP_CODE;

   M_EMP_JOIN_DT DATE;

   M_NO_DAYS_PRSNT NUMBER;

CURSOR EMP_OT_HRS(P_EMP_CODE IN VARCHAR2) IS
      SELECT  SUM(NVL(OTD_TOTAL_OT_HRS, 0)) TOTAL_OT_HRS
      FROM    PT_OVERTIME_DETAIL        , PT_OVERTIME_HEAD--, PS_DUMMY_PROC
      WHERE   OTH_COMP_CODE     = P_COMP_CODE
      AND     OTD_OTH_SYS_ID    = OTH_SYS_ID
      AND     OTD_EMP_CODE      = P_EMP_CODE
      AND     OTD_DT            BETWEEN  To_Date(P_PROC_MTH,'YYYYMM') AND Last_Day(To_Date(P_PROC_MTH,'YYYYMM'))
      AND     OTH_APPR_UID IS NOT NULL;

CURSOR C_GET_YEAR IS
      SELECT ASY_FIN_YEAR
      FROM   PM_IT_ASSESSMENT_YEAR
      WHERE  TO_CHAR(TO_DATE(P_PROC_MTH,'YYYY/MM')) BETWEEN  ASY_FM_DT AND ASY_TO_DT;



   M_FIN_YEAR VARCHAR(10);
SAL PW_FS.AMOUNT%TYPE;
  X PW_FS.AMOUNT%TYPE;
  Y PW_FS.AMOUNT%TYPE;

  CNT NUMBER(10);

CURSOR C_DENO IS
      SELECT *
      FROM PM_DENOMINATION
      ORDER BY DENO_NOTE DESC;

 M_OT_HRS       NUMBER;
 M_PAYDAYS      NUMBER;
 NET_TOTAL PW_FS.AMOUNT%TYPE;
 M_DENO_VALUE_1 NUMBER(13,3);
 M_DENO_VALUE_2 NUMBER(13,3);
 M_DENO_VALUE_3 NUMBER(13,3);
 M_DENO_VALUE_4 NUMBER(13,3);
 M_DENO_VALUE_5 NUMBER(13,3);
 M_DENO_VALUE_6 NUMBER(13,3);
 M_DENO_VALUE_7 NUMBER(13,3);
 M_DENO_VALUE_8 NUMBER(13,3);
 M_DENO_VALUE_9 NUMBER(13,3);
 M_DENO_VALUE_10 NUMBER(13,3);
 M_BALANCE_VALUE NUMBER(13,3);
 M_Q3 C_Q3%ROWTYPE;
 M_KEY_NO    NUMBER;
 M_FP_ALLW_CODE VARCHAR2(12);
 M_FP_CURR_CODE VARCHAR2(12);
 M_FP_EMP_CODE VARCHAR2(12);
 M_FP_FC_AMOUNT NUMBER;
 M_FP_LC_AMOUNT NUMBER;
 M_ALLW_TYPE VARCHAR2(1);
 M_FP_COMP_CODE VARCHAR2(12);
 M_ALLW_SHORT_DESC VARCHAR2(240);
 M_SUM_FP_FC_AMOUNT NUMBER;
 M_SUM_FP_LC_AMOUNT NUMBER;

 M_D_ALLW_CODE VARCHAR2(12);
 M_D_CURR_CODE VARCHAR2(12);
 M_D_EMP_CODE VARCHAR2(12);
 M_D_FC_AMOUNT NUMBER;
 M_D_LC_AMOUNT NUMBER;
 M_D_ALLW_TYPE VARCHAR2(1);
 M_D_COMP_CODE VARCHAR2(12);
 M_D_ALLW_SHORT_DESC VARCHAR2(240);
 M_SUM_D_FC_AMOUNT NUMBER;
 M_SUM_D_LC_AMOUNT NUMBER;


 CURSOR C_GET_COMP_CURRENCY IS
      SELECT PARA_VALUE
   FROM   PM_PARAMETER
   WHERE  PARA_TYPE = 'BASECURR';

   M_CURR PW_FS.CURR_CODE%TYPE ;

CURSOR C_CURR(P_CURR IN VARCHAR2) IS
SELECT
CURR_DECIMAL,CURR_FMT_MASK FROM FM_CURRENCY
 WHERE CURR_CODE = P_CURR;

   M_ATND_HRS_DAYS NUMBER;
   M_CURR_DECIMAL NUMBER;
   M_CURR_FMT_MASK VARCHAR(30);
   M_FP_FC_AMOUNT_1 VARCHAR2(30);
   M_Q_3_FP_FC_AMOUNT VARCHAR2(30);
   M_SUM_FP_FC_AMOUNT_1 VARCHAR2(30);
   M_SUM_D_FC_AMOUNT_1  VARCHAR2(30);
    --M_Q3 C_Q3%ROWTYPE;

-- ADDED BY ASHIK FOR THE OVERTIME DETAILS TO BE PRINTED IN PAYSLIP

    CURSOR C_OT IS
        SELECT OT_CODE, OT_DESC
        FROM PM_OVERTIME, PM_OVERTIME_COMP
        WHERE OT_CODE = OTC_CODE
        AND OTC_COMP_CODE = P_COMP_CODE;

    M_OT_CODE VARCHAR2(12);
    M_OT_DESC VARCHAR2(240);
    M_OT_DTL VARCHAR2(4000);
    M_OT_INS VARCHAR2(1);
    M_NO_DAYS_ABSNT NUMBER;
    M_NO_DAYS_LWP NUMBER;
    M_TOT_OT_HRS NUMBER;

-- END ASHIK - OVERTIME


CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;


BEGIN

  --DUMMY('IN');
UPDATE IP_REP_INFO SET REP_VALUE_6 = 'Payslip Printing for this month' ||' - '|| P_PROC_MTH WHERE REP_KEY_NO = P_REP_KEY_NO;

COMMIT;
   DELETE FROM PW_PAYSLIP_PRINT WHERE  PAYS_REP_KEY_NO = P_REP_KEY_NO;
   DELETE FROM PW_PAYSLIP_PRINT_DEDUC WHERE  PAYS_REP_KEY_NO = P_REP_KEY_NO;
   DELETE FROM PW_PAYSLIP_PRINT_OVT WHERE  PAYSO_REP_KEY_NO = P_REP_KEY_NO; -- ASHIK FOR OVERTIME
   --DUMMY(1);

      MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;

   M_KEY_NO := 0;


   FOR I IN C_Q1 LOOP
       M_FP_FC_AMOUNT_1 := null;
       M_Q_3_FP_FC_AMOUNT := null;
       M_SUM_FP_FC_AMOUNT_1 := NULL;
       M_OT_INS := 'N'; -- ASHIK 08-FEB-2017
    FOR J IN C_Q2(I.Q_1_EMP_CODE) LOOP

      IF C_CURR%ISOPEN THEN
         CLOSE C_CURR;
      END IF;

      OPEN C_CURR(J.Q_2_FP_CURR_CODE);
      FETCH C_CURR INTO  M_CURR_DECIMAL ,M_CURR_FMT_MASK;
      CLOSE C_CURR;


      M_FP_FC_AMOUNT_1 := To_Char(J.Q_2_FP_FC_AMOUNT,M_CURR_FMT_MASK);


      /*IF C_Q2%ISOPEN THEN
         CLOSE C_Q2;
      END IF;

      OPEN C_Q2(I.Q_1_EMP_CODE);
      FETCH C_Q2 INTO M_FP_ALLW_CODE,M_FP_CURR_CODE,M_FP_EMP_CODE,M_FP_FC_AMOUNT,M_FP_LC_AMOUNT,M_ALLW_TYPE,M_FP_COMP_CODE,M_ALLW_SHORT_DESC;
      CLOSE C_Q2;   */

      IF C_Q2_SUM%ISOPEN THEN
         CLOSE C_Q2_SUM;
      END IF;

      OPEN C_Q2_SUM(I.Q_1_EMP_CODE);
      FETCH C_Q2_SUM INTO  M_SUM_FP_FC_AMOUNT,M_SUM_FP_LC_AMOUNT;
      CLOSE C_Q2_SUM;
--      M_SUM_FP_FC_AMOUNT_1 := To_Char(M_SUM_FP_LC_AMOUNT,M_CURR_FMT_MASK);
      M_SUM_FP_FC_AMOUNT_1 := To_Char(M_SUM_FP_FC_AMOUNT,M_CURR_FMT_MASK);
    /* IF C_Q3%ISOPEN THEN
         CLOSE C_Q3;
      END IF;

      OPEN C_Q3(I.Q_1_EMP_CODE);
      FETCH C_Q3 INTO M_Q3;
      CLOSE C_Q3;    */


      FOR k IN C_Q3(I.Q_1_EMP_CODE) LOOP
       M_Q_3_FP_FC_AMOUNT := To_Char(K.Q_3_FP_FC_AMOUNT,M_CURR_FMT_MASK);

          INSERT INTO PW_PAYSLIP_PRINT_DEDUC ( PAYS_COMP_CODE,
                                               PAYS_REP_KEY_NO,
                                               PAYS_EMP_CODE,
                                               PAYS_DEDU_ALLW_DESC,
                                               PAYS_DEDU_CURR_CODE,
                                               PAYS_DEDU_FC_AMOUNT,
                                               PAYS_DEDU_LC_AMOUNT,
                                               PAYS_ALLW_CODE,
                                               PAYS_ALLW_TYPE)
                                      VALUES ( P_COMP_CODE,
                                               P_REP_KEY_NO,
                                               I.Q_1_EMP_CODE,
                                               K.Q_3_ALLW_SHORT_DESC,
                                               K.Q_3_FP_CURR_CODE,
                                               M_Q_3_FP_FC_AMOUNT,
                                               K.Q_3_FP_LC_AMOUNT,
                                               K.Q_3_FP_ALLW_CODE,
                                               K.Q_3_ALLW_TYPE);

      END LOOP;

      IF C_Q3_SUM%ISOPEN THEN
         CLOSE C_Q3_SUM;
      END IF;

      OPEN C_Q3_SUM(I.Q_1_EMP_CODE);
      FETCH C_Q3_SUM INTO  M_SUM_D_FC_AMOUNT,M_SUM_D_LC_AMOUNT;
      CLOSE C_Q3_SUM;

--      M_SUM_D_FC_AMOUNT_1 := To_Char(M_SUM_D_LC_AMOUNT,M_CURR_FMT_MASK);
      M_SUM_D_FC_AMOUNT_1 := To_Char(M_SUM_D_LC_AMOUNT,M_CURR_FMT_MASK);
      IF C_Q4%ISOPEN THEN
         CLOSE C_Q4;
      END IF;

      OPEN C_Q4(I.Q_1_EMP_CODE);
      FETCH C_Q4 INTO M_ATND_HRS_DAYS;
      CLOSE C_Q4;

      M_KEY_NO := M_KEY_NO +1;
      M_NO_DAYS_PRSNT :=0;
--      M_NO_DAYS_PRSNT := P_GET_DAYS (P_COMP_CODE, I.Q_1_EMP_CODE,P_FM_DT,Last_Day(To_Date(P_PROC_MTH,'YYYYMM')),P_PYBSDYFLAG_EA ,P_PAY_TYPE );
      M_NO_DAYS_PRSNT := HRDBP_NO_DAYS_PRESENT_ABSENT(P_COMP_CODE,I.Q_1_EMP_CODE, P_PROC_MTH,'P');
      M_NO_DAYS_ABSNT := HRDBP_NO_DAYS_PRESENT_ABSENT(P_COMP_CODE,I.Q_1_EMP_CODE, P_PROC_MTH,'A');
      M_NO_DAYS_LWP   := HRDBP_NO_DAYS_PRESENT_ABSENT(P_COMP_CODE,I.Q_1_EMP_CODE, P_PROC_MTH,'L');


           IF C_GET_YEAR%ISOPEN THEN
              CLOSE C_GET_YEAR;
         END IF;

           OPEN C_GET_YEAR;
           FETCH C_GET_YEAR INTO M_FIN_YEAR;
           CLOSE C_GET_YEAR;



      /*  IF C_GET_COMP_CURRENCY%ISOPEN THEN
          CLOSE C_GET_COMP_CURRENCY;
        END IF;

       OPEN C_GET_COMP_CURRENCY;
          FETCH C_GET_COMP_CURRENCY INTO M_CURR;
       CLOSE C_GET_COMP_CURRENCY;    */

       M_CURR:=F_GET_BASE_CURR(P_COMP_CODE);

      OPEN EMP_OT_HRS(I.Q_1_EMP_CODE);
      FETCH EMP_OT_HRS INTO M_OT_HRS;
      CLOSE EMP_OT_HRS;

      --SRW.REFERENCE(:CF_NET_PAYABLE);
      NET_TOTAL := (NVL(M_FP_FC_AMOUNT, 0) - NVL(M_FP_LC_AMOUNT, 0));
  --RETURN(NET_TOTAL);
   SAL := NET_TOTAL;
   CNT := 1 ;

   M_DENO_VALUE_1 := 0;
   M_DENO_VALUE_2 := 0;
   M_DENO_VALUE_3 := 0;
   M_DENO_VALUE_4 := 0;
   M_DENO_VALUE_5 := 0;
   M_DENO_VALUE_6 := 0;
   M_DENO_VALUE_7 := 0;
   M_DENO_VALUE_8 := 0;
   M_DENO_VALUE_9 := 0;
   M_DENO_VALUE_10 :=0;
        --DUMMY(14);
   FOR A IN C_DENO
   LOOP
      EXIT WHEN CNT > 10 OR SAL <= 0;
      --DUMMY(15);
      IF SAL >= A.DENO_NOTE THEN
         X := SAL/A.DENO_NOTE;
         IF CNT = 1 THEN
            M_DENO_VALUE_1 := NVL(FLOOR(X),0);
            SAL := MOD(SAL,A.DENO_NOTE);
          ELSIF CNT = 2 THEN
            M_DENO_VALUE_2 := NVL(FLOOR(X),0);
            SAL := MOD(SAL,A.DENO_NOTE);
          ELSIF CNT = 3 THEN
            M_DENO_VALUE_3 := NVL(FLOOR(X),0);
            SAL := MOD(SAL,A.DENO_NOTE);
          ELSIF CNT = 4 THEN
            M_DENO_VALUE_4 := NVL(FLOOR(X),0);
            SAL := MOD(SAL,A.DENO_NOTE);
          ELSIF CNT = 5 THEN
            M_DENO_VALUE_5 := NVL(FLOOR(X),0);
            SAL := MOD(SAL,A.DENO_NOTE);
          ELSIF CNT = 6 THEN
            M_DENO_VALUE_6 := NVL(FLOOR(X),0);
            SAL := MOD(SAL,A.DENO_NOTE);
          ELSIF CNT = 7 THEN
            M_DENO_VALUE_7 := NVL(FLOOR(X),0);
            SAL := MOD(SAL,A.DENO_NOTE);
          ELSIF CNT = 8 THEN
            M_DENO_VALUE_8 := NVL(FLOOR(X),0);
            SAL := MOD(SAL,A.DENO_NOTE);
          ELSIF CNT = 9 THEN
            M_DENO_VALUE_9 := NVL(FLOOR(X),0);
            SAL := MOD(SAL,A.DENO_NOTE);
          ELSIF CNT = 10 THEN
            M_DENO_VALUE_10 := NVL(FLOOR(X),0);
            SAL := MOD(SAL,A.DENO_NOTE);
          END IF;
      END IF;
      CNT := CNT + 1;
     M_BALANCE_VALUE := NVL(SAL,0);
   END LOOP;
   --DUMMY(16);

               INSERT INTO PW_PAYSLIP_PRINT ( PAYS_COMP_CODE,
                                              PAYS_REP_KEY_NO,
                                              PAYS_I_SYS_ID,
                                              PAYS_EMP_CODE,
                                              PAYS_EMP_NAME,
                                              PAYS_DIVN_CODE,
                                              PAYS_DIVN_NAME,
                                              PAYS_DEPT_CODE,
                                              PAYS_DEPT_NAME,
                                              PAYS_JOIN_DT,
                                              PAYS_NO_OF_DAYS,
                                              PAYS_DAYS_ABSNT,
                                              PAYS_DAYS_LWP,
                                              PAYS_OT_HRS,
                                              PAYS_JOB_TITLE_CODE,
                                              PAYS_JOB_TITLE_DESC,
                                              PAYS_EARN_ALLW_DESC,
                                              PAYS_EARN_CURR_CODE,
                                              PAYS_EARN_FC_AMOUNT,
                                              PAYS_EARN_LC_AMOUNT,
                                              PAYS_PAY_MODE,
                                              PAYS_BANK_CODE,
                                              PAYS_BANK_NAME,
                                              PAYS_BANK_REMARKS,
                                              PAYS_DENO_VALUE_1,
                                              PAYS_DENO_VALUE_2,
                                              PAYS_DENO_VALUE_3,
                                              PAYS_DENO_VALUE_4,
                                              PAYS_DENO_VALUE_5,
                                              PAYS_DENO_VALUE_6,
                                              PAYS_DENO_VALUE_7,
                                              PAYS_DENO_VALUE_8,
                                              PAYS_DENO_VALUE_9,
                                              PAYS_DENO_VALUE_10,
                                              PAYS_NET_PAY,
                                              PAYS_BAL_VALUE,
                                              PAYS_CURR_CODE,
                                              PAYS_MONTH,
                                              PAYS_FIN_YEAR ,
                                              PAYS_EARN_SUM_AMOUNT,
                                              PAYS_DEDU_SUM_AMOUNT,
                                              PAYS_ALLW_CODE,
                                              PAYS_ALLW_TYPE,
                                              PAYS_MAIL_ID)
                                     VALUES ( P_COMP_cODE,
                                              P_REP_KEY_NO,
                                              P_REP_KEY_NO||' - '||M_KEY_NO,
                                              I.Q_1_EMP_CODE,
                                              I.Q_1_EMP_NAME,
                                              I.Q_1_EMP_DIVN_CODE,
                                              I.Q_1_DIVN_SHORT_NAME,
                                              I.Q_1_EMP_DEPT_CODE,
                                              I.Q_1_DEPT_SHORT_NAME,
                                              I.Q1_EMP_JOIN_DT,
                                              M_NO_DAYS_PRSNT,
                                              M_NO_DAYS_ABSNT,
                                              M_NO_DAYS_LWP,
                                              M_OT_HRS,
                                              I.Q_1_EMP_JOB_TITLE_CODE ,
                                              I.Q_1_JOB_TITLE_SHORT_DESC ,
                                              J.Q_2_ALLW_SHORT_DESC,
                                              J.Q_2_FP_CURR_CODE,
                                              M_FP_FC_AMOUNT_1,
                                              J.Q_2_FP_LC_AMOUNT,
                                              I.EMPY_PAY_MODE,
                                              I.Q_1_EMPY_BANK_CODE,
                                              I.Q_1_BANK_NAME,
                                              I.Q_1_EMPY_BANK_REMARKS,
                                              M_DENO_VALUE_1,
                                              M_DENO_VALUE_2,
                                              M_DENO_VALUE_3,
                                              M_DENO_VALUE_4,
                                              M_DENO_VALUE_5,
                                              M_DENO_VALUE_6,
                                              M_DENO_VALUE_7,
                                              M_DENO_VALUE_8,
                                              M_DENO_VALUE_9,
                                              M_DENO_VALUE_10,
                                              SAL,
                                              M_BALANCE_VALUE,
                                              M_CURR,
                                              P_PROC_MTH,
                                              M_FIN_YEAR,
                                              M_SUM_FP_FC_AMOUNT_1,
                                              M_SUM_D_FC_AMOUNT_1,
                                              J.Q_2_FP_ALLW_CODE,
                                              J.Q_2_ALLW_TYPE,
                                              I.EMPOD_OFF_MAIL_ID);



               END LOOP;

   -- ADDED BY ASHIK FOR THE OVERTIME DETAILS TO BE PRINTED IN PAYSLIP
        IF M_OT_INS = 'N' THEN
            FOR O IN C_OT LOOP
                M_OT_DTL:= NULL;
                M_OT_INS := 'Y';
                M_TOT_OT_HRS :=0;
                SELECT P_GET_OT_PAYSLIP(P_COMP_CODE,I.Q_1_EMP_CODE, P_PROC_MTH, O.OT_CODE) INTO M_OT_DTL
                FROM DUAL;

                SELECT P_GET_OT_TOT(P_COMP_CODE,I.Q_1_EMP_CODE, P_PROC_MTH, O.OT_CODE) INTO M_TOT_OT_HRS
                FROM DUAL;

                IF M_OT_DTL <> 'No Overtime' THEN
                    INSERT INTO PW_PAYSLIP_PRINT_OVT (PAYSO_COMP_CODE, PAYSO_REP_KEY_NO, PAYSO_EMP_CODE, PAYSO_OT_CODE, PAYSO_OT_DESC, PAYSO_OT_DTLS, PAYSO_OT_TOTAL_HRS )
                    VALUES
                    (P_COMP_CODE, P_REP_KEY_NO, I.Q_1_EMP_CODE, O.OT_CODE, O.OT_CODE || '-' || O.OT_DESC, M_OT_DTL, M_TOT_OT_HRS);
                END IF;
            END LOOP;
        END IF;
-- END ASHIK - OVERTIME



   END LOOP;
        -- END LOOP;
      --END LOOP;
  -- END LOOP;
    --RETURN M_NO_DAYS_PRSNT;


END P_PAYSLIP_PRINT;


FUNCTION P_GET_DAYS ( P_COMP_CODE IN VARCHAR2,
                      P_EMP_CODE  IN VARCHAR2,
                      P_FROM_DT   IN DATE,
                      P_TO_DT     IN DATE,
                      P_PYBSDYFLAG_EA IN VARCHAR2,
                      P_EMPY_PAY_TYPE IN VARCHAR2) RETURN NUMBER IS

    M_NO_OF_DAYS_LEAVE                PW_FS.NO_OF_DAYS%TYPE;
  M_NO_OF_DAYS_LV_DURING_CPMTH      PW_FS.NO_OF_DAYS%TYPE;
  M_NO_OF_SL_LV_DAYS                    PW_FS.NO_OF_DAYS%TYPE;
  M_NO_OF_DAYS_LWP_DURING_CPMTH     PW_FS.NO_OF_DAYS%TYPE;
  P_STATUS                          PW_FS.FLAG%TYPE := NULL;
  P_NO_OF_DAYS_OR_HRS_PRESENT       PW_FS.NO_OF_DAYS%TYPE; -- No. of days Absent
  M_NO_OF_DAY_BET_PERIOD  PW_FS.NO_OF_DAYS%TYPE; -- Total No. of days between Eff. dates
  M_NO_OF_DAYS_IN_MONTH   PW_FS.NO_OF_DAYS%TYPE; -- Total No. of days in Month

  CURSOR C_GET_NO_OF_DAYS_PRESENT IS
         SELECT SUM(NVL(ATND_HRS_DAYS,0))
         FROM   PT_ATTENDANCE_DETAIL , PT_ATTENDANCE_HEAD
         WHERE  ATNH_COMP_CODE       = P_COMP_CODE
         AND    ATND_ATNH_SYS_ID     = ATNH_SYS_ID
         AND    ATND_EMP_CODE        = P_EMP_CODE
         AND    ATNH_APPR_UID IS NOT NULL
         AND    ATND_DT      BETWEEN   P_FROM_DT AND P_TO_DT ;

  CURSOR C1 IS
         SELECT   NVL(LVAP_LWP_PAY_DAYS,0)
           FROM   PT_LEAVE_APPLICATION_HEAD, PT_LEAVE_SICK_PAY_CALC, PM_EMP_LEAVE , PM_LEAVE
          WHERE   LVAH_COMP_CODE                 = P_COMP_CODE
            AND   LVAH_EMP_CODE                  = P_EMP_CODE
            AND   LVAH_SYS_ID                = LVAP_LVAH_SYS_ID
            AND   LVAP_FHNL_L   = 'L'
              AND   LVAH_APPR_UID  IS NOT NULL
            AND   LVAH_CANC_UID IS NULL
            AND   EMPL_CODE                  = P_EMP_CODE
            AND   LVAH_LV_CATG_CODE          = EMPL_LV_CATG_CODE
            AND   LVAH_DT         BETWEEN P_FROM_DT AND P_TO_DT
            AND   EMPL_LV_CATG_CODE          = LV_CATG_CODE
            AND   LV_TYPE_CODE               = '3';


  CURSOR C_EMP_LV_AND_RESUMPTION_DTLS IS
         SELECT 'W'                    A_LR_TYPE             ,  --MEA issues
                 LWP_FROM_DT                A_START_DT            ,
                 LWP_UPTO_DT              A_END_DT              ,
                 TO_DATE('')            A_RESUMPTION_DT       ,
                 LWP_DAYS                  A_NO_OF_DAYS_LEAVE
          FROM   PT_LWP
          WHERE  LWP_COMP_CODE             = P_COMP_CODE
          AND    LWP_EMP_CODE              = P_EMP_CODE
          AND  ((LWP_FROM_DT               BETWEEN P_FROM_DT AND P_TO_DT
                  OR LWP_UPTO_DT           BETWEEN P_FROM_DT AND P_TO_DT )
                  OR (P_FROM_DT                BETWEEN LWP_FROM_DT  AND LWP_UPTO_DT
                      OR P_TO_DT             BETWEEN LWP_FROM_DT AND LWP_UPTO_DT))
          AND    LWP_APPR_UID  IS NOT NULL
          AND    LWP_REF_SYS_ID IS NULL --added by deebak on 30/09/2007 for DANA-176884
          UNION
          SELECT 'L'                          A_LR_TYPE             ,
                 LVAH_APPR_START_DT           A_START_DT            ,
                 /*below 2 lines commented and added by deebak on 30/09/2007 for DANA-176884
                 LVAH_APPR_END_DT             A_END_DT              , */
                 NVL(LVAH_RESU_DT,LVAH_APPR_END_DT)            A_END_DT              ,
                 TO_DATE('')                  A_RESUMPTION_DT       ,
                 LVAH_APPR_DAYS               A_NO_OF_DAYS_LEAVE
          FROM   PT_LEAVE_APPLICATION_HEAD  , PM_EMP_LEAVE , PM_LEAVE
          WHERE  LVAH_COMP_CODE             = P_COMP_CODE
          AND    LVAH_EMP_CODE              = P_EMP_CODE
          AND  ( LVAH_APPR_START_DT         BETWEEN P_FROM_DT AND P_TO_DT
              OR LVAH_APPR_END_DT           BETWEEN P_FROM_DT AND P_TO_DT
              OR LVAH_RESU_DT               BETWEEN P_FROM_DT AND P_TO_DT
              OR LVAH_RESU_DT IS NULL )
          AND    LVAH_EMP_CODE              = EMPL_CODE
          AND    LVAH_APPR_UID  IS NOT NULL
          AND    LVAH_LV_CATG_CODE          = EMPL_LV_CATG_CODE
          AND    EMPL_LV_CATG_CODE          = LV_CATG_CODE
          AND    LV_TYPE_CODE = '1'
          AND (LVAH_CANC_UID IS NULL AND LVAH_CANC_DT IS NULL);

  CURSOR C_JOIN_DT IS
           SELECT EMP_JOIN_DT
         FROM PM_EMP_KEY
         WHERE EMP_CODE = P_EMP_CODE;
  M_EMP_JOIN_DT DATE;

  CURSOR B4 IS
        SELECT TO_DATE(PARA_VALUE, 'DD/MM/YYYY')
        FROM   PM_COMP_PARAMETER
        WHERE  PARA_CODE = 'CPTODT'
        AND    PARA_COMP_CODE = P_COMP_CODE;


  M_NO_DAYS_PRSNT        NUMBER;
  M_PAYDAYS NUMBER;
  M_PROC_END_DT DATE;

BEGIN

IF B4%ISOPEN THEN
         CLOSE B4;
      END IF;

      OPEN B4;
      FETCH B4 INTO M_PROC_END_DT;
      CLOSE B4;


     P_STATUS := '0' ;
   P_NO_OF_DAYS_OR_HRS_PRESENT := 0;

      IF NVL(P_PYBSDYFLAG_EA, '*') = 'E' THEN
         M_NO_OF_DAYS_IN_MONTH  := M_PAYDAYS ;
      ELSE
           M_NO_OF_DAYS_IN_MONTH := (P_TO_DT - P_FROM_DT) + 1;
        END IF ;
    M_NO_OF_DAY_BET_PERIOD := M_NO_OF_DAYS_IN_MONTH ;

-- ADDED BY ASHIK FOR THE ISSUE AMM-677770 FOR PAY10.6 AS LOGGED IN PAY9 ON 07/MAR/2012
OPEN C_JOIN_DT;
FETCH C_JOIN_DT INTO M_EMP_JOIN_DT;
CLOSE C_JOIN_DT;
    IF M_EMP_JOIN_DT BETWEEN P_FROM_DT AND P_TO_DT THEN
        M_NO_OF_DAY_BET_PERIOD := P_TO_DT - M_EMP_JOIN_DT + 1;
    END IF;
-- ADDED BY ASHIK FOR THE ISSUE AMM-677770 FOR PAY10.6 AS LOGGED IN PAY9 ON 07/MAR/2012

      OPEN  C_GET_NO_OF_DAYS_PRESENT ;
      FETCH C_GET_NO_OF_DAYS_PRESENT INTO P_NO_OF_DAYS_OR_HRS_PRESENT ;
      CLOSE C_GET_NO_OF_DAYS_PRESENT ;
      OPEN C1;
      FETCH C1 INTO     M_NO_OF_SL_LV_DAYS;
      CLOSE C1;
      P_NO_OF_DAYS_OR_HRS_PRESENT := NVL(P_NO_OF_DAYS_OR_HRS_PRESENT, 0) + NVL(M_NO_OF_SL_LV_DAYS,0);

     IF P_EMPY_PAY_TYPE IN ('M','T','W','B') THEN -- 'W','B' Added for weekly, biweekly DAF

     FOR C_LEAVE_REC IN C_EMP_LV_AND_RESUMPTION_DTLS
      LOOP

         IF C_LEAVE_REC.A_LR_TYPE = 'L' THEN   -- Leave Details
            IF C_LEAVE_REC.A_START_DT >= P_FROM_DT AND
               C_LEAVE_REC.A_END_DT   <=P_TO_DT   THEN

                        M_NO_OF_DAYS_LV_DURING_CPMTH   :=    C_LEAVE_REC.A_END_DT
                                                       - C_LEAVE_REC.A_START_DT
                                                        + 1 ;

                --END IF;
            ELSIF ((C_LEAVE_REC.A_START_DT <= P_FROM_DT) AND
                   (C_LEAVE_REC.A_END_DT   >= P_TO_DT)) THEN  -- For the Whole month
                    M_NO_OF_DAYS_LV_DURING_CPMTH   := (P_TO_DT - P_FROM_DT) + 1;

            ELSIF C_LEAVE_REC.A_START_DT BETWEEN P_FROM_DT AND P_TO_DT THEN
               IF C_LEAVE_REC.A_END_DT > P_TO_DT THEN -- If leave doesn't fall within this Proc. Month
                  M_NO_OF_DAYS_LV_DURING_CPMTH   :=
                                                  (( P_TO_DT  - C_LEAVE_REC.A_START_DT) + 1 ) ;
               ELSE
                  M_NO_OF_DAYS_LV_DURING_CPMTH   := NVL(M_NO_OF_DAYS_LV_DURING_CPMTH, 0) +
                                                    M_NO_OF_DAYS_LEAVE ;
               END IF ;

            ELSIF C_LEAVE_REC.A_END_DT BETWEEN P_FROM_DT AND P_TO_DT THEN
              M_NO_OF_DAYS_LV_DURING_CPMTH    :=   (C_LEAVE_REC.A_END_DT
                                              - P_FROM_DT)
                                              + 1 ;
            END IF ;
            M_NO_OF_DAYS_LWP_DURING_CPMTH  := NVL( M_NO_OF_DAYS_LWP_DURING_CPMTH ,0) +
                                              NVL(M_NO_OF_DAYS_LV_DURING_CPMTH,0);
            ELSE  -- MEA issues, since salary for the first to leave start paid alrealy

            IF C_LEAVE_REC.A_START_DT >= P_FROM_DT AND
               C_LEAVE_REC.A_END_DT   <= P_TO_DT   THEN
                M_NO_OF_DAYS_LV_DURING_CPMTH   :=    (C_LEAVE_REC.A_END_DT
                                                     - C_LEAVE_REC.A_START_DT)
                                                     + 1 ;
            ELSIF ((C_LEAVE_REC.A_START_DT <= P_FROM_DT) AND
                   (C_LEAVE_REC.A_END_DT   >= P_TO_DT)) THEN  -- For the Whole month
                    M_NO_OF_DAYS_LV_DURING_CPMTH   := (P_TO_DT - P_FROM_DT) + 1;

            ELSIF C_LEAVE_REC.A_START_DT BETWEEN P_FROM_DT AND P_TO_DT THEN

               IF C_LEAVE_REC.A_END_DT > P_TO_DT THEN -- If leave doesn't fall within this Proc. Month
                  M_NO_OF_DAYS_LV_DURING_CPMTH   :=
                                                  (( M_PROC_END_DT  - C_LEAVE_REC.A_START_DT) + 1 ) ;
               ELSE
                  M_NO_OF_DAYS_LV_DURING_CPMTH   := NVL(M_NO_OF_DAYS_LV_DURING_CPMTH, 0) +
                                                    M_NO_OF_DAYS_LEAVE ;
               END IF ;

            ELSIF C_LEAVE_REC.A_END_DT BETWEEN P_FROM_DT AND P_TO_DT THEN
                  M_NO_OF_DAYS_LV_DURING_CPMTH    :=    (C_LEAVE_REC.A_END_DT
                                              - P_FROM_DT)
                                              + 1 ;
            END IF ;
            M_NO_OF_DAYS_LWP_DURING_CPMTH  := NVL( M_NO_OF_DAYS_LWP_DURING_CPMTH ,0) +
                                              NVL(M_NO_OF_DAYS_LV_DURING_CPMTH,0);
       END IF;
     END LOOP ;
      --Total number of days abscent during the period..
      P_NO_OF_DAYS_OR_HRS_PRESENT := NVL(P_NO_OF_DAYS_OR_HRS_PRESENT,0) +
                                     NVL(M_NO_OF_DAYS_LWP_DURING_CPMTH , 0);

      --Total number of days present during the period...
      M_NO_DAYS_PRSNT := NVL((M_NO_OF_DAY_BET_PERIOD - P_NO_OF_DAYS_OR_HRS_PRESENT), 0);

  END IF;

    RETURN M_NO_DAYS_PRSNT;

END P_GET_DAYS;

PROCEDURE P_PRE_PAYSLIP_PRINT ( P_COMP_CODE     IN VARCHAR2,
                                P_REP_KEY_NO    IN NUMBER,
                                P_FM_EMP        IN VARCHAR2,
                                P_TO_EMP        IN VARCHAR2,
                                P_FM_DIVN       IN VARCHAR2,
                                P_TO_DIVN       IN VARCHAR2,
                                P_FM_DEPT       IN VARCHAR2,
                                P_TO_DEPT       IN VARCHAR2,
                                P_FM_LOCN       IN VARCHAR2,
                                P_TO_LOCN       IN VARCHAR2,
                                P_FM_CC         IN VARCHAR2,
                                P_TO_CC         IN VARCHAR2,
                                P_FM_CONT_TYPE  IN VARCHAR2,
                                P_TO_CONT_TYPE  IN VARCHAR2,
                                P_FM_GRADE      IN VARCHAR2,
                                P_TO_GRADE      IN VARCHAR2,
                                P_FM_COUNTRY    IN VARCHAR2,
                                P_TO_COUNTRY    IN VARCHAR2,
                                P_PROC_MTH      IN NUMBER,
                                P_MODE_TYPE     IN VARCHAR2,
                                P_PAY_TYPE      IN VARCHAR2,
                                P_FM_DT         IN DATE,
                                P_TO_DT         IN DATE,
                                P_PYBSDYFLAG_EA IN VARCHAR2 ) IS
--59803 START
MM_LANG_CODE VARCHAR2(240);
CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;
--59803 END

CURSOR C_Q1 IS
      SELECT EMP_COMP_CODE  Q_1_EMP_COMP_CODE,EMP_DIVN_CODE Q_1_EMP_DIVN_CODE,EMP_DEPT_CODE Q_1_EMP_DEPT_CODE,
               EMP_CODE Q_1_EMP_CODE,EMP_JOB_TITLE_CODE Q_1_EMP_JOB_TITLE_CODE,
               --DECODE('ENG', 'ENG', EMP_NAME,     EMP_BL_NAME)            Q_1_EMP_NAME,59803
               DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,
               'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,
               'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,
               'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10)
               Q_1_EMP_NAME,
               EMPY_PAY_TYPE,DECODE(EMPY_PAY_MODE,'C','CASH','B','BANK','Q','CHEQUE')EMPY_PAY_MODE,
               BANK_AC_NO Q_1_EMPY_BANK_CODE,
               --DECODE('ENG','ENG',BANK_SHORT_NAME,BANK_BL_SHORT_NAME) Q_1_BANK_NAME,59803
               DECODE(MM_LANG_CODE, 'ENG',BANK_SHORT_NAME ,'LANG_01',BANK_SHORT_NAME_LANG_01,'LANG_02',
               BANK_SHORT_NAME_LANG_02,'LANG_03',BANK_SHORT_NAME_LANG_03,'LANG_04',BANK_SHORT_NAME_LANG_04,
               'LANG_05',BANK_SHORT_NAME_LANG_05,'LANG_06',BANK_SHORT_NAME_LANG_06,'LANG_07',BANK_SHORT_NAME_LANG_07,
               'LANG_08',BANK_SHORT_NAME_LANG_08,'LANG_09',BANK_SHORT_NAME_LANG_09,'LANG_10',BANK_SHORT_NAME_LANG_10)
                Q_1_BANK_NAME,
               EMPY_BANK_REMARKS Q_1_EMPY_BANK_REMARKS,
               --DECODE('ENG', 'ENG',     DIVN_SHORT_NAME, DIVN_BL_SHORT_NAME)  Q_1_DIVN_SHORT_NAME, 59803
               DECODE(MM_LANG_CODE, 'ENG',DIVN_SHORT_NAME ,'LANG_01',DIVN_SHORT_NAME_LANG_01,'LANG_02',
               DIVN_SHORT_NAME_LANG_02,'LANG_03',DIVN_SHORT_NAME_LANG_03,'LANG_04',DIVN_SHORT_NAME_LANG_04,
               'LANG_05',DIVN_SHORT_NAME_LANG_05,'LANG_06',DIVN_SHORT_NAME_LANG_06,'LANG_07',DIVN_SHORT_NAME_LANG_07,
               'LANG_08',DIVN_SHORT_NAME_LANG_08,'LANG_09',DIVN_SHORT_NAME_LANG_09,'LANG_10',DIVN_SHORT_NAME_LANG_10)
               Q_1_DIVN_SHORT_NAME,
               --DECODE('ENG', 'ENG',   DEPT_SHORT_NAME,  DEPT_BL_SHORT_NAME)     Q_1_DEPT_SHORT_NAME,59803
               DECODE(MM_LANG_CODE, 'ENG',DEPT_SHORT_NAME ,'LANG_01',DEPT_SHORT_NAME_LANG_01,'LANG_02',
               DEPT_SHORT_NAME_LANG_02,'LANG_03',DEPT_SHORT_NAME_LANG_03,'LANG_04',DEPT_SHORT_NAME_LANG_04,
               'LANG_05',DEPT_SHORT_NAME_LANG_05,'LANG_06',DEPT_SHORT_NAME_LANG_06,'LANG_07',DEPT_SHORT_NAME_LANG_07,
               'LANG_08',DEPT_SHORT_NAME_LANG_08,'LANG_09',DEPT_SHORT_NAME_LANG_09,'LANG_10',DEPT_SHORT_NAME_LANG_10)
               Q_1_DEPT_SHORT_NAME,
               --DECODE('ENG', 'ENG',  JOB_TITLE_SHORT_DESC,  JOB_TITLE_BL_SHORT_DESC)     Q_1_JOB_TITLE_SHORT_DESC , 59803
               DECODE(MM_LANG_CODE, 'ENG',JOB_TITLE_SHORT_DESC ,'LANG_01',JOB_TITLE_SHORT_DESC_LANG_01,'LANG_02',
               JOB_TITLE_SHORT_DESC_LANG_02,'LANG_03',JOB_TITLE_SHORT_DESC_LANG_03,'LANG_04',JOB_TITLE_SHORT_DESC_LANG_04,
               'LANG_05',JOB_TITLE_SHORT_DESC_LANG_05,'LANG_06',JOB_TITLE_SHORT_DESC_LANG_06,'LANG_07',JOB_TITLE_SHORT_DESC_LANG_07,
               'LANG_08',JOB_TITLE_SHORT_DESC_LANG_08,'LANG_09',JOB_TITLE_SHORT_DESC_LANG_09,'LANG_10',JOB_TITLE_SHORT_DESC_LANG_10)
               Q_1_JOB_TITLE_SHORT_DESC,
             EMP_JOIN_DT  Q1_EMP_JOIN_DT
      FROM   PM_EMP_KEY, FM_DIVISION, FM_DEPARTMENT,PM_JOB_TITLE, PM_EMP_PAY, PM_EMP_PERS,PM_BANK, PS_DUMMY_PROC
      WHERE  EMP_CODE       BETWEEN P_FM_EMP      AND P_TO_EMP
      AND    Nvl(EMP_DIVN_CODE,0)    BETWEEN P_FM_DIVN       AND P_TO_DIVN
      AND    Nvl(EMP_DEPT_CODE,0)     BETWEEN P_FM_DEPT       AND P_TO_DEPT
      AND    Nvl(EMP_LOCN_CODE,0)    BETWEEN P_FM_LOCN       AND P_TO_LOCN
      AND    Nvl(EMP_CC_CODE,0)      BETWEEN P_FM_CC          AND P_TO_CC
      AND    Nvl(EMP_CONT_TYPE_CODE,0)   BETWEEN P_FM_CONT_TYPE    AND  P_TO_CONT_TYPE
      AND    Nvl(EMP_PERSONAL_GRADE,0)   BETWEEN P_FM_GRADE AND P_TO_GRADE
      AND    EMPS_CNTRY_CODE(+)       BETWEEN P_FM_COUNTRY AND P_TO_COUNTRY
      AND       EMP_COMP_CODE =     P_COMP_CODE
      AND      BANK_CODE(+)     =    EMPY_BANK_CODE
      AND    JOB_TITLE_CODE(+) =     EMP_JOB_TITLE_CODE
      AND       EMPY_COMP_CODE  =          EMP_COMP_CODE
      AND    EMPY_CODE = EMP_CODE
      AND    DIVN_CODE(+) = EMP_DIVN_CODE
      AND    DIVN_COMP_CODE(+) =         EMP_COMP_CODE
      AND    DEPT_CODE(+) = EMP_DEPT_CODE
      AND    DEPT_COMP_CODE(+) =               EMP_COMP_CODE
      AND    DEPT_DIVN_CODE(+) =                   EMP_DIVN_CODE
      AND    EMPS_COMP_CODE(+) = EMP_COMP_CODE
      AND    EMPS_CODE(+) = EMP_CODE
      AND    (EMP_STATUS IN('1','2','3')  OR EMP_END_OF_SERVICE_DT > LAST_DAY(TO_DATE(P_PROC_MTH, 'YYYYMM') )) -- added by ashik for the issue ALSCO-666890 on 14/feb/2012
      AND    DP_COMP_CODE = P_COMP_CODE
      AND    DP_EMP_CODE = EMP_CODE
      AND    DP_PROC_MTH = P_PROC_MTH
      AND    EMPY_PAY_TYPE = P_PAY_TYPE
      AND    EMPY_PAY_MODE = DECODE(P_MODE_TYPE,'C','C','Q','Q','B','B','A',dP_PAY_MODE) -- added by deebak on 03/06/2007 for ALJABER-160431
      ORDER BY EMP_DIVN_CODE,EMP_DEPT_CODE,EMP_CODE;

CURSOR C_Q2(P_EMP_CODE IN VARCHAR2) IS
      SELECT DP_ALLW_CODE Q_2_DP_ALLW_CODE, DP_CURR_CODE Q_2_DP_CURR_CODE,
             DP_EMP_CODE Q_2_DP_EMP_CODE,NVL(DP_FC_AMOUNT, 0) Q_2_DP_FC_AMOUNT,
             NVL(DP_LC_AMOUNT, 0) Q_2_DP_LC_AMOUNT,ALLW_TYPE Q_2_ALLW_TYPE,
               DP_COMP_CODE Q_2_DP_COMP_CODE,
               --DECODE('ENG', 'ENG', ALLW_SHORT_DESC, ALLW_BL_SHORT_DESC) 59803
               DECODE(MM_LANG_CODE, 'ENG',ALLW_SHORT_DESC ,'LANG_01',ALLW_SHORT_DESC_LANG_01,'LANG_02',
               ALLW_SHORT_DESC_LANG_02,'LANG_03',ALLW_SHORT_DESC_LANG_03,'LANG_04',ALLW_SHORT_DESC_LANG_04,
               'LANG_05',ALLW_SHORT_DESC_LANG_05,'LANG_06',ALLW_SHORT_DESC_LANG_06,'LANG_07',ALLW_SHORT_DESC_LANG_07,
               'LANG_08',ALLW_SHORT_DESC_LANG_08,'LANG_09',ALLW_SHORT_DESC_LANG_09,'LANG_10',ALLW_SHORT_DESC_LANG_10)
               Q_2_ALLW_SHORT_DESC
      FROM     PS_DUMMY_PROC , PM_ALLOWANCE
      WHERE  DP_COMP_CODE  = P_COMP_CODE
      AND    DP_EMP_CODE   = P_EMP_CODE
      AND    DP_PROC_MTH   = P_PROC_MTH
      AND    ALLW_CODE     = DP_ALLW_CODE
      AND    DP_EARN_DEDUC = 'E'
      ORDER BY ALLW_TYPE;

CURSOR C_Q2_SUM(P_EMP_CODE IN VARCHAR2) IS
      SELECT Sum(NVL(DP_FC_AMOUNT, 0)) Q_2_DP_FC_AMOUNT,
             Sum(NVL(DP_LC_AMOUNT, 0)) Q_2_DP_LC_AMOUNT
        FROM     PS_DUMMY_PROC , PM_ALLOWANCE
      WHERE  DP_COMP_CODE  = P_COMP_CODE
      AND    DP_EMP_CODE   = P_EMP_CODE
      AND    DP_PROC_MTH   = P_PROC_MTH
      AND    ALLW_CODE     = DP_ALLW_CODE
      AND    DP_EARN_DEDUC = 'E'
      ORDER BY ALLW_TYPE;




CURSOR C_Q3_SUM(P_EMP_CODE IN VARCHAR2) IS
      SELECT Sum(Nvl(DP_LC_AMOUNT,0))Q_3_DP_LC_AMOUNT,
             Sum(Nvl(DP_FC_AMOUNT,0))Q_3_DP_FC_AMOUNT
      FROM     PS_DUMMY_PROC , PM_ALLOWANCE
      WHERE  DP_COMP_CODE  = P_COMP_CODE
      AND    DP_EMP_CODE   = P_EMP_CODE
      AND    DP_PROC_MTH   = P_PROC_MTH
      AND    ALLW_CODE     = DP_ALLW_CODE
      AND    DP_EARN_DEDUC = 'D'
      ORDER BY ALLW_TYPE;

CURSOR C_Q3(P_EMP_CODE IN VARCHAR2) IS
      SELECT DP_ALLW_CODE Q_3_DP_ALLW_CODE,DP_CURR_CODE Q_3_DP_CURR_CODE,
             DP_EMP_CODE Q_3_DP_EMP_CODE,NVL(DP_FC_AMOUNT, 0) Q_3_DP_FC_AMOUNT,
             NVL(DP_LC_AMOUNT, 0) Q_3_DP_LC_AMOUNT,ALLW_TYPE Q_3_ALLW_TYPE,
               DP_COMP_CODE Q_3_DP_COMP_CODE,
               --DECODE('ENG', 'ENG', ALLW_SHORT_DESC, ALLW_BL_SHORT_DESC) 59803
               DECODE(MM_LANG_CODE, 'ENG',ALLW_SHORT_DESC ,'LANG_01',ALLW_SHORT_DESC_LANG_01,'LANG_02',
               ALLW_SHORT_DESC_LANG_02,'LANG_03',ALLW_SHORT_DESC_LANG_03,'LANG_04',ALLW_SHORT_DESC_LANG_04,
               'LANG_05',ALLW_SHORT_DESC_LANG_05,'LANG_06',ALLW_SHORT_DESC_LANG_06,'LANG_07',ALLW_SHORT_DESC_LANG_07,
               'LANG_08',ALLW_SHORT_DESC_LANG_08,'LANG_09',ALLW_SHORT_DESC_LANG_09,'LANG_10',ALLW_SHORT_DESC_LANG_10)
               Q_3_ALLW_SHORT_DESC
      FROM     PS_DUMMY_PROC , PM_ALLOWANCE
      WHERE  DP_COMP_CODE  = P_COMP_CODE
      AND    DP_EMP_CODE   = P_EMP_CODE
      AND    DP_PROC_MTH   = P_PROC_MTH
      AND    ALLW_CODE     = DP_ALLW_CODE
      AND    DP_EARN_DEDUC = 'D'
      ORDER BY ALLW_TYPE;



CURSOR C_Q4(P_EMP_CODE IN VARCHAR2) IS
      SELECT SUM(ATND_HRS_DAYS)     Q_4_ATND_HRS_DAYS
      FROM   PT_ATTENDANCE_DETAIL,     PT_ATTENDANCE_HEAD, PM_EMP_KEY
      WHERE  ATNH_COMP_CODE    = P_COMP_CODE
      AND    ATND_ATNH_SYS_ID  =  ATNH_SYS_ID
      AND    EMP_COMP_CODE     = P_COMP_CODE
      AND    EMP_CODE          = ATND_EMP_CODE
      AND    EMP_DIVN_CODE     =  ATND_DIVN_CODE
      AND    EMP_DEPT_CODE     = ATND_DEPT_CODE
      AND    EMP_CODE          = P_EMP_CODE
      AND    EMP_STATUS IN ('1','2','3','9')
      AND    ATND_DT BETWEEN P_FM_DT  AND P_TO_DT;

   M_NO_OF_DAYS_LEAVE                PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_DAYS_LV_DURING_CPMTH      PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_SL_LV_DAYS                    PW_FS.NO_OF_DAYS%TYPE;
   M_NO_OF_DAYS_LWP_DURING_CPMTH     PW_FS.NO_OF_DAYS%TYPE;
   P_STATUS                          PW_FS.FLAG%TYPE := NULL;
   P_NO_OF_DAYS_OR_HRS_PRESENT       PW_FS.NO_OF_DAYS%TYPE; -- No. of days Absent
   M_NO_OF_DAY_BET_PERIOD  PW_FS.NO_OF_DAYS%TYPE; -- Total No. of days between Eff. dates
   M_NO_OF_DAYS_IN_MONTH   PW_FS.NO_OF_DAYS%TYPE; -- Total No. of days in Month

CURSOR C_GET_NO_OF_DAYS_PRESENT(P_EMP_CODE IN VARCHAR2) IS
      SELECT SUM(NVL(ATND_HRS_DAYS,0))
      FROM   PT_ATTENDANCE_DETAIL , PT_ATTENDANCE_HEAD
      WHERE  ATNH_COMP_CODE       = P_COMP_CODE
      AND    ATND_ATNH_SYS_ID     = ATNH_SYS_ID
      AND    ATND_EMP_CODE        = P_EMP_CODE
      AND    ATNH_APPR_UID IS NOT NULL
      AND    ATND_DT BETWEEN   P_FM_DT AND P_TO_DT;

CURSOR C1(P_EMP_CODE IN VARCHAR2) IS
      SELECT NVL(LVAP_LWP_PAY_DAYS,0)
      FROM   PT_LEAVE_APPLICATION_HEAD, PT_LEAVE_SICK_PAY_CALC, PM_EMP_LEAVE , PM_LEAVE
      WHERE  LVAH_COMP_CODE       = P_COMP_CODE
      AND    LVAH_EMP_CODE        = P_EMP_CODE
      AND    LVAH_SYS_ID          = LVAP_LVAH_SYS_ID
      AND    LVAP_FHNL_L          = 'L'
        AND    LVAH_APPR_UID  IS NOT NULL
      AND    LVAH_CANC_UID IS NULL
      AND    EMPL_CODE            = P_EMP_CODE
      AND    LVAH_LV_CATG_CODE    = EMPL_LV_CATG_CODE
      AND    LVAH_DT         BETWEEN P_FM_DT AND P_TO_DT
      AND    EMPL_LV_CATG_CODE    = LV_CATG_CODE
      AND    LV_TYPE_CODE         = '3';


CURSOR C_EMP_LV_AND_RESUMPTION_DTLS(P_EMP_CODE IN VARCHAR2) IS
      SELECT 'W' A_LR_TYPE ,LWP_FROM_DT A_START_DT ,LWP_UPTO_DT A_END_DT ,
              TO_DATE('') A_RESUMPTION_DT ,LWP_DAYS    A_NO_OF_DAYS_LEAVE
      FROM    PT_LWP
      WHERE  LWP_COMP_CODE = P_COMP_CODE
      AND    LWP_EMP_CODE  = P_EMP_CODE
      AND   ((LWP_FROM_DT  BETWEEN P_FM_DT AND P_TO_DT
      OR     LWP_UPTO_DT   BETWEEN P_FM_DT AND P_TO_DT )
      OR     (P_FM_DT      BETWEEN LWP_FROM_DT  AND LWP_UPTO_DT
          OR      P_TO_DT      BETWEEN LWP_FROM_DT AND LWP_UPTO_DT))
      AND    LWP_APPR_UID  IS NOT NULL
      AND    LWP_REF_SYS_ID IS NULL --added by deebak on 30/09/2007 for DANA-176884
      UNION
      SELECT 'L' A_LR_TYPE ,LVAH_APPR_START_DT A_START_DT ,
              NVL(LVAH_RESU_DT,LVAH_APPR_END_DT) A_END_DT ,
              TO_DATE('') A_RESUMPTION_DT ,LVAH_APPR_DAYS A_NO_OF_DAYS_LEAVE
      FROM    PT_LEAVE_APPLICATION_HEAD  , PM_EMP_LEAVE , PM_LEAVE
      WHERE   LVAH_COMP_CODE             = P_COMP_CODE
      AND     LVAH_EMP_CODE              = P_EMP_CODE
      AND    (LVAH_APPR_START_DT         BETWEEN P_FM_DT AND P_TO_DT
      OR      LVAH_APPR_END_DT           BETWEEN P_FM_DT AND P_TO_DT
      OR      LVAH_RESU_DT               BETWEEN P_FM_DT AND P_TO_DT
      OR      LVAH_RESU_DT IS NULL )
      AND     LVAH_EMP_CODE              = EMPL_CODE
      AND     LVAH_APPR_UID  IS NOT NULL
      AND     LVAH_LV_CATG_CODE          = EMPL_LV_CATG_CODE
      AND     EMPL_LV_CATG_CODE          = LV_CATG_CODE
      AND     LV_TYPE_CODE = '1'
      AND     (LVAH_CANC_UID IS NULL AND LVAH_CANC_DT IS NULL);

CURSOR C_JOIN_DT(P_EMP_CODE IN VARCHAR2) IS
       SELECT EMP_JOIN_DT
         FROM   PM_EMP_KEY
         WHERE  EMP_CODE = P_EMP_CODE;

   M_EMP_JOIN_DT DATE;

   M_NO_DAYS_PRSNT NUMBER;

CURSOR EMP_OT_HRS(P_EMP_CODE IN VARCHAR2) IS
      SELECT  SUM(NVL(OTD_TOTAL_OT_HRS, 0)) TOTAL_OT_HRS
      FROM    PT_OVERTIME_DETAIL        , PT_OVERTIME_HEAD--, PS_DUMMY_PROC
      WHERE   OTH_COMP_CODE     = P_COMP_CODE
      AND     OTD_OTH_SYS_ID    = OTH_SYS_ID
      AND     OTD_EMP_CODE      = P_EMP_CODE
      AND     OTD_DT            BETWEEN  P_FM_DT AND P_TO_DT
      AND     OTH_APPR_UID IS NOT NULL;

CURSOR C_GET_YEAR IS
      SELECT ASY_ASSESSMENT_YEAR
      FROM   PM_IT_ASSESSMENT_YEAR
      WHERE  TO_CHAR(TO_DATE(P_PROC_MTH,'YYYY/MM')) BETWEEN  ASY_FM_DT AND ASY_TO_DT;

   M_FIN_YEAR varchar2(10);
SAL PW_FS.AMOUNT%TYPE;
  X PW_FS.AMOUNT%TYPE;
  Y PW_FS.AMOUNT%TYPE;

  CNT NUMBER(10);

CURSOR C_DENO IS
      SELECT *
      FROM PM_DENOMINATION
      ORDER BY DENO_NOTE DESC;

 M_OT_HRS       NUMBER;
 M_PAYDAYS      NUMBER;
 NET_TOTAL PW_FS.AMOUNT%TYPE;
 M_DENO_VALUE_1 NUMBER(13,3);
 M_DENO_VALUE_2 NUMBER(13,3);
 M_DENO_VALUE_3 NUMBER(13,3);
 M_DENO_VALUE_4 NUMBER(13,3);
 M_DENO_VALUE_5 NUMBER(13,3);
 M_DENO_VALUE_6 NUMBER(13,3);
 M_DENO_VALUE_7 NUMBER(13,3);
 M_DENO_VALUE_8 NUMBER(13,3);
 M_DENO_VALUE_9 NUMBER(13,3);
 M_DENO_VALUE_10 NUMBER(13,3);
 M_BALANCE_VALUE NUMBER(13,3);
 M_Q3 C_Q3%ROWTYPE;
 M_KEY_NO    NUMBER;
 M_FP_ALLW_CODE VARCHAR2(12);
 M_FP_CURR_CODE VARCHAR2(12);
 M_FP_EMP_CODE VARCHAR2(12);
 M_FP_FC_AMOUNT NUMBER;
 M_FP_LC_AMOUNT NUMBER;
 M_ALLW_TYPE VARCHAR2(1);
 M_FP_COMP_CODE VARCHAR2(12);
 M_ALLW_SHORT_DESC VARCHAR2(240);
 M_SUM_FP_FC_AMOUNT NUMBER;
 M_SUM_FP_LC_AMOUNT NUMBER;

 M_D_ALLW_CODE VARCHAR2(12);
 M_D_CURR_CODE VARCHAR2(12);
 M_D_EMP_CODE VARCHAR2(12);
 M_D_FC_AMOUNT NUMBER;
 M_D_LC_AMOUNT NUMBER;
 M_D_ALLW_TYPE VARCHAR2(1);
 M_D_COMP_CODE VARCHAR2(12);
 M_D_ALLW_SHORT_DESC VARCHAR2(240);
 M_SUM_D_FC_AMOUNT NUMBER;
 M_SUM_D_LC_AMOUNT NUMBER;


 CURSOR C_GET_COMP_CURRENCY IS
      SELECT PARA_VALUE
   FROM   PM_PARAMETER
   WHERE  PARA_TYPE = 'BASECURR';

   CURSOR C_CURR(P_CURR IN VARCHAR2) IS
SELECT
CURR_DECIMAL,CURR_FMT_MASK FROM FM_CURRENCY
 WHERE CURR_CODE = P_CURR;


   M_CURR PW_FS.CURR_CODE%TYPE ;
   M_Q_3_dP_FC_AMOUNT VARCHAR2(30);
   M_ATND_HRS_DAYS NUMBER;
   M_CURR_DECIMAL NUMBER;
   M_CURR_FMT_MASK VARCHAR(30);
  M_SUM_FP_FC_AMOUNT_1 VARCHAR2(30);
  M_SUM_D_FC_AMOUNT_1  VARCHAR2(30);

BEGIN
    --59803 START
   MM_LANG_CODE := NULL;
  -- ORNDBPKG_GLOBAL.O_DGET_COMP_CODE(M_COMP_CODE);
   ORNDBPKG_GLOBAL.O_DGET_LANG_CODE(MM_LANG_CODE);

 /*  IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
   END IF;

   OPEN C_LANG;
   FETCH C_LANG INTO MM_LANG_CODE;
   CLOSE C_LANG; */
   --59803 END
   --DUMMY(1);
   --DUMMY('V MM_LANG_CODE'||MM_LANG_CODE||'P_REP_KEY_NO'||P_REP_KEY_NO);

   DELETE FROM PW_PRE_PAYSLIP_PRINT WHERE  PAYS_REP_KEY_NO = P_REP_KEY_NO;


   M_KEY_NO := 0;



   FOR I IN C_Q1
   LOOP
      --DUMMY(3);

    FOR J IN C_Q2(I.Q_1_EMP_CODE)
      LOOP
       --DUMMY(4);

         IF C_CURR%ISOPEN THEN
         CLOSE C_CURR;
      END IF;

      OPEN C_CURR(J.Q_2_dP_CURR_CODE);
      FETCH C_CURR INTO  M_CURR_DECIMAL ,M_CURR_FMT_MASK;
      CLOSE C_CURR;

      /*IF C_Q2%ISOPEN THEN
         CLOSE C_Q2;
      END IF;

      OPEN C_Q2(I.Q_1_EMP_CODE);
      FETCH C_Q2 INTO M_FP_ALLW_CODE,M_FP_CURR_CODE,M_FP_EMP_CODE,M_FP_FC_AMOUNT,M_FP_LC_AMOUNT,M_ALLW_TYPE,M_FP_COMP_CODE,M_ALLW_SHORT_DESC;
      CLOSE C_Q2;   */
       --DUMMY(5);

      IF C_Q2_SUM%ISOPEN THEN
         CLOSE C_Q2_SUM;
      END IF;

      OPEN C_Q2_SUM(I.Q_1_EMP_CODE);
      FETCH C_Q2_SUM INTO  M_SUM_FP_FC_AMOUNT,M_SUM_FP_LC_AMOUNT;
      CLOSE C_Q2_SUM;
      M_SUM_FP_FC_AMOUNT_1 := To_Char(M_SUM_FP_LC_AMOUNT,M_CURR_FMT_MASK);

      --  FOR K IN C_Q3(I.Q_1_EMP_CODE) LOOP
      /*IF C_Q3%ISOPEN THEN
         CLOSE C_Q3;
      END IF;

      OPEN C_Q3(I.Q_1_EMP_CODE);
      FETCH C_Q3 INTO M_Q3;
      CLOSE C_Q3; */

      FOR k IN C_Q3(I.Q_1_EMP_CODE) LOOP
       M_Q_3_dP_FC_AMOUNT := To_Char(K.Q_3_dP_FC_AMOUNT,M_CURR_FMT_MASK);

          INSERT INTO pw_pre_payslip_print_deduc ( PAYS_COMP_CODE,
                                               PAYS_REP_KEY_NO,
                                               PAYS_EMP_CODE,
                                               PAYS_DEDU_ALLW_DESC,
                                               PAYS_DEDU_CURR_CODE,
                                               PAYS_DEDU_FC_AMOUNT,
                                               PAYS_DEDU_LC_AMOUNT,
                                               PAYS_ALLW_CODE,
                                               PAYS_ALLW_TYPE)
                                      VALUES ( P_COMP_CODE,
                                               P_REP_KEY_NO,
                                               I.Q_1_EMP_CODE,
                                               K.Q_3_ALLW_SHORT_DESC,
                                               K.Q_3_dP_CURR_CODE,
                                               M_Q_3_dP_FC_AMOUNT,
                                               K.Q_3_dP_LC_AMOUNT,
                                               K.Q_3_dP_ALLW_CODE,
                                               K.Q_3_ALLW_TYPE);

      END LOOP;

       --DUMMY(6);

      IF C_Q3_SUM%ISOPEN THEN
         CLOSE C_Q3_SUM;
      END IF;

      OPEN C_Q3_SUM(I.Q_1_EMP_CODE);
      FETCH C_Q3_SUM INTO  M_SUM_D_FC_AMOUNT,M_SUM_D_LC_AMOUNT;
      CLOSE C_Q3_SUM;

      M_SUM_D_FC_AMOUNT_1 := To_Char(M_SUM_D_FC_AMOUNT,M_CURR_FMT_MASK);

       --DUMMY(7);
      IF C_Q4%ISOPEN THEN
         CLOSE C_Q4;
      END IF;

      OPEN C_Q4(I.Q_1_EMP_CODE);
      FETCH C_Q4 INTO M_ATND_HRS_DAYS;
      CLOSE C_Q4;

      M_KEY_NO := M_KEY_NO +1;
      M_NO_DAYS_PRSNT := P_GET_DAYS (P_COMP_CODE, I.Q_1_EMP_CODE,P_FM_DT,P_TO_DT,P_PYBSDYFLAG_EA ,P_PAY_TYPE );
            --DUMMY(8);
           IF C_GET_YEAR%ISOPEN THEN
              CLOSE C_GET_YEAR;
           END IF;

           OPEN C_GET_YEAR;
           FETCH C_GET_YEAR INTO M_FIN_YEAR;
          CLOSE C_GET_YEAR;


      --DUMMY(9);
  /* IF C_GET_COMP_CURRENCY%ISOPEN THEN
      CLOSE C_GET_COMP_CURRENCY;
   END IF;
   OPEN C_GET_COMP_CURRENCY;
      FETCH C_GET_COMP_CURRENCY INTO M_CURR;
   CLOSE C_GET_COMP_CURRENCY;   */

   M_CURR :=F_GET_BASE_CURR(P_COMP_CODE);

      --DUMMY(10);
      OPEN EMP_OT_HRS(I.Q_1_EMP_CODE);
      FETCH EMP_OT_HRS INTO M_OT_HRS;
      CLOSE EMP_OT_HRS;

      --SRW.REFERENCE(:CF_NET_PAYABLE);
      NET_TOTAL := (NVL(M_FP_FC_AMOUNT, 0) - NVL(M_FP_LC_AMOUNT, 0));
  --RETURN(NET_TOTAL);
   SAL := NET_TOTAL;
   CNT := 1 ;

   M_DENO_VALUE_1 := 0;
   M_DENO_VALUE_2 := 0;
   M_DENO_VALUE_3 := 0;
   M_DENO_VALUE_4 := 0;
   M_DENO_VALUE_5 := 0;
   M_DENO_VALUE_6 := 0;
   M_DENO_VALUE_7 := 0;
   M_DENO_VALUE_8 := 0;
   M_DENO_VALUE_9 := 0;
   M_DENO_VALUE_10 :=0;
        --DUMMY(14);
   FOR A IN C_DENO
   LOOP
      EXIT WHEN CNT > 10 OR SAL <= 0;  --DUMMY(15);
      IF SAL >= A.DENO_NOTE THEN
         X := SAL/A.DENO_NOTE;
         IF CNT = 1 THEN
            M_DENO_VALUE_1 := NVL(FLOOR(X),0);
            SAL := MOD(SAL,A.DENO_NOTE);
          ELSIF CNT = 2 THEN
            M_DENO_VALUE_2 := NVL(FLOOR(X),0);
            SAL := MOD(SAL,A.DENO_NOTE);
          ELSIF CNT = 3 THEN
            M_DENO_VALUE_3 := NVL(FLOOR(X),0);
            SAL := MOD(SAL,A.DENO_NOTE);
          ELSIF CNT = 4 THEN
            M_DENO_VALUE_4 := NVL(FLOOR(X),0);
            SAL := MOD(SAL,A.DENO_NOTE);
          ELSIF CNT = 5 THEN
            M_DENO_VALUE_5 := NVL(FLOOR(X),0);
            SAL := MOD(SAL,A.DENO_NOTE);
          ELSIF CNT = 6 THEN
            M_DENO_VALUE_6 := NVL(FLOOR(X),0);
            SAL := MOD(SAL,A.DENO_NOTE);
          ELSIF CNT = 7 THEN
            M_DENO_VALUE_7 := NVL(FLOOR(X),0);
            SAL := MOD(SAL,A.DENO_NOTE);
          ELSIF CNT = 8 THEN
            M_DENO_VALUE_8 := NVL(FLOOR(X),0);
            SAL := MOD(SAL,A.DENO_NOTE);
          ELSIF CNT = 9 THEN
            M_DENO_VALUE_9 := NVL(FLOOR(X),0);
            SAL := MOD(SAL,A.DENO_NOTE);
          ELSIF CNT = 10 THEN
            M_DENO_VALUE_10 := NVL(FLOOR(X),0);
            SAL := MOD(SAL,A.DENO_NOTE);
          END IF;
      END IF;
      CNT := CNT + 1;
     M_BALANCE_VALUE := NVL(SAL,0);
   END LOOP;   --DUMMY('insert times ');
           INSERT INTO PW_PRE_PAYSLIP_PRINT ( PAYS_COMP_CODE,
                                              PAYS_REP_KEY_NO,
                                              PAYS_I_SYS_ID,
                                              PAYS_EMP_CODE,
                                              PAYS_EMP_NAME,
                                              PAYS_DIVN_CODE,
                                              PAYS_DIVN_NAME,
                                              PAYS_DEPT_CODE,
                                              PAYS_DEPT_NAME,
                                              PAYS_JOIN_DT,
                                              PAYS_NO_OF_DAYS,
                                              PAYS_OT_HRS,
                                              PAYS_JOB_TITLE_CODE,
                                              PAYS_JOB_TITLE_DESC,
                                              PAYS_EARN_ALLW_DESC,
                                              PAYS_EARN_CURR_CODE,
                                              PAYS_EARN_FC_AMOUNT,
                                              PAYS_EARN_LC_AMOUNT,
                                              PAYS_DEDU_ALLW_DESC,
                                              PAYS_DEDU_CURR_CODE,
                                              PAYS_DEDU_FC_AMOUNT,
                                              PAYS_DEDU_LC_AMOUNT,
                                              PAYS_PAY_MODE,
                                              PAYS_BANK_CODE,
                                              PAYS_BANK_NAME,
                                              PAYS_BANK_REMARKS,
                                              PAYS_DENO_VALUE_1,
                                              PAYS_DENO_VALUE_2,
                                              PAYS_DENO_VALUE_3,
                                              PAYS_DENO_VALUE_4,
                                              PAYS_DENO_VALUE_5,
                                              PAYS_DENO_VALUE_6,
                                              PAYS_DENO_VALUE_7,
                                              PAYS_DENO_VALUE_8,
                                              PAYS_DENO_VALUE_9,
                                              PAYS_DENO_VALUE_10,
                                              PAYS_NET_PAY,
                                              PAYS_BAL_VALUE,
                                              PAYS_CURR_CODE,
                                              PAYS_MONTH,
                                              PAYS_FIN_YEAR ,
                                              PAYS_EARN_SUM_AMOUNT,
                                              PAYS_DEDU_SUM_AMOUNT)
                                     VALUES ( P_COMP_cODE,
                                              P_REP_KEY_NO,
                                              P_REP_KEY_NO||' - '||M_KEY_NO,
                                              I.Q_1_EMP_CODE,
                                              I.Q_1_EMP_NAME,
                                              I.Q_1_EMP_DIVN_CODE,
                                              I.Q_1_DIVN_SHORT_NAME,
                                              I.Q_1_EMP_DEPT_CODE,
                                              I.Q_1_DEPT_SHORT_NAME,
                                              I.Q1_EMP_JOIN_DT,
                                              M_NO_DAYS_PRSNT,
                                              M_OT_HRS,
                                              I.Q_1_EMP_JOB_TITLE_CODE ,
                                              I.Q_1_JOB_TITLE_SHORT_DESC ,
                                              J.Q_2_ALLW_SHORT_DESC,
                                              J.Q_2_DP_CURR_CODE,
                                              J.Q_2_DP_FC_AMOUNT,
                                              J.Q_2_DP_LC_AMOUNT,
                                              M_Q3.Q_3_DP_ALLW_CODE,
                                              M_Q3.Q_3_DP_CURR_CODE,
                                              M_Q3.Q_3_DP_FC_AMOUNT,
                                              M_Q3.Q_3_DP_LC_AMOUNT,
                                              I.EMPY_PAY_MODE,
                                              I.Q_1_EMPY_BANK_CODE,
                                              I.Q_1_BANK_NAME,
                                              I.Q_1_EMPY_BANK_REMARKS,
                                              M_DENO_VALUE_1,
                                              M_DENO_VALUE_2,
                                              M_DENO_VALUE_3,
                                              M_DENO_VALUE_4,
                                              M_DENO_VALUE_5,
                                              M_DENO_VALUE_6,
                                              M_DENO_VALUE_7,
                                              M_DENO_VALUE_8,
                                              M_DENO_VALUE_9,
                                              M_DENO_VALUE_10,
                                              SAL,
                                              M_BALANCE_VALUE,
                                              M_CURR,
                                              P_PROC_MTH,
                                              M_FIN_YEAR,
                                              M_SUM_FP_FC_AMOUNT_1,
                                              M_SUM_D_FC_AMOUNT_1);



               END LOOP;
              END LOOP;
         --END LOOP;
      --END LOOP;
  -- END LOOP;
    --RETURN M_NO_DAYS_PRSNT;



END P_PRE_PAYSLIP_PRINT;


PROCEDURE P_POS_STATUS_REPORT ( P_COMP_CODE   IN VARCHAR2,
                                P_REP_KEY_NO  IN NUMBER,
                                P_FM_DIVN     IN VARCHAR2,
                                P_TO_DIVN     IN VARCHAR2,
                                P_FM_DEPT     IN VARCHAR2,
                                P_TO_DEPT     IN VARCHAR2,
                                P_FM_POSN     IN VARCHAR2,
                                P_TO_POSN     IN VARCHAR2,
                                P_FM_SECT     IN VARCHAR2,
                                P_TO_SECT     IN VARCHAR2,
                                P_FM_SUB_SECT IN VARCHAR2,
                                P_TO_SUB_SECT IN VARCHAR2) IS
                                MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

CURSOR C1 IS
      SELECT POSN_DIVN_CODE ,POSN_DEPT_CODE ,POSN_SECT_CODE,POSN_SUB_SECT_CODE,
               POSN_CODE ,DECODE(MM_LANG_CODE, 'ENG',POSN_DESC ,'LANG_01',POSN_DESC_LANG_01,'LANG_02',POSN_DESC_LANG_02,'LANG_03',POSN_DESC_LANG_03,'LANG_04',POSN_DESC_LANG_04,'LANG_05',POSN_DESC_LANG_05,'LANG_06',POSN_DESC_LANG_06,'LANG_07',POSN_DESC_LANG_07,'LANG_08',POSN_DESC_LANG_08,'LANG_09',POSN_DESC_LANG_09,'LANG_10',POSN_DESC_LANG_10) DESCRIPTION,
               POSN_FRZ_FLAG
      FROM   PM_POSITION
      WHERE  POSN_COMP_CODE     =    P_COMP_CODE
      AND       POSN_DIVN_CODE    BETWEEN P_FM_DIVN AND P_TO_DIVN
      AND       POSN_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
      AND       Nvl(POSN_SECT_CODE,0) BETWEEN P_FM_SECT  AND P_TO_SECT
      AND       Nvl(POSN_SUB_SECT_CODE,0) BETWEEN P_FM_SUB_SECT AND P_TO_SUB_SECT
      AND       POSN_CODE BETWEEN P_FM_POSN AND P_TO_POSN
      ORDER BY POSN_DIVN_CODE,POSN_DEPT_CODE,POSN_SECT_CODE,POSN_SUB_SECT_CODE,POSN_CODE;

   M_VALUE    VARCHAR2(80);
   M_STATUS   VARCHAR2(80);
CURSOR  C1_STATUS IS
        SELECT DECODE('ENG','ENG',BT_ENG_TEXT,BT_FOR_TEXT)
        FROM   PR_BOILERPLATE_TEXT
        WHERE  BT_MODULE_NAME='PAYROLL'
        AND    BT_ITEM_NAME = M_VALUE;

BEGIN

   DELETE FROM PW_POSITION_STATUS WHERE PS_REP_KEY_NO = P_REP_KEY_NO;

       MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;


   FOR I IN C1 LOOP

      M_VALUE := F_CHK_POSN(I.POSN_CODE,P_COMP_CODE);

      IF C1_STATUS%ISOPEN THEN
         CLOSE C1_STATUS;
      END IF;

      OPEN C1_STATUS;
      FETCH C1_STATUS INTO M_STATUS;

      IF C1_STATUS%NOTFOUND THEN
         M_STATUS := M_VALUE;
      END IF;
      CLOSE C1_STATUS;

      INSERT INTO PW_POSITION_STATUS( PS_COMP_CODE,
                                      PS_REP_KEY_NO,
                                      PS_DIVISION,
                                      PS_DEPARTMENT,
                                      PS_SECTION,
                                      PS_SUB_SECTION,
                                      PS_POSITION,
                                      PS_DESCIPTION,
                                      PS_STATUS )
                             VALUES ( P_COMP_CODE,
                                      P_REP_KEY_NO,
                                      I.POSN_DIVN_CODE,
                                      I.POSN_DEPT_CODE,
                                      I.POSN_SECT_CODE,
                                      I.POSN_SUB_SECT_CODE,
                                      I.POSN_CODE,
                                      I.DESCRIPTION,
                                      M_STATUS);

   END LOOP;

END P_POS_STATUS_REPORT;

FUNCTION F_CHK_POSN(P_POSN_CODE VARCHAR2,P_COMP_CODE IN VARCHAR2) RETURN VARCHAR2 IS

CURSOR P_EMPLOYEE IS
          SELECT 'X'
          FROM   PM_EMP_KEY
          WHERE  EMP_POSITION_CODE  = P_POSN_CODE
          AND    EMP_COMP_CODE      = P_COMP_CODE
          AND    (NVL(EMP_STATUS,'*') IN ('4', '5', '6', '7')
                  OR  (EMP_TRANSFER_DT IS NOT NULL AND EMP_TRANSFER_COMP_TO IS NOT NULL));

   CURSOR P_EMPLOYEE_1 IS
          SELECT 'X'
          FROM   PM_EMP_KEY
          WHERE  EMP_POSITION_CODE  = P_POSN_CODE
          AND    EMP_COMP_CODE      = P_COMP_CODE
          AND    (NVL(EMP_STATUS,'*') NOT IN ('4', '5', '6', '7')
                  AND (EMP_TRANSFER_DT IS NULL AND EMP_TRANSFER_COMP_TO IS NULL));


   CURSOR P_GET_EMPTY IS
          SELECT 'X'
          FROM   PM_POSITION
          WHERE  POSN_COMP_CODE = P_COMP_CODE
          AND    POSN_CODE      = P_POSN_CODE
          AND    NVL(POSN_FRZ_FLAG,'Y') = 'N'
          AND    NOT EXISTS
                 (SELECT 'X'
                  FROM   PM_EMP_KEY
                  WHERE  EMP_COMP_CODE     = P_COMP_CODE
                  AND    EMP_POSITION_CODE = P_POSN_CODE);

/* START : ADDED BY ASHIK FOR THE ISSUE ACI-299353 ON 18/05/2009 */
 M_TOT_JOB VARCHAR2(10);
 M_POSN_CNT_EMP  NUMBER;
CURSOR C1 IS
SELECT POSN_TOT_JOB_UNITS
          FROM   PM_POSITION
          WHERE  POSN_COMP_CODE = P_COMP_CODE
          AND    POSN_CODE      = P_POSN_CODE
          AND    NVL(POSN_FRZ_FLAG,'Y') = 'N' ;

CURSOR C2 IS
SELECT COUNT(*)
FROM   PM_EMP_KEY
WHERE  EMP_COMP_CODE     = P_COMP_CODE
AND    EMP_POSITION_CODE = P_POSN_CODE
AND    (NVL(EMP_STATUS,'*') NOT IN ('4', '5', '6', '7')
AND      (EMP_TRANSFER_DT IS NULL AND EMP_TRANSFER_COMP_TO IS NULL));

/* END: ADDED BY ASHIK FOR THE ISSUE ACI-299353 ON 18/05/2009 */

   M_DUMMY          PW_FS.FLAG%TYPE;
   M_VAR          VARCHAR2(20);

BEGIN

IF P_EMPLOYEE%ISOPEN THEN
      CLOSE P_EMPLOYEE ;
   END IF ;
   IF P_EMPLOYEE_1%ISOPEN THEN
      CLOSE P_EMPLOYEE_1 ;
   END IF ;

   IF P_GET_EMPTY%ISOPEN THEN
      CLOSE P_GET_EMPTY ;
   END IF ;
   OPEN P_EMPLOYEE ;
   FETCH P_EMPLOYEE INTO M_DUMMY ;

   IF P_EMPLOYEE%FOUND THEN
      CLOSE P_EMPLOYEE ;
      OPEN P_EMPLOYEE_1;
      FETCH P_EMPLOYEE_1 INTO M_DUMMY ;

      IF P_EMPLOYEE_1%NOTFOUND THEN
         CLOSE P_EMPLOYEE_1 ;
      M_VAR := 'VAC';
         RETURN (M_VAR);
      END IF;
      CLOSE P_EMPLOYEE_1 ;
   END IF;
   IF P_EMPLOYEE%ISOPEN THEN
      CLOSE P_EMPLOYEE ;
   END IF ;
   IF P_EMPLOYEE_1%ISOPEN THEN
      CLOSE P_EMPLOYEE_1 ;
   END IF ;

/* COMMENTED BY ASHIK FOR THE ISSUE ACI-299353 ON 18/05/2009 */
/*
   OPEN P_GET_EMPTY ;
   FETCH P_GET_EMPTY INTO M_DUMMY ;
   IF P_GET_EMPTY%FOUND THEN
      CLOSE P_GET_EMPTY;
      M_VAR := 'VAC';
      RETURN (M_VAR);
   END IF;
   CLOSE P_GET_EMPTY;
      M_VAR := 'OCC';
    RETURN (M_VAR);
*/

/* START : ADDED BY ASHIK FOR THE ISSUE ACI-299353 ON 18/05/2009 */
   IF C1%ISOPEN THEN
       CLOSE C1;
   END IF;
    OPEN C1;
    FETCH C1 INTO M_TOT_JOB;
    CLOSE C1;
       IF C2%ISOPEN THEN
       CLOSE C2;
   END IF;
    OPEN C2;
    FETCH C2 INTO M_POSN_CNT_EMP;
    CLOSE C2;
    IF NVL(M_TOT_JOB,0) > NVL(M_POSN_CNT_EMP,0) THEN
        M_VAR := 'VAC';
    ELSE
        M_VAR := 'OCC';
    END IF;
      RETURN(M_VAR);

END F_CHK_POSN;

PROCEDURE P_ATTD_AND_OT ( P_COMP_CODE IN  VARCHAR2,
                          P_REP_KEY_NO IN NUMBER,
                          P_FM_DIVN    IN VARCHAR2,
                          P_TO_DIVN    IN VARCHAR2,
                          P_FM_DEPT    IN VARCHAR2,
                          P_TO_DEPT    IN VARCHAR2,
                          P_FM_LOCN    IN VARCHAR2,
                          P_TO_LOCN    IN VARCHAR2,
                          P_FM_DT      IN DATE,
                          P_TO_DT      IN DATE,
                          P_FM_EMP     IN VARCHAR2,
                          P_TO_EMP     IN VARCHAR2,
                          P_FM_GRADE   IN VARCHAR2,
                          P_TO_GRADE   IN VARCHAR2,
                          P_FM_OT      IN VARCHAR2,
                          P_TO_OT      IN VARCHAR2) IS

                          MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

CURSOR C1 IS
      SELECT NVL(NVL(OTH_DIVN_CODE,OTD_DIVN_CODE),EMP_DIVN_CODE) ||'-'|| DECODE(MM_LANG_CODE, 'ENG',DIVN_SHORT_NAME ,'LANG_01',DIVN_SHORT_NAME_LANG_01,'LANG_02',DIVN_SHORT_NAME_LANG_02,'LANG_03',DIVN_SHORT_NAME_LANG_03,'LANG_04',DIVN_SHORT_NAME_LANG_04,'LANG_05',DIVN_SHORT_NAME_LANG_05,'LANG_06',DIVN_SHORT_NAME_LANG_06,'LANG_07',DIVN_SHORT_NAME_LANG_07,'LANG_08',DIVN_SHORT_NAME_LANG_08,'LANG_09',DIVN_SHORT_NAME_LANG_09,'LANG_10',DIVN_SHORT_NAME_LANG_10) DIVN,
               NVL(NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),EMP_DEPT_CODE) ||'-'|| DECODE(MM_LANG_CODE, 'ENG',DEPT_SHORT_NAME ,'LANG_01',DEPT_SHORT_NAME_LANG_01,'LANG_02',DEPT_SHORT_NAME_LANG_02,'LANG_03',DEPT_SHORT_NAME_LANG_03,'LANG_04',DEPT_SHORT_NAME_LANG_04,'LANG_05',DEPT_SHORT_NAME_LANG_05,'LANG_06',DEPT_SHORT_NAME_LANG_06,'LANG_07',DEPT_SHORT_NAME_LANG_07,'LANG_08',DEPT_SHORT_NAME_LANG_08,'LANG_09',DEPT_SHORT_NAME_LANG_09,'LANG_10',DEPT_SHORT_NAME_LANG_10) DEPT,
               OTP_EMP_CODE,DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) EMP_NAME,DECODE(EMP_STATUS,'1','Probation Period','2','Confirmed','3','Temporary') EMP_STATUS,
               OT_CODE ||'-'|| OT_SHORT_DESC SHORT_DESC,OTP_OT_SLAB_CODE,OTS_ALLW_CODE,
               NVL(OTP_OT_HRS,0) NORMAL_OT_HRS,NVL(OTS_OT_RATE,0) HOURLY_RATE,0 NORMAL_TOT_AMT_HRS,
               DECODE(NVL(OTH_APPR_UID,'*'),'*','Unapproved','Approved') OTH_APPR_STATUS,OTP_DATE
      FROM   PM_EMP_KEY,PM_OVERTIME,PM_OVERTIME_SLABS,PT_OVERTIME_HEAD,PT_OVERTIME_DETAIL,PT_OVERTIME_PROCESS,
                FM_DIVISION,FM_DEPARTMENT
      WHERE  OTH_COMP_CODE  = P_COMP_CODE
      AND    OTH_COMP_CODE  = EMP_COMP_CODE
      AND    OTP_COMP_CODE  = OTH_COMP_CODE
      AND    EMP_COMP_CODE  = DIVN_COMP_CODE
      AND    EMP_COMP_CODE  = DEPT_COMP_CODE
      AND    EMP_DIVN_CODE  = NVL(NVL(OTH_DIVN_CODE,OTD_DIVN_CODE) ,EMP_DIVN_CODE)
      AND    EMP_DEPT_CODE  = NVL(NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),EMP_DEPT_CODE)
      AND    EMP_DIVN_CODE  = DIVN_CODE
      AND    DEPT_DIVN_CODE = DIVN_CODE
      AND    EMP_DEPT_CODE  = DEPT_CODE
      AND    OTP_OTH_SYS_ID = OTH_SYS_ID
      AND    OTD_OTH_SYS_ID = OTH_SYS_ID
      AND    OTP_EMP_CODE   = EMP_CODE
      AND    OT_CODE           = OTP_OT_CODE
      AND    OT_CODE          = OTS_CODE
      AND    OTS_CODE          = OTP_OT_CODE
      AND    OTS_OT_SLAB_CODE = OTP_OT_SLAB_CODE
      AND    NVL(EMP_PROC_STATUS,'0') IN ('0','1','2') -- ADDED BY ASHIK ON 10/JUN/2012 FOR THE ISSUE JBF-720911
      AND    NVL(NVL(OTH_DIVN_CODE,OTD_DIVN_CODE),EMP_DIVN_CODE) BETWEEN  P_FM_DIVN AND P_TO_DIVN
      AND    NVL(NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),EMP_DEPT_CODE) BETWEEN  P_FM_DEPT AND P_TO_DEPT
      AND    EMP_LOCN_CODE BETWEEN  P_FM_LOCN AND P_TO_LOCN
      AND    OTP_EMP_CODE  BETWEEN  P_FM_EMP AND P_TO_EMP
      AND    EMP_PERSONAL_GRADE BETWEEN  P_FM_GRADE AND P_TO_GRADE
      AND    OTP_OT_CODE   BETWEEN  P_FM_OT      AND P_TO_OT
      AND    OTH_APPR_UID  IS NOT NULL
      AND    OTH_APPR_DT     IS NOT NULL
      --AND    P_STATUS  = 'Approved'
      AND  OTP_DATE BETWEEN  P_FM_DT          AND P_TO_DT -- ADDED BY ASHIK FOR SMC-335650 ON  30/09/2009
      GROUP BY NVL(OTH_DIVN_CODE,OTD_DIVN_CODE),NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),
                   OTP_EMP_CODE,DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10),EMP_STATUS,OT_CODE,OT_SHORT_DESC,OTP_OT_SLAB_CODE,
               OTS_ALLW_CODE,OTP_OT_HRS,OTS_OT_RATE,OT_RATE_2,OTH_APPR_UID,DECODE(MM_LANG_CODE, 'ENG',DIVN_SHORT_NAME ,'LANG_01',DIVN_SHORT_NAME_LANG_01,'LANG_02',DIVN_SHORT_NAME_LANG_02,'LANG_03',DIVN_SHORT_NAME_LANG_03,'LANG_04',DIVN_SHORT_NAME_LANG_04,'LANG_05',DIVN_SHORT_NAME_LANG_05,'LANG_06',DIVN_SHORT_NAME_LANG_06,'LANG_07',DIVN_SHORT_NAME_LANG_07,'LANG_08',DIVN_SHORT_NAME_LANG_08,'LANG_09',DIVN_SHORT_NAME_LANG_09,'LANG_10',DIVN_SHORT_NAME_LANG_10),
                   DECODE(MM_LANG_CODE, 'ENG',DEPT_SHORT_NAME ,'LANG_01',DEPT_SHORT_NAME_LANG_01,'LANG_02',DEPT_SHORT_NAME_LANG_02,'LANG_03',DEPT_SHORT_NAME_LANG_03,'LANG_04',DEPT_SHORT_NAME_LANG_04,'LANG_05',DEPT_SHORT_NAME_LANG_05,'LANG_06',DEPT_SHORT_NAME_LANG_06,'LANG_07',DEPT_SHORT_NAME_LANG_07,'LANG_08',DEPT_SHORT_NAME_LANG_08,'LANG_09',DEPT_SHORT_NAME_LANG_09,'LANG_10',DEPT_SHORT_NAME_LANG_10),EMP_DIVN_CODE,EMP_DEPT_CODE,OTP_DATE
      UNION ALL
      SELECT NVL(NVL(OTH_DIVN_CODE,OTD_DIVN_CODE),EMP_DIVN_CODE) ||'-'||  DECODE(MM_LANG_CODE, 'ENG',DIVN_SHORT_NAME ,'LANG_01',DIVN_SHORT_NAME_LANG_01,'LANG_02',DIVN_SHORT_NAME_LANG_02,'LANG_03',DIVN_SHORT_NAME_LANG_03,'LANG_04',DIVN_SHORT_NAME_LANG_04,'LANG_05',DIVN_SHORT_NAME_LANG_05,'LANG_06',DIVN_SHORT_NAME_LANG_06,'LANG_07',DIVN_SHORT_NAME_LANG_07,'LANG_08',DIVN_SHORT_NAME_LANG_08,'LANG_09',DIVN_SHORT_NAME_LANG_09,'LANG_10',DIVN_SHORT_NAME_LANG_10) DIVN,
               NVL(NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),EMP_DEPT_CODE) ||'-'|| DECODE(MM_LANG_CODE, 'ENG',DEPT_SHORT_NAME ,'LANG_01',DEPT_SHORT_NAME_LANG_01,'LANG_02',DEPT_SHORT_NAME_LANG_02,'LANG_03',DEPT_SHORT_NAME_LANG_03,'LANG_04',DEPT_SHORT_NAME_LANG_04,'LANG_05',DEPT_SHORT_NAME_LANG_05,'LANG_06',DEPT_SHORT_NAME_LANG_06,'LANG_07',DEPT_SHORT_NAME_LANG_07,'LANG_08',DEPT_SHORT_NAME_LANG_08,'LANG_09',DEPT_SHORT_NAME_LANG_09,'LANG_10',DEPT_SHORT_NAME_LANG_10) DEPT,
               OTP_EMP_CODE,DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) EMP_NAME,DECODE(EMP_STATUS,'1','Probation Period','2','Confirmed','3','Temporary') EMP_STATUS,
               OT_CODE ||'-'|| OT_SHORT_DESC SHORT_DESC,OTP_OT_SLAB_CODE,OTS_ALLW_CODE,
               NVL(OTP_OT_HRS,0) NORMAL_OT_HRS,NVL(OTS_OT_RATE,0) HOURLY_RATE,0 NORMAL_TOT_AMT_HRS,
               DECODE(NVL(OTH_APPR_UID,'*'),'*','Unapproved','Approved') OTH_APPR_STATUS,OTP_DATE
      FROM   PM_EMP_KEY,PM_OVERTIME,PM_OVERTIME_SLABS,PT_OVERTIME_HEAD,PT_OVERTIME_DETAIL,
               PT_OVERTIME_PROCESS,FM_DIVISION,FM_DEPARTMENT
      WHERE  OTH_COMP_CODE  = P_COMP_CODE
      AND    OTH_COMP_CODE  = EMP_COMP_CODE
      AND    OTP_COMP_CODE  = OTH_COMP_CODE
      AND    EMP_COMP_CODE  = DIVN_COMP_CODE
      AND    EMP_COMP_CODE  = DEPT_COMP_CODE
      AND    EMP_DIVN_CODE  = NVL(NVL(OTH_DIVN_CODE,OTD_DIVN_CODE) ,EMP_DIVN_CODE)
      AND    EMP_DEPT_CODE  = NVL(NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),EMP_DEPT_CODE)
      AND    EMP_DIVN_CODE  = DIVN_CODE
      AND    DEPT_DIVN_CODE = DIVN_CODE
      AND    EMP_DEPT_CODE  = DEPT_CODE
      AND    OTP_OTH_SYS_ID = OTH_SYS_ID
      AND    OTD_OTH_SYS_ID = OTH_SYS_ID
      AND    OTP_EMP_CODE   = EMP_CODE
      AND    OT_CODE           = OTP_OT_CODE
      AND    OT_CODE          = OTS_CODE
      AND    OTS_CODE          = OTP_OT_CODE
      AND    OTS_OT_SLAB_CODE = OTP_OT_SLAB_CODE
      AND    NVL(EMP_PROC_STATUS,'0') IN ('0','1','2') --- ADDED BY ASHIK ON 10/JUN/2012 FOR THE ISSUE JBF-720911
      AND    NVL(NVL(OTH_DIVN_CODE,OTD_DIVN_CODE),EMP_DIVN_CODE) BETWEEN  P_FM_DIVN AND P_TO_DIVN
      AND    NVL(NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),EMP_DEPT_CODE) BETWEEN  P_FM_DEPT AND P_TO_DEPT
      AND    EMP_LOCN_CODE BETWEEN  P_FM_LOCN AND P_TO_LOCN
      AND    OTP_EMP_CODE  BETWEEN  P_FM_EMP  AND P_TO_EMP
      AND    EMP_PERSONAL_GRADE BETWEEN  P_FM_GRADE  AND P_TO_GRADE
      AND    OTP_OT_CODE   BETWEEN  P_FM_OT      AND P_TO_OT
      AND    OTH_APPR_UID  IS NULL
      AND    OTH_APPR_DT     IS NULL
      AND    OTP_DATE BETWEEN  P_FM_DT AND P_TO_DT -- ADDED BY ASHIK FOR SMC-335650 ON  30/09/2009
      --AND    P_STATUS  = 'Unapproved'
      GROUP BY NVL(OTH_DIVN_CODE,OTD_DIVN_CODE),NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),OTP_EMP_CODE,DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10),
                   EMP_STATUS,OT_CODE,OT_SHORT_DESC,OTP_OT_SLAB_CODE,OTS_ALLW_CODE,OTP_OT_HRS,
                   OTS_OT_RATE,OT_RATE_2,OTH_APPR_UID,DECODE(MM_LANG_CODE, 'ENG',DIVN_SHORT_NAME ,'LANG_01',DIVN_SHORT_NAME_LANG_01,'LANG_02',DIVN_SHORT_NAME_LANG_02,'LANG_03',DIVN_SHORT_NAME_LANG_03,'LANG_04',DIVN_SHORT_NAME_LANG_04,'LANG_05',DIVN_SHORT_NAME_LANG_05,'LANG_06',DIVN_SHORT_NAME_LANG_06,'LANG_07',DIVN_SHORT_NAME_LANG_07,'LANG_08',DIVN_SHORT_NAME_LANG_08,'LANG_09',DIVN_SHORT_NAME_LANG_09,'LANG_10',DIVN_SHORT_NAME_LANG_10),DECODE(MM_LANG_CODE, 'ENG',DEPT_SHORT_NAME ,'LANG_01',DEPT_SHORT_NAME_LANG_01,'LANG_02',DEPT_SHORT_NAME_LANG_02,'LANG_03',DEPT_SHORT_NAME_LANG_03,'LANG_04',DEPT_SHORT_NAME_LANG_04,'LANG_05',DEPT_SHORT_NAME_LANG_05,'LANG_06',DEPT_SHORT_NAME_LANG_06,'LANG_07',DEPT_SHORT_NAME_LANG_07,'LANG_08',DEPT_SHORT_NAME_LANG_08,'LANG_09',DEPT_SHORT_NAME_LANG_09,'LANG_10',DEPT_SHORT_NAME_LANG_10),EMP_DIVN_CODE,EMP_DEPT_CODE,OTP_DATE
      UNION ALL
      SELECT NVL(NVL(OTH_DIVN_CODE,OTD_DIVN_CODE),EMP_DIVN_CODE) ||'-'||  DECODE(MM_LANG_CODE, 'ENG',DIVN_SHORT_NAME ,'LANG_01',DIVN_SHORT_NAME_LANG_01,'LANG_02',DIVN_SHORT_NAME_LANG_02,'LANG_03',DIVN_SHORT_NAME_LANG_03,'LANG_04',DIVN_SHORT_NAME_LANG_04,'LANG_05',DIVN_SHORT_NAME_LANG_05,'LANG_06',DIVN_SHORT_NAME_LANG_06,'LANG_07',DIVN_SHORT_NAME_LANG_07,'LANG_08',DIVN_SHORT_NAME_LANG_08,'LANG_09',DIVN_SHORT_NAME_LANG_09,'LANG_10',DIVN_SHORT_NAME_LANG_10) DIVN,
               NVL(NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),EMP_DEPT_CODE) ||'-'|| DECODE(MM_LANG_CODE, 'ENG',DEPT_SHORT_NAME ,'LANG_01',DEPT_SHORT_NAME_LANG_01,'LANG_02',DEPT_SHORT_NAME_LANG_02,'LANG_03',DEPT_SHORT_NAME_LANG_03,'LANG_04',DEPT_SHORT_NAME_LANG_04,'LANG_05',DEPT_SHORT_NAME_LANG_05,'LANG_06',DEPT_SHORT_NAME_LANG_06,'LANG_07',DEPT_SHORT_NAME_LANG_07,'LANG_08',DEPT_SHORT_NAME_LANG_08,'LANG_09',DEPT_SHORT_NAME_LANG_09,'LANG_10',DEPT_SHORT_NAME_LANG_10) DEPT,
               OTP_EMP_CODE,DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) EMP_NAME,DECODE(EMP_STATUS,'1','Probation Period','2','Confirmed','3','Temporary') EMP_STATUS,
               OT_CODE ||'-'|| OT_SHORT_DESC SHORT_DESC,OTP_OT_SLAB_CODE,OTS_ALLW_CODE,NVL(OTP_OT_HRS,0) NORMAL_OT_HRS,
               NVL(OTS_OT_RATE,0) HOURLY_RATE,0 NORMAL_TOT_AMT_HRS,
               DECODE(NVL(OTH_APPR_UID,'*'),'*','Unapproved','Approved') OTH_APPR_STATUS,OTP_DATE
      FROM   PM_EMP_KEY,PM_OVERTIME,PM_OVERTIME_SLABS,PT_OVERTIME_HEAD,PT_OVERTIME_DETAIL,PT_OVERTIME_PROCESS,
                FM_DIVISION,FM_DEPARTMENT
      WHERE  OTH_COMP_CODE  = P_COMP_CODE
      AND    OTH_COMP_CODE  = EMP_COMP_CODE
      AND    OTP_COMP_CODE  = OTH_COMP_CODE
      AND    EMP_COMP_CODE  = DIVN_COMP_CODE
      AND    EMP_COMP_CODE  = DEPT_COMP_CODE
      AND    EMP_DIVN_CODE  = NVL(NVL(OTH_DIVN_CODE,OTD_DIVN_CODE) ,EMP_DIVN_CODE)
      AND    EMP_DEPT_CODE  = NVL(NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),EMP_DEPT_CODE)
      AND    EMP_DIVN_CODE  = DIVN_CODE
      AND    DEPT_DIVN_CODE = DIVN_CODE
      AND    EMP_DEPT_CODE  = DEPT_CODE
      AND    OTP_OTH_SYS_ID = OTH_SYS_ID
      AND    OTD_OTH_SYS_ID = OTH_SYS_ID
      AND    OTP_EMP_CODE   = EMP_CODE
      AND    OT_CODE           = OTP_OT_CODE
      AND    OT_CODE          = OTS_CODE
      AND    OTS_CODE          = OTP_OT_CODE
      AND    OTS_OT_SLAB_CODE = OTP_OT_SLAB_CODE
      AND    NVL(EMP_PROC_STATUS,'0') IN ('0','1','2') -- ADDED BY ASHIK ON 10/JUN/2012 FOR THE ISSUE JBF-720911
      AND    NVL(NVL(OTH_DIVN_CODE,OTD_DIVN_CODE),EMP_DIVN_CODE) BETWEEN  P_FM_DIVN AND P_TO_DIVN
      AND    NVL(NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),EMP_DEPT_CODE) BETWEEN  P_FM_DEPT AND P_TO_DEPT
      AND    EMP_LOCN_CODE BETWEEN  P_FM_LOCN AND P_TO_LOCN
      AND    OTP_EMP_CODE  BETWEEN  P_FM_EMP  AND P_TO_EMP
      AND    EMP_PERSONAL_GRADE BETWEEN  P_FM_GRADE  AND P_TO_GRADE
      AND    OTP_OT_CODE   BETWEEN  P_FM_OT      AND P_TO_OT
      --AND    P_STATUS  = 'Both'
      AND    OTP_DATE BETWEEN  P_FM_DT AND P_TO_DT -- ADDED BY ASHIK FOR SMC-335650 ON  30/09/2009
      GROUP BY NVL(OTH_DIVN_CODE,OTD_DIVN_CODE),NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),
                   OTP_EMP_CODE,DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10),EMP_STATUS,OT_CODE,OT_SHORT_DESC,OTP_OT_SLAB_CODE,OTS_ALLW_CODE,
                   OTP_OT_HRS,OTS_OT_RATE,OT_RATE_2,OTH_APPR_UID,DECODE(MM_LANG_CODE, 'ENG',DIVN_SHORT_NAME ,'LANG_01',DIVN_SHORT_NAME_LANG_01,'LANG_02',DIVN_SHORT_NAME_LANG_02,'LANG_03',DIVN_SHORT_NAME_LANG_03,'LANG_04',DIVN_SHORT_NAME_LANG_04,'LANG_05',DIVN_SHORT_NAME_LANG_05,'LANG_06',DIVN_SHORT_NAME_LANG_06,'LANG_07',DIVN_SHORT_NAME_LANG_07,'LANG_08',DIVN_SHORT_NAME_LANG_08,'LANG_09',DIVN_SHORT_NAME_LANG_09,'LANG_10',DIVN_SHORT_NAME_LANG_10),DECODE(MM_LANG_CODE, 'ENG',DEPT_SHORT_NAME ,'LANG_01',DEPT_SHORT_NAME_LANG_01,'LANG_02',DEPT_SHORT_NAME_LANG_02,'LANG_03',DEPT_SHORT_NAME_LANG_03,'LANG_04',DEPT_SHORT_NAME_LANG_04,'LANG_05',DEPT_SHORT_NAME_LANG_05,'LANG_06',DEPT_SHORT_NAME_LANG_06,'LANG_07',DEPT_SHORT_NAME_LANG_07,'LANG_08',DEPT_SHORT_NAME_LANG_08,'LANG_09',DEPT_SHORT_NAME_LANG_09,'LANG_10',DEPT_SHORT_NAME_LANG_10),
               EMP_DIVN_CODE, EMP_DEPT_CODE,OTP_DATE;

   M_SAL   NUMBER ;

CURSOR C2(P_EMP_CODE IN VARCHAR2) IS
     SELECT NVL(EMPA_FC_AMOUNT,0)
     FROM   PM_EMP_ALLOWANCE,PM_ALLOWANCE
     WHERE  EMPA_COMP_CODE   = P_COMP_CODE
     AND    EMPA_CODE            = P_EMP_CODE
     AND    EMPA_ALLW_CODE  = ALLW_CODE
     AND    ALLW_EARN_DEDUC ='E'
     AND    ALLW_TYPE       ='1'
     AND    EMPA_FROM_DT   =(SELECT MAX(EMPA_FROM_DT)
                                                FROM      PM_EMP_ALLOWANCE
                                                   WHERE  EMPA_COMP_CODE =P_COMP_CODE
                                                   AND    EMPA_CODE      =P_EMP_CODE
                                                   --below join added by shaibu on 09/02/2006 for fixing the internal issue
                                                   AND    EMPA_ALLW_CODE  = ALLW_CODE);

CURSOR C3(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2,P_DATE IN DATE) IS
      SELECT NVL(FP_LC_AMOUNT,0)FROM PS_FINAL_PROC
        WHERE  FP_EMP_CODE =  P_EMP_CODE
        AND    FP_ALLW_CODE = P_ALLW_CODE
        AND    FP_COMP_CODE = P_COMP_CODE
        AND    TO_CHAR(TO_DATE(TO_CHAR(FP_PROC_MTH),'YYYYMM'),'RRRRMM')=TO_CHAR(P_DATE,'RRRRMM');
M_AMT NUMBER;

BEGIN

   DELETE FROM PW_ATTD_AND_OT WHERE AT_REP_KEY_NO = P_REP_KEY_NO;

   MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;

   FOR I IN C1 LOOP

       IF C2%ISOPEN THEN
              CLOSE C2;
         END IF;

       OPEN C2(I.OTP_EMP_CODE);
           FETCH C2 INTO M_SAL;
         CLOSE C2;

       IF C3%ISOPEN THEN
            CLOSE C3;
       END IF;

       OPEN C3(I.OTP_EMP_CODE,I.OTS_ALLW_CODE,I.OTP_DATE);
       FETCH C3 INTO M_AMT;
       CLOSE C3;

       INSERT INTO PW_ATTD_AND_OT ( AT_COMP_CODE,
                                    AT_REP_KEY_NO,
                                    AT_EMP_CODE,
                                    AT_EMP_NAME,
                                    AT_EMP_STATUS,
                                    AT_OT_CODE_SHORT_DESC,
                                    AT_OT_SLAB_CODE,
                                    AT_ALLW_CODE,
                                    AT_BASIC_SAL,
                                    AT_OT_HRS,
                                    AT_RATE,
                                    AT_LC_AMT,
                                    AT_APPR_STATUS )
                           VALUES ( P_COMP_CODE,
                                    P_REP_KEY_NO,
                                    I.OTP_EMP_CODE,
                                    I.EMP_NAME,
                                    I.EMP_STATUS,
                                      I.SHORT_DESC,
                                    I.OTP_OT_SLAB_CODE,
                                    I.OTS_ALLW_CODE,
                                    M_SAL,
                                    I.NORMAL_OT_HRS,
                                    I.HOURLY_RATE,
                                    M_AMT,
                                    I.OTH_APPR_STATUS);
                                    END LOOP;
END P_ATTD_AND_OT;

PROCEDURE P_MTH_PAYROL ( P_COMP_CODE  IN VARCHAR2,
                         P_REP_KEY_NO IN NUMBER  ,
                         P_FM_EMP     IN VARCHAR2,
                         P_TO_EMP     IN VARCHAR2,
                         P_PROC_MTH   IN NUMBER,
                         P_FND_CODE   IN VARCHAR2) IS
                         MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;


CURSOR C1 IS
      SELECT FND_ALLW_CODE,EMP_CODE,EMP_BIRTH_DT,DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) EMP_NAME,FP_LC_AMOUNT,--TXNFIELD_FLD1,
             DECODE(EMP_STATUS,4,'RESIGNED',5,'TERMINATED',6,'RETIRED') REMARKS
      FROM   FM_COMPANY,PM_FUND A,PM_EMP_KEY, PS_FINAL_PROC --B,PT_TXN_FLEX_FIELDS
      WHERE  FP_COMP_CODE = P_COMP_CODE
      AND    FP_COMP_CODE = COMP_CODE
      AND    FP_PROC_MTH  = P_PROC_MTH
      AND    FP_EMP_CODE BETWEEN NVL(P_FM_EMP,'0') AND NVL(P_TO_EMP,'zzzzzzzzzzzz')
      AND    FP_ALLW_CODE = FND_ALLW_CODE
      AND   FP_EMP_CODE  = EMP_CODE  ;
--AND   EMP_CODE = TXNFIELD_EMP_CODE
--AND   TXNFIELD_BLOCK_NUM = 1
      --AND   FND_CODE = P_FND_CODE;

CURSOR C2 (P_EMP_CODE IN VARCHAR2)IS
      SELECT TXNFIELD_FLD1 FROM PT_TXN_FLEX_FIELDS
      WHERE TXNFIELD_BLOCK_NUM = '1'
      AND   TXNFIELD_EMP_CODE = P_EMP_CODE;

   M_TEMP VARCHAR2(50);
   M_NHIF_CARD VARCHAR2(20);
BEGIN

   DELETE FROM PW_MTH_PAYROLL WHERE MP_REP_KEY_NO = P_REP_KEY_NO;
     MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;


   FOR I IN C1 LOOP

       IF C2%ISOPEN THEN
          CLOSE C2;
       END IF;

       OPEN C2(I.EMP_CODE);
       FETCH C2 INTO M_TEMP;

       IF C2%FOUND THEN
             M_NHIF_CARD := M_TEMP;
       ELSE
             M_NHIF_CARD := NULL;
       END IF;
       CLOSE C2;

       INSERT INTO PW_MTH_PAYROLL ( MP_COMP_CODE,
                                    MP_REP_KEY_NO,
                                    MP_NHIF_CARD,
                                    MP_EMP_CODE,
                                    MP_EMP_BIRTH_DT,
                                    MP_EMP_NAME,
                                    MP_LC_AMOUNT,
                                    MP_REMARKS)
                           VALUES ( P_COMP_CODE,
                                    P_REP_KEY_NO,
                                    M_TEMP,
                                    I.EMP_CODE,
                                    I.EMP_BIRTH_DT,
                                    I.EMP_NAME,
                                    I.FP_LC_AMOUNT,
                                    I.REMARKS);

   END LOOP;
END P_MTH_PAYROL;

PROCEDURE P_EMP_TURNOVER ( P_COMP_CODE     IN VARCHAR2,
                           P_REP_KEY_NO    IN NUMBER,
                           P_FM_DIVN       IN VARCHAR2,
                           P_TO_DIVN       IN VARCHAR2,
                           P_FM_DEPT       IN VARCHAR2,
                           P_TO_DEPT       IN VARCHAR2,
                           P_FM_LOCN       IN VARCHAR2,
                           P_TO_LOCN       IN VARCHAR2,
                           P_FM_GRADE      IN VARCHAR2,
                           P_TO_GRADE      IN VARCHAR2,
                           P_FM_PROC_MTH   IN NUMBER,
                           P_TO_PROC_MTH   IN NUMBER) IS
                           MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

CURSOR C_MAIN IS
      SELECT EMP_DIVN_CODE||'-'||DECODE(MM_LANG_CODE, 'ENG',DIVN_SHORT_NAME ,'LANG_01',DIVN_SHORT_NAME_LANG_01,'LANG_02',DIVN_SHORT_NAME_LANG_02,'LANG_03',DIVN_SHORT_NAME_LANG_03,'LANG_04',DIVN_SHORT_NAME_LANG_04,'LANG_05',DIVN_SHORT_NAME_LANG_05,'LANG_06',DIVN_SHORT_NAME_LANG_06,'LANG_07',DIVN_SHORT_NAME_LANG_07,'LANG_08',DIVN_SHORT_NAME_LANG_08,'LANG_09',DIVN_SHORT_NAME_LANG_09,'LANG_10',DIVN_SHORT_NAME_LANG_10) DIV,EMP_DIVN_CODE,
             EMP_DEPT_CODE||'-'||DECODE(MM_LANG_CODE, 'ENG',DEPT_SHORT_NAME ,'LANG_01',DEPT_SHORT_NAME_LANG_01,'LANG_02',DEPT_SHORT_NAME_LANG_02,'LANG_03',DEPT_SHORT_NAME_LANG_03,'LANG_04',DEPT_SHORT_NAME_LANG_04,'LANG_05',DEPT_SHORT_NAME_LANG_05,'LANG_06',DEPT_SHORT_NAME_LANG_06,'LANG_07',DEPT_SHORT_NAME_LANG_07,'LANG_08',DEPT_SHORT_NAME_LANG_08,'LANG_09',DEPT_SHORT_NAME_LANG_09,'LANG_10',DEPT_SHORT_NAME_LANG_10) DEP,EMP_DEPT_CODE,
             EMP_LOCN_CODE ||'-'|| DECODE(MM_LANG_CODE, 'ENG',LOCN_SHORT_DESC ,'LANG_01',LOCN_SHORT_DESC_LANG_01,'LANG_02',LOCN_SHORT_DESC_LANG_02,'LANG_03',LOCN_SHORT_DESC_LANG_03,'LANG_04',LOCN_SHORT_DESC_LANG_04,'LANG_05',LOCN_SHORT_DESC_LANG_05,'LANG_06',LOCN_SHORT_DESC_LANG_06,'LANG_07',LOCN_SHORT_DESC_LANG_07,'LANG_08',LOCN_SHORT_DESC_LANG_08,'LANG_09',LOCN_SHORT_DESC_LANG_09,'LANG_10',LOCN_SHORT_DESC_LANG_10) LOC,EMP_LOCN_CODE,
                 EMP_PERSONAL_GRADE||'-'||DECODE(MM_LANG_CODE, 'ENG',GRADE_SHORT_DESC ,'LANG_01',GRADE_SHORT_DESC_LANG_01,'LANG_02',GRADE_SHORT_DESC_LANG_02,'LANG_03',GRADE_SHORT_DESC_LANG_03,'LANG_04',GRADE_SHORT_DESC_LANG_04,'LANG_05',GRADE_SHORT_DESC_LANG_05,'LANG_06',GRADE_SHORT_DESC_LANG_06,'LANG_07',GRADE_SHORT_DESC_LANG_07,'LANG_08',GRADE_SHORT_DESC_LANG_08,'LANG_09',GRADE_SHORT_DESC_LANG_09,'LANG_10',GRADE_SHORT_DESC_LANG_10)PER,EMP_PERSONAL_GRADE
     FROM    PM_EMP_KEY, FM_DIVISION, FM_DEPARTMENT, PM_LOCN, PM_GRADE
     WHERE   EMP_COMP_CODE = P_COMP_CODE
     AND     EMP_COMP_CODE = DIVN_COMP_CODE
     AND     EMP_COMP_CODE = DEPT_COMP_CODE
     AND     DIVN_COMP_CODE= DEPT_COMP_CODE
     AND     DIVN_CODE     = DEPT_DIVN_CODE
     AND     EMP_DIVN_CODE = DIVN_CODE
     AND     EMP_DEPT_CODE = DEPT_CODE
     AND     EMP_LOCN_CODE = LOCN_CODE
     AND     EMP_PERSONAL_GRADE=GRADE_CODE
--commented by shaibu on 20/09/2005 for fixing the issue id ASG-86749
--AND    EMP_END_OF_SERVICE_DT IS NULL
     AND     EMP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
     AND     EMP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
     AND     EMP_LOCN_CODE BETWEEN P_FM_LOCN AND P_TO_LOCN
     AND     EMP_PERSONAL_GRADE  BETWEEN P_FM_GRADE AND P_TO_GRADE
--uncommented by shaibu on 20/09/2005 for fixing the issue id ASG-86749
     AND     TO_CHAR(EMP_JOIN_DT,'YYYYMM') <= P_TO_PROC_MTH
----AND    EMP_JOIN_DT BETWEEN  TO_DATE(P_FM_PROC_MTH,'YYYYMM')  AND TO_DATE(P_TO_PROC_MTH,'YYYYMM')
--commented by shaibu on 20/09/2005 for fixing the issue id ASG-86749
--AND EMP_JOIN_DT BETWEEN TO_DATE(to_date(P_FM_PROC_MTH,'YYYYMM'))  AND  TO_DATE(LAST_DAY(to_date(P_TO_PROC_MTH,'YYYYMM')))

     GROUP BY  EMP_DIVN_CODE ,DECODE(MM_LANG_CODE, 'ENG',DIVN_SHORT_NAME ,'LANG_01',DIVN_SHORT_NAME_LANG_01,'LANG_02',DIVN_SHORT_NAME_LANG_02,'LANG_03',DIVN_SHORT_NAME_LANG_03,'LANG_04',DIVN_SHORT_NAME_LANG_04,'LANG_05',DIVN_SHORT_NAME_LANG_05,'LANG_06',DIVN_SHORT_NAME_LANG_06,'LANG_07',DIVN_SHORT_NAME_LANG_07,'LANG_08',DIVN_SHORT_NAME_LANG_08,'LANG_09',DIVN_SHORT_NAME_LANG_09,'LANG_10',DIVN_SHORT_NAME_LANG_10),EMP_DEPT_CODE,
                              DECODE(MM_LANG_CODE, 'ENG',DEPT_SHORT_NAME ,'LANG_01',DEPT_SHORT_NAME_LANG_01,'LANG_02',DEPT_SHORT_NAME_LANG_02,'LANG_03',DEPT_SHORT_NAME_LANG_03,'LANG_04',DEPT_SHORT_NAME_LANG_04,'LANG_05',DEPT_SHORT_NAME_LANG_05,'LANG_06',DEPT_SHORT_NAME_LANG_06,'LANG_07',DEPT_SHORT_NAME_LANG_07,'LANG_08',DEPT_SHORT_NAME_LANG_08,'LANG_09',DEPT_SHORT_NAME_LANG_09,'LANG_10',DEPT_SHORT_NAME_LANG_10) ,
               EMP_LOCN_CODE, DECODE(MM_LANG_CODE, 'ENG',LOCN_SHORT_DESC ,'LANG_01',LOCN_SHORT_DESC_LANG_01,'LANG_02',LOCN_SHORT_DESC_LANG_02,'LANG_03',LOCN_SHORT_DESC_LANG_03,'LANG_04',LOCN_SHORT_DESC_LANG_04,'LANG_05',LOCN_SHORT_DESC_LANG_05,'LANG_06',LOCN_SHORT_DESC_LANG_06,'LANG_07',LOCN_SHORT_DESC_LANG_07,'LANG_08',LOCN_SHORT_DESC_LANG_08,'LANG_09',LOCN_SHORT_DESC_LANG_09,'LANG_10',LOCN_SHORT_DESC_LANG_10),EMP_PERSONAL_GRADE,
                              DECODE(MM_LANG_CODE, 'ENG',GRADE_SHORT_DESC ,'LANG_01',GRADE_SHORT_DESC_LANG_01,'LANG_02',GRADE_SHORT_DESC_LANG_02,'LANG_03',GRADE_SHORT_DESC_LANG_03,'LANG_04',GRADE_SHORT_DESC_LANG_04,'LANG_05',GRADE_SHORT_DESC_LANG_05,'LANG_06',GRADE_SHORT_DESC_LANG_06,'LANG_07',GRADE_SHORT_DESC_LANG_07,'LANG_08',GRADE_SHORT_DESC_LANG_08,'LANG_09',GRADE_SHORT_DESC_LANG_09,'LANG_10',GRADE_SHORT_DESC_LANG_10)
     ORDER BY EMP_DIVN_CODE,EMP_DEPT_CODE,EMP_LOCN_CODE,EMP_PERSONAL_GRADE;

--cf3

M_TRANS NUMBER;
M_RESIG NUMBER;
M_COUNT NUMBER;
M_TRANS_OUT NUMBER;
M_COUNT_TRANS NUMBER;


   CURSOR C1(P_DIVN_CODE IN VARCHAR2,P_DEPT_CODE IN VARCHAR2,P_LOCN_CODE IN VARCHAR2,P_GRADE_CODE IN VARCHAR2) IS
   SELECT NVL(COUNT(EMP_CODE),0) NO1
   FROM   PM_EMP_KEY
   WHERE  EMP_COMP_CODE =P_COMP_CODE
   AND    EMP_DIVN_CODE=P_DIVN_CODE
   AND    EMP_DEPT_CODE=P_DEPT_CODE
   AND    EMP_LOCN_CODE=P_LOCN_CODE
   AND    EMP_PERSONAL_GRADE=P_GRADE_CODE
   AND    EMP_JOIN_DT BETWEEN  TO_DATE(P_FM_PROC_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_PROC_MTH,'YYYYMM'));


   CURSOR C2(P_DIVN_CODE IN VARCHAR2,P_DEPT_CODE IN VARCHAR2,P_LOCN_CODE IN VARCHAR2,P_GRADE_CODE IN VARCHAR2) IS
   SELECT NVL(COUNT(TRF_EMP_CODE),0) TRF
   FROM   PT_TRANSFERS,PM_EMP_KEY
   WHERE  TRF_TO_COMP_CODE =   P_COMP_CODE
   AND    TRF_TO_COMP_CODE = EMP_COMP_CODE
   AND    TRF_EMP_CODE=EMP_CODE
   AND    TRF_DIVN_CODE =     P_DIVN_CODE
   AND    TRF_DEPT_CODE =     P_DEPT_CODE
   AND    TRF_LOCN_CODE =     P_LOCN_CODE
   AND    EMP_PERSONAL_GRADE=P_GRADE_CODE
   AND    TRF_EFF_DT BETWEEN  TO_DATE(P_FM_PROC_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_PROC_MTH,'YYYYMM'));


   CURSOR C3(P_DIVN_CODE IN VARCHAR2,P_DEPT_CODE IN VARCHAR2,P_LOCN_CODE IN VARCHAR2) IS
   SELECT NVL(COUNT(TRF_EMP_CODE),0) TRF1
   FROM   PT_TRANSFERS,
          PM_EMP_KEY
     WHERE  EMP_COMP_CODE =P_COMP_CODE
   AND    EMP_COMP_CODE != TRF_TO_COMP_CODE
   AND    EMP_CODE     =  TRF_EMP_CODE
   AND    EMP_DIVN_CODE!=P_DIVN_CODE
   AND    EMP_DEPT_CODE!=P_DEPT_CODE
   AND    EMP_LOCN_CODE!=P_LOCN_CODE
   --AND    EMP_PERSONAL_GRADE=P_GRADE
   AND    TRF_EFF_DT BETWEEN  TO_DATE(P_FM_PROC_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_PROC_MTH,'YYYYMM'));



   CURSOR C4(P_DIVN_CODE IN VARCHAR2,P_DEPT_CODE IN VARCHAR2,P_LOCN_CODE IN VARCHAR2,P_GRADE_CODE IN VARCHAR2) IS

   SELECT NVL(COUNT(EMP_CODE),0)
   FROM PM_EMP_KEY
   WHERE EMP_END_OF_SERVICE_DT IS NOT NULL
   AND   EMP_STATUS='4'
   AND    EMP_COMP_CODE =P_COMP_CODE
   AND    EMP_DIVN_CODE=P_DIVN_CODE
   AND    EMP_DEPT_CODE=P_DEPT_CODE
   AND    EMP_LOCN_CODE=P_LOCN_CODE
   AND    EMP_PERSONAL_GRADE=P_GRADE_CODE
   AND    EMP_END_OF_SERVICE_DT BETWEEN  TO_DATE(P_FM_PROC_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_PROC_MTH,'YYYYMM'));

--M_TOTAL NUMBER:=0;

CURSOR C_PYBSDYFLAG IS
      SELECT PARA_VALUE
      FROM   PM_COMP_PARAMETER
         WHERE  PARA_COMP_CODE =  P_COMP_CODE
        AND    PARA_TYPE='PYBSDYFLAG';

        CURSOR C_DD IS
      SELECT TO_CHAR(LAST_DAY(SYSDATE),'DD')
        FROM DUAL;

        CURSOR C_PYBSDYS IS
        SELECT PARA_VALUE
        FROM   PM_COMP_PARAMETER
        WHERE  PARA_COMP_CODE =  P_COMP_CODE
        AND    PARA_TYPE='PYBSDYS';

      M_DAYS NUMBER;
      M_TYPE VARCHAR2(1);
      DAYS NUMBER;
    M_PYBSDYFLAG VARCHAR2(30);
    M_PYBSDYS VARCHAR2(30);
    M_DD VARCHAR2(30);
    M_TOTAL_EMP NUMBER:=0;
   M_DED NUMBER:=0;
   M_FINAL_EMP NUMBER:=0;
   M_EMP NUMBER;
   M_30 NUMBER;
   M_ADD_TOTAL NUMBER:=0;
   M_TOTAL NUMBER:=0;
M_DED_1   NUMBER:=0;
M_END_COST NUMBER:=0;
M_COST NUMBER;
M_CHANGE_IN_COST_TRANSFERS_IN NUMBER;
M_JOIN_DT NUMBER;
M_CHANGE_IN_COST_RES NUMBER;
M_CHANGE_IN_COST_TERM  NUMBER;
M_COST_TRANSFERS_OUT NUMBER;
BEGIN
  DELETE FROM PW_EMP_TRUNOVER WHERE ET_REP_KEY_NO = P_REP_KEY_NO;

   MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;
   FOR I IN C_MAIN LOOP

       IF C1%ISOPEN THEN
       CLOSE C1;
       END IF;
   OPEN C1(I.EMP_DIVN_CODE,I.EMP_DEPT_CODE,I.EMP_LOCN_CODE,I.EMP_PERSONAL_GRADE);
   FETCH C1 INTO M_COUNT;
   CLOSE C1;

   --:CP_25:=NVL(M_COUNT,0);
   M_COUNT:=NVL(M_COUNT,0);


   IF C2%ISOPEN THEN
   CLOSE C2;
   END IF;
   OPEN C2(I.EMP_DIVN_CODE,I.EMP_DEPT_CODE,I.EMP_LOCN_CODE,I.EMP_PERSONAL_GRADE);
   FETCH C2 INTO M_TRANS;
   CLOSE C2;
   --:CP_26:=NVL(M_TRANS,0);
   M_TRANS:=NVL(M_TRANS,0);
   --:CP_27:=NVL(:CP_25,0)+NVL(:CP_26,0);
   M_COUNT_TRANS:=NVL(M_COUNT,0)+NVL(M_TRANS,0);

   IF C3%ISOPEN THEN
   CLOSE C3;
   END IF;
   OPEN C3(I.EMP_DIVN_CODE,I.EMP_DEPT_CODE,I.EMP_LOCN_CODE);
   FETCH C3 INTO M_TRANS_OUT;
   CLOSE C3;
   --:CP_28:=NVL(M_TRANS_OUT,0);
   M_TRANS_OUT:=NVL(M_TRANS_OUT,0);

   IF C4%ISOPEN THEN
   CLOSE C4;
   END IF;
   OPEN C4(I.EMP_DIVN_CODE,I.EMP_DEPT_CODE,I.EMP_LOCN_CODE,I.EMP_PERSONAL_GRADE);
   FETCH C4 INTO M_RESIG;
   CLOSE C4;
   --:CP_29:=NVL(M_RESIG,0);
   M_RESIG:=NVL(M_RESIG,0);

   OPEN C_PYBSDYFLAG;
        FETCH C_PYBSDYFLAG INTO M_PYBSDYFLAG;--:CP_32;
        CLOSE C_PYBSDYFLAG;
        OPEN C_DD;
        FETCH C_DD INTO M_DD;--:CP_33;
        CLOSE C_DD;
        OPEN C_PYBSDYS;
        FETCH C_PYBSDYS INTO M_PYBSDYS;--:CP_34;
        CLOSE C_PYBSDYS;

    /*IF :CP_32 = 'E' THEN
        RETURN(:CP_34);
        ELSIF :CP_32='A' THEN
      RETURN(:CP_33);
        END IF;*/
        IF M_PYBSDYFLAG = 'E' THEN
        M_PYBSDYS := M_PYBSDYS;
        ELSIF M_PYBSDYFLAG='A' THEN
      M_DD := M_DD;
        END IF;
    M_EMP := F_EMP(P_COMP_CODE,I.EMP_DIVN_CODE,I.EMP_DEPT_CODE,I.EMP_LOCN_CODE,I.EMP_PERSONAL_GRADE,P_FM_PROC_MTH,P_TO_PROC_MTH);
    M_30 := F_TERMINATION(P_COMP_CODE,I.EMP_DIVN_CODE,I.EMP_DEPT_CODE,I.EMP_LOCN_CODE,I.EMP_PERSONAL_GRADE,P_FM_PROC_MTH,P_TO_PROC_MTH);

    M_TOTAL_EMP:=NVL(M_EMP,0)+NVL(M_COUNT,0)+NVL(M_TRANS,0);
      M_DED:=      NVL(M_TRANS_OUT,0)+NVL(M_RESIG,0)+NVL(M_30,0);
      M_FINAL_EMP:=NVL(M_TOTAL_EMP,0)- NVL(M_DED,0);
      M_FINAL_EMP:=   (ROUND(NVL(M_FINAL_EMP,0),2));


    M_CHANGE_IN_COST_TRANSFERS_IN := F_CHANGE_IN_COST_TRANSFERS_IN(P_COMP_CODE,I.EMP_DIVN_CODE,I.EMP_DEPT_CODE,I.EMP_LOCN_CODE,I.EMP_PERSONAL_GRADE,P_FM_PROC_MTH,P_TO_PROC_MTH);
    M_JOIN_DT  := F_JOIN_DT(P_COMP_CODE,I.EMP_DIVN_CODE,I.EMP_DEPT_CODE,I.EMP_LOCN_CODE,I.EMP_PERSONAL_GRADE,P_FM_PROC_MTH,P_TO_PROC_MTH);
    M_ADD_TOTAL:=NVL(M_CHANGE_IN_COST_TRANSFERS_IN,0)+NVL(M_JOIN_DT,0);
    M_ADD_TOTAL:=  (ROUND(NVL(M_ADD_TOTAL,0),2));

    M_COST :=F_COST(P_COMP_CODE,I.EMP_DIVN_CODE,I.EMP_DEPT_CODE,I.EMP_LOCN_CODE,I.EMP_PERSONAL_GRADE,P_FM_PROC_MTH,P_TO_PROC_MTH);
    M_CHANGE_IN_COST_RES :=F_CHANGE_IN_COST_RES(P_COMP_CODE,I.EMP_DIVN_CODE,I.EMP_DEPT_CODE,I.EMP_LOCN_CODE,I.EMP_PERSONAL_GRADE,P_FM_PROC_MTH,P_TO_PROC_MTH);
    M_CHANGE_IN_COST_TERM :=F_CHANGE_IN_COST_TERM(P_COMP_CODE,I.EMP_DIVN_CODE,I.EMP_DEPT_CODE,I.EMP_LOCN_CODE,I.EMP_PERSONAL_GRADE,P_FM_PROC_MTH,P_TO_PROC_MTH);
    M_COST_TRANSFERS_OUT  := F_COST_TRANSFERS_OUT(P_COMP_CODE,I.EMP_DIVN_CODE,I.EMP_DEPT_CODE,I.EMP_LOCN_CODE,P_FM_PROC_MTH,P_TO_PROC_MTH);
    M_TOTAL:=NVL(M_COST,0)+NVL(M_ADD_TOTAL,0);
    M_DED_1:=NVL(M_CHANGE_IN_COST_RES,0)+NVL(M_CHANGE_IN_COST_TERM,0)+NVL(M_COST_TRANSFERS_OUT,0);
--consolidation
--commented and added by shaibu on 20/09/2005 for fixing the issue id ASG-86749
--M_END_COST:=NVL(M_TOTAL,0)+NVL(M_DED,0);
   M_END_COST:=NVL(M_TOTAL,0) - NVL(M_DED,0);
   M_END_COST :=  (ROUND(NVL(M_END_COST,0),2));

     INSERT INTO PW_EMP_TRUNOVER ( ET_COMP_CODE,
                                ET_REP_KEY_NO,
                                ET_DIVN_CODE,
                                ET_DEPT_CODE,
                                ET_LOCN_CODE,
                                ET_PERSONAL_GRADE,
                                ET_EMP_CODE,
                                ET_DIV_NAME,
                                ET_DEPT_NAME,
                                ET_LOCN_NAME,
                                ET_PER,
                                ET_COST,
                                ET_ADD_NO_EMP,
                                ET_ADD_COST,
                                ET_TRANSFER,
                                ET_CHG_IN_COST,
                                ET_RESIGN,
                                ET_CHG_IN_COST_1,
                                ET_TERM,
                                ET_CHG_IN_COST_2,
                                ET_NO_EMP_END,
                                ET_COST_1,
                                ET_EMP_NO)
                       VALUES ( P_COMP_CODE,
                                P_REP_KEY_NO,
                                I.EMP_DIVN_CODE,
                                I.EMP_DEPT_CODE,
                                I.EMP_LOCN_CODE,
                                I.EMP_PERSONAL_GRADE,
                                M_COUNT,
                                I.DIV,
                                I.DEP,
                                I.LOC,
                                I.PER,
                                M_COST,
                                M_EMP,
                                M_ADD_TOTAL,
                                M_TRANS_OUT,
                                M_COST_TRANSFERS_OUT,
                                M_RESIG,
                                M_CHANGE_IN_COST_RES,
                                M_30,
                                M_CHANGE_IN_COST_TERM,
                                M_FINAL_EMP,
                                M_END_COST,
                                M_COUNT_TRANS);

   END LOOP;



END P_EMP_TURNOVER;

PROCEDURE P_ESIC ( P_COMP_CODE IN VARCHAR2,
                   P_REP_KEY_NO IN NUMBER,
                   P_FM_EMP IN VARCHAR2,
                   P_TO_EMP IN VARCHAR2,
                   P_PROC_MTH IN NUMBER) IS
                   MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

CURSOR C1 IS
      SELECT FP_COMP_CODE COMP,  FP_EMP_CODE EMP, FP_PROC_MTH MTH
FROM PS_FINAL_PROC
WHERE FP_COMP_CODE = P_COMP_CODE
AND       FP_PROC_MTH = P_PROC_MTH
AND       FP_EMP_CODE BETWEEN  P_FM_EMP AND  P_TO_EMP
--AND       FP_ALLW_CODE = '0001'/*commented by shaibu on 03/04/2006*/
-- ADDED BY YASHARTH ON 22/07/2006 FOR ISSUE RAKINDIA-118603
AND       FP_ALLW_CODE in (select ESH_EMP_ALLW_CODE
                                                 from PM_ESIC_SETUP_HEAD
                                                )
ORDER BY EMP;

M_NAME           PM_EMP_KEY.EMP_NAME%TYPE ;

CURSOR C1_NAME(P_COMP IN VARCHAR2,P_EMP VARCHAR2) IS
   SELECT DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10)
   FROM   PM_EMP_KEY
   WHERE  EMP_COMP_CODE = P_COMP
   AND    EMP_CODE = P_EMP ;

M_ESI_NO      VARCHAR2(10) ;

   CURSOR C1_ESI(P_EMP IN VARCHAR2) IS
   SELECT TXNFIELD_FLD1
   FROM   PT_TXN_FLEX_FIELDS, PM_EMP_KEY
   WHERE  TXNFIELD_TXN_CODE    = 'EMP'
   AND    TXNFIELD_BLOCK_NUM   = 12
   AND    TXNFIELD_EMP_CODE    = EMP_CODE
   AND    EMP_CODE             = P_EMP ;

M_DAYS         NUMBER(5);
M_TOT_DAYS     NUMBER(5);
M_TOT_PAY_DAYS  NUMBER(5);

--Added by Manjula for Persian Calendar on 23/12/2005
M_DT_FMT_MASK  PM_GUI_PARAMETER.GPARA_VALUE%TYPE;
CURSOR GET_DATE_FMT IS
       SELECT GPARA_VALUE
       FROM   PM_GUI_PARAMETER
         WHERE  GPARA_CODE = 'REF_DT_FMT';

CURSOR C1_DAYS(P_COMP IN VARCHAR2,P_EMP VARCHAR2,P_MTH IN NUMBER) IS
SELECT    SUM(ATND_HRS_DAYS)
FROM    PT_ATTENDANCE_DETAIL,     PT_ATTENDANCE_HEAD, PM_EMP_KEY
WHERE   ATNH_COMP_CODE       = P_COMP
AND       ATND_ATNH_SYS_ID     = ATNH_SYS_ID
AND     EMP_COMP_CODE        = P_COMP
AND     EMP_CODE             = ATND_EMP_CODE
AND     EMP_DIVN_CODE        = ATND_DIVN_CODE
AND     EMP_DEPT_CODE        = ATND_DEPT_CODE
AND     EMP_CODE             = P_EMP
AND     TO_NUMBER(TO_CHAR(ATND_DT,'YYYYMM')) = P_MTH ;

CURSOR C2 IS
SELECT TO_NUMBER(TO_CHAR(LAST_DAY(TO_DATE(PARA_VALUE,M_DT_FMT_MASK)),'DD'))
FROM   PM_COMP_PARAMETER
WHERE  PARA_TYPE = 'CPTODT';

M_EARN  NUMBER(14,3) ;
M_TOT   NUMBER(14,3) ;
M_AMT   NUMBER(14,3) ;

   CURSOR C1_EARN(P_COMP IN VARCHAR2,P_EMP VARCHAR2,P_MTH IN NUMBER) IS
      SELECT SUM(EMPA_FC_AMOUNT)
      FROM   PM_EMP_ALLOWANCE
      WHERE  EMPA_COMP_CODE = P_COMP
      AND    EMPA_CODE      = P_EMP
      AND    TO_NUMBER(TO_CHAR(EMPA_FROM_DT,'YYYYMM')) <= P_MTH
      AND    EMPA_ALLW_CODE IN ('0001','0002','0003', '0020', '0021') ;

   CURSOR C2_EARN(P_COMP IN VARCHAR2,P_EMP VARCHAR2,P_MTH IN NUMBER) IS
      SELECT SUM(FP_FC_AMOUNT)
      FROM   PS_FINAL_PROC
      WHERE  FP_COMP_CODE   = P_COMP
      AND    FP_PROC_MTH    = P_MTH
      AND    FP_EMP_CODE    = P_EMP
      AND    FP_ALLW_CODE IN ('0001','0002','0003', '0020', '0021') ;

   CURSOR C3_EARN(P_COMP IN VARCHAR2,P_EMP VARCHAR2,P_MTH IN NUMBER) IS
   SELECT SUM(EP_BASE_AMT)
   FROM   PS_ESIC_POST
   WHERE  EP_COMP_CODE = P_COMP
   AND    EP_EMP_CODE = P_EMP
   AND    EP_CPMTH    = P_MTH
   AND    EP_ACT_AMT IS NOT NULL ;

M_ESIC_1   NUMBER(14,3) ;
M_AMT_1    NUMBER(14,3) ;
M_ESIC         NUMBER(14,3) ;
M_AMT_3          NUMBER(14,3) ;
--M_TOT       NUMBER(14,3) ;
M_AMT_2     NUMBER(14,3) ;


BEGIN
   DELETE FROM PW_ESIC WHERE ES_REP_KEY_NO = P_REP_KEY_NO;
      MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;

   FOR I IN C1 LOOP

       OPEN C1_NAME(I.COMP,I.EMP) ;
       FETCH C1_NAME INTO M_NAME ;
       CLOSE C1_NAME ;

       IF C1_ESI%ISOPEN THEN
      CLOSE C1_ESI;
   END IF ;

   OPEN C1_ESI(I.EMP) ;
   FETCH C1_ESI INTO M_ESI_NO ;
   CLOSE C1_ESI ;

        OPEN  GET_DATE_FMT ;
   FETCH GET_DATE_FMT INTO M_DT_FMT_MASK;
   CLOSE GET_DATE_FMT ;

OPEN C1_DAYS(I.COMP,I.EMP,I.MTH);
FETCH C1_DAYS INTO M_DAYS;
CLOSE C1_DAYS;

OPEN C2;
FETCH C2 INTO M_TOT_DAYS;
CLOSE C2;

M_TOT_PAY_DAYS := NVL(M_TOT_DAYS,0) - NVL(M_DAYS,0);

M_EARN := 0 ;
   M_TOT  := 0 ;

   OPEN C3_EARN(I.COMP,I.EMP,I.MTH);
   FETCH C3_EARN INTO M_EARN ;
   CLOSE C3_EARN ;
/*

   OPEN C2 ;
   FETCH C2 INTO M_TOT ;
   CLOSE C2 ;
*/
   IF NVL(M_EARN,0) <= 10000 THEN   -- added by E.Senthilkumar for NIKPLAST-200608  on 18-02-2007
 --IF NVL(M_EARN,0) <= 6500 THEN   --Commented by E.Senthilkumar for NIKPLAST-200608  on 18-02-2007


   ORNDBPKG_PAY_PROCESSING.P_ROUND_VARIABLE( M_EARN ,
                     'N',
                     100,
                     M_AMT);

/*
   ELSE
      RETURN (0) ;
*/
   END IF ;

   M_ESIC_1 := ((NVL(M_EARN,0) * 1.75 ) / 100)  ;
   ORNDBPKG_PAY_PROCESSING.P_ROUND_VARIABLE( M_ESIC_1,
                     'N',
                      5,
                      M_AMT_1);


   M_ESIC := ((NVL(M_EARN,0) * 4.75 ) / 100)  ;
   ORNDBPKG_PAY_PROCESSING.P_ROUND_VARIABLE( M_ESIC,
                        'N',
                        5,
                        M_AMT_2);

M_TOT := (NVL(M_AMT_2,0)+ NVL(M_AMT_1,0)) ;
  ORNDBPKG_PAY_PROCESSING.P_ROUND_VARIABLE( M_TOT,
                    'N',
                     5,
                     M_AMT_3);

    INSERT INTO PW_ESIC ( ES_COMP_CODE,
                          ES_REP_KEY_NO,
                          ES_EMP_CODE,
                          ES_EMP_NAME,
                          ES_ESI_NO,
                          ES_DAYS,
                          ES_EARN,
                          ES_ESI,
                          ES_EMP,
                          ES_TOT)
                 VALUES ( P_COMP_CODE,
                          P_REP_KEY_NO,
                          I.EMP,
                          M_NAME,
                          M_ESI_NO,
                          M_DAYS,
                          M_EARN,
                          M_AMT_1,
                          M_AMT_2,
                          M_AMT_3);


   END LOOP;


END P_ESIC;

PROCEDURE P_ALLW_CF( P_COMP_CODE IN VARCHAR2,
                     P_REP_KEY_NO IN NUMBER,
                     P_FM_EMP IN VARCHAR2,
                     P_TO_EMP IN VARCHAR2,
                     P_FM_DIVN IN VARCHAR2,
                     P_TO_DIVN IN VARCHAR2,
                     P_FM_DEPT IN VARCHAR2,
                     P_TO_DEPT IN VARCHAR2,
                     P_PROC_MTH IN NUMBER) IS

CURSOR C1 IS
      SELECT CF_COMP_CODE   Q_1_CF_COMP_CODE,
                   CF_PROC_MTH    Q_1_CF_PROC_MTH,
       CF_EMP_CODE    Q_1_CF_EMP_CODE,
       CF_ALLW_CODE   Q_1_CF_ALLW_CODE,
       CF_CURR_CODE   Q_1_CF_CURR_CODE,
       CF_FC_AMOUNT   Q_1_CF_FC_AMOUNT,
       CF_LC_AMOUNT   Q_1_CF_LC_AMOUNT,
       CF_TYPE_CODE   Q_1_CF_TYPE_CODE,
       CF_DUE_MTH     Q_1_CF_DUE_MTH,
       CF_LC_ADJ_AMT  Q_1_CF_LC_ADJ_AMT,
       CF_FC_ADJ_AMT  Q_1_CF_FC_ADJ_AMT,
                   EMP_CODE
FROM PS_CARRY_FORWARD,PM_EMP_KEY
WHERE CF_COMP_CODE = P_COMP_CODE
AND   EMP_CODE     =  CF_EMP_CODE
AND   CF_PROC_MTH = P_PROC_MTH
AND   CF_EMP_CODE   BETWEEN P_FM_EMP  AND P_TO_EMP
AND   EMP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
AND   EMP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT;

BEGIN
   DELETE FROM PW_ALLW_CF WHERE AC_REP_KEY_NO  = P_REP_KEY_NO;

   FOR I IN C1 LOOP

       INSERT INTO  PW_ALLW_CF ( AC_COMP_CODE,
                                 AC_REP_KEY_NO,
                                 AC_PROC_MTH,
                                 AC_EMP_CODE,
                                 AC_ALLW_CODE,
                                 AC_CURR_CODE,
                                 AC_FC_AMOUNT,
                                 AC_LC_AMOUNT,
                                 AC_TYPE_CODE,
                                 AC_DUE_MTH,
                                 AC_LC_ADJ_AMT,
                                 AC_FC_ADJ_AMT,
                                 AC_EMP)
                        VALUES ( I.Q_1_CF_COMP_CODE,
                                 P_REP_KEY_NO,
                                 I.Q_1_CF_PROC_MTH,
                                 I.Q_1_CF_EMP_CODE,
                                 I.Q_1_CF_ALLW_CODE,
                                 I.Q_1_CF_CURR_CODE,
                                 I.Q_1_CF_FC_AMOUNT,
                                 I.Q_1_CF_LC_AMOUNT,
                                 I.Q_1_CF_TYPE_CODE,
                                 I.Q_1_CF_DUE_MTH,
                                 I.Q_1_CF_LC_ADJ_AMT,
                                 I.Q_1_CF_FC_ADJ_AMT,
                                 I.EMP_CODE  );

   END LOOP;

END P_ALLW_CF;

PROCEDURE P_PAYROLL_SUMMARY( P_COMP_CODE IN VARCHAR2,
                             P_REP_KEY_NO IN NUMBER,
                             P_PROC_MTH IN NUMBER,
                             P_FM_DIVN  IN VARCHAR2,
                             P_TO_DIVN  IN VARCHAR2,
                             P_FM_DEPT  IN VARCHAR2,
                             P_TO_DEPT  IN VARCHAR2,
                             P_FM_LOCN  IN VARCHAR2,
                             P_TO_LOCN  IN VARCHAR2 ) IS
                             MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;


CURSOR C1 IS
      SELECT  DISTINCT DIVN_CODE "Q1_DIVN",DECODE(MM_LANG_CODE, 'ENG',DIVN_NAME ,'LANG_01',DIVN_NAME_LANG_01,'LANG_02',DIVN_NAME_LANG_02,'LANG_03',DIVN_NAME_LANG_03,'LANG_04',DIVN_NAME_LANG_04,'LANG_05',DIVN_NAME_LANG_05,'LANG_06',DIVN_NAME_LANG_06,'LANG_07',DIVN_NAME_LANG_07,'LANG_08',DIVN_NAME_LANG_08,'LANG_09',DIVN_NAME_LANG_09,'LANG_10',DIVN_NAME_LANG_10) "Q1_DIVN_NAME",
                  DEPT_CODE "Q1_DEPT",DECODE(MM_LANG_CODE, 'ENG',DEPT_NAME ,'LANG_01',DEPT_NAME_LANG_01,'LANG_02',DEPT_NAME_LANG_02,'LANG_03',DEPT_NAME_LANG_03,'LANG_04',DEPT_NAME_LANG_04,'LANG_05',DEPT_NAME_LANG_05,'LANG_06',DEPT_NAME_LANG_06,'LANG_07',DEPT_NAME_LANG_07,'LANG_08',DEPT_NAME_LANG_08,'LANG_09',DEPT_NAME_LANG_09,'LANG_10',DEPT_NAME_LANG_10) "Q1_DEPT_NAME",
                  LOCN_CODE "Q1_LOCN",DECODE(MM_LANG_CODE ,'ENG',LOCN_DESC, 'LANG_01', LOCN_DESC_LANG_01, 'LANG_02',
                 LOCN_DESC_LANG_02, 'LANG_03', LOCN_DESC_LANG_03, 'LANG_04', LOCN_DESC_LANG_04, 'LANG_05',
                 LOCN_DESC_LANG_05, 'LANG_06', LOCN_DESC_LANG_06, 'LANG_07', LOCN_DESC_LANG_07, 'LANG_08',
                 LOCN_DESC_LANG_08, 'LANG_09',LOCN_DESC_LANG_09, 'LANG_10', LOCN_DESC_LANG_10) "Q1_LOCN_NAME"
      FROM    FM_DIVISION,FM_DEPARTMENT,PM_LOCN,PS_FINAL_PROC
      WHERE   FP_COMP_CODE = P_COMP_CODE
                               --commented and added by manjula on 08/02/2006 for fixing the issue id ORIONQC-GDC-814922
                             /*AND TO_DATE(FP_FROM_DT,:M_DT_FMT_MASK) = TO_DATE(:P_FM_DT,:M_DT_FMT_MASK)
                                AND TO_DATE(FP_UPTO_DT,:M_DT_FMT_MASK) = TO_DATE(:P_TO_DT,:M_DT_FMT_MASK)*/
                               --commented and added by shaibu on 13/02/2006 for fixing the issue id ORIONQC-GDC-815073
                                --AND TO_DATE(TO_CHAR(FP_PROC_MTH),'YYYYMM') BETWEEN :P_FM_DT AND :P_TO_DT
                                AND FP_PROC_MTH = P_PROC_MTH
                                AND FP_DIVN_CODE    BETWEEN P_FM_DIVN AND P_TO_DIVN
                                AND FP_DEPT_CODE     BETWEEN P_FM_DEPT AND P_TO_DEPT
                                AND FP_LOCN_CODE    BETWEEN P_FM_LOCN AND P_TO_LOCN
        AND DIVN_COMP_CODE = DEPT_COMP_CODE
        AND DIVN_CODE      = DEPT_DIVN_CODE
        AND FP_COMP_CODE   = DIVN_COMP_CODE
        AND FP_DIVN_CODE   = DIVN_CODE
        AND FP_COMP_CODE   = DEPT_COMP_CODE
        AND FP_DIVN_CODE   = DEPT_DIVN_CODE
        AND FP_DEPT_CODE   = DEPT_CODE
        AND FP_LOCN_CODE   = LOCN_CODE;

CURSOR C2(P_DIVN IN VARCHAR2,P_DEPT IN VARCHAR2,P_LOCN IN VARCHAR2) IS
      SELECT
            Q2_FP_DIVN_CODE "Q2_FP_DIVN_CODE",
            Q2_FP_DEPT_CODE "Q2_FP_DEPT_CODE",
            Q2_FP_LOCN_CODE "Q2_FP_LOCN_CODE",
            COUNT(Q2_NO_OF_EMP) "Q2_NO_OF_EMP"
FROM
(SELECT
            FP_DIVN_CODE "Q2_FP_DIVN_CODE",
            FP_DEPT_CODE "Q2_FP_DEPT_CODE",
            FP_LOCN_CODE "Q2_FP_LOCN_CODE",
            FP_EMP_CODE "Q2_NO_OF_EMP"
FROM
            PM_EMP_KEY, PS_FINAL_PROC
WHERE
            FP_COMP_CODE = P_COMP_CODE
            AND FP_PROC_MTH = P_PROC_MTH
            AND FP_COMP_CODE = EMP_COMP_CODE
            AND FP_DIVN_CODE = EMP_DIVN_CODE
            AND FP_DEPT_CODE = EMP_DEPT_CODE
            AND FP_DIVN_CODE = P_DIVN
            AND FP_DEPT_CODE = P_DEPT
            AND FP_LOCN_CODE = P_LOCN
            AND FP_EMP_CODE  = EMP_CODE
/* ADDED BY ASHIK FOR THE ISSUE DANUBE-279570 ON 23/02/2009 */
            AND EMP_STATUS IN ('1','2','3')
GROUP BY
            FP_DIVN_CODE,
            FP_DEPT_CODE,
            FP_LOCN_CODE,
            FP_EMP_CODE)
GROUP BY
            Q2_FP_DIVN_CODE,
            Q2_FP_DEPT_CODE,
            Q2_FP_LOCN_CODE;

CURSOR C3 (P_DIVN IN VARCHAR2,P_DEPT IN VARCHAR2,P_LOCN IN VARCHAR2)IS
      SELECT
               FP_DIVN_CODE "Q3_FP_DIVN_CODE",
               FP_DEPT_CODE "Q3_FP_DEPT_CODE",
               FP_LOCN_CODE "Q3_FP_LOCN_CODE",
               --Commented and added by Manjula for ORIONQC-GDC-814575 on 25/01/2006
               --SUM(DECODE(FP_PROC_MTH,  :P_PROC_MONTH, DECODE(ALLW_TYPE, '1', NVL(FP_LC_AMOUNT,0),0),0)) "Q3_NET_SAL_PAID",
               --Commented and added by Manjula for ORIONQC-GDC-814922 on 08/02/2006
               --SUM( NVL(FP_LC_AMOUNT,0)) "Q3_NET_SAL_PAID",
               SUM(NVL(FP_LC_AMOUNT,0) * DECODE(FP_EARN_DEDUC,'E',1,-1)) "Q3_NET_SAL_PAID",
               SUM((DECODE(FP_PROC_MTH,  P_PROC_MTH, DECODE(ALLW_TYPE, '3',NVL(FP_LC_AMOUNT,0),0),0)) +
               (DECODE(FP_PROC_MTH,  P_PROC_MTH, DECODE(ALLW_TYPE,'4',NVL(FP_LC_AMOUNT,0),0),0))) "Q3_OT_AMT"
FROM        PS_FINAL_PROC,
      PM_ALLOWANCE
WHERE
     FP_COMP_CODE = P_COMP_CODE
                AND FP_PROC_MTH = P_PROC_MTH
                AND ALLW_CODE    = FP_ALLW_CODE
/* ADDED BY ASHIK FOR THE ISSUE DANUBE-279570 ON 23/02/2009 */
               AND FP_EMP_CODE IN (SELECT EMP_CODE
FROM PM_EMP_KEY WHERE EMP_COMP_CODE = P_COMP_CODE AND EMP_STATUS IN ('1','2','3'))
AND FP_DIVN_CODE = P_DIVN
            AND FP_DEPT_CODE = P_DEPT
            AND FP_LOCN_CODE = P_LOCN

               --Commented by Manjula for ORIONQC-GDC-814575 on 25/01/2006
                --AND ALLW_TYPE IN ('1','3','4')
GROUP BY
                FP_DIVN_CODE,
                FP_DEPT_CODE,
                FP_LOCN_CODE;

CURSOR C4 (P_DIVN IN VARCHAR2,P_DEPT IN VARCHAR2,P_LOCN IN VARCHAR2)IS
      SELECT
        EMP_DIVN_CODE "Q4_FP_DIVN_CODE",
        EMP_DEPT_CODE "Q4_FP_DEPT_CODE",
        EMP_LOCN_CODE "Q4_FP_LOCN_CODE",
        SUM(VAD_LC_AMOUNT) "Q4_LEAVE_SAL"
FROM
                                PM_EMP_KEY,
        PT_VAR_ALLW_HEAD,
        PT_VAR_ALLW_DETAIL
WHERE
        VAH_DIVN_CODE = EMP_DIVN_CODE
        AND VAH_DEPT_CODE = EMP_DEPT_CODE
        AND VAH_EMP_CODE = EMP_CODE
                                AND VAH_COMP_CODE = EMP_COMP_CODE
        AND VAH_SYS_ID = VAD_VAH_SYS_ID
                                AND VAH_APPR_UID IS NOT NULL
                                AND VAH_APPR_DT IS NOT NULL
        AND VAH_COMP_CODE = P_COMP_CODE
                   --------    AND TO_DATE(VAH_DT,:M_DT_FMT_MASK)
                   ------           BETWEEN TO_DATE(:P_FM_DT,:M_DT_FMT_MASK)   AND TO_DATE(:P_TO_DT,:M_DT_FMT_MASK) --- Commented by E.Senthilkumar for AWAL-185775  on 31-10-2007
           AND VAH_DT BETWEEN TO_DATE(P_PROC_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_PROC_MTH,'YYYYMM'))  ---- added partha issue id BHG_INT-1404706

        AND VAH_TXN_CODE IN (SELECT P_VALUE FROM MENU_PARAMETER WHERE P_ID = 'LEAVE_CODE')
    AND EMP_DIVN_CODE = P_DIVN
            AND EMP_DEPT_CODE = P_DEPT
            AND EMP_LOCN_CODE = P_LOCN
/* ADDED BY ASHIK FOR THE ISSUE DANUBE-279570 ON 23/02/2009 */
                               AND EMP_STATUS IN ('1','2','3')
GROUP BY
          EMP_DIVN_CODE,
          EMP_DEPT_CODE,
        EMP_LOCN_CODE;

CURSOR C5(P_DIVN IN VARCHAR2,P_DEPT IN VARCHAR2,P_LOCN IN VARCHAR2) IS
      SELECT
           FP_DIVN_CODE "Q5_FP_DIVN_CODE",
        FP_DEPT_CODE "Q5_FP_DEPT_CODE",
        FP_LOCN_CODE "Q5_FP_LOCN_CODE",
        SUM(NVL(LNAH_PAID_LC_AMOUNT, 0)) "Q5_LOANDISB_AMOUNT"
FROM
        PT_LOAN_ADV_HEAD,
        PS_FINAL_PROC
WHERE                      FP_COMP_CODE = P_COMP_CODE
        AND     FP_PROC_MTH = P_PROC_MTH
        AND       FP_EARN_DEDUC = 'E'
        AND     FP_COMP_CODE = LNAH_COMP_CODE
        AND       FP_ALLW_CODE = LNAH_ALLW_CODE
        AND       FP_EMP_CODE = LNAH_EMP_CODE
        AND     LNAH_APPR_UID IS NOT NULL
        AND     LNAH_APPR_DT IS NOT NULL
/* ADDED BY ASHIK FOR THE ISSUE DANUBE-279570 ON 23/02/2009 */
               AND FP_EMP_CODE IN (SELECT EMP_CODE
                                                        FROM PM_EMP_KEY WHERE EMP_COMP_CODE = P_COMP_CODE AND EMP_STATUS IN ('1','2','3'))
AND FP_DIVN_CODE = P_DIVN
            AND FP_DEPT_CODE = P_DEPT
            AND FP_LOCN_CODE = P_LOCN

GROUP BY
           FP_DIVN_CODE,
                            FP_DEPT_CODE,
        FP_LOCN_CODE;

CURSOR C6(P_DIVN IN VARCHAR2,P_DEPT IN VARCHAR2,P_LOCN IN VARCHAR2) IS
     SELECT
        FP_DIVN_CODE "Q6_FP_DIVN_CODE",
        FP_DEPT_CODE "Q6_FP_DEPT_CODE",
        FP_LOCN_CODE "Q6_FP_LOCN_CODE",
        SUM(NVL(TRRH_TOT_LC_COST, 0)) "Q6_REIMBURSE_AMOUNT"
FROM
                                PT_TRIP_REIMB_HEAD,
        PS_FINAL_PROC
WHERE
                                FP_COMP_CODE = P_COMP_CODE
        AND   FP_PROC_MTH = P_PROC_MTH
        AND   FP_EARN_DEDUC = 'E'
        AND   FP_COMP_CODE = TRRH_COMP_CODE
        AND   FP_EMP_CODE = TRRH_EMP_CODE
        AND   FP_ALLW_CODE = TRRH_ALLW_CODE
        AND   TRRH_APPR_UID IS NOT NULL
        AND   TRRH_APPR_DT IS NOT NULL
/* ADDED BY ASHIK FOR THE ISSUE DANUBE-279570 ON 23/02/2009 */
               AND FP_EMP_CODE IN (SELECT EMP_CODE
                                                        FROM PM_EMP_KEY WHERE EMP_COMP_CODE = P_COMP_CODE AND EMP_STATUS IN ('1','2','3'))
AND FP_DIVN_CODE = P_DIVN
            AND FP_DEPT_CODE = P_DEPT
            AND FP_LOCN_CODE = P_LOCN
GROUP BY
          FP_DIVN_CODE,
                                FP_DEPT_CODE,
        FP_LOCN_CODE ;
   M_DIVN_CODE    VARCHAR(12);
   M_DEPT_CODE    VARCHAR(12);
   M_LOCN_CODE    VARCHAR(12);
   M_NO_OF_EMP    NUMBER;
   M_NET_SAL_PAID NUMBER;
   M_LEAVE_SAL    NUMBER:= 0;
   M_LOAN_AMT     NUMBER := 0;
   M_REIMB_AMT   NUMBER:=0;
   M_OT_AMT       NUMBER:= 0;

BEGIN

DELETE FROM PW_PAYROLL_SUMMARY WHERE   PS_REP_KEY_NO = P_REP_KEY_NO;
 MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;

   FOR I IN C1 LOOP

       IF C2%ISOPEN THEN
          CLOSE C2;
       END IF;

       OPEN C2(I.Q1_DIVN,I.Q1_DEPT,I.Q1_LOCN);
       FETCH C2 INTO M_DIVN_CODE,M_DEPT_CODE,M_LOCN_CODE,M_NO_OF_EMP;
       CLOSE C2;

       IF C3%ISOPEN THEN
          CLOSE C3;
       END IF;

       OPEN C3(I.Q1_DIVN,I.Q1_DEPT,I.Q1_LOCN);
       FETCH C3 INTO M_DIVN_CODE,M_DEPT_CODE,M_LOCN_CODE,M_NET_SAL_PAID,M_OT_AMT;
       CLOSE C3;

       IF C4%ISOPEN THEN
          CLOSE C4;
       END IF;

       OPEN C4(I.Q1_DIVN,I.Q1_DEPT,I.Q1_LOCN);
       FETCH C4 INTO M_DIVN_CODE,M_DEPT_CODE,M_LOCN_CODE,M_LEAVE_SAL;
       CLOSE C4;

       IF C5%ISOPEN THEN
          CLOSE C5;
       END IF;

       OPEN C5(I.Q1_DIVN,I.Q1_DEPT,I.Q1_LOCN);
       FETCH C5 INTO M_DIVN_CODE,M_DEPT_CODE,M_LOCN_CODE,M_LOAN_AMT;
       CLOSE C5;

       IF C6%ISOPEN THEN
          CLOSE C6;
       END IF;

       OPEN C6(I.Q1_DIVN,I.Q1_DEPT,I.Q1_LOCN);
       FETCH C6 INTO M_DIVN_CODE,M_DEPT_CODE,M_LOCN_CODE,M_REIMB_AMT;
       CLOSE C6;

       INSERT INTO PW_PAYROLL_SUMMARY ( PS_COMP_CODE,
                                        PS_REP_KEY_NO,
                                        PS_DIVN_CODE,
                                        PS_DEPT_CODE,
                                        PS_LOCN_CODE,
                                        PS_DIVN_NAME,
                                        PS_DEPT_NMAE,
                                        PS_LOCN_NAME,
                                        PS_NO_OF_EMP,
                                        PS_NET_SAL_PAID,
                                        PS_OT_AMT,
                                        PS_LEAVE_SAL,
                                        PS_LOAN_AMOUNT,
                                        PS_REIMB_AMOUNT)
                               VALUES ( P_COMP_CODE,
                                        P_REP_KEY_NO,
                                        I.Q1_DIVN,
                                        I.Q1_DEPT,
                                        I.Q1_LOCN,
                                        I.Q1_DIVN_NAME,
                                        I.Q1_DEPT_NAME,
                                        I.Q1_LOCN_NAME,
                                        M_NO_OF_EMP,
                                        M_NET_SAL_PAID,
                                        M_OT_AMT,
                                        M_LEAVE_SAL,
                                        M_LOAN_AMT,
                                        M_REIMB_AMT);

   END LOOP;

END P_PAYROLL_SUMMARY;

PROCEDURE P_PROPERTY_HANDOVER ( P_COMP_CODE  IN VARCHAR2,
                                P_REP_KEY_NO IN NUMBER,
                                P_FM_DIVN    IN VARCHAR2,
                                P_TO_DIVN IN VARCHAR2,
                                P_FM_DEPT IN VARCHAR2,
                                P_TO_DEPT IN VARCHAR2,
                                P_FM_LOCN IN VARCHAR2,
                                P_TO_LOCN IN VARCHAR2,
                                P_FM_DT   IN DATE,
                                P_TO_DT   IN DATE,
                                P_FM_EMP  IN VARCHAR2,
                                P_TO_EMP  IN VARCHAR2,
                                P_FM_GRADE IN VARCHAR2,
                                P_TO_GRADE IN VARCHAR2) IS
                                MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

CURSOR C1 IS
      SELECT EMP_CODE,PI_SYS_ID,PIRH_SYS_ID,DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) EMP_NAME,EMP_DIVN_CODE,EMP_DEPT_CODE,EMP_LOCN_CODE,PI_ITEM,PIRH_FLEXI_VAL1,
             PI_PURCHASE_FC_VALUE,PI_ISSUE_DT,PIRH_DT,PIRH_FLEXI_VAL2,PIRH_REMARKS
      FROM PM_EMP_KEY ,PT_PROVIDED_ITEMS,PT_PROVIDED_ITEMS_RET_HEAD
       WHERE PI_COMP_CODE= P_COMP_CODE
       AND   PI_COMP_CODE=EMP_COMP_CODE
       AND   PIRH_COMP_CODE=EMP_COMP_CODE
       AND PIRH_COMP_CODE=PI_COMP_CODE
       AND   PI_EMP_CODE    = EMP_CODE
       AND   PIRH_EMP_CODE=EMP_CODE
       AND PI_EMP_CODE=PIRH_EMP_CODE
       AND  PI_RETURNABLE_YN='Y'
--       AND    PIRH_SYS_ID= PI_SYS_ID
  --     AND  PI_NO=PIRH_NO
       AND PI_TXN_CODE=PIRH_REF_TXN_CODE
         AND EMP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
       AND EMP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
       AND EMP_LOCN_CODE BETWEEN P_FM_LOCN AND P_TO_LOCN
       AND PI_DT BETWEEN P_FM_DT AND   P_TO_DT
       AND EMP_CODE BETWEEN P_FM_EMP AND P_TO_EMP
       AND EMP_PERSONAL_GRADE BETWEEN P_FM_GRADE AND P_TO_GRADE
       ORDER BY EMP_DIVN_CODE,EMP_DEPT_CODE,EMP_CODE, PI_DT;

DEPTNAME  VARCHAR2(40);
CURSOR C1_DEPT_NAME(P_DEPT IN VARCHAR2) IS
     SELECT DECODE(MM_LANG_CODE,'ENG',DEPT_SHORT_NAME, 'LANG_01', DEPT_SHORT_NAME_LANG_01, 'LANG_02', DEPT_SHORT_NAME_LANG_02,
'LANG_03', DEPT_SHORT_NAME_LANG_03, 'LANG_04', DEPT_SHORT_NAME_LANG_04, 'LANG_05', DEPT_SHORT_NAME_LANG_05, 'LANG_06',
DEPT_SHORT_NAME_LANG_06, 'LANG_07', DEPT_SHORT_NAME_LANG_07, 'LANG_08', DEPT_SHORT_NAME_LANG_08, 'LANG_09', DEPT_SHORT_NAME_LANG_09,
'LANG_10', DEPT_SHORT_NAME_LANG_10,DEPT_SHORT_NAME) DEPT_SHORT_NAME
      FROM   FM_DEPARTMENT
      WHERE  DEPT_COMP_CODE=P_COMP_CODE
      AND    DEPT_CODE=P_DEPT;

LOCNAME  VARCHAR2(300);-- Below Statement is remarked and added by Saraswathi for the issue Z_32062-453341 on 07/10/2010
--DIVNAME  VARCHAR2(20);
  CURSOR C1_LOCN(P_LOCN IN VARCHAR2) IS
  SELECT DECODE(MM_LANG_CODE,'ENG',LOCN_SHORT_DESC, 'LANG_01', LOCN_SHORT_DESC_LANG_01, 'LANG_02', LOCN_SHORT_DESC_LANG_02,
'LANG_03', LOCN_SHORT_DESC_LANG_03, 'LANG_04', LOCN_SHORT_DESC_LANG_04, 'LANG_05', LOCN_SHORT_DESC_LANG_05, 'LANG_06',
LOCN_SHORT_DESC_LANG_06, 'LANG_07', LOCN_SHORT_DESC_LANG_07, 'LANG_08', LOCN_SHORT_DESC_LANG_08, 'LANG_09', LOCN_SHORT_DESC_LANG_09,
'LANG_10', LOCN_SHORT_DESC_LANG_10,LOCN_SHORT_DESC) LOCN_SHORT_DESC
  FROM  PM_LOCN
  WHERE LOCN_CODE=P_LOCN;

DIVNAME  VARCHAR2(240);
  CURSOR C1_DIVN (P_DIVN IN VARCHAR2)IS
 -- SELECT  DIVN_SHORT_NAME
 SELECT DECODE(MM_LANG_CODE,'ENG',DIVN_SHORT_NAME, 'LANG_01', DIVN_SHORT_NAME_LANG_01, 'LANG_02', DIVN_SHORT_NAME_LANG_02,
'LANG_03', DIVN_SHORT_NAME_LANG_03, 'LANG_04', DIVN_SHORT_NAME_LANG_04, 'LANG_05', DIVN_SHORT_NAME_LANG_05, 'LANG_06',
DIVN_SHORT_NAME_LANG_06, 'LANG_07', DIVN_SHORT_NAME_LANG_07, 'LANG_08', DIVN_SHORT_NAME_LANG_08, 'LANG_09', DIVN_SHORT_NAME_LANG_09,
'LANG_10', DIVN_SHORT_NAME_LANG_10,DIVN_SHORT_NAME)  DIVN_SHORT_NAME
  FROM FM_DIVISION
  WHERE  DIVN_COMP_CODE=P_COMP_CODE
  AND DIVN_CODE=P_DIVN;

BEGIN

   DELETE FROM PW_PROPERTY_HANDOVER WHERE PH_REP_KEY_NO = P_REP_KEY_NO;

   MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;

   FOR I IN C1 LOOP

           IF C1_DEPT_NAME%ISOPEN THEN
               CLOSE C1_DEPT_NAME;
            END IF;
          OPEN C1_DEPT_NAME(I.EMP_DEPT_CODE);
          FETCH C1_DEPT_NAME INTO DEPTNAME;
          CLOSE C1_DEPT_NAME;
      DEPTNAME := I.EMP_DEPT_CODE|| DEPTNAME;

        IF C1_LOCN%ISOPEN THEN
               CLOSE C1_LOCN;
            END IF;
          OPEN C1_LOCN(I.EMP_LOCN_CODE);
          FETCH C1_LOCN INTO LOCNAME;
           CLOSE C1_LOCN;
         LOCNAME:= (I.EMP_LOCN_CODE||'-'||LOCNAME);

           IF C1_DIVN%ISOPEN THEN
               CLOSE C1_DIVN;
            END IF;
          OPEN C1_DIVN(I.EMP_DIVN_CODE);
           FETCH C1_DIVN INTO DIVNAME;
          CLOSE C1_DIVN;
    DIVNAME:=  (I.EMP_DIVN_CODE||'-'||DIVNAME);

      INSERT INTO PW_PROPERTY_HANDOVER ( PH_COMP_CODE,
                                         PH_REP_KEY_NO,
                                         PH_CODE,
                                         PH_PI_SYS_ID,
                                         PH_PIRH_SYS_ID,
                                         PH_NAME,
                                         PH_DIVN_CODE,
                                         PH_DEPT_CODE,
                                         PH_LOCN_CODE,
                                         PH_ITEM,
                                         PH_FLEXI_VAL1,
                                         PH_PI_PURCHASE_FC_VALUE,
                                         PH_PI_ISSUE_DT,
                                         PH_PIRH_DT,
                                         PH_PIRH_FLEXI_VAL2,
                                         PH_PIRH_REMARKS,
                                         PH_DIVN_NAME,
                                         PH_DEPT_NAME,
                                         PH_LOCN_NAME)
                                VALUES ( P_COMP_CODE,
                                         P_REP_KEY_NO,
                                         I.EMP_CODE,
                                         I.PI_SYS_ID,
                                         I.PIRH_SYS_ID,
                                         I.EMP_NAME,
                                         I.EMP_DIVN_CODE,
                                         I.EMP_DEPT_CODE,
                                         I.EMP_LOCN_CODE,
                                         I.PI_ITEM,
                                         I.PIRH_FLEXI_VAL1,
                                         I.PI_PURCHASE_FC_VALUE ,
                                         I.PI_ISSUE_DT,
                                         I.PIRH_DT,
                                         I.PIRH_FLEXI_VAL2,
                                         I.PIRH_REMARKS,
                                        DIVNAME,
                                        DEPTNAME,
                                        LOCNAME);

 END LOOP;
END P_PROPERTY_HANDOVER;

PROCEDURE P_BOARD_OF_TRUSTEES ( P_COMP_CODE  IN VARCHAR2,
                                P_REP_KEY_NO IN NUMBER,
                                P_FM_EMP     IN VARCHAR2,
                                P_TO_EMP     IN VARCHAR2,
                                P_PROC_MTH   IN NUMBER) IS

                                MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

CURSOR C1 IS
      SELECT  DISTINCT SCH_EMP_ALLW_CODE,SCH_EMPR_ALLW_CODE,FP_LC_AMOUNT,CP_ALLW_CODE,
      CP_ACT_AMT,EMP_CODE,DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) EMP_NAME,
(FP_LC_AMOUNT + CP_ACT_AMT)TOTAL
FROM PM_SOCIAL_CONTRIBUTION_HEAD,PS_FINAL_PROC,PS_CONTRIBUTION_POST,PM_EMP_KEY
WHERE FP_COMP_CODE = CP_COMP_CODE
AND FP_COMP_CODE = SCH_COMP_CODE
AND CP_CPMTH = P_PROC_MTH
AND SCH_EMP_ALLW_CODE = FP_ALLW_CODE
AND   EMP_CODE = CP_EMP_CODE
AND   FP_EMP_CODE  = CP_EMP_CODE
AND   FP_EMP_CODE BETWEEN NVL(P_FM_EMP,'0') AND NVL(P_TO_EMP,'zzzzzzzzzzzz')
AND   FP_PROC_MTH = CP_CPMTH
AND SCH_EMPR_ALLW_CODE= CP_ALLW_CODE;

CURSOR C2(P_EMP_CODE IN VARCHAR2) IS
      SELECT TXNFIELD_FLD2 FROM PT_TXN_FLEX_FIELDS
      WHERE  TXNFIELD_BLOCK_NUM = '1'
      AND    TXNFIELD_EMP_CODE = P_EMP_CODE;

CURSOR C3 IS
      SELECT DISTINCT COMP_CODE,DECODE(MM_LANG_CODE, 'ENG',COMP_NAME ,'LANG_01',COMP_NAME_LANG_01,'LANG_02',COMP_NAME_LANG_02,'LANG_03',COMP_NAME_LANG_03,'LANG_04',COMP_NAME_LANG_04,'LANG_05',COMP_NAME_LANG_05,'LANG_06',COMP_NAME_LANG_06,'LANG_07',COMP_NAME_LANG_07,'LANG_08',COMP_NAME_LANG_08,'LANG_09',COMP_NAME_LANG_09,'LANG_10',COMP_NAME_LANG_10),COMP_ADD_1,COMP_ADD_2,COMP_ADD_3,SCH_REFERENCE
      FROM   FM_COMPANY,PM_EMP_KEY,PS_FINAL_PROC,PM_SOCIAL_CONTRIBUTION_HEAD
      WHERE  FP_COMP_CODE = P_COMP_CODE
      AND    FP_COMP_CODE = COMP_CODE
      AND    FP_EMP_CODE  = EMP_CODE;


M_TEMP VARCHAR2(50);
M_COMP_CODE VARCHAR2(12);
M_COMP_NAME VARCHAR2(240);
M_COMP_ADD_1 VARCHAR2(30);
M_COMP_ADD_2 VARCHAR2(30);
M_COMP_ADD_3 VARCHAR2(30);
M_SCH_REFERENCE  VARCHAR2(240);
BEGIN

   DELETE FROM PW_BOARD_TRUSTEES WHERE BT_REP_KEY_NO = P_REP_KEY_NO;
     MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;

   FOR I IN C1 LOOP
      IF C2%ISOPEN THEN
         CLOSE C2;
      END IF;

      OPEN C2(I.EMP_CODE);
      FETCH C2 INTO M_TEMP;

      IF C2%FOUND THEN
         M_TEMP:= M_TEMP;
      ELSE
            M_TEMP := NULL;
      END IF;
      CLOSE C2;
      M_COMP_CODE := NULL;
      M_COMP_NAME := NULL;
      M_COMP_ADD_1 := NULL;
      M_COMP_ADD_2 := NULL;
      M_COMP_ADD_3 := NULL;
      M_SCH_REFERENCE := NULL;
      IF C3%ISOPEN THEN
         CLOSE C3;
      END IF;

      OPEN C3;
      FETCH C3 INTO M_COMP_CODE,M_COMP_NAME,M_COMP_ADD_1,M_COMP_ADD_2,M_COMP_ADD_3,M_SCH_REFERENCE;
      CLOSE C3;

       INSERT INTO PW_BOARD_TRUSTEES ( BT_COMP_CODE,
                                       BT_REP_KEY_NO,
                                       BT_EMP_ALLW_CODE,
                                       BT_EMPR_ALLW_CODE,
                                       BT_LC_AMOUNT,
                                       BT_ALLW_CODE,
                                       BT_ACT_AMT,
                                       BT_EMP_CODE,
                                       BT_EMP_NAME,
                                       BT_TOTAL,
                                       BT_CF_1,
                                       BT_COMP_NAME,
                                       BT_COMP_ADD_1,
                                       BT_COMP_ADD_2,
                                       BT_COMP_ADD_3,
                                       BT_SCH_REFERENCE)
                              VALUES ( P_COMP_CODE,
                                       P_REP_KEY_NO,
                                       I.SCH_EMP_ALLW_CODE,
                                       I.SCH_EMPR_ALLW_CODE,
                                       I.FP_LC_AMOUNT,
                                       I.CP_ALLW_CODE,
                                       I.CP_ACT_AMT,
                                       I.EMP_CODE,
                                       I.EMP_NAME,
                                       I.TOTAL,
                                       M_TEMP,
                                       M_COMP_NAME,
                                       M_COMP_ADD_1,
                                       M_COMP_ADD_2,
                                       M_COMP_ADD_3,
                                       M_SCH_REFERENCE);

   END LOOP;


END P_BOARD_OF_TRUSTEES;

PROCEDURE P_PR_FORM ( P_COMP_CODE  IN VARCHAR2,
                      P_REP_KEy_NO IN NUMBER,
                      P_PROC_MTH   IN NUMBER) IS
                      MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

CURSOR C1 IS
      SELECT  COMP_CODE , DECODE(MM_LANG_CODE, 'ENG',COMP_NAME ,'LANG_01',COMP_NAME_LANG_01,'LANG_02',COMP_NAME_LANG_02,'LANG_03',COMP_NAME_LANG_03,'LANG_04',COMP_NAME_LANG_04,'LANG_05',COMP_NAME_LANG_05,'LANG_06',COMP_NAME_LANG_06,'LANG_07',COMP_NAME_LANG_07,'LANG_08',COMP_NAME_LANG_08,'LANG_09',COMP_NAME_LANG_09,'LANG_10',COMP_NAME_LANG_10)
      FROM    FM_COMPANY
      WHERE   COMP_CODE = P_COMP_CODE;

CURSOR C2 IS
      SELECT PARA_VALUE , TO_CHAR(TO_DATE(PARA_VALUE,'YYYYMM'),'MON,YYYY') CP_MTH
FROM   PM_COMP_PARAMETER
WHERE  PARA_CODE = 'CPMTH'
AND    PARA_COMP_CODE = p_comp_code;

CURSOR C3 IS
      SELECT FP_COMP_CODE COMP,FP_EMP_CODE EMP, FP_ALLW_CODE ALLW, FP_FC_AMOUNT FC, FP_LC_AMOUNT LC
FROM PS_FINAL_PROC
WHERE FP_COMP_CODE = p_comp_code
AND   TO_NUMBER(FP_PROC_MTH) =TO_NUMBER(P_PROC_MTH);

CURSOR C4 IS
      SELECT COUNT(*) FROM PS_FINAL_PROC
WHERE TO_NUMBER(FP_PROC_MTH) = TO_NUMBER(P_PROC_MTH);

   M_COMP_CODE  VARCHAR2(12);
   M_COMP_NAME  VARCHAR2(240);
   M_MTH        VARCHAR2(20);
   M_VALUE      VARCHAR2(20);
   M_COUNT      NUMBER;

M_PF   NUMBER(14,3);
M_AMT  NUMBER(14,3) ;

CURSOR C5(P_COMP IN VARCHAR2,P_EMP IN VARCHAR2) IS
       SELECT FP_FC_AMOUNT
       FROM PS_FINAL_PROC
       WHERE  FP_COMP_CODE = P_COMP
       AND    FP_PROC_MTH  = P_PROC_MTH
       AND    FP_EMP_CODE  = P_EMP;
      -- AND    FP_ALLW_CODE IN  ('2001', '2012') ;

M_PF_1    NUMBER(14,3);
M_FPF   NUMBER(14,3);
M_AMT_1   NUMBER(14,3) ;

M_PF_2    NUMBER(14,3);
M_FPF_1   NUMBER(14,3);

M_PF_3    NUMBER(14,3);
M_FPF_2   NUMBER(14,3);
M_AMT_2   NUMBER(14,3) ;

M_DLI        NUMBER(14,3);
M_AMT_3           NUMBER(14,3) ;

CURSOR C6(P_COMP IN VARCHAR2,P_EMP IN VARCHAR2) IS
       SELECT (FP_FC_AMOUNT * 0.5) / 100
       FROM   PS_FINAL_PROC
       WHERE  FP_COMP_CODE = P_COMP
       AND    FP_PROC_MTH  = P_PROC_MTH
       AND    FP_EMP_CODE  = P_EMP
       AND    FP_ALLW_CODE = '0001' ;

M_ADM          NUMBER(14,3) ;
M_AMT_4          NUMBER(14,3) ;

CURSOR C7(P_COMP IN VARCHAR2,P_EMP IN VARCHAR2) IS
       SELECT (FP_FC_AMOUNT * 1.10) / 100
       FROM   PS_FINAL_PROC
       WHERE  FP_COMP_CODE = P_COMP
       AND    FP_PROC_MTH  = P_PROC_MTH
       AND    FP_EMP_CODE  = P_EMP
       AND    FP_ALLW_CODE = '0001' ;



BEGIN

DELETE FROM PW_PR_FORM WHERE PR_REP_KEY_NO = P_REP_KEY_NO;

    MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;

FOR I IN C3 LOOP

    IF C1%ISOPEN THEN
       CLOSE C2;
    END IF;

    OPEN C1;
    FETCH C1 INTO M_COMP_CODE, M_COMP_NAME;
    CLOSE C1;

    IF C2%ISOPEN THEN
       CLOSE C2;
    END IF;

    OPEN C2;
    FETCH C2 INTO M_VALUE,M_MTH;
    CLOSE C2;

    IF C4%ISOPEN THEN
       CLOSE C4;
    END IF;

    OPEN C4;
    FETCH C4 INTO M_COUNT;
    CLOSE C4;

    M_PF := 0 ;
   OPEN  C5(I.COMP,I.EMP) ;
   FETCH C5 INTO M_PF ;
   CLOSE C5 ;
   ORNDBPKG_PAY_PROCESSING.P_ROUND_VARIABLE( M_PF,
                     'N',
                     100,
                     M_AMT);

   M_PF_1 := 0 ;
   M_PF_1 := NVL(I.FC,0) * 8.33 / 100 ;
   IF NVL(I.FC,0) <= 5000 THEN
      M_FPF := NVL(M_PF,0) ;
   ELSE
      M_FPF  := 417 ;
   END IF ;
   ORNDBPKG_PAY_PROCESSING.P_ROUND_VARIABLE( M_FPF,
                     'N',
                     50,
                     M_AMT_1);

   M_PF_2 := 0 ;
   M_PF_2 := NVL(I.FC,0) * 8.33 / 100 ;
   IF NVL(I.FC,0) <= 5000 THEN
      M_FPF_1 := 0 ;
   ELSE
      M_FPF_1  := NVL(M_PF,0) - 417 ;
   END IF ;

    M_PF_3 := 0 ;
   M_PF_3 := NVL(I.FC,0) * 3.67 / 100 ;
   M_FPF_2 := NVL(M_PF_3,0) + NVL(M_FPF_1,0) ;
   ORNDBPKG_PAY_PROCESSING.P_ROUND_VARIABLE( M_FPF_2,
                     'N',
                      50,
                      M_AMT_2);

M_DLI := 0 ;
   OPEN  C6(I.COMP,I.EMP)  ;
   FETCH C6 INTO M_DLI ;
   CLOSE C6 ;
   ORNDBPKG_PAY_PROCESSING.P_ROUND_VARIABLE( M_DLI,
                     'N',
                     100,
                     M_AMT_3);

 M_ADM := 0 ;
   OPEN  C7(I.COMP,I.EMP) ;
   FETCH C7 INTO M_ADM ;
   CLOSE C7 ;
   ORNDBPKG_PAY_PROCESSING.P_ROUND_VARIABLE( M_ADM,
                     'N',
                     100,
                     M_AMT_4);

   INSERT INTO PW_PR_FORM  ( PR_COMP_CODE,
                             PR_REP_KEY_NO,
                             PR_COMP_NAME,
                             PR_VALUE,
                             PR_MTH,
                             PR_EMP_CODE,
                             PR_ALLW_CODE,
                             PR_FC_AMOUNT,
                             PR_LC_AMOUNT,
                             PR_COUNT,
                             PR_PF,
                             PR_FPF,
                             PR_FPF1,
                             PR_FPF2,
                             PR_DLI,
                             PR_ADM)
                     VALUES( I.COMP,
                             P_REP_KEY_NO,
                             M_COMP_NAME,
                             M_VALUE,
                             M_MTH,
                             I.EMP,
                             I.ALLW,
                             I.FC,
                             I.LC,
                             M_COUNT,
                             M_AMT,
                             M_AMT_1,
                             M_FPF_1,
                             M_AMT_2,
                             M_AMT_3,
                             M_AMT_4);

END LOOP;

END P_PR_FORM;

PROCEDURE P_PENSION_ACCRUAL ( P_COMP_CODE IN VARCHAR2,
                              P_REP_KEY_NO IN NUMBER,
                              P_FM_DIVN IN VARCHAR2,
                              P_TO_DIVN IN VARCHAR2,
                              P_FM_DEPT IN VARCHAR2,
                              P_TO_DEPT IN VARCHAR2,
                              P_FM_LOCN IN VARCHAR2,
                              P_TO_LOCN IN VARCHAR2,
                              P_FM_DT   IN DATE,
                              P_TO_DT   IN DATE,
                              P_FM_EMP  IN VARCHAR2,
                              P_TO_EMP  IN VARCHAR2,
                              P_FM_GRADE IN VARCHAR2,
                              P_TO_GRADE IN VARCHAR2,
                              P_FM_ALLW IN VARCHAR2,
                              P_TO_ALLW IN VARCHAR2) IS

                              MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;
CURSOR C_MAIN IS
      SELECT EMP_DIVN_CODE||'-'||DECODE(MM_LANG_CODE, 'ENG',DIVN_SHORT_NAME ,'LANG_01',DIVN_SHORT_NAME_LANG_01,'LANG_02',DIVN_SHORT_NAME_LANG_02,'LANG_03',DIVN_SHORT_NAME_LANG_03,'LANG_04',DIVN_SHORT_NAME_LANG_04,'LANG_05',DIVN_SHORT_NAME_LANG_05,'LANG_06',DIVN_SHORT_NAME_LANG_06,'LANG_07',DIVN_SHORT_NAME_LANG_07,'LANG_08',DIVN_SHORT_NAME_LANG_08,'LANG_09',DIVN_SHORT_NAME_LANG_09,'LANG_10',DIVN_SHORT_NAME_LANG_10) DIV,
       EMP_DEPT_CODE||'-'||DECODE(MM_LANG_CODE, 'ENG',DEPT_SHORT_NAME ,'LANG_01',DEPT_SHORT_NAME_LANG_01,'LANG_02',DEPT_SHORT_NAME_LANG_02,'LANG_03',DEPT_SHORT_NAME_LANG_03,'LANG_04',DEPT_SHORT_NAME_LANG_04,'LANG_05',DEPT_SHORT_NAME_LANG_05,'LANG_06',DEPT_SHORT_NAME_LANG_06,'LANG_07',DEPT_SHORT_NAME_LANG_07,'LANG_08',DEPT_SHORT_NAME_LANG_08,'LANG_09',DEPT_SHORT_NAME_LANG_09,'LANG_10',DEPT_SHORT_NAME_LANG_10) DEPT ,
       EMP_CODE,
       DECODE(MM_LANG_CODE, 'ENG',EMP_LONG_NAME ,'LANG_01',EMP_LONG_NAME_LANG_01,'LANG_02',EMP_LONG_NAME_LANG_02,'LANG_03',EMP_LONG_NAME_LANG_03,'LANG_04',EMP_LONG_NAME_LANG_04,'LANG_05',EMP_LONG_NAME_LANG_05,'LANG_06',EMP_LONG_NAME_LANG_06,'LANG_07',EMP_LONG_NAME_LANG_07,'LANG_08',EMP_LONG_NAME_LANG_08,'LANG_09',EMP_LONG_NAME_LANG_09,'LANG_10',EMP_LONG_NAME_LANG_10) EMP_LONG_NAME,
       EMP_JOIN_DT,
       EMP_PERSONAL_GRADE
FROM   FM_DIVISION,
       FM_DEPARTMENT,
       PM_EMP_KEY,
       PM_EMP_ALLOWANCE
WHERE  DIVN_COMP_CODE = EMP_COMP_CODE
AND    DIVN_CODE      = EMP_DIVN_CODE
AND    DEPT_COMP_CODE = EMP_COMP_CODE
AND    DEPT_DIVN_CODE = DIVN_CODE
AND    DEPT_CODE      = EMP_DEPT_CODE
AND       EMP_COMP_CODE  = EMPA_COMP_CODE
AND    EMP_CODE          = EMPA_CODE
--AND    EMPA_ALLW_CODE IN (P_PENERN_CODE,P_PENDED_CODE)
AND       EMP_COMP_CODE  =P_COMP_CODE
AND    EMP_DIVN_CODE  BETWEEN P_FM_DIVN AND P_TO_DIVN
AND       EMP_DEPT_CODE  BETWEEN P_FM_DEPT AND P_TO_DEPT
AND       EMP_LOCN_CODE  BETWEEN P_FM_LOCN AND P_TO_LOCN
AND       EMPA_FROM_DT  <= P_FM_DT
AND    P_TO_DT <= EMPA_UPTO_DT
AND       EMP_CODE          BETWEEN P_FM_EMP AND P_TO_EMP
AND       EMP_PERSONAL_GRADE BETWEEN P_FM_GRADE  AND P_TO_GRADE
AND       EMPA_ALLW_CODE BETWEEN P_FM_ALLW  AND P_TO_ALLW
GROUP BY EMP_DIVN_CODE,
       EMP_DEPT_CODE,
       EMP_CODE,
       DECODE(MM_LANG_CODE, 'ENG',EMP_LONG_NAME ,'LANG_01',EMP_LONG_NAME_LANG_01,'LANG_02',EMP_LONG_NAME_LANG_02,'LANG_03',EMP_LONG_NAME_LANG_03,'LANG_04',EMP_LONG_NAME_LANG_04,'LANG_05',EMP_LONG_NAME_LANG_05,'LANG_06',EMP_LONG_NAME_LANG_06,'LANG_07',EMP_LONG_NAME_LANG_07,'LANG_08',EMP_LONG_NAME_LANG_08,'LANG_09',EMP_LONG_NAME_LANG_09,'LANG_10',EMP_LONG_NAME_LANG_10),
       EMP_JOIN_DT,
       EMP_PERSONAL_GRADE,
       DECODE(MM_LANG_CODE, 'ENG',DIVN_SHORT_NAME ,'LANG_01',DIVN_SHORT_NAME_LANG_01,'LANG_02',DIVN_SHORT_NAME_LANG_02,'LANG_03',DIVN_SHORT_NAME_LANG_03,'LANG_04',DIVN_SHORT_NAME_LANG_04,'LANG_05',DIVN_SHORT_NAME_LANG_05,'LANG_06',DIVN_SHORT_NAME_LANG_06,'LANG_07',DIVN_SHORT_NAME_LANG_07,'LANG_08',DIVN_SHORT_NAME_LANG_08,'LANG_09',DIVN_SHORT_NAME_LANG_09,'LANG_10',DIVN_SHORT_NAME_LANG_10) ,
       DECODE(MM_LANG_CODE, 'ENG',DEPT_SHORT_NAME ,'LANG_01',DEPT_SHORT_NAME_LANG_01,'LANG_02',DEPT_SHORT_NAME_LANG_02,'LANG_03',DEPT_SHORT_NAME_LANG_03,'LANG_04',DEPT_SHORT_NAME_LANG_04,'LANG_05',DEPT_SHORT_NAME_LANG_05,'LANG_06',DEPT_SHORT_NAME_LANG_06,'LANG_07',DEPT_SHORT_NAME_LANG_07,'LANG_08',DEPT_SHORT_NAME_LANG_08,'LANG_09',DEPT_SHORT_NAME_LANG_09,'LANG_10',DEPT_SHORT_NAME_LANG_10);

M_BASIC        NUMBER;
CURSOR C1(P_EMP IN VARCHAR2) IS
    SELECT NVL(EMPA_FC_AMOUNT,0)
    FROM   PM_ALLOWANCE,
               PM_EMP_ALLOWANCE
    WHERE  ALLW_CODE              = EMPA_ALLW_CODE
    AND       ALLW_TYPE              ='1'
    AND    ALLW_EARN_DEDUC ='E'
    AND       EMPA_COMP_CODE  =P_COMP_CODE
    AND       EMPA_CODE               =P_EMP
    AND    EMPA_FROM_DT    =(SELECT MAX(EMPA_FROM_DT)
                                                   FROM     PM_EMP_ALLOWANCE
                                                      WHERE  EMPA_COMP_CODE =P_COMP_CODE
                                                      AND    EMPA_CODE      =P_EMP);

M_SERV_DAYS            NUMBER;
-- replaced the hard coded date format by Shaibu on 18/01/2006 for Persian Calendar changes in Payroll 10.4
CURSOR C2(P_EMP_JOIN_DT IN DATE) IS
    SELECT SYSDATE - P_EMP_JOIN_DT
    FROM DUAL;

M_ERN_DESC        VARCHAR2(240);
CURSOR C3(P_EMP IN VARCHAR2) IS
    SELECT EMPA_ALLW_CODE||'-'||DECODE(MM_LANG_CODE, 'ENG',ALLW_DESC ,'LANG_01',ALLW_DESC_LANG_01,'LANG_02',ALLW_DESC_LANG_02,'LANG_03',ALLW_DESC_LANG_03,'LANG_04',ALLW_DESC_LANG_04,'LANG_05',ALLW_DESC_LANG_05,'LANG_06',ALLW_DESC_LANG_06,'LANG_07',ALLW_DESC_LANG_07,'LANG_08',ALLW_DESC_LANG_08,'LANG_09',ALLW_DESC_LANG_09,'LANG_10',ALLW_DESC_LANG_10)
    FROM   PM_ALLOWANCE,
                PM_EMP_ALLOWANCE
    WHERE  ALLW_CODE         = EMPA_ALLW_CODE
    AND       ALLW_TYPE          ='5'
    AND    ALLW_EARN_DEDUC ='E'
    --AND      EMPA_ALLW_CODE     = :P_PENERN_CODE
    AND      EMPA_ALLW_CODE     BETWEEN P_FM_ALLW AND P_TO_ALLW
    AND       EMPA_COMP_CODE  =P_COMP_CODE
    AND       EMPA_CODE         =P_EMP;

M_DAYS_E            NUMBER;
M_DAYS_A            NUMBER;
M_FLAG                VARCHAR2(1);
M_PAY_FLAG        VARCHAR2(1);
M_AMT                    NUMBER;
M_DIFF_DAY        NUMBER;
M_PRE_DAY_AMT    NUMBER;
M_TOTAL_AMT        NUMBER;
M_ALLW_CODE        VARCHAR(20);
M_PREC                NUMBER;
M_AMT_C                NUMBER;
TOTAL                    NUMBER := 0;

CURSOR C4 IS
  SELECT PARA_VALUE
  FROM   PM_COMP_PARAMETER
     WHERE  PARA_COMP_CODE =P_COMP_CODE
    AND    PARA_TYPE            ='PYBSDYFLAG';
CURSOR C5 IS
    SELECT PARA_VALUE
    FROM   PM_COMP_PARAMETER
    WHERE  PARA_COMP_CODE =P_COMP_CODE
    AND    PARA_TYPE            ='PYBSDYS';
CURSOR C6 IS
    SELECT TO_CHAR(LAST_DAY(SYSDATE),'DD')
    FROM      DUAL;

CURSOR C7(P_EMP  IN VARCHAR2) IS
    SELECT    EMPA_CE
    FROM       PM_EMP_ALLOWANCE
    WHERE     EMPA_COMP_CODE =P_COMP_CODE
    AND       EMPA_CODE      =P_EMP
    --AND       EMPA_ALLW_CODE =:P_PENERN_CODE
    AND       EMPA_ALLW_CODE     BETWEEN P_FM_ALLW AND P_TO_ALLW;
CURSOR C8(P_EMP  IN VARCHAR2) IS
    SELECT    SUM(NVL(EMPA_LC_AMOUNT,0))
    FROM         PM_ALLOWANCE,
                  PM_EMP_ALLOWANCE
    WHERE     EMPA_ALLW_CODE = ALLW_CODE
    AND            ALLW_EARN_DEDUC='E'
    AND         ALLW_TYPE      ='5'
    AND         EMPA_COMP_CODE =P_COMP_CODE
    AND         EMPA_CODE      =P_EMP
--    AND       EMPA_ALLW_CODE =:P_PENERN_CODE
    AND      EMPA_ALLW_CODE     BETWEEN P_FM_ALLW AND P_TO_ALLW
    AND         EMPA_FROM_DT   <= (SELECT MAX(EMPA_FROM_DT)
                                                       FROM   PM_EMP_ALLOWANCE
                                                       WHERE  EMPA_COMP_CODE = P_COMP_CODE
                                                       AND    EMPA_CODE      = P_EMP
                                                       AND    P_FM_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT);
CURSOR C9 IS
 SELECT  (P_TO_DT) - (P_FM_DT)
 FROM DUAL;
CURSOR C10(P_EMP  IN VARCHAR2) IS
    SELECT    EMPAC_ALLW_CODE,EMPAC_ALLW_PERC
    FROM         PM_ALLOWANCE,
                    PM_EMP_ALLOWANCE,
                    PM_EMP_ALLOWANCE_CE
    WHERE     EMPA_COMP_CODE =  EMPAC_COMP_CODE
    AND     EMPA_CODE        =  EMPAC_CODE
    AND         EMPA_ALLW_CODE =  ALLW_CODE
    AND     EMPA_ALLW_CODE =  EMPAC_BASE_ALLW_CODE
    AND            ALLW_EARN_DEDUC= 'E'
    AND         ALLW_TYPE         = '5'
    AND     EMPA_FROM_DT   =  EMPAC_FROM_DT
    AND         EMPA_CODE            =  EMPAC_CODE
    AND         EMPA_COMP_CODE = P_COMP_CODE
    AND     EMPA_CODE         = P_EMP
    --AND       EMPA_ALLW_CODE =:P_PENERN_CODE
    AND      EMPA_ALLW_CODE     BETWEEN P_FM_ALLW AND P_TO_ALLW
    AND         EMPA_FROM_DT   <= (SELECT MAX(EMPA_FROM_DT)
                                                         FROM   PM_EMP_ALLOWANCE
                                                      WHERE  EMPA_COMP_CODE = P_COMP_CODE
                                                    AND    EMPA_CODE      = P_EMP
                                                      AND    P_FM_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT);
CURSOR C11(P_EMP  IN VARCHAR2) IS
SELECT    NVL(EMPA_LC_AMOUNT,0)
FROM         PM_EMP_ALLOWANCE,PM_ALLOWANCE
WHERE     EMPA_ALLW_CODE  = ALLW_CODE
AND     EMPA_ALLW_CODE  = M_ALLW_CODE
AND         EMPA_COMP_CODE  =P_COMP_CODE
AND         EMPA_CODE          =P_EMP
AND         EMPA_FROM_DT    <= (SELECT MAX(EMPA_FROM_DT)
                                                        FROM   PM_EMP_ALLOWANCE
                                                    WHERE  EMPA_COMP_CODE = P_COMP_CODE
                                                  AND    EMPA_CODE      = P_EMP
                                                  AND    P_FM_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT);

BEGIN

    MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;
FOR I IN C_MAIN   LOOP

  IF C1%ISOPEN THEN
        CLOSE C1;
    END IF;
    OPEN  C1(I.EMP_CODE);
    FETCH C1 INTO M_BASIC;
    CLOSE C1;

  IF C2%ISOPEN THEN
        CLOSE C2;
    END IF;
    OPEN  C2(I.EMP_JOIN_DT);
    FETCH C2 INTO M_SERV_DAYS;
    CLOSE C2;

  IF C3%ISOPEN THEN
        CLOSE C3;
    END IF;
    OPEN  C3(I.EMP_CODE);
    FETCH C3 INTO M_ERN_DESC;
    CLOSE C3;

  IF C4%ISOPEN THEN
        CLOSE C4;
    END IF;
    OPEN  C4;
    FETCH C4 INTO M_FLAG;
    CLOSE C4;
         IF C5%ISOPEN THEN
             CLOSE C5;
         END IF;
         OPEN  C5;
         FETCH C5 INTO M_DAYS_E;
         CLOSE C5;
      IF C6%ISOPEN THEN
            CLOSE C6;
        END IF;
        OPEN  C6;
        FETCH C6 INTO M_DAYS_A;
        CLOSE C6;
        IF C7%ISOPEN THEN
            CLOSE C7;
        END IF;
        OPEN  C7(I.EMP_CODE);
        FETCH C7 INTO M_PAY_FLAG;
--        CLOSE C4;
            IF M_PAY_FLAG = 'E' THEN
                IF C8%ISOPEN THEN
                    CLOSE C8;
                END IF;
                OPEN  C8(I.EMP_CODE);
                FETCH C8 INTO M_AMT;
                CLOSE C8;
                IF M_FLAG = 'E' THEN
                    M_PRE_DAY_AMT := (M_AMT / M_DAYS_E);
                ELSE
                    M_PRE_DAY_AMT := (M_AMT / M_DAYS_A);
                END IF;
                IF C9%ISOPEN THEN
                    CLOSE C9;
                END IF;
                OPEN  C9;
                FETCH C9 INTO M_DIFF_DAY;
                CLOSE C9;
                M_TOTAL_AMT := (M_DIFF_DAY * M_PRE_DAY_AMT);
                --RETURN(NVL(M_TOTAL_AMT,0));
            ELSE
                IF C7%ISOPEN THEN
                    CLOSE C7;
                END IF;
                OPEN  C10(I.EMP_CODE);
                    LOOP
                        TOTAL := 0;
                        FETCH C10 INTO M_ALLW_CODE,M_PREC;
                      EXIT WHEN C10%NOTFOUND ;
                      IF C11%ISOPEN THEN
                          CLOSE C11;
                      END IF;
                      OPEN  C11(I.EMP_CODE);
                      FETCH C11 INTO M_AMT_C;
                      CLOSE C11;
                         TOTAL := TOTAL + NVL(M_AMT_C * M_PREC /100,0);
                    IF M_FLAG = 'E' THEN
                           M_PRE_DAY_AMT := (TOTAL/M_DAYS_E);
                     ELSE
                           M_PRE_DAY_AMT := (TOTAL / M_DAYS_A);
                     END IF;
                    END LOOP;
                CLOSE C10;
                IF C9%ISOPEN THEN
                    CLOSE C9;
                END IF;
                OPEN  C9;
                FETCH C9 INTO M_DIFF_DAY;
                CLOSE C9;
                M_TOTAL_AMT := (M_DIFF_DAY * M_PRE_DAY_AMT);
                --RETURN(ROUND(NVL(M_TOTAL_AMT,0),2));
            END IF;

      INSERT INTO PW_PENSION_ACCRUAL ( PA_COMP_CODE,
                                       PA_REP_KEY_NO,
                                       PA_DIVISION,
                                       PA_DEPARTMENT,
                                       PA_EMP_CODE,
                                       PA_LONG_NAME,
                                       PA_JOIN_DT,
                                       PA_PERSONAL_GRADE,
                                       PA_FC_AMOUNT,
                                       PA_ALLOANCE,
                                       PA_BASIC,
                                       PA_SERVICE_DAYS)
                               VALUES( P_COMP_CODE,
                                       P_REP_KEy_NO,
                                       I.DIV,
                                       I.DEPT,
                                       I.EMP_CODE,
                                       I.EMP_LONG_NAME,
                                       I.EMP_JOIN_DT,
                                       I.EMP_PERSONAL_GRADE,
                                       M_PRE_DAY_AMT,
                                       M_ERN_DESC,
                                       M_BASIC,
                                       M_SERV_DAYS);

END LOOP;

END P_PENSION_ACCRUAL;

PROCEDURE P_EMP_HISTORY ( P_COMP_CODE IN VARCHAR2,
                          P_REP_KEY_NO IN NUMBER,
                          P_FM_DIVN IN VARCHAR2,
                          P_TO_DIVN IN VARCHAR2,
                          P_FM_DEPT IN VARCHAR2,
                          P_TO_DEPT IN VARCHAR2,
                          P_FM_LOCN IN VARCHAR2,
                          P_TO_LOCN IN VARCHAR2,
                          P_FM_DT   IN DATE,
                          P_TO_DT   IN DATE,
                          P_FM_EMP  IN VARCHAR2,
                          P_TO_EMP  IN VARCHAR2,
                          P_FM_GRADE IN VARCHAR2,
                          P_TO_GRADE IN VARCHAR2) IS
                          MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

CURSOR C_EMP IS
      SELECT  EMP_CODE,
        DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) EMP_NAME,
        EMP_DIVN_CODE||'-'||DECODE(MM_LANG_CODE, 'ENG',DIVN_SHORT_NAME ,'LANG_01',DIVN_SHORT_NAME_LANG_01,'LANG_02',DIVN_SHORT_NAME_LANG_02,'LANG_03',DIVN_SHORT_NAME_LANG_03,'LANG_04',DIVN_SHORT_NAME_LANG_04,'LANG_05',DIVN_SHORT_NAME_LANG_05,'LANG_06',DIVN_SHORT_NAME_LANG_06,'LANG_07',DIVN_SHORT_NAME_LANG_07,'LANG_08',DIVN_SHORT_NAME_LANG_08,'LANG_09',DIVN_SHORT_NAME_LANG_09,'LANG_10',DIVN_SHORT_NAME_LANG_10),EMP_DIVN_CODE||'-'||DECODE(MM_LANG_CODE, 'ENG',DIVN_SHORT_NAME ,'LANG_01',DIVN_SHORT_NAME_LANG_01,'LANG_02',DIVN_SHORT_NAME_LANG_02,'LANG_03',DIVN_SHORT_NAME_LANG_03,'LANG_04',DIVN_SHORT_NAME_LANG_04,'LANG_05',DIVN_SHORT_NAME_LANG_05,'LANG_06',DIVN_SHORT_NAME_LANG_06,'LANG_07',DIVN_SHORT_NAME_LANG_07,'LANG_08',DIVN_SHORT_NAME_LANG_08,'LANG_09',DIVN_SHORT_NAME_LANG_09,'LANG_10',DIVN_SHORT_NAME_LANG_10) DIV,
        EMP_DEPT_CODE||'-'||DECODE(MM_LANG_CODE, 'ENG',DEPT_SHORT_NAME ,'LANG_01',DEPT_SHORT_NAME_LANG_01,'LANG_02',DEPT_SHORT_NAME_LANG_02,'LANG_03',DEPT_SHORT_NAME_LANG_03,'LANG_04',DEPT_SHORT_NAME_LANG_04,'LANG_05',DEPT_SHORT_NAME_LANG_05,'LANG_06',DEPT_SHORT_NAME_LANG_06,'LANG_07',DEPT_SHORT_NAME_LANG_07,'LANG_08',DEPT_SHORT_NAME_LANG_08,'LANG_09',DEPT_SHORT_NAME_LANG_09,'LANG_10',DEPT_SHORT_NAME_LANG_10),EMP_DEPT_CODE||'-'||DECODE(MM_LANG_CODE, 'ENG',DEPT_SHORT_NAME ,'LANG_01',DEPT_SHORT_NAME_LANG_01,'LANG_02',DEPT_SHORT_NAME_LANG_02,'LANG_03',DEPT_SHORT_NAME_LANG_03,'LANG_04',DEPT_SHORT_NAME_LANG_04,'LANG_05',DEPT_SHORT_NAME_LANG_05,'LANG_06',DEPT_SHORT_NAME_LANG_06,'LANG_07',DEPT_SHORT_NAME_LANG_07,'LANG_08',DEPT_SHORT_NAME_LANG_08,'LANG_09',DEPT_SHORT_NAME_LANG_09,'LANG_10',DEPT_SHORT_NAME_LANG_10) DEP,
        EMP_LOCN_CODE ||'-'|| DECODE(MM_LANG_CODE, 'ENG',LOCN_SHORT_DESC ,'LANG_01',LOCN_SHORT_DESC_LANG_01,'LANG_02',LOCN_SHORT_DESC_LANG_02,'LANG_03',LOCN_SHORT_DESC_LANG_03,'LANG_04',LOCN_SHORT_DESC_LANG_04,'LANG_05',LOCN_SHORT_DESC_LANG_05,'LANG_06',LOCN_SHORT_DESC_LANG_06,'LANG_07',LOCN_SHORT_DESC_LANG_07,'LANG_08',LOCN_SHORT_DESC_LANG_08,'LANG_09',LOCN_SHORT_DESC_LANG_09,'LANG_10',LOCN_SHORT_DESC_LANG_10),EMP_LOCN_CODE ||'-'||  DECODE(MM_LANG_CODE, 'ENG',LOCN_SHORT_DESC ,'LANG_01',LOCN_SHORT_DESC_LANG_01,'LANG_02',LOCN_SHORT_DESC_LANG_02,'LANG_03',LOCN_SHORT_DESC_LANG_03,'LANG_04',LOCN_SHORT_DESC_LANG_04,'LANG_05',LOCN_SHORT_DESC_LANG_05,'LANG_06',LOCN_SHORT_DESC_LANG_06,'LANG_07',LOCN_SHORT_DESC_LANG_07,'LANG_08',LOCN_SHORT_DESC_LANG_08,'LANG_09',LOCN_SHORT_DESC_LANG_09,'LANG_10',LOCN_SHORT_DESC_LANG_10) LOC,
        EMP_JOIN_DT,
        EMP_POSITION_CODE,
        EMP_PERSONAL_GRADE,
        DECODE(EMP_STATUS,'1','Probation Period','2','Confirmed','3','Temporary')  EMP_STATUS
FROM    PM_EMP_KEY,
        PM_EMP_ALLOWANCE,
        FM_DIVISION,
        FM_DEPARTMENT,
        PM_LOCN
WHERE  EMP_COMP_CODE =P_COMP_CODE
AND    EMP_COMP_CODE = DIVN_COMP_CODE
AND    EMP_COMP_CODE = DEPT_COMP_CODE
AND    EMP_COMP_CODE = EMPA_COMP_CODE
AND    DIVN_COMP_CODE= DEPT_COMP_CODE
AND    DIVN_CODE     = DEPT_DIVN_CODE
AND    EMP_DIVN_CODE = DIVN_CODE
AND    EMP_DEPT_CODE = DEPT_CODE
AND    EMP_CODE      = EMPA_CODE
AND    EMP_LOCN_CODE = LOCN_CODE
AND    EMPA_EXCLUDE_FROM_DT IS  NULL
AND    EMPA_EXCLUDE_UPTO_DT IS  NULL
AND    EMP_END_OF_SERVICE_DT IS NULL
AND    EMP_CODE      BETWEEN P_FM_EMP AND P_TO_EMP
AND    EMP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
AND    EMP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
AND    EMP_LOCN_CODE BETWEEN P_FM_LOCN AND P_TO_LOCN
AND    EMP_PERSONAL_GRADE  BETWEEN P_FM_GRADE AND P_TO_GRADE
AND    EMP_STATUS IN ('1','2','3')
--AND   EMP_JOIN_DT BETWEEN P_FM_DATE AND P_TO_PROC_MTH
GROUP BY EMP_CODE,
        DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10), EMP_BL_SHORT_NAME,
        EMP_DIVN_CODE ,DECODE(MM_LANG_CODE, 'ENG',DIVN_SHORT_NAME ,'LANG_01',DIVN_SHORT_NAME_LANG_01,'LANG_02',DIVN_SHORT_NAME_LANG_02,'LANG_03',DIVN_SHORT_NAME_LANG_03,'LANG_04',DIVN_SHORT_NAME_LANG_04,'LANG_05',DIVN_SHORT_NAME_LANG_05,'LANG_06',DIVN_SHORT_NAME_LANG_06,'LANG_07',DIVN_SHORT_NAME_LANG_07,'LANG_08',DIVN_SHORT_NAME_LANG_08,'LANG_09',DIVN_SHORT_NAME_LANG_09,'LANG_10',DIVN_SHORT_NAME_LANG_10) , DIVN_BL_SHORT_NAME,
        EMP_DEPT_CODE, DECODE(MM_LANG_CODE, 'ENG',DEPT_SHORT_NAME ,'LANG_01',DEPT_SHORT_NAME_LANG_01,'LANG_02',DEPT_SHORT_NAME_LANG_02,'LANG_03',DEPT_SHORT_NAME_LANG_03,'LANG_04',DEPT_SHORT_NAME_LANG_04,'LANG_05',DEPT_SHORT_NAME_LANG_05,'LANG_06',DEPT_SHORT_NAME_LANG_06,'LANG_07',DEPT_SHORT_NAME_LANG_07,'LANG_08',DEPT_SHORT_NAME_LANG_08,'LANG_09',DEPT_SHORT_NAME_LANG_09,'LANG_10',DEPT_SHORT_NAME_LANG_10) , DEPT_BL_SHORT_NAME,
        DECODE(MM_LANG_CODE, 'ENG',LOCN_SHORT_DESC ,'LANG_01',LOCN_SHORT_DESC_LANG_01,'LANG_02',LOCN_SHORT_DESC_LANG_02,'LANG_03',LOCN_SHORT_DESC_LANG_03,'LANG_04',LOCN_SHORT_DESC_LANG_04,'LANG_05',LOCN_SHORT_DESC_LANG_05,'LANG_06',LOCN_SHORT_DESC_LANG_06,'LANG_07',LOCN_SHORT_DESC_LANG_07,'LANG_08',LOCN_SHORT_DESC_LANG_08,'LANG_09',LOCN_SHORT_DESC_LANG_09,'LANG_10',LOCN_SHORT_DESC_LANG_10),
        DECODE(MM_LANG_CODE, 'ENG',LOCN_SHORT_DESC ,'LANG_01',LOCN_SHORT_DESC_LANG_01,'LANG_02',LOCN_SHORT_DESC_LANG_02,'LANG_03',LOCN_SHORT_DESC_LANG_03,'LANG_04',LOCN_SHORT_DESC_LANG_04,'LANG_05',LOCN_SHORT_DESC_LANG_05,'LANG_06',LOCN_SHORT_DESC_LANG_06,'LANG_07',LOCN_SHORT_DESC_LANG_07,'LANG_08',LOCN_SHORT_DESC_LANG_08,'LANG_09',LOCN_SHORT_DESC_LANG_09,'LANG_10',LOCN_SHORT_DESC_LANG_10),
        DECODE(MM_LANG_CODE, 'ENG',LOCN_SHORT_DESC ,'LANG_01',LOCN_SHORT_DESC_LANG_01,'LANG_02',LOCN_SHORT_DESC_LANG_02,'LANG_03',LOCN_SHORT_DESC_LANG_03,'LANG_04',LOCN_SHORT_DESC_LANG_04,'LANG_05',LOCN_SHORT_DESC_LANG_05,'LANG_06',LOCN_SHORT_DESC_LANG_06,'LANG_07',LOCN_SHORT_DESC_LANG_07,'LANG_08',LOCN_SHORT_DESC_LANG_08,'LANG_09',LOCN_SHORT_DESC_LANG_09,'LANG_10',LOCN_SHORT_DESC_LANG_10),
        EMP_LOCN_CODE, LOCN_SHORT_DESC,LOCN_BL_SHORT_DESC,
        EMP_JOIN_DT,
        EMP_POSITION_CODE,
        EMP_PERSONAL_GRADE,
        EMP_STATUS
ORDER BY EMP_CODE, EMP_DIVN_CODE,EMP_DEPT_CODE, EMP_JOIN_DT;


    M_DT_FMT_MASK  PM_GUI_PARAMETER.GPARA_VALUE%TYPE;
      CURSOR GET_DATE_FMT IS
           SELECT GPARA_VALUE
           FROM   PM_GUI_PARAMETER
             WHERE  GPARA_CODE = 'REF_DT_FMT';


        CURSOR C1(P_EMP IN VARCHAR2,P_EMP_JOIN_DT IN DATE) IS
      SELECT  EMP_PERSONAL_GRADE||'-'||DECODE(MM_LANG_CODE, 'ENG',GRADE_SHORT_DESC ,'LANG_01',GRADE_SHORT_DESC_LANG_01,'LANG_02',GRADE_SHORT_DESC_LANG_02,'LANG_03',GRADE_SHORT_DESC_LANG_03,'LANG_04',GRADE_SHORT_DESC_LANG_04,'LANG_05',GRADE_SHORT_DESC_LANG_05,'LANG_06',GRADE_SHORT_DESC_LANG_06,'LANG_07',GRADE_SHORT_DESC_LANG_07,'LANG_08',GRADE_SHORT_DESC_LANG_08,'LANG_09',GRADE_SHORT_DESC_LANG_09,'LANG_10',GRADE_SHORT_DESC_LANG_10) GRADE,
              EMP_POSITION_CODE||'-'||DECODE(MM_LANG_CODE, 'ENG',POSN_SHORT_DESC ,'LANG_01',POSN_SHORT_DESC_LANG_01,'LANG_02',POSN_SHORT_DESC_LANG_02,'LANG_03',POSN_SHORT_DESC_LANG_03,'LANG_04',POSN_SHORT_DESC_LANG_04,'LANG_05',POSN_SHORT_DESC_LANG_05,'LANG_06',POSN_SHORT_DESC_LANG_06,'LANG_07',POSN_SHORT_DESC_LANG_07,'LANG_08',POSN_SHORT_DESC_LANG_08,'LANG_09',POSN_SHORT_DESC_LANG_09,'LANG_10',POSN_SHORT_DESC_LANG_10)  POSN
        FROM    PM_EMP_KEY,PM_POSITION,PM_GRADE
        WHERE   EMP_COMP_CODE=P_COMP_CODE
        AND     EMP_COMP_CODE= POSN_COMP_CODE(+)--code added by Tamilarasi N for this call ZUBAIR_INT-1472065
        AND     EMP_CODE=P_EMP
        AND     TO_CHAR(EMP_JOIN_DT,M_DT_FMT_MASK)=
                TO_CHAR(P_EMP_JOIN_DT,M_DT_FMT_MASK)
        AND     EMP_PERSONAL_GRADE=GRADE_CODE
        AND     EMP_POSITION_CODE=POSN_CODE(+);--code added by Tamilarasi N for this call ZUBAIR_INT-1472065

    M_PER VARCHAR2(240);
    M_POS VARCHAR2(240);

CURSOR C2(P_EMP IN VARCHAR2) IS
       SELECT EMPY_SCALE_CODE
   FROM   PM_EMP_PAY
   WHERE EMPY_CODE=P_EMP;

M_EMPY_SCALE_CODE VARCHAR2(12);

CURSOR C_TRAINING(P_EMP IN VARCHAR2) IS
      SELECT 'Training'   Training, TNEH_EMP_CODE, TNEH_TXN_CODE, TNEH_NO, TNEH_DT, TNEH_REMARKS,
       TNEH_TYPE_CODE||'-'||DECODE(MM_LANG_CODE, 'ENG',TTY_TYPE_SHORT_DESC ,'LANG_01',TTY_TYPE_SHORT_DESC_LANG_01,'LANG_02',TTY_TYPE_SHORT_DESC_LANG_02,'LANG_03',TTY_TYPE_SHORT_DESC_LANG_03,'LANG_04',TTY_TYPE_SHORT_DESC_LANG_04,'LANG_05',TTY_TYPE_SHORT_DESC_LANG_05,'LANG_06',TTY_TYPE_SHORT_DESC_LANG_06,'LANG_07',TTY_TYPE_SHORT_DESC_LANG_07,'LANG_08',TTY_TYPE_SHORT_DESC_LANG_08,'LANG_09',TTY_TYPE_SHORT_DESC_LANG_09,'LANG_10',TTY_TYPE_SHORT_DESC_LANG_10),TNEH_TYPE_CODE||'-'||TTY_TYPE_BL_SHORT_DESC TYPEDESC,
       TNEH_CODE||'-'||DECODE(MM_LANG_CODE, 'ENG',TRAIN_SHORT_DESC ,'LANG_01',TRAIN_SHORT_DESC_LANG_01,'LANG_02',TRAIN_SHORT_DESC_LANG_02,'LANG_03',TRAIN_SHORT_DESC_LANG_03,'LANG_04',TRAIN_SHORT_DESC_LANG_04,'LANG_05',TRAIN_SHORT_DESC_LANG_05,'LANG_06',TRAIN_SHORT_DESC_LANG_06,'LANG_07',TRAIN_SHORT_DESC_LANG_07,'LANG_08',TRAIN_SHORT_DESC_LANG_08,'LANG_09',TRAIN_SHORT_DESC_LANG_09,'LANG_10',TRAIN_SHORT_DESC_LANG_10),TNEH_CODE||'-'||TRAIN_BL_SHORT_DESC CODEDESC,
       TNED_KEY_OBJ_CODE||'-'||DECODE(MM_LANG_CODE, 'ENG',KEY_SHORT_DESC ,'LANG_01',KEY_SHORT_DESC_LANG_01,'LANG_02',KEY_SHORT_DESC_LANG_02,'LANG_03',KEY_SHORT_DESC_LANG_03,'LANG_04',KEY_SHORT_DESC_LANG_04,'LANG_05',KEY_SHORT_DESC_LANG_05,'LANG_06',KEY_SHORT_DESC_LANG_06,'LANG_07',KEY_SHORT_DESC_LANG_07,'LANG_08',KEY_SHORT_DESC_LANG_08,'LANG_09',KEY_SHORT_DESC_LANG_09,'LANG_10',KEY_SHORT_DESC_LANG_10),TNED_KEY_OBJ_CODE||'-'||KEY_BL_SHORT_DESC KEYDESC,
       TNED_PERC  PER
FROM   PT_TRAIN_EVALTN_HEAD,
       PT_TRAIN_EVALTN_DETAIL,
       PM_TRAINING,
       PM_TRAINING_TYPE,
       PM_KEY_OBJ
WHERE  TNEH_COMP_CODE=P_COMP_CODE
AND    TNEH_COMP_CODE=TNED_COMP_CODE
AND    TNEH_EMP_CODE=P_EMP
AND    TNEH_SYS_ID= TNED_TNEH_SYS_ID
AND    TNEH_TYPE_CODE=TTY_TYPE_CODE
AND    TNEH_CODE=TRAIN_CODE
AND    TNED_KEY_OBJ_CODE=KEY_CODE
AND    TNEH_DT BETWEEN P_FM_DT AND P_TO_DT
AND    TNEH_APPR_UID IS NOT NULL;

CURSOR C_SALARY(P_EMP_CODE IN VARCHAR2) IS
      SELECT  'Salary Revision' salary,
        REVH_EMP_CODE "REV_EMP_CODE",
        REVH_TXN_CODE "REV_TXN_CODE",
         REVH_NO "REV_NO",
         REVH_DT "REV_DT",
        REVH_FROM_DT "REV_FROM_DT",
        REVH_REMARKS "REV_REMARKS",
        REVA_ALLW_CODE||'-'||DECODE(MM_LANG_CODE, 'ENG',ALLW_SHORT_DESC ,'LANG_01',ALLW_SHORT_DESC_LANG_01,'LANG_02',ALLW_SHORT_DESC_LANG_02,'LANG_03',ALLW_SHORT_DESC_LANG_03,'LANG_04',ALLW_SHORT_DESC_LANG_04,'LANG_05',ALLW_SHORT_DESC_LANG_05,'LANG_06',ALLW_SHORT_DESC_LANG_06,'LANG_07',ALLW_SHORT_DESC_LANG_07,'LANG_08',ALLW_SHORT_DESC_LANG_08,'LANG_09',ALLW_SHORT_DESC_LANG_09,'LANG_10',ALLW_SHORT_DESC_LANG_10) "REV_ALLOWANCE",
        REVA_ORG_FC_AMOUNT "REV_ORG_AMT",
        REVA_FINAL_FC_AMOUNT "REV_FINAL_AMT"
FROM      PT_SAL_REVISION_HEAD,
        PT_SAL_REVISION_ALLOWANCE,
        PM_ALLOWANCE
WHERE   REVH_SYS_ID=REVA_REVH_SYS_ID
AND     REVA_ALLW_CODE=ALLW_CODE
AND     REVH_EMP_CODE  = P_EMP_CODE
AND     REVH_DT BETWEEN P_FM_DT AND P_TO_DT
AND    REVH_APPR_UID IS NOT NULL -- ADDED BY ASHIK FOR THE ISSUE MDE-702278 ON 20/MAY/2012
--ORDER BY  REVH_EMP_CODE,REVH_DT;
UNION ALL
SELECT 'Salary Revision' salary,
        ESRD_EMP_CODE "REV_EMP_CODE",
        ESRH_TXN_CODE "REV_TXN_CODE",
         ESRH_NO "REV_NO",
         ESRH_DT "REV_DT",
        ESRH_EFFECT_FROM "REV_FROM_DT",
        ESRH_REMARKS "REV_REMARKS",
        ESRD_ALLW_CODE||'-'||ALLW_SHORT_DESC "REV_ALLOWANCE",
        ESRD_ORG_FC_AMOUNT "REV_ORG_AMT",
        ESRD_FINAL_FC_AMOUNT "REV_FINAL_AMT"
FROM PT_EMP_SAL_REV_HEAD, PT_EMP_SAL_REV_DETAIL, PM_ALLOWANCE
WHERE ESRH_SYS_ID=ESRD_ESRH_SYS_ID
AND     ESRD_ALLW_CODE=ALLW_CODE
AND     ESRD_EMP_CODE =  P_EMP_CODE
AND     ESRH_DT BETWEEN  P_FM_DT AND P_TO_DT
AND    ESRH_APPR_UID IS NOT NULL -- ADDED BY ASHIK FOR THE ISSUE MDE-702278 ON 20/MAY/2012
ORDER BY  REV_EMP_CODE,REV_DT;

CURSOR C_APPRAISAL(P_EMP_CODE IN VARCHAR2) IS
      SELECT 'Appraisal'  Appraisal,APPH_EMP_CODE,APPH_TXN_CODE,APPH_NO,APPH_DT,APPD_REMARKS,
                APPH_FROM_DT,APPH_UPTO_DT,
                APPD_KEY_OBJ_CODE||'-'||DECODE(MM_LANG_CODE, 'ENG',KEY_SHORT_DESC ,'LANG_01',KEY_SHORT_DESC_LANG_01,'LANG_02',KEY_SHORT_DESC_LANG_02,'LANG_03',KEY_SHORT_DESC_LANG_03,'LANG_04',KEY_SHORT_DESC_LANG_04,'LANG_05',KEY_SHORT_DESC_LANG_05,'LANG_06',KEY_SHORT_DESC_LANG_06,'LANG_07',KEY_SHORT_DESC_LANG_07,'LANG_08',KEY_SHORT_DESC_LANG_08,'LANG_09',KEY_SHORT_DESC_LANG_09,'LANG_10',KEY_SHORT_DESC_LANG_10)  DE,
                APPD_PERC
        FROM  PT_APPRAISAL_HEAD,PT_APPRAISAL_DETAIL,PM_KEY_OBJ
       WHERE  APPH_COMP_CODE=P_COMP_CODE
       AND    APPH_SYS_ID= APPD_APPH_SYS_ID
         AND    APPD_KEY_OBJ_CODE=KEY_CODE
       AND    APPH_EMP_CODE = P_EMP_CODE
       AND    APPH_DT BETWEEN P_FM_DT AND P_TO_DT
       AND    APPH_APPR_UID IS NOT NULL -- ADDED BY ASHIK FOR THE ISSUE MDE-702278 ON 20/MAY/2012
       ORDER BY APPH_EMP_CODE, APPH_DT;

CURSOR C_CONTRACT(P_EMP_CODE IN VARCHAR2) IS
     SELECT 'Contract Change' Contract,
       CTGH_EMP_CODE,
       CTGH_TXN_CODE,
       CTGH_NO,
       CTGH_DT,
       CTGH_CONT_TYPE_CODE,
       CTGH_CONT_START_DT,
       CTGH_REMARKS
FROM   PT_CONT_TYPE_CHANGE
WHERE  CTGH_COMP_CODE=P_COMP_CODE
AND    CTGH_EMP_CODE = P_EMP_CODE
AND    CTGH_DT BETWEEN P_FM_DT AND P_TO_DT
AND    CTGH_APPR_UID IS NOT NULL -- ADDED BY ASHIK FOR THE ISSUE MDE-702278 ON 20/MAY/2012
ORDER BY CTGH_DIVN_CODE,CTGH_DEPT_CODE,CTGH_EMP_CODE,CTGH_DT;

CURSOR C_PROMOTION(P_EMP_CODE IN VARCHAR2) IS
        SELECT 'Promotions'Promotion,PROMO_EMP_CODE,PROMO_TXN_CODE,
               PROMO_NO,PROMO_DT,PROMO_EFF_DT,PROMO_REMARKS
       FROM    PT_PROMOTIONS
       WHERE   PROMO_COMP_CODE=P_COMP_CODE
AND     PROMO_EMP_CODE = P_EMP_CODE
AND     PROMO_DT BETWEEN P_FM_DT AND P_TO_DT
AND    PROMO_APPR_UID IS NOT NULL -- ADDED BY ASHIK FOR THE ISSUE MDE-702278 ON 20/MAY/2012
ORDER BY PROMO_DIVN_CODE,PROMO_DEPT_CODE,PROMO_EMP_CODE,PROMO_DT;

CURSOR C_POSITION(P_EMP_CODE IN VARCHAR2,P_CONT_TYPE_CODE IN VARCHAR2,P_NO IN NUMBER) IS
       SELECT CTGH_POSITION_CODE,CTGH_NO,CTGH_SECT_CODE,
                  CTGH_SUB_SECT_CODE,CTGH_DIVN_CODE,CTGH_DEPT_CODE,
                  CTGH_CC_CODE, CTGH_LOCN_CODE, CTGH_PERSONAL_GRADE_CODE,
                  CTGH_JOB_TITLE_CODE,EMP_POSITION_CODE, EMP_PERSONAL_GRADE,
                  EMP_JOB_TITLE_CODE, EMP_DIVN_CODE, EMP_DEPT_CODE,EMP_SECT_CODE,
                  EMP_SUB_SECT_CODE, EMP_CC_CODE, EMP_LOCN_CODE, CTGH_CONT_TYPE_CODE
      FROM    PT_CONT_TYPE_CHANGE,PM_EMP_KEY
      WHERE   EMP_COMP_CODE=P_COMP_CODE
      AND     EMP_CODE=P_EMP_CODE
      AND     CTGH_COMP_CODE= EMP_COMP_CODE
      AND     CTGH_EMP_CODE = EMP_CODE
      AND     CTGH_CONT_TYPE_CODE=P_CONT_TYPE_CODE
      AND     CTGH_NO=P_NO
      AND    CTGH_APPR_UID IS NOT NULL -- ADDED BY ASHIK FOR THE ISSUE MDE-702278 ON 20/MAY/2012
      ORDER BY CTGH_DIVN_CODE,CTGH_DEPT_CODE,CTGH_EMP_CODE,CTGH_DT;

CURSOR C_PROMO(P_EMP_CODE IN VARCHAR2,P_PROMO_TXN_CODE IN VARCHAR2,P_PROMO_NO IN NUMBER) IS
      SELECT DISTINCT  PROMO_TXN_CODE,PROMO_NO,PROMO_POSITION_CODE,PROMO_SECT_CODE,
                 PROMO_SUB_SECT_CODE,PROMO_DIVN_CODE,PROMO_DEPT_CODE,PROMO_CC_CODE,
                 PROMO_LOCN_CODE,PROMO_JOB_TITLE_CODE,
                 PROMO_PERSONAL_GRADE_CODE,EMP_POSITION_CODE,EMP_PERSONAL_GRADE,
                 EMP_JOB_TITLE_CODE,EMP_DIVN_CODE,EMP_DEPT_CODE, EMP_SECT_CODE,EMP_CC_CODE,EMP_LOCN_CODE, EMP_SUB_SECT_CODE
-- FROM   PT_PROMOTIONS,PM_EMP_KEY
      FROM   PT_PROMOTIONS,PH_EMP_KEY_HIST
      WHERE  PROMO_COMP_CODE=P_COMP_CODE
      AND      EMP_CODE               = P_EMP_CODE
      AND      EMP_CODE              = PROMO_EMP_CODE
/* ADDED BY ASHIK FOR THE ISSUE ALFOZANUAE-347249 ON 17/11/2009 */
      AND      TRUNC(HIST_CR_DT) = TRUNC(PROMO_APPR_DT)
--AND      HIST_CR_UID = 'PAY'   /* commented for the issue  ZENER_INT-1060442*/
      AND     PROMO_TXN_CODE=P_PROMO_TXN_CODE
      AND     PROMO_NO=P_PROMO_NO
      AND    PROMO_APPR_UID IS NOT NULL -- ADDED BY ASHIK FOR THE ISSUE MDE-702278 ON 20/MAY/2012
      AND (PROMO_POSITION_CODE <> EMP_POSITION_CODE
          OR PROMO_SECT_CODE <>  EMP_SECT_CODE
          OR PROMO_SUB_SECT_CODE <>  EMP_SUB_SECT_CODE
          OR PROMO_DIVN_CODE <> EMP_DIVN_CODE
          OR PROMO_DEPT_CODE <>  EMP_DEPT_CODE
          OR PROMO_CC_CODE <>  EMP_CC_CODE
          OR PROMO_LOCN_CODE <> EMP_LOCN_CODE
          OR PROMO_JOB_TITLE_CODE <> EMP_JOB_TITLE_CODE
          OR PROMO_PERSONAL_GRADE_CODE <> EMP_PERSONAL_GRADE)
/*ADDED BY ASHIK FOR THE ISSUE ALFOZANUAE-347249 ON 17/11/2009*/
ORDER BY PROMO_DIVN_CODE,PROMO_DEPT_CODE,PROMO_EMP_CODE,PROMO_NO;

CURSOR C_TRANSFER(P_EMP_CODE IN VARCHAR2) IS
      SELECT 'Transfers' TRANSFER,TRF_COMP_CODE FROM_COMP_CODE,
                TRF_TXN_CODE, TRF_NO, TRF_DT, TRF_EMP_CODE,
                TRF_TO_COMP_CODE TO_COMP_CODE, TRF_POSITION_CODE,
                TRF_SECT_CODE, TRF_SUB_SECT_CODE, TRF_DIVN_CODE,
                TRF_DEPT_CODE, TRF_CC_CODE, TRF_LOCN_CODE,
                TRF_JOB_TITLE_CODE, TRF_EFF_DT, TRF_REMARKS,
                TRF_POSITION_CODE_OLD, TRF_SECT_CODE_OLD,
                TRF_SUB_SECT_CODE_OLD, TRF_DIVN_CODE_OLD,
                TRF_DEPT_CODE_OLD, TRF_CC_CODE_OLD,
                TRF_LOCN_CODE_OLD, TRF_JOB_TITLE_CODE_OLD
      FROM    PT_TRANSFERS
      WHERE   TRF_EMP_CODE = P_EMP_CODE
      AND     TRF_DT BETWEEN P_FM_DT AND P_TO_DT
      AND     TRF_APPR_UID IS NOT NULL
      ORDER BY TRF_DIVN_CODE,TRF_DEPT_CODE,TRF_EMP_CODE,TRF_DT;

BEGIN
   DELETE FROM PW_EMP_HISTORY WHERE EMPH_REP_KEY_NO = P_REP_KEY_NO;

   DELETE FROM  PW_EMP_PROMOTION WHERE EP_REP_KEy_NO = P_REP_KEY_NO;
   DELETE FROM PW_EMP_PROMO WHERE EP_REP_KEY_NO = P_REP_KEY_NO;

   DELETE FROM PW_EMP_TRAINING WHERE ET_REP_KEY_NO  = P_REP_KEY_NO;

   DELETE FROM PW_EMP_SALARY WHERE ES_REP_KEY_NO  = P_REP_KEY_NO;
   DELETE FROM PW_EMP_APPRAISAL WHERE EA_REP_KEy_NO = P_REP_KEY_NO;

   DELETE FROM  PW_EMP_CONTRACT WHERE  EC_REP_KEY_NO = P_REP_KEY_NO;

    DELETE FROM PW_EMP_TRANSFER WHERE ET_RET_KEy_NO = P_REP_KEY_NO;
   DELETE FROM PW_EMP_POSITION WHERE EP_REP_KEy_NO = P_REP_KEY_NO;
      MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;

   FOR I IN C_EMP LOOP

   OPEN  GET_DATE_FMT ;
   FETCH GET_DATE_FMT INTO M_DT_FMT_MASK;
   CLOSE GET_DATE_FMT ;

     OPEN C1(I.EMP_CODE,I.EMP_JOIN_DT);
     FETCH C1 INTO M_PER,M_POS;
     CLOSE C1;

   OPEN C2(I.EMP_CODE);
   FETCH C2 INTO M_EMPY_SCALE_CODE;
   CLOSE C2;

   INSERT INTO PW_EMP_HISTORY ( EMPH_COMP_CODE,
                                EMPH_REP_KEY_NO,
                                EMPH_CODE,
                                EMPH_SHORT_NAME,
                                EMPH_DIV_NAME,
                                EMPH_DEPT_NAME,
                                EMPH_LOC_NAME,
                                EMPH_JOIN_DT,
                                EMPH_POSITION_CODE,
                                EMPH_PERSONAL_GRADE,
                                EMPH_STATUS,
                                EMPH_GRADE_NAME,
                                EMPH_POSITION_NAME,
                                EMPH_SCALE_CODE)
                       VALUES ( P_COMP_CODE,
                                P_REP_KEY_NO,
                                I.EMP_CODE,
                                I.EMP_NAME,
                                I.DIV,
                                I.DEP,
                                I.LOC,
                                I.EMP_JOIN_DT,
                                I.EMP_POSITION_CODE,
                                I.EMP_PERSONAL_GRADE,
                                I.EMP_STATUS,
                                M_PER,
                                M_POS,
                                M_EMPY_SCALE_CODE);





   FOR J IN C_TRAINING(I.EMP_CODE) LOOP

       INSERT INTO PW_EMP_TRAINING ( ET_COMP_CODE,
                                     ET_REP_KEY_NO,
                                     ET_TRAINING,
                                     ET_EMP_CODE,
                                     ET_TXN_CODE,
                                     ET_NO,
                                     ET_DATE,
                                     ET_REMARKS,
                                     ET_TYPEDESC,
                                     ET_CODEDESC,
                                     ET_KEYDESC,
                                     ET_TNED_PERC)
                             VALUES( P_COMP_CODE,
                                     P_REP_KEY_NO,
                                     J.TRAINING,
                                     J.TNEH_EMP_CODE,
                                     J.TNEH_TXN_CODE,
                                     J.TNEH_NO,
                                     J.TNEH_DT,
                                     J.TNEH_REMARKS,
                                     J.TYPEDESC,
                                     J.CODEDESC,
                                     J.KEYDESC,
                                     J.PER);


   END LOOP;



   FOR K IN C_SALARY(I.EMP_CODE) LOOP

   INSERT INTO PW_EMP_SALARY ( ES_COMP_CODE,
                               ES_REP_KEY_NO,
                               ES_SALARY,
                               ES_EMP_CODE,
                               ES_TXN_CODE,
                               ES_NO,
                               ES_DATE,
                               ES_FROM_DT,
                               ES_REMARKS,
                               ES_ALLOWANCE,
                               ES_ORG_AMT,
                               ES_FINAL_AMT)
                      VALUES ( P_COMP_CODE,
                               P_REP_KEY_NO,
                               K.salary,
                               K.REV_EMP_CODE,
                               K.REV_TXN_CODE,
                               K.REV_NO,
                               K.REV_DT,
                               K.REV_FROM_DT,
                               K.REV_REMARKS,
                               K.REV_ALLOWANCE,
                               K.REV_ORG_AMT,
                               K.REV_FINAL_AMT);

   END LOOP;



   FOR M IN C_APPRAISAL(I.EMP_CODE) LOOP

       INSERT INTO PW_EMP_APPRAISAL ( EA_COMP_CODE,
                                      EA_REP_KEY_NO,
                                      EA_APPRAISAL,
                                      EA_EMP_CODE,
                                      EA_TXN_CODE,
                                      EA_NO,
                                      EA_DATE,
                                      EA_FROM_DT,
                                      EA_UPTO_DT,
                                      EA_REMARKS,
                                      EA_DE,
                                      EA_PERC)
                              VALUES( P_COMP_CODE,
                                      P_REP_KEY_NO,
                                      M.Appraisal,
                                      M.APPH_EMP_CODE,
                                      M.APPH_TXN_CODE,
                                      M.APPH_NO,
                                      M.APPH_DT,
                                      M.APPD_REMARKS,
                                      M.APPH_FROM_DT,
                                      M.APPH_UPTO_DT,
                                      M.DE,
                                      M.APPD_PERC);

   END LOOP;



   FOR N IN C_CONTRACT(I.EMP_CODE) LOOP

       INSERT INTO PW_EMP_CONTRACT ( EC_COMP_CODE,
                                     EC_REP_KEY_NO,
                                     EC_CONTRACT,
                                     EC_EMP_CODE,
                                     EC_TXN_CODE,
                                     EC_NO,
                                     EC_DATE,
                                     EC_CONT_TYPE_CODE,
                                     EC_CONT_START_DT,
                                     EC_REMARKS)
                            VALUES ( P_COMP_CODE,
                                     P_REP_KEY_NO,
                                     N.Contract,
                                     N.CTGH_EMP_CODE,
                                     N.CTGH_TXN_CODE,
                                     N.CTGH_NO,
                                     N.CTGH_DT,
                                     N.CTGH_CONT_TYPE_CODE,
                                     N.CTGH_CONT_START_DT,
                                     N.CTGH_REMARKS);



   FOR P IN C_POSITION(I.EMP_CODE,N.CTGH_CONT_TYPE_CODE,N.CTGH_NO) LOOP
       INSERT INTO PW_EMP_POSITION ( EP_COMP_CODE,
                                     EP_REP_KEY_NO,
                                     EP_POSITION_CODE,
                                     ep_ctgh_no,
                                     EP_CTGH_SECT_CODE,
                                     EP_CTGH_SUB_SECT_CODE,
                                     EP_CTGH_DIVN_CODE,
                                     EP_CTGH_DEPT_CODE,
                                     EP_CTGH_CC_CODE,
                                     EP_CTGH_LOCN_CODE,
                                     EP_CTGH_PERSONAL_GRADE_CODE,
                                     EP_CTGH_JOB_TITLE_CODE,
                                     EP_EMP_POSITION_CODE,
                                     EP_EMP_PERSONAL_GRADE,
                                     EP_EMP_JOB_TITLE_CODE,
                                     EP_EMP_DIVN_CODE,
                                     EP_EMP_DEPT_CODE,
                                     EP_EMP_SECT_CODE,
                                     EP_EMP_SUB_SECT_CODE,
                                     EP_EMP_CC_CODE,
                                     EP_EMP_LOCN_CODE,
                                     EP_CTGH_CONT_TYPE_CODE )
                            VALUES ( P_COMP_CODE,
                                     P_REP_KEY_NO,
                                     P.CTGH_POSITION_CODE,
                                     P.CTGH_NO,
                                     P.CTGH_SECT_CODE,
                                     P.CTGH_SUB_SECT_CODE,
                                     P.CTGH_DIVN_CODE,
                                     P.CTGH_DEPT_CODE,
                                     P.CTGH_CC_CODE,
                                     P.CTGH_LOCN_CODE,
                                     P.CTGH_PERSONAL_GRADE_CODE,
                                     P.CTGH_JOB_TITLE_CODE,
                                     P.EMP_POSITION_CODE,
                                     P.EMP_PERSONAL_GRADE,
                                     P.EMP_JOB_TITLE_CODE,
                                     P.EMP_DIVN_CODE,
                                     P.EMP_DEPT_CODE,
                                     P.EMP_SECT_CODE,
                                     P.EMP_SUB_SECT_CODE,
                                     P.EMP_CC_CODE,
                                     P.EMP_LOCN_CODE,
                                     P.CTGH_CONT_TYPE_CODE);
   END LOOP;
   END LOOP;


   ----DUMMY('I.EMP_CODE'||I.EMP_CODE);
   FOR O IN C_PROMOTION(I.EMP_CODE) LOOP
     -- --DUMMY('P_COMP_CODE'||P_COMP_CODE||'P_REP_KEY_NO'||P_REP_KEY_NO||'O.PROMOTION'||O.PROMOTION
    --  ||'O.PROMO_EMP_CODE'||O.PROMO_EMP_CODE||'O.PROMO_TXN_CODE'||O.PROMO_TXN_CODE||'O.PROMO_NO'||O.PROMO_NO
    --  ||'O.PROMO_DT'||O.PROMO_DT||'O.PROMO_EFF_DT'||O.PROMO_EFF_DT||'O.PROMO_REMARKS'||O.PROMO_REMARKS);
       INSERT INTO PW_EMP_PROMOTION ( EP_COMP_CODE,
                                      EP_REP_KEY_NO,
                                      EP_PROMOTION,
                                      EP_EMP_CODE,
                                      EP_TXN_CODE,
                                      EP_NO,
                                      EP_DATE,
                                      EP_EFF_DT,
                                      EP_REMARKS)
                              VALUES( P_COMP_CODE,
                                      P_REP_KEY_NO,
                                      O.PROMOTION,
                                      O.PROMO_EMP_CODE,
                                      O.PROMO_TXN_CODE,
                                      O.PROMO_NO,
                                      O.PROMO_DT,
                                      O.PROMO_EFF_DT,
                                      O.PROMO_REMARKS);



    FOR  Q IN C_PROMO(I.EMP_CODE,O.PROMO_TXN_CODE,O.PROMO_NO) LOOP

         INSERT INTO PW_EMP_PROMO  ( EP_COMP_CODE,
                                     EP_REP_KEY_NO,
                                     EP_TXN_CODE,
                                     EP_NO,
                                     EP_POSITION_CODE,
                                     EP_SECT_CODE,
                                     EP_SUB_SECT_CODE,
                                     EP_DIVN_CODE,
                                     EP_DEPT_CODE,
                                     EP_CC_CODE,
                                     EP_LOCN_CODE,
                                     EP_JOB_TITLE_CODE,
                                     EP_PERSONAL_GRADE_CODE,
                                     EP_EMP_POSITION_CODE,
                                     EP_PERSONAL_GRADE,
                                     EP_EMP_JOB_TITLE_CODE,
                                     EP_EMP_DIVN_CODE,
                                     EP_EMP_DEPT_CODE,
                                     EP_EMP_SECT_CODE,
                                     EP_EMP_CC_CODE,
                                     EP_EMP_LOCN_CODE,
                                     EP_EMP_SUB_SECT_CODE)
                             VALUES( P_COMP_CODE,
                                     P_REP_KEY_NO,
                                     Q.PROMO_TXN_CODE,
                                     Q.PROMO_NO,
                                     Q.PROMO_POSITION_CODE,
                                     Q.PROMO_SECT_CODE,
                                     Q.PROMO_SUB_SECT_CODE,
                                     Q.PROMO_DIVN_CODE,
                                     Q.PROMO_DEPT_CODE,
                                     Q.PROMO_CC_CODE,
                                     Q.PROMO_LOCN_CODE,
                                     Q.PROMO_JOB_TITLE_CODE,
                                     Q.PROMO_PERSONAL_GRADE_CODE,
                                     Q.EMP_POSITION_CODE,
                                     Q.EMP_PERSONAL_GRADE,
                                     Q.EMP_JOB_TITLE_CODE,
                                     Q.EMP_DIVN_CODE,
                                     Q.EMP_DEPT_CODE,
                                     Q.EMP_SECT_CODE,
                                     Q.EMP_CC_CODE,
                                     Q.EMP_LOCN_CODE,
                                     Q.EMP_SUB_SECT_CODE);
    END LOOP;
    END LOOP;



   FOR A IN C_TRANSFER(I.EMP_CODE) LOOP

       INSERT INTO PW_EMP_TRANSFER ( ET_COMP_CODE,
                                     ET_RET_KEY_NO,
                                     ET_TRANSFER,
                                     ET_FROM_COMP_CODE,
                                     ET_TXN_CODE,
                                     ET_NO,
                                     ET_DT,
                                     ET_EMP_CODE,
                                     ET_TO_COMP_CODE,
                                     ET_POSITION_CODE,
                                     ET_SECT_CODE,
                                     ET_SUB_SECT_CODE,
                                     ET_DIVN_CODE,
                                     ET_DEPT_CODE,
                                     ET_CC_CODE,
                                     ET_LOCN_CODE,
                                     ET_JOB_TITLE_CODE,
                                     ET_EFF_DT,
                                     ET_REMARKS,
                                     ET_POSITION_CODE_OLD,
                                     ET_SECT_CODE_OLD,
                                     ET_SUB_SECT_CODE_OLD,
                                     ET_DIVN_CODE_OLD,
                                     ET_DEPT_CODE_OLD,
                                     ET_CC_CODE_OLD,
                                     ET_LOCN_CODE_OLD,
                                     ET_JOB_TITLE_CODE_OLD)
                             VALUES( P_COMP_CODE,
                                     P_REP_KEY_NO,
                                     A.TRANSFER,
                                     A.FROM_COMP_CODE,
                                     A.TRF_TXN_CODE,
                                     A.TRF_NO,
                                     A.TRF_DT,
                                     A.TRF_EMP_CODE,
                                     A.TO_COMP_CODE,
                                     A.TRF_POSITION_CODE,
                                     A.TRF_SECT_CODE,
                                     A.TRF_SUB_SECT_CODE,
                                     A.TRF_DIVN_CODE,
                                     A.TRF_DEPT_CODE,
                                     A.TRF_CC_CODE,
                                     A.TRF_LOCN_CODE,
                                     A.TRF_JOB_TITLE_CODE,
                                     A.TRF_EFF_DT,
                                     A.TRF_REMARKS,
                                     A.TRF_POSITION_CODE_OLD,
                                     A.TRF_SECT_CODE_OLD,
                                     A.TRF_SUB_SECT_CODE_OLD,
                                     A.TRF_DIVN_CODE_OLD,
                                     A.TRF_DEPT_CODE_OLD,
                                     A.TRF_CC_CODE_OLD,
                                     A.TRF_LOCN_CODE_OLD,
                                     A.TRF_JOB_TITLE_CODE_OLD);

   END LOOP;

   END LOOP;
END P_EMP_HISTORY;
PROCEDURE P_BANK_TRANSFER ( P_COMP_CODE  IN VARCHAR2,
                            P_REP_KEY_NO IN  NUMBER ,
                            P_PROC_MTH   IN NUMBER,
                            P_LETTER_REF IN VARCHAR2,
                            P_BANK IN VARCHAR2,
                            P_NAME IN VARCHAR2,
                            P_DESGIN IN VARCHAR2,
                            P_NAME_2 IN VARCHAR2,
                            P_DESGIN_2 IN VARCHAR2)IS
                            MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

CURSOR C_MAIN IS
      SELECT EMP_CODE,
       DECODE(MM_LANG_CODE, 'ENG',EMP_SHORT_NAME ,'LANG_01',EMP_SHORT_NAME_LANG_01,'LANG_02',EMP_SHORT_NAME_LANG_02,'LANG_03',EMP_SHORT_NAME_LANG_03,'LANG_04',EMP_SHORT_NAME_LANG_04,'LANG_05',EMP_SHORT_NAME_LANG_05,'LANG_06',EMP_SHORT_NAME_LANG_06,'LANG_07',EMP_SHORT_NAME_LANG_07,'LANG_08',EMP_SHORT_NAME_LANG_08,'LANG_09',EMP_SHORT_NAME_LANG_09,'LANG_10',EMP_SHORT_NAME_LANG_10) EMP_SHORT_NAME,
       EMPY_BANK_CODE,
       EMPY_BANK_REMARKS
FROM   PM_BANK,
       PM_EMP_PAY,
       PM_EMP_KEY,
       PS_FINAL_PROC
WHERE  EMP_COMP_CODE =P_COMP_CODE
AND    EMP_COMP_CODE = EMPY_COMP_CODE
AND    EMP_COMP_CODE = FP_COMP_CODE
AND    EMP_CODE      = EMPY_CODE
AND    EMP_STATUS  IN('1','2','3')   -----This condition is added by Madhurendra on 20/july/2011 for the issue SEDAR-570969
AND    EMP_CODE         = FP_EMP_CODE
AND    BANK_CODE     = EMPY_COMP_BANK_CODE
AND    EMPY_PAY_MODE IN ('B','Q')
AND    EMPY_COMP_BANK_CODE = P_BANK
AND    FP_PROC_MTH = P_PROC_MTH
GROUP BY EMP_CODE,
       DECODE(MM_LANG_CODE, 'ENG',EMP_SHORT_NAME ,'LANG_01',EMP_SHORT_NAME_LANG_01,'LANG_02',EMP_SHORT_NAME_LANG_02,'LANG_03',EMP_SHORT_NAME_LANG_03,'LANG_04',EMP_SHORT_NAME_LANG_04,'LANG_05',EMP_SHORT_NAME_LANG_05,'LANG_06',EMP_SHORT_NAME_LANG_06,'LANG_07',EMP_SHORT_NAME_LANG_07,'LANG_08',EMP_SHORT_NAME_LANG_08,'LANG_09',EMP_SHORT_NAME_LANG_09,'LANG_10',EMP_SHORT_NAME_LANG_10) ,
       EMPY_BANK_CODE,
       EMPY_BANK_REMARKS;

M_AC_NO  VARCHAR2(30):= NULL;

CURSOR C1 IS
    SELECT BANKC_ACNT_NO
    FROM   PM_BANK_COMP
    WHERE  BANKC_COMP_CODE = P_COMP_CODE
    AND    BANKC_CODE      = P_BANK ;

M_CURR   VARCHAR2(30);

CURSOR C_CURR IS
    SELECT PARA_VALUE
    FROM   PM_PARAMETER
    WHERE  PARA_CODE = 'BASECURR';


P_SALARY     NUMBER;
M_SALARY_E   NUMBER;
M_SALARY_D   NUMBER;

CURSOR C_TOT_FC IS
    SELECT SUM(NVL(FP_LC_AMOUNT,0))
    FROM   PM_BANK,
                PM_EMP_PAY,
             PM_EMP_KEY,
             PS_FINAL_PROC
    WHERE  EMP_COMP_CODE =P_COMP_CODE
    AND    EMP_COMP_CODE = EMPY_COMP_CODE
    AND    EMP_COMP_CODE = FP_COMP_CODE
    AND    EMP_CODE      = EMPY_CODE
    AND    EMP_STATUS IN ('1','2','3')---this condition is added by Madhurendra on 24/07/2011 for the issue SEDAR-572433
    AND    EMP_CODE           = FP_EMP_CODE
    AND    BANK_CODE     = EMPY_COMP_BANK_CODE
    AND    EMPY_PAY_MODE IN ('B','Q')
    AND    FP_EARN_DEDUC = 'E'
    AND    EMPY_COMP_BANK_CODE = P_BANK
    AND    FP_PROC_MTH     = P_PROC_MTH;
CURSOR C_TOT_LC IS
    SELECT SUM(NVL(FP_LC_AMOUNT,0))
    FROM   PM_BANK,
                PM_EMP_PAY,
             PM_EMP_KEY,
             PS_FINAL_PROC
    WHERE  EMP_COMP_CODE =P_COMP_CODE
    AND    EMP_COMP_CODE = EMPY_COMP_CODE
    AND    EMP_COMP_CODE = FP_COMP_CODE
    AND    EMP_STATUS IN ('1','2','3')------this condition is added by Madhurendra on 24/07/2011 for the issue SEDAR-572433
    AND    EMP_CODE      = EMPY_CODE
    AND    EMP_CODE         = FP_EMP_CODE
    AND    BANK_CODE     = EMPY_COMP_BANK_CODE
    AND    EMPY_PAY_MODE IN ('B','Q')
    AND    FP_EARN_DEDUC = 'D'
    AND    EMPY_COMP_BANK_CODE = P_BANK
    AND    FP_PROC_MTH     = P_PROC_MTH;

/* START : ADDED BY ASHIK FOR THE ISSUE SMC-305456 ON 28/05/2009 */
/*CURSOR C3 IS
    SELECT CURR_DECIMAL
    FROM FM_CURRENCY
    WHERE CURR_CODE = :CF_COMP_CURR;*/

    M_ROUND_VAL NUMBER :=0;
/* END : ADDED BY ASHIK FOR THE ISSUE SMC-305456 ON 28/05/2009 */

M_ADD   VARCHAR2(240);

CURSOR C_BRANCH(P_BANK IN VARCHAR2) IS
    SELECT  BANK_ADD1
    FROM PM_BANK
    WHERE BANK_CODE = P_BANK;

P_SALARY_1     NUMBER;
M_SALARY_E_1   NUMBER;
M_SALARY_D_1  NUMBER;
CURSOR C_NET_FC(P_EMP_CODE IN VARCHAR2) IS
    SELECT SUM(NVL(FP_LC_AMOUNT,0))
    FROM
    PS_FINAL_PROC
    WHERE  FP_COMP_CODE = P_COMP_CODE
    AND    FP_EMP_CODE   = P_EMP_CODE
    AND    FP_EARN_DEDUC = 'E'
    AND    FP_PROC_MTH     = P_PROC_MTH;

CURSOR C_NET_LC(P_EMP_CODE IN VARCHAR2) IS
    SELECT SUM(NVL(FP_LC_AMOUNT,0))
    FROM   PS_FINAL_PROC
    WHERE  FP_COMP_CODE = P_COMP_CODE
    AND    FP_EMP_CODE   = P_EMP_CODE
    AND    FP_EARN_DEDUC = 'D'
    AND    FP_PROC_MTH     = P_PROC_MTH;

CURSOR C_BANK_NAME(P_BANK_CODE IN VARCHAR2) IS
--SELECT  BANK_NAME
SELECT DECODE(MM_LANG_CODE,'ENG',BANK_NAME, 'LANG_01', BANK_NAME_LANG_01, 'LANG_02', BANK_NAME_LANG_02,
'LANG_03', BANK_NAME_LANG_03, 'LANG_04', BANK_NAME_LANG_04, 'LANG_05', BANK_NAME_LANG_05, 'LANG_06',
BANK_NAME_LANG_06, 'LANG_07', BANK_NAME_LANG_07, 'LANG_08', BANK_NAME_LANG_08, 'LANG_09', BANK_NAME_LANG_09,
'LANG_10', BANK_NAME_LANG_10,BANK_NAME) BANK_NAME
FROM PM_BANK
WHERE BANK_CODE = P_BANK_CODE;

M_NAME    VARCHAR2(240);

M_DECIMAL   NUMBER;
M_VAL                NUMBER;
M_TEXT      VARCHAR2(2000);


BEGIN
   DELETE FROM PW_BANK_TRANSFER WHERE  BT_REP_KEY_NO = P_REP_KEY_NO;
      MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;
FOR I IN C_MAIN LOOP

    IF C1%ISOPEN THEN
           CLOSE C1;
      END IF;
      OPEN  C1;
      FETCH C1 INTO M_AC_NO ;
      CLOSE C1;

    IF C_CURR%ISOPEN THEN
           CLOSE C_CURR;
      END IF;
      OPEN  C_CURR;
      FETCH C_CURR INTO M_CURR  ;
      CLOSE C_CURR;

    IF C_TOT_FC%ISOPEN THEN
       CLOSE C_TOT_FC;
    END IF ;
    OPEN C_TOT_FC;
    FETCH C_TOT_FC INTO M_SALARY_E;
    CLOSE C_TOT_FC;

    IF C_TOT_LC%ISOPEN THEN
       CLOSE C_TOT_LC;
    END IF ;
    OPEN C_TOT_LC ;
    FETCH C_TOT_LC INTO M_SALARY_D;
    CLOSE C_TOT_LC;

    P_SALARY := (NVL(M_SALARY_E,0)-NVL(M_SALARY_D,0));
-- RETURN (ROUND(NVL(P_SALARY,0),2));
/* START : COMMENTED AND ADDED BY ASHIK FOR THE ISSUE SMC-305456 ON 28/05/2009 */
  /*OPEN C3;
  FETCH C3 INTO M_ROUND_VAL;
  CLOSE C3;   */

    IF C_BRANCH%ISOPEN THEN
           CLOSE C_BRANCH;
       END IF;
      OPEN  C_BRANCH(I.EMPY_BANK_CODE);
      FETCH C_BRANCH INTO M_ADD;
      CLOSE C_BRANCH;

    IF C_NET_FC%ISOPEN THEN
       CLOSE C_NET_FC;
    END IF ;
    OPEN C_NET_FC(I.EMP_CODE);
    FETCH C_NET_FC INTO M_SALARY_E_1;
    CLOSE C_NET_FC;

    IF C_NET_LC%ISOPEN THEN
       CLOSE C_NET_LC;
    END IF ;
    OPEN C_NET_LC(I.EMP_CODE);
    FETCH C_NET_LC INTO M_SALARY_D_1;
    CLOSE C_NET_LC;

  P_SALARY_1 := (NVL(M_SALARY_E_1,0)-NVL(M_SALARY_D_1,0));

  M_DECIMAL := P_GET_FC_DECIMAL(P_COMP_CODE,M_CURR);
    M_VAL            := ROUND(P_SALARY,M_DECIMAL);

  P_CONV_AMT_TO_WORDS(M_VAL,M_CURR,'ENG',M_TEXT);
  M_TEXT:= M_TEXT;

  IF C_BANK_NAME%ISOPEN THEN
        CLOSE C_BANK_NAME;
    END IF;
    OPEN  C_BANK_NAME(I.EMPY_BANK_CODE);
    FETCH C_BANK_NAME INTO M_NAME;
    CLOSE C_BANK_NAME;

  INSERT INTO PW_BANK_TRANSFER( BT_COMP_CODE,
                                BT_REP_KEY_NO,
                                BT_EMP_CODE,
                                BT_EMP_SHORT_NAME,
                                BT_EMPY_BANK_CODE,
                                BT_EMPY_BANK_REMARKS,
                                BT_CURR_CODE,
                                BT_SAL_EARN,
                                BT_SAL_DEDU,
                                BT_ADDRESS,
                                BT_BANK_NAME,
                                BT_ACC_NO,
                                BT_NET_SAL,
                                BT_TOT_SAL,
                                BT_AMOUNT_WORDS)
                       VALUES ( P_COMP_CODE,
                                P_REP_KEY_NO,
                                I.EMP_CODE,
                                I.EMP_SHORT_NAME,
                                I.EMPY_BANK_CODE,
                                I.EMPY_BANK_REMARKS,
                                M_CURR,
                                M_SALARY_E_1,
                                M_SALARY_D_1,
                                M_ADD,
                                M_NAME,
                                M_AC_NO,
                                P_SALARY_1,
                                P_SALARY,
                                M_TEXT);

END LOOP;

END P_BANK_TRANSFER;

PROCEDURE P_PAY_RECONCILLIATION( P_COMP_CODE IN VARCHAR2,
                                 P_REP_KEY_NO IN NUMBER,
                                 P_FM_DIVN IN VARCHAR2,
                                 P_TO_DIVN IN VARCHAR2,
                                 P_FM_DEPT IN VARCHAR2,
                                 P_TO_DEPT IN VARCHAR2,
                                 P_FM_DT  IN NUMBER,
                                 P_TO_DT  IN NUMBER) IS

MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;


CURSOR C1_MAIN IS
     SELECT BANK_CODE || '-' || DECODE(MM_LANG_CODE,'ENG',BANK_NAME, 'LANG_01', BANK_NAME_LANG_01, 'LANG_02', BANK_NAME_LANG_02,
'LANG_03', BANK_NAME_LANG_03, 'LANG_04', BANK_NAME_LANG_04, 'LANG_05', BANK_NAME_LANG_05, 'LANG_06',
BANK_NAME_LANG_06, 'LANG_07', BANK_NAME_LANG_07, 'LANG_08', BANK_NAME_LANG_08, 'LANG_09', BANK_NAME_LANG_09,
'LANG_10', BANK_NAME_LANG_10,BANK_NAME) BANK,
       BANK_ADD1,
       FP_DIVN_CODE,
       FP_DEPT_CODE,
       FP_LOCN_CODE,
       COUNT(DISTINCT(FP_EMP_CODE)) COUNT1,
       SUM(FP_LC_AMOUNT * DECODE(FP_EARN_DEDUC, 'E', 1, 'D', -1)) SUM1
  FROM PS_FINAL_PROC, PM_BANK
 WHERE FP_PAY_MODE = 'B'
   AND FP_BANK_CODE = BANK_CODE
   AND FP_PROC_MTH BETWEEN P_FM_DT AND P_TO_DT
   AND FP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
   AND FP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
   AND FP_COMP_CODE = P_COMP_CODE
-- COMMENTED AND ADDED BY VINOD ON 19-MAR-2007 FOR THE ISSUE ALFOZAN -150234
--GROUP BY             FP_LOCN_CODE                      ,                       FP_EMP_CODE              ,                BANK_CODE              ,
 GROUP BY FP_LOCN_CODE,
          BANK_CODE,
          BANK_NAME,
          bank_name_lang_01, bank_name_lang_02, bank_name_lang_03, bank_name_lang_04, bank_name_lang_05, bank_name_lang_06, bank_name_lang_07, bank_name_lang_08, bank_name_lang_09, bank_name_lang_10,
          BANK_ADD1,
          FP_DIVN_CODE,
          FP_DEPT_CODE;

CURSOR C3(P_DIVN IN VARCHAR2,P_DEPT IN VARCHAR2) IS
    SELECT DECODE(MM_LANG_CODE,'ENG',DIVN_NAME, 'LANG_01', DIVN_NAME_LANG_01, 'LANG_02', DIVN_NAME_LANG_02,
'LANG_03', DIVN_NAME_LANG_03, 'LANG_04', DIVN_NAME_LANG_04, 'LANG_05', DIVN_NAME_LANG_05, 'LANG_06',
DIVN_NAME_LANG_06, 'LANG_07', DIVN_NAME_LANG_07, 'LANG_08', DIVN_NAME_LANG_08, 'LANG_09', DIVN_NAME_LANG_09,
'LANG_10', DIVN_NAME_LANG_10,DIVN_NAME)
 ,DECODE(MM_LANG_CODE,'ENG', DEPT_NAME, 'LANG_01',  DEPT_NAME_LANG_01, 'LANG_02',  DEPT_NAME_LANG_02,
'LANG_03',  DEPT_NAME_LANG_03, 'LANG_04',  DEPT_NAME_LANG_04, 'LANG_05',  DEPT_NAME_LANG_05, 'LANG_06',
 DEPT_NAME_LANG_06, 'LANG_07',  DEPT_NAME_LANG_07, 'LANG_08',  DEPT_NAME_LANG_08, 'LANG_09',  DEPT_NAME_LANG_09,
'LANG_10',  DEPT_NAME_LANG_10, DEPT_NAME)
    FROM             FM_DIVISION                ,        FM_DEPARTMENT
    WHERE         DIVN_CODE                  =     P_DIVN
         AND           DEPT_DIVN_CODE         =     DIVN_CODE
        AND              DEPT_COMP_CODE         =     DIVN_COMP_CODE
        AND             DEPT_CODE                 =        P_DEPT;

 CURSOR C4(P_LOCN IN VARCHAR2) IS
    SELECT         DECODE(MM_LANG_CODE,'ENG',LOCN_DESC, 'LANG_01', LOCN_DESC_LANG_01, 'LANG_02', LOCN_DESC_LANG_02,
'LANG_03', LOCN_DESC_LANG_03, 'LANG_04', LOCN_DESC_LANG_04, 'LANG_05', LOCN_DESC_LANG_05, 'LANG_06',
LOCN_DESC_LANG_06, 'LANG_07', LOCN_DESC_LANG_07, 'LANG_08', LOCN_DESC_LANG_08, 'LANG_09', LOCN_DESC_LANG_09,
'LANG_10', LOCN_DESC_LANG_10,LOCN_DESC)
         FROM           PM_LOCN
         WHERE       LOCN_CODE            =  P_LOCN;

   M_DIVN_NAME VARCHAR2(240);
   M_DEPT_NAME VARCHAR2(240);
   M_LOCN_NAME VARCHAR2(240);

CURSOR C2_MAIN IS
      SELECT FP_DIVN_CODE,
       FP_DEPT_CODE,
       FP_LOCN_CODE,
       FP_EMP_CODE,
       DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02,
'LANG_03', EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06',
EMP_NAME_LANG_06, 'LANG_07', EMP_NAME_LANG_07, 'LANG_08', EMP_NAME_LANG_08, 'LANG_09', EMP_NAME_LANG_09,
'LANG_10', EMP_NAME_LANG_10,EMP_NAME) emp_name,
       SUM(FP_LC_AMOUNT * DECODE(FP_EARN_DEDUC, 'E', 1, 'D', -1))SUM2
  FROM PS_FINAL_PROC, PM_EMP_KEY
 WHERE FP_PROC_MTH BETWEEN P_FM_DT AND P_TO_DT
   AND FP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
   AND FP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
   AND FP_COMP_CODE = P_COMP_CODE
   AND FP_PAY_MODE = 'Q'
   AND FP_EMP_CODE = EMP_CODE
 GROUP BY FP_LOCN_CODE, FP_EMP_CODE,FP_LC_AMOUNT,FP_EARN_DEDUC, EMP_NAME,emp_name_lang_01, emp_name_lang_02, emp_name_lang_03, emp_name_lang_04, emp_name_lang_05, emp_name_lang_06, emp_name_lang_07, emp_name_lang_08, emp_name_lang_09, emp_name_lang_10,
  FP_DIVN_CODE, FP_DEPT_CODE;

CURSOR C3_MAIN IS
      SELECT FP_DIVN_CODE,
       FP_DEPT_CODE,
       FP_LOCN_CODE,
       COUNT(DISTINCT(FP_EMP_CODE)) COUNT1,
       SUM(FP_LC_AMOUNT * DECODE(FP_EARN_DEDUC, 'E', 1, 'D', -1)) SUM3
  FROM PS_FINAL_PROC
 WHERE FP_PROC_MTH BETWEEN P_FM_DT AND P_TO_DT
   AND FP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
   AND FP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
   AND FP_COMP_CODE = P_COMP_CODE
   AND FP_PAY_MODE = 'C'
 GROUP BY FP_DIVN_CODE, FP_DEPT_CODE, FP_LOCN_CODE;

CURSOR C4_MAIN IS
      SELECT 'FINAL' EMPDATA,
       (MONTHS_BETWEEN(TO_DATE(P_TO_DT, 'YYYYMM'),
                       TO_DATE(P_FM_DT, 'YYYYMM')) + 1 -
       COUNT(DISTINCT FP_EMP_CODE)) DIFFMNTH,
       FP_EMP_CODE,
       FP_DIVN_CODE,
       FP_DEPT_CODE,
       FP_LOCN_CODE,
       FP_EMP_STATUS
  FROM PS_FINAL_PROC
 WHERE FP_PROC_MTH BETWEEN P_FM_DT AND P_TO_DT
   AND FP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
   AND FP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
   AND FP_COMP_CODE =P_COMP_CODE
 GROUP BY FP_EMP_CODE,
          FP_DIVN_CODE,
          FP_DEPT_CODE,
          FP_EMP_STATUS,
          FP_FROM_DT,
          FP_LOCN_CODE
HAVING COUNT(DISTINCT FP_EMP_CODE) < MONTHS_BETWEEN(TO_DATE(P_TO_DT, 'YYYYMM'), TO_DATE(P_FM_DT, 'YYYYMM')) + 1
UNION
SELECT 'EMPKEY' EMPDATA,
       COUNT(DISTINCT EMP_CODE),
       EMP_CODE,
       EMP_DIVN_CODE,
       EMP_DEPT_CODE,
       EMP_LOCN_CODE,
       EMP_STATUS
  FROM PM_EMP_KEY
 WHERE (EMP_END_OF_SERVICE_DT IS NULL OR
       EMP_END_OF_SERVICE_DT BETWEEN To_Date(P_FM_DT,'YYYYMM') AND TO_DATE(P_TO_DT,'YYYYMM'))
   AND EMP_COMP_CODE = P_COMP_CODE
   AND EMP_CODE NOT IN
       (SELECT DISTINCT FP_EMP_CODE
          FROM PS_FINAL_PROC
         WHERE FP_COMP_CODE = P_COMP_CODE
           AND FP_PROC_MTH BETWEEN P_FM_DT AND P_TO_DT
           AND FP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
           AND FP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT)
 GROUP BY EMP_CODE,
          EMP_DIVN_CODE,
          EMP_DEPT_CODE,
          EMP_LOCN_CODE,
          EMP_STATUS,
          EMP_END_OF_SERVICE_DT  ;

CURSOR C5_MAIN IS
      SELECT FP_DIVN_CODE,
       FP_DEPT_CODE,
       FP_LOCN_CODE,
       COUNT(DISTINCT(FP_EMP_CODE)) COUNT1,
       SUM(FP_LC_AMOUNT * DECODE(FP_EARN_DEDUC, 'E', 1, 'D', -1)) SUM4
  FROM PS_FINAL_PROC
 WHERE FP_PROC_MTH BETWEEN P_FM_DT AND P_TO_DT
   AND FP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
   AND FP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
   AND FP_COMP_CODE = P_COMP_CODE
 GROUP BY FP_DIVN_CODE, FP_DEPT_CODE, FP_LOCN_CODE ;

BEGIN
  DELETE FROM PW_PAY_RECONCILLIATION WHERE pr_rep_key_no  = P_REP_KEY_NO;

    MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;

FOR I IN C1_MAIN LOOP

   IF C3%ISOPEN THEN
       CLOSE C3;
  END IF;
  OPEN C3(I.FP_DIVN_CODE,I.FP_DEPT_CODE);
  FETCH C3 INTO M_DIVN_NAME,M_DEPT_NAME;


  CLOSE C3;

  IF C4%ISOPEN THEN
      CLOSE C4;
  END IF;
  OPEN C4(I.FP_LOCN_CODE);
  FETCH C4 INTO M_LOCN_NAME;
  CLOSE C4;

  INSERT INTO PW_PAY_RECONCILLIATION ( PR_COMP_CODE,
                                       PR_REP_KEY_NO,
                                       PR_BANK,
                                       PR_BANK_ADD1,
                                       PR_DIVN_CODE,
                                       PR_DEPT_CODE,pr_locn_code,
                                       PR_COUNT,
                                       PR_SUM,
                                       PR_DIVN_NAME,
                                       PR_DEPT_NAME,
                                       PR_LOCN_NAME)
                              VALUES ( P_COMP_CODE,
                                       P_REP_KEY_NO,
                                       I.BANK,
                                       I.BANK_ADD1,
                                       I.FP_DIVN_CODE,
                                       I.FP_DEPT_CODE,
                                       I.FP_LOCN_CODE,
                                       I.COUNT1,
                                       I.SUM1,
                                       M_DIVN_NAME,
                                       M_DEPT_NAME,
                                       M_LOCN_NAME);

END LOOP;
     DELETE FROM PW_PAY_RECONCILLIATION_EMP WHERE pr_rep_key_no  = P_REP_KEY_NO;
FOR J IN C2_MAIN LOOP

    IF C3%ISOPEN THEN
       CLOSE C3;
  END IF;
  OPEN C3(J.FP_DIVN_CODE,J.FP_DEPT_CODE);
  FETCH C3 INTO M_DIVN_NAME,M_DEPT_NAME;


  CLOSE C3;

  IF C4%ISOPEN THEN
      CLOSE C4;
  END IF;
  OPEN C4(J.FP_LOCN_CODE);
  FETCH C4 INTO M_LOCN_NAME;
  CLOSE C4;

  INSERT INTO  PW_PAY_RECONCILLIATION_EMP ( PR_COMP_CODE,
                                            PR_REP_KEY_NO,
                                            PR_DIVN_CODE,
                                            PR_DEPT_CODE,
                                            PR_LOCN_CODE,
                                            PR_EMP_CODE,
                                            PR_EMP_NAME,
                                            PR_SUM,
                                            PR_DIVN_NAME,
                                            PR_DEPT_NAME,
                                            PR_LOCN_NAME)
                                   VALUES ( P_COMP_CODE,
                                            P_REP_KEY_NO,
                                            J.FP_DIVN_CODE,
                                            J.FP_DEPT_CODE,
                                            J.FP_LOCN_CODE,
                                            J.FP_EMP_CODE,
                                            J.EMP_NAME,
                                            J.SUM2,
                                            M_DIVN_NAME,
                                            M_DEPT_NAME,
                                             M_LOCN_NAME);

END LOOP;
   DELETE FROM PW_PAY_RECONCILLIATION_1 WHERE pr_rep_key_no  = P_REP_KEY_NO;
FOR K IN C3_MAIN LOOP

    IF C3%ISOPEN THEN
       CLOSE C3;
  END IF;
  OPEN C3(K.FP_DIVN_CODE,K.FP_DEPT_CODE);
  FETCH C3 INTO M_DIVN_NAME,M_DEPT_NAME;


  CLOSE C3;

  IF C4%ISOPEN THEN
      CLOSE C4;
  END IF;
  OPEN C4(K.FP_LOCN_CODE);
  FETCH C4 INTO M_LOCN_NAME;
  CLOSE C4;
   INSERT INTO  PW_PAY_RECONCILLIATION_1 ( PR_COMP_CODE,
                                            PR_REP_KEY_NO,
                                            PR_DIVN_CODE,
                                            PR_DEPT_CODE,
                                            PR_LOCN_CODE,
                                            PR_COUNT,
                                            PR_SUM,
                                            PR_DIVN_NAME,
                                            PR_DEPT_NAME,
                                            PR_LOCN_NAME)
                                   VALUES ( P_COMP_CODE,
                                            P_REP_KEY_NO,
                                            K.FP_DIVN_CODE,
                                            K.FP_DEPT_CODE,
                                            K.FP_LOCN_CODE,
                                            K.COUNT1,
                                            K.SUM3,
                                            M_DIVN_NAME,
                                            M_DEPT_NAME,
                                             M_LOCN_NAME);

END LOOP;
   DELETE FROM PW_PAY_RECONCILLIATION_2 WHERE pr_rep_key_no  = P_REP_KEY_NO;

FOR  M IN C4_MAIN LOOP

   IF C3%ISOPEN THEN
       CLOSE C3;
  END IF;
  OPEN C3(M.FP_DIVN_CODE,M.FP_DEPT_CODE);
  FETCH C3 INTO M_DIVN_NAME,M_DEPT_NAME;


  CLOSE C3;

  IF C4%ISOPEN THEN
      CLOSE C4;
  END IF;
  OPEN C4(M.FP_LOCN_CODE);
  FETCH C4 INTO M_LOCN_NAME;
  CLOSE C4;

  INSERT INTO PW_PAY_RECONCILLIATION_2 ( PR_COMP_CODE,
                                         PR_REP_KEY_NO,
                                         PR_EMPDATA,
                                         PR_DIFFMNTH,
                                         PR_EMP_CODE,
                                         PR_DIVN_CODE,
                                         PR_DEPT_CODE,
                                         PR_LOCN_CODE,
                                         PR_EMP_STATUS,
                                         PR_DIVN_NAME,
                                         PR_DEPT_NAME,
                                         PR_LOCN_NAME)
                                 VALUES( P_COMP_CODE,
                                         P_REP_KEY_NO,
                                         M.EMPDATA,
                                         M.DIFFMNTH,
                                         M.FP_EMP_CODE,
                                         M.FP_DIVN_CODE,
                                         M.FP_DEPT_CODE,
                                         M.FP_LOCN_CODE,
                                         M.FP_EMP_STATUS,
                                          M_DIVN_NAME,
                                            M_DEPT_NAME,
                                             M_LOCN_NAME);
END LOOP;
   DELETE FROM PW_PAY_RECONCILLIATION_3 WHERE pr_rep_key_no  = P_REP_KEY_NO;

FOR N IN C5_MAIN LOOP

IF C3%ISOPEN THEN
       CLOSE C3;
  END IF;
  OPEN C3(N.FP_DIVN_CODE,N.FP_DEPT_CODE);
  FETCH C3 INTO M_DIVN_NAME,M_DEPT_NAME;


  CLOSE C3;

  IF C4%ISOPEN THEN
      CLOSE C4;
  END IF;
  OPEN C4(N.FP_LOCN_CODE);
  FETCH C4 INTO M_LOCN_NAME;
  CLOSE C4;


    INSERT INTO PW_PAY_RECONCILLIATION_3 ( PR_COMP_CODE,
                                           PR_REP_KEY_NO,
                                           PR_DIVN_CODE,
                                           PR_DEPT_CODE,
                                           PR_LOCN_CODE,
                                           PR_COUNT,
                                           PR_SUM,
                                           PR_DIVN_NAME,
                                           PR_DEPT_NAME,
                                           PR_LOCN_NAME)
                                  VALUES ( P_COMP_CODE,
                                           P_REP_KEy_NO,
                                           N.FP_DIVN_CODE,
                                           N.FP_DEPT_CODE,
                                           N.FP_LOCN_CODE,
                                           N.COUNT1,
                                           N.SUM4,
                                           M_DIVN_NAME,
                                            M_DEPT_NAME,
                                             M_LOCN_NAME);

END LOOP;

END P_PAY_RECONCILLIATION;

PROCEDURE P_EMP_COST_ALLOCATION ( P_COMP_CODE  IN VARCHAR2,
                                  P_REP_KEY_NO IN NUMBER,
                                  P_FM_EMP     IN VARCHAR2,
                                  P_TO_EMP     IN VARCHAR2,
                                  P_AS_OF_YEAR IN NUMBER) IS

MM_LANG_CODE VARCHAR2(240);

CURSOR C1 IS
      SELECT EMP_CODE, DECODE(MM_LANG_CODE ,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02',
       EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05',
       EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06, 'LANG_07', EMP_NAME_LANG_07, 'LANG_08',
       EMP_NAME_LANG_08, 'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10)EMP_NAME
      , EMP_JOB_TITLE_CODE, EMP_JOIN_DT,
               EMP_LOCN_CODE
      FROM   PM_EMP_KEY, PS_FINAL_PROC
      WHERE  EMP_COMP_CODE = FP_COMP_CODE
      AND    EMP_CODE         = FP_EMP_CODE
      AND    FP_COMP_CODE     = P_COMP_CODE
      AND    FP_EMP_CODE     BETWEEN P_FM_EMP AND P_TO_EMP
      AND    FP_PROC_MTH= TO_NUMBER(P_AS_OF_YEAR)
      GROUP BY EMP_CODE, DECODE(MM_LANG_CODE ,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02',
       EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05',
       EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06, 'LANG_07', EMP_NAME_LANG_07, 'LANG_08',
       EMP_NAME_LANG_08, 'LANG_09',EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10), EMP_JOB_TITLE_CODE, EMP_JOIN_DT,EMP_LOCN_CODE;

CURSOR C_EARN(P_EMP IN VARCHAR2) IS
      SELECT EMPA_CODE EMP_EARN_CODE, EMPA_ALLW_CODE EARN_CODE
      FROM   PM_ALLOWANCE,PM_EMP_ALLOWANCE
      WHERE  ALLW_CODE          = EMPA_ALLW_CODE
      AND    EMPA_CODE = P_EMP
      AND    ALLW_EARN_DEDUC ='E'
      AND    ALLW_CASH_KIND  ='C'
      AND    EMPA_COMP_CODE  =P_COMP_CODE
      GROUP BY EMPA_CODE, EMPA_ALLW_CODE ;

   --M_GRAND_TOT_JAN        NUMBER;

M_JAN_AMT   NUMBER;

CURSOR C_EARN_JAN(P_EARN_CODE IN VARCHAR2,P_EMP_EARN_CODE IN VARCHAR2) IS
  SELECT FP_LC_AMOUNT
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_EARN_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'01'
  AND    FP_EMP_CODE  =P_EMP_EARN_CODE;

M_FEB_AMT   NUMBER;

CURSOR C_EARN_FEB(P_EARN_CODE IN VARCHAR2,P_EMP_EARN_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_EARN_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'02'
  AND    FP_EMP_CODE  =P_EMP_EARN_CODE;

M_MAR_AMT   NUMBER;

CURSOR C_EARN_MAR(P_EARN_CODE IN VARCHAR2,P_EMP_EARN_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_EARN_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'03'
  AND    FP_EMP_CODE  =P_EMP_EARN_CODE;

M_APR_AMT   NUMBER;

CURSOR C_EARN_APR(P_EARN_CODE IN VARCHAR2,P_EMP_EARN_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_EARN_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'04'
  AND    FP_EMP_CODE  =P_EMP_EARN_CODE;

M_MAY_AMT   NUMBER;

CURSOR C_EARN_MAY(P_EARN_CODE IN VARCHAR2,P_EMP_EARN_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_EARN_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'05'
  AND    FP_EMP_CODE  =P_EMP_EARN_CODE;

M_JUN_AMT   NUMBER;

CURSOR C_EARN_JUN(P_EARN_CODE IN VARCHAR2,P_EMP_EARN_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_EARN_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'06'
  AND    FP_EMP_CODE  =P_EMP_EARN_CODE;

M_JUL_AMT   NUMBER;

CURSOR C_EARN_JUL(P_EARN_CODE IN VARCHAR2,P_EMP_EARN_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_EARN_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'07'
  AND    FP_EMP_CODE  =P_EMP_EARN_CODE;

M_AUG_AMT   NUMBER;

CURSOR C_EARN_AUG(P_EARN_CODE IN VARCHAR2,P_EMP_EARN_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_EARN_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'08'
  AND    FP_EMP_CODE  =P_EMP_EARN_CODE;

M_SEP_AMT   NUMBER;

CURSOR C_EARN_SEP(P_EARN_CODE IN VARCHAR2,P_EMP_EARN_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_EARN_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'09'
  AND    FP_EMP_CODE  =P_EMP_EARN_CODE;

M_OCT_AMT   NUMBER;

CURSOR C_EARN_OCT(P_EARN_CODE IN VARCHAR2,P_EMP_EARN_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_EARN_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'10'
  AND    FP_EMP_CODE  =P_EMP_EARN_CODE;

M_NOV_AMT   NUMBER;

CURSOR C_EARN_NOV(P_EARN_CODE IN VARCHAR2,P_EMP_EARN_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_EARN_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'11'
  AND    FP_EMP_CODE  =P_EMP_EARN_CODE;

M_DEC_AMT   NUMBER;

CURSOR C_EARN_DEC(P_EARN_CODE IN VARCHAR2,P_EMP_EARN_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_EARN_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'12'
  AND    FP_EMP_CODE  =P_EMP_EARN_CODE;

M_TOT_AMT   NUMBER;

CURSOR C_TOT_SUM (P_EARN_CODE IN VARCHAR2,P_EMP_EARN_CODE IN VARCHAR2)IS
  SELECT SUM(FP_LC_AMOUNT) FP_LC_AMOUNT
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_EARN_CODE
  AND    SUBSTR(FP_PROC_MTH,1,4) = TO_NUMBER(P_AS_OF_YEAR)
  AND    FP_EMP_CODE  =P_EMP_EARN_CODE;

M_COUNT                NUMBER;
M_PER_AMT                    NUMBER;
M_PER_MTH_AVG    NUMBER;

CURSOR C1_PER (P_EARN_CODE IN VARCHAR2,P_EMP_EARN_CODE IN VARCHAR2)IS
  SELECT COUNT(DISTINCT(FP_PROC_MTH)) FP_PROC_MTH
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_EARN_CODE
  AND    SUBSTR(FP_PROC_MTH,1,4) = TO_NUMBER(P_AS_OF_YEAR)
  AND    FP_EMP_CODE  = P_EMP_EARN_CODE;
CURSOR C2_PER (P_EARN_CODE IN VARCHAR2,P_EMP_EARN_CODE IN VARCHAR2)IS
  SELECT SUM(FP_PROC_MTH) FP_PROC_MTH
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_EARN_CODE
  AND    SUBSTR(FP_PROC_MTH,1,4) = TO_NUMBER(P_AS_OF_YEAR)
  AND    FP_EMP_CODE  = P_EMP_EARN_CODE;

M_MOM_NON_PER            VARCHAR2(240);
CURSOR C1_MON(P_EARN_CODE IN VARCHAR2) IS
    SELECT DECODE(ALLW_MTH_NMTH,'M','MONTHLY','N','NON-MONTHLY','P','PERIODIC')
    FROM   PM_ALLOWANCE
    WHERE  ALLW_CODE          = P_EARN_CODE;

CURSOR C_DEDC(P_EMP_CODE IN VARCHAR2) IS
      SELECT        DISTINCT FP_EMP_CODE EMP_DEDC_CODE, FP_ALLW_CODE DEDC_CODE
FROM   PM_ALLOWANCE,
       PM_EMP_KEY,  PS_FINAL_PROC
WHERE  ALLW_CODE          =   FP_ALLW_CODE
AND    FP_EMP_CODE = P_EMP_CODE
AND  EMP_COMP_CODE =   FP_COMP_CODE
AND    ALLW_EARN_DEDUC ='D'
AND    ALLW_CASH_KIND  ='C'
AND    EMP_COMP_CODE  =P_COMP_CODE
GROUP BY FP_EMP_CODE,
       FP_ALLW_CODE ;

M_JAN_AMT_DEDC   NUMBER;

CURSOR C_DEDC_JAN(P_DEDC_CODE IN VARCHAR2,P_EMP_DEDC_CODE IN VARCHAR2) IS
  SELECT FP_LC_AMOUNT
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_DEDC_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'01'
  AND    FP_EMP_CODE  =P_EMP_DEDC_CODE;

M_FEB_AMT_DEDC   NUMBER;

CURSOR C_DEDC_FEB(P_DEDC_CODE IN VARCHAR2,P_EMP_DEDC_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_DEDC_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'02'
  AND    FP_EMP_CODE  =P_EMP_DEDC_CODE;

M_MAR_AMT_DEDC   NUMBER;

CURSOR C_DEDC_MAR(P_DEDC_CODE IN VARCHAR2,P_EMP_DEDC_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_DEDC_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'03'
  AND    FP_EMP_CODE  =P_EMP_DEDC_CODE;

M_APR_AMT_DEDC   NUMBER;

CURSOR C_DEDC_APR(P_DEDC_CODE IN VARCHAR2,P_EMP_DEDC_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_DEDC_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'04'
  AND    FP_EMP_CODE  =P_EMP_DEDC_CODE;

M_MAY_AMT_DEDC   NUMBER;

CURSOR C_DEDC_MAY(P_DEDC_CODE IN VARCHAR2,P_EMP_DEDC_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_DEDC_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'05'
  AND    FP_EMP_CODE  =P_EMP_DEDC_CODE;

M_JUN_AMT_DEDC   NUMBER;

CURSOR C_DEDC_JUN(P_DEDC_CODE IN VARCHAR2,P_EMP_DEDC_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_DEDC_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'06'
  AND    FP_EMP_CODE  =P_EMP_DEDC_CODE;

M_JUL_AMT_DEDC   NUMBER;

CURSOR C_DEDC_JUL(P_DEDC_CODE IN VARCHAR2,P_EMP_DEDC_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_DEDC_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'07'
  AND    FP_EMP_CODE  =P_EMP_DEDC_CODE;

M_AUG_AMT_DEDC   NUMBER;

CURSOR C_DEDC_AUG(P_DEDC_CODE IN VARCHAR2,P_EMP_DEDC_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_DEDC_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'08'
  AND    FP_EMP_CODE  =P_EMP_DEDC_CODE;

M_SEP_AMT_DEDC   NUMBER;

CURSOR C_DEDC_SEP(P_DEDC_CODE IN VARCHAR2,P_EMP_DEDC_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_DEDC_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'09'
  AND    FP_EMP_CODE  =P_EMP_DEDC_CODE;

M_OCT_AMT_DEDC   NUMBER;

CURSOR C_DEDC_OCT(P_DEDC_CODE IN VARCHAR2,P_EMP_DEDC_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_DEDC_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'10'
  AND    FP_EMP_CODE  =P_EMP_DEDC_CODE;

M_NOV_AMT_DEDC   NUMBER;

CURSOR C_DEDC_NOV(P_DEDC_CODE IN VARCHAR2,P_EMP_DEDC_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_DEDC_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'11'
  AND    FP_EMP_CODE  =P_EMP_DEDC_CODE;

M_DEC_AMT_DEDC   NUMBER;

CURSOR C_DEDC_DEC(P_DEDC_CODE IN VARCHAR2,P_EMP_DEDC_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_DEDC_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'12'
  AND    FP_EMP_CODE  =P_EMP_DEDC_CODE;

M_TOT_DEDC_AMT   NUMBER;

CURSOR C1_TOT_DEDC(P_DEDC_CODE IN VARCHAR2,P_EMP_DEDC_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_DEDC_CODE
  AND    SUBSTR(FP_PROC_MTH,1,4) = TO_NUMBER(P_AS_OF_YEAR)
  AND    FP_EMP_CODE  =P_EMP_DEDC_CODE;

M_COUNT_DEDC                NUMBER;
M_PER_AMT_DEDC                    NUMBER;
M_PER_MTH_AVG_DEDC    NUMBER;

CURSOR C1_PER_DEDC (P_DEDC_CODE IN VARCHAR2,P_EMP_DEDC_CODE IN VARCHAR2)IS
  SELECT COUNT(DISTINCT(FP_PROC_MTH)) FP_PROC_MTH
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_DEDC_CODE
  AND    SUBSTR(FP_PROC_MTH,1,4) = TO_NUMBER(P_AS_OF_YEAR)
  AND    FP_EMP_CODE  = P_EMP_DEDC_CODE;
CURSOR C2_PER_DEDC (P_DEDC_CODE IN VARCHAR2,P_EMP_DEDC_CODE IN VARCHAR2)IS
  SELECT SUM(FP_PROC_MTH) FP_PROC_MTH
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_DEDC_CODE
  AND    SUBSTR(FP_PROC_MTH,1,4) = TO_NUMBER(P_AS_OF_YEAR)
  AND    FP_EMP_CODE  = P_EMP_DEDC_CODE;

M_MOM_PER_DEDC            VARCHAR2(240);
CURSOR C1_MON_DEDC(P_DEDC_CODE IN VARCHAR2) IS
    SELECT DECODE(ALLW_MTH_NMTH,'M','MONTHLY','N','NON-MONTHLY','P','PERIODIC')
    FROM   PM_ALLOWANCE
    WHERE  ALLW_CODE          = P_DEDC_CODE;

CURSOR C_KIND(P_EMP_CODE IN VARCHAR2) IS
      SELECT EMPA_CODE EMP_KIND_CODE,
       EMPA_ALLW_CODE KIND_CODE
FROM   PM_ALLOWANCE,
       PM_EMP_ALLOWANCE
WHERE  ALLW_CODE          = EMPA_ALLW_CODE
AND    EMPA_CODE = P_EMP_CODE
AND    ALLW_CASH_KIND  ='K'
AND    EMPA_COMP_CODE  =P_COMP_CODE
GROUP BY EMPA_CODE,
       EMPA_ALLW_CODE ;

M_JAN_AMT_KIND   NUMBER;

CURSOR C_KIND_JAN(P_KIND_CODE IN VARCHAR2,P_EMP_KIND_CODE IN VARCHAR2) IS
  SELECT FP_LC_AMOUNT
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_KIND_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'01'
  AND    FP_EMP_CODE  =P_EMP_KIND_CODE;

M_FEB_AMT_KIND   NUMBER;

CURSOR C_KIND_FEB(P_KIND_CODE IN VARCHAR2,P_EMP_KIND_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_KIND_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'02'
  AND    FP_EMP_CODE  =P_EMP_KIND_CODE;

M_MAR_AMT_KIND   NUMBER;

CURSOR C_KIND_MAR(P_KIND_CODE IN VARCHAR2,P_EMP_KIND_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_KIND_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'03'
  AND    FP_EMP_CODE  =P_EMP_KIND_CODE;

M_APR_AMT_KIND   NUMBER;

CURSOR C_KIND_APR(P_KIND_CODE IN VARCHAR2,P_EMP_KIND_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_KIND_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'04'
  AND    FP_EMP_CODE  =P_EMP_KIND_CODE;

M_MAY_AMT_KIND   NUMBER;

CURSOR C_KIND_MAY(P_KIND_CODE IN VARCHAR2,P_EMP_KIND_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_KIND_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'05'
  AND    FP_EMP_CODE  =P_EMP_KIND_CODE;

M_JUN_AMT_KIND   NUMBER;

CURSOR C_KIND_JUN(P_KIND_CODE IN VARCHAR2,P_EMP_KIND_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_KIND_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'06'
  AND    FP_EMP_CODE  =P_EMP_KIND_CODE;

M_JUL_AMT_KIND   NUMBER;

CURSOR C_KIND_JUL(P_KIND_CODE IN VARCHAR2,P_EMP_KIND_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_KIND_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'07'
  AND    FP_EMP_CODE  =P_EMP_KIND_CODE;

M_AUG_AMT_KIND   NUMBER;

CURSOR C_KIND_AUG(P_KIND_CODE IN VARCHAR2,P_EMP_KIND_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_KIND_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'08'
  AND    FP_EMP_CODE  =P_EMP_KIND_CODE;

M_SEP_AMT_KIND   NUMBER;

CURSOR C_KIND_SEP(P_KIND_CODE IN VARCHAR2,P_EMP_KIND_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_KIND_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'09'
  AND    FP_EMP_CODE  =P_EMP_KIND_CODE;

M_OCT_AMT_KIND   NUMBER;

CURSOR C_KIND_OCT(P_KIND_CODE IN VARCHAR2,P_EMP_KIND_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_KIND_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'10'
  AND    FP_EMP_CODE  =P_EMP_KIND_CODE;

M_NOV_AMT_KIND   NUMBER;

CURSOR C_KIND_NOV(P_KIND_CODE IN VARCHAR2,P_EMP_KIND_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_KIND_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'11'
  AND    FP_EMP_CODE  =P_EMP_KIND_CODE;

M_DEC_AMT_KIND   NUMBER;

CURSOR C_KIND_DEC(P_KIND_CODE IN VARCHAR2,P_EMP_KIND_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_KIND_CODE
  AND    FP_PROC_MTH  =P_AS_OF_YEAR||'12'
  AND    FP_EMP_CODE  =P_EMP_KIND_CODE;

M_TOT_KIND_AMT   NUMBER;

CURSOR C1_TOT_KIND(P_KIND_CODE IN VARCHAR2,P_EMP_KIND_CODE IN VARCHAR2) IS
  SELECT SUM(FP_LC_AMOUNT)
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_KIND_CODE
  AND    SUBSTR(FP_PROC_MTH,1,4) = TO_NUMBER(P_AS_OF_YEAR)
  AND    FP_EMP_CODE  =P_EMP_KIND_CODE;

M_COUNT_KIND                NUMBER;
M_PER_AMT_KIND                    NUMBER;
M_PER_MTH_AVG_KIND    NUMBER;

CURSOR C1_PER_KIND (P_KIND_CODE IN VARCHAR2,P_EMP_KIND_CODE IN VARCHAR2)IS
  SELECT COUNT(DISTINCT(FP_PROC_MTH)) FP_PROC_MTH
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_KIND_CODE
  AND    SUBSTR(FP_PROC_MTH,1,4) = TO_NUMBER(P_AS_OF_YEAR)
  AND    FP_EMP_CODE  = P_EMP_KIND_CODE;
CURSOR C2_PER_KIND (P_KIND_CODE IN VARCHAR2,P_EMP_KIND_CODE IN VARCHAR2)IS
  SELECT SUM(FP_PROC_MTH) FP_PROC_MTH
  FROM   PS_FINAL_PROC
  WHERE  FP_ALLW_CODE =P_KIND_CODE
  AND    SUBSTR(FP_PROC_MTH,1,4) = TO_NUMBER(P_AS_OF_YEAR)
  AND    FP_EMP_CODE  = P_EMP_KIND_CODE;

M_MOM_PER_KIND            VARCHAR2(240);
CURSOR C1_MON_KIND(P_KIND_CODE IN VARCHAR2) IS
    SELECT DECODE(ALLW_MTH_NMTH,'M','MONTHLY','N','NON-MONTHLY','P','PERIODIC')
    FROM   PM_ALLOWANCE
    WHERE  ALLW_CODE          = P_KIND_CODE;

M_GRAND_TOT_JAN NUMBER;

CURSOR C2_GET_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

BEGIN
   DELETE FROM PW_EMP_COST_ALLOCATION WHERE ECA_REP_KEY_NO = P_REP_KEy_NO;

    MM_LANG_CODE := NULL;

    IF C2_GET_LANG%ISOPEN THEN
       CLOSE C2_GET_LANG;
    END IF;

    OPEN C2_GET_LANG;
    FETCH C2_GET_LANG INTO MM_LANG_CODE;
    CLOSE C2_GET_LANG;
   FOR I IN C1 LOOP
   DELETE FROM PW_EARN_COST_ALLOCATION WHERE ECA_REP_KEY_NO = P_REP_KEy_NO;

   INSERT INTO PW_EMP_COST_ALLOCATION ( ECA_COMP_CODE,
                                         ECA_REP_KEY_NO,
                                         ECA_CODE,
                                         ECA_NAME,
                                         ECA_JOB_TITLE_CODE,
                                         ECA_JOIN_DT,
                                         ECA_LOCN_CODE )
                                VALUES ( P_COMP_CODE,
                                         P_REP_KEY_NO,
                                         I.EMP_CODE,
                                         I.EMP_NAME,
                                         I.EMP_JOB_TITLE_CODE,
                                         I.EMP_JOIN_DT,
                                         I.EMP_LOCN_CODE);

   FOR J IN C_EARN(I.EMP_CODE) LOOP

   IF C_EARN_JAN%ISOPEN THEN
         CLOSE C_EARN_JAN;
   END IF;
   OPEN C_EARN_JAN(J.EARN_CODE,J.EMP_EARN_CODE);
   FETCH C_EARN_JAN INTO M_JAN_AMT;
   M_JAN_AMT:= ROUND(NVL(M_JAN_AMT,0),2);
   CLOSE C_EARN_JAN;

   IF C_EARN_FEB%ISOPEN THEN
         CLOSE C_EARN_FEB;
   END IF;
   OPEN C_EARN_FEB(J.EARN_CODE,J.EMP_EARN_CODE);
   FETCH C_EARN_FEB INTO M_FEB_AMT;
   M_FEB_AMT :=  ROUND(NVL(M_FEB_AMT,0),2);
   CLOSE C_EARN_FEB;

   IF C_EARN_MAR%ISOPEN THEN
         CLOSE C_EARN_MAR;
   END IF;
   OPEN C_EARN_MAR(J.EARN_CODE,J.EMP_EARN_CODE);
   FETCH C_EARN_MAR INTO M_MAR_AMT;
   M_MAR_AMT :=  ROUND(NVL(M_MAR_AMT,0),2);
   CLOSE C_EARN_MAR;

   IF C_EARN_APR%ISOPEN THEN
         CLOSE C_EARN_APR;
   END IF;
   OPEN C_EARN_APR(J.EARN_CODE,J.EMP_EARN_CODE);
   FETCH C_EARN_APR INTO M_APR_AMT;
   M_APR_AMT :=  ROUND(NVL(M_APR_AMT,0),2);
   CLOSE C_EARN_APR;

   IF C_EARN_MAY%ISOPEN THEN
         CLOSE C_EARN_MAY;
   END IF;
   OPEN C_EARN_MAY(J.EARN_CODE,J.EMP_EARN_CODE);
   FETCH C_EARN_MAY INTO M_MAY_AMT;
   M_MAY_AMT :=  ROUND(NVL(M_MAY_AMT,0),2);
   CLOSE C_EARN_MAY;

   IF C_EARN_JUN%ISOPEN THEN
         CLOSE C_EARN_JUN;
   END IF;
   OPEN C_EARN_JUN(J.EARN_CODE,J.EMP_EARN_CODE);
   FETCH C_EARN_JUN INTO M_JUN_AMT;
   M_JUN_AMT :=  ROUND(NVL(M_JUN_AMT,0),2);
   CLOSE C_EARN_JUN;


   IF C_EARN_JUL%ISOPEN THEN
         CLOSE C_EARN_JUL;
   END IF;
   OPEN C_EARN_JUL(J.EARN_CODE,J.EMP_EARN_CODE);
   FETCH C_EARN_JUL INTO M_JUL_AMT;
   M_JUL_AMT :=  ROUND(NVL(M_JUL_AMT,0),2);
   CLOSE C_EARN_JUL;


   IF C_EARN_AUG%ISOPEN THEN
         CLOSE C_EARN_AUG;
   END IF;
   OPEN C_EARN_AUG(J.EARN_CODE,J.EMP_EARN_CODE);
   FETCH C_EARN_AUG INTO M_AUG_AMT;
   M_AUG_AMT :=  ROUND(NVL(M_AUG_AMT,0),2);
   CLOSE C_EARN_AUG;

   IF C_EARN_SEP%ISOPEN THEN
         CLOSE C_EARN_SEP;
   END IF;
   OPEN C_EARN_SEP(J.EARN_CODE,J.EMP_EARN_CODE);
   FETCH C_EARN_SEP INTO M_SEP_AMT;
   M_SEP_AMT :=  ROUND(NVL(M_SEP_AMT,0),2);
   CLOSE C_EARN_SEP;

   IF C_EARN_OCT%ISOPEN THEN
         CLOSE C_EARN_OCT;
   END IF;
   OPEN C_EARN_OCT(J.EARN_CODE,J.EMP_EARN_CODE);
   FETCH C_EARN_OCT INTO M_OCT_AMT;
   M_OCT_AMT :=  ROUND(NVL(M_OCT_AMT,0),2);
   CLOSE C_EARN_OCT;


   IF C_EARN_NOV%ISOPEN THEN
         CLOSE C_EARN_NOV;
   END IF;
   OPEN C_EARN_NOV(J.EARN_CODE,J.EMP_EARN_CODE);
   FETCH C_EARN_NOV INTO M_NOV_AMT;
   M_NOV_AMT :=  ROUND(NVL(M_NOV_AMT,0),2);
   CLOSE C_EARN_NOV;

   IF C_EARN_DEC%ISOPEN THEN
         CLOSE C_EARN_DEC;
   END IF;
   OPEN C_EARN_DEC(J.EARN_CODE,J.EMP_EARN_CODE);
   FETCH C_EARN_DEC INTO M_DEC_AMT;
   M_DEC_AMT :=  ROUND(NVL(M_DEC_AMT,0),2);
   CLOSE C_EARN_DEC;


   IF C_TOT_SUM%ISOPEN THEN
         CLOSE C_TOT_SUM;
   END IF;
   OPEN C_TOT_SUM(J.EARN_CODE,J.EMP_EARN_CODE);
   FETCH C_TOT_SUM INTO M_TOT_AMT;
   M_TOT_AMT:= ROUND(NVL(M_TOT_AMT,0),2);
   CLOSE C_TOT_SUM;


   IF C1_PER%ISOPEN THEN
        CLOSE C1_PER;
    END IF;
    OPEN  C1_PER(J.EARN_CODE,J.EMP_EARN_CODE);
    FETCH C1_PER INTO M_COUNT;
    CLOSE C1_PER;

    IF C2_PER%ISOPEN THEN
        CLOSE C2_PER;
    END IF;
    OPEN  C2_PER(J.EARN_CODE,J.EMP_EARN_CODE);
    FETCH C2_PER INTO M_PER_AMT;
    CLOSE C2_PER;
  M_PER_MTH_AVG := (M_PER_AMT/M_COUNT);
  M_PER_MTH_AVG:=  ROUND(NVL(M_PER_MTH_AVG,0),2);

  IF C1_MON%ISOPEN THEN
        CLOSE C1_MON;
    END IF;
    OPEN  C1_MON(J.EARN_CODE);
    FETCH C1_MON INTO M_MOM_NON_PER;
    CLOSE C1_MON;

    INSERT INTO PW_EARN_COST_ALLOCATION ( ECA_COMP_CODE,
                                          ECA_REP_KEY_NO,
                                          ECA_EMP_EARN_CODE,
                                          ECA_EARN_CODE,
                                          ECA_MOM_MON_PER,
                                          ECA_JAN_EARN,
                                          ECA_FEB_EARN,
                                          ECA_MAR_EARN,
                                          ECA_APR_EARN,
                                          ECA_MAY_EARN,
                                          ECA_JUN_EARN,
                                          ECA_JUL_EARN,
                                          ECA_AUG_EARN,
                                          ECA_SEP_EARN,
                                          ECA_OCT_EARN,
                                          ECA_NOV_EARN,
                                          ECA_DEC_EARN,
                                          ECA_TOT_EARN,
                                          ECA_PER_MON_AUG)
                                  VALUES( P_COMP_CODE,
                                          P_REP_KEY_NO,
                                          J.EMP_EARN_CODE,
                                          J.EARN_CODE,
                                          M_MOM_NON_PER,
                                          M_JAN_AMT,
                                          M_FEB_AMT,
                                          M_MAR_AMT,
                                          M_APR_AMT,
                                          M_MAY_AMT,
                                          M_JUN_AMT,
                                          M_JUL_AMT,
                                          M_AUG_AMT,
                                          M_SEP_AMT,
                                          M_OCT_AMT,
                                          M_NOV_AMT,
                                          M_DEC_AMT,
                                          M_TOT_AMT,
                                          M_PER_MTH_AVG);



   END LOOP;

   FOR K IN C_DEDC(I.EMP_CODE) LOOP

   DELETE FROM PW_DEDC_COST_ALLOCATION WHERE DCA_REP_KEY_NO = P_REP_KEY_NO;

   IF C_DEDC_JAN%ISOPEN THEN
         CLOSE C_DEDC_JAN;
   END IF;
   OPEN C_DEDC_JAN(K.DEDC_CODE,K.EMP_DEDC_CODE);
   FETCH C_DEDC_JAN INTO M_JAN_AMT_DEDC;
   M_JAN_AMT_DEDC:= ROUND(NVL(M_JAN_AMT_DEDC,0),2);
   CLOSE C_DEDC_JAN;

   IF C_DEDC_FEB%ISOPEN THEN
         CLOSE C_DEDC_FEB;
   END IF;
   OPEN C_DEDC_FEB(K.DEDC_CODE,K.EMP_DEDC_CODE);
   FETCH C_DEDC_FEB INTO M_FEB_AMT_DEDC;
   M_FEB_AMT_DEDC :=  ROUND(NVL(M_FEB_AMT_DEDC,0),2);
   CLOSE C_DEDC_FEB;

   IF C_DEDC_MAR%ISOPEN THEN
         CLOSE C_DEDC_MAR;
   END IF;
   OPEN C_DEDC_MAR(K.DEDC_CODE,K.EMP_DEDC_CODE);
   FETCH C_DEDC_MAR INTO M_MAR_AMT_DEDC;
   M_MAR_AMT_DEDC :=  ROUND(NVL(M_MAR_AMT_DEDC,0),2);
   CLOSE C_DEDC_MAR;

   IF C_DEDC_APR%ISOPEN THEN
         CLOSE C_DEDC_APR;
   END IF;
   OPEN C_DEDC_APR(K.DEDC_CODE,K.EMP_DEDC_CODE);
   FETCH C_DEDC_APR INTO M_APR_AMT_DEDC;
   M_APR_AMT_DEDC :=  ROUND(NVL(M_APR_AMT_DEDC,0),2);
   CLOSE C_DEDC_APR;

   IF C_DEDC_MAY%ISOPEN THEN
         CLOSE C_DEDC_MAY;
   END IF;
   OPEN C_DEDC_MAY(K.DEDC_CODE,K.EMP_DEDC_CODE);
   FETCH C_DEDC_MAY INTO M_MAY_AMT_DEDC;
   M_MAY_AMT_DEDC :=  ROUND(NVL(M_MAY_AMT_DEDC,0),2);
   CLOSE C_DEDC_MAY;

   IF C_DEDC_JUN%ISOPEN THEN
         CLOSE C_DEDC_JUN;
   END IF;
   OPEN C_DEDC_JUN(K.DEDC_CODE,K.EMP_DEDC_CODE);
   FETCH C_DEDC_JUN INTO M_JUN_AMT_DEDC;
   M_JUN_AMT_DEDC :=  ROUND(NVL(M_JUN_AMT_DEDC,0),2);
   CLOSE C_DEDC_JUN;


   IF C_DEDC_JUL%ISOPEN THEN
         CLOSE C_DEDC_JUL;
   END IF;
   OPEN C_DEDC_JUL(K.DEDC_CODE,K.EMP_DEDC_CODE);
   FETCH C_DEDC_JUL INTO M_JUL_AMT_DEDC;
   M_JUL_AMT_DEDC :=  ROUND(NVL(M_JUL_AMT_DEDC,0),2);
   CLOSE C_DEDC_JUL;


   IF C_DEDC_AUG%ISOPEN THEN
         CLOSE C_DEDC_AUG;
   END IF;
   OPEN C_DEDC_AUG(K.DEDC_CODE,K.EMP_DEDC_CODE);
   FETCH C_DEDC_AUG INTO M_AUG_AMT_DEDC;
   M_AUG_AMT_DEDC :=  ROUND(NVL(M_AUG_AMT_DEDC,0),2);
   CLOSE C_DEDC_AUG;

   IF C_DEDC_SEP%ISOPEN THEN
         CLOSE C_DEDC_SEP;
   END IF;
   OPEN C_DEDC_SEP(K.DEDC_CODE,K.EMP_DEDC_CODE);
   FETCH C_DEDC_SEP INTO M_SEP_AMT_DEDC;
   M_SEP_AMT_DEDC :=  ROUND(NVL(M_SEP_AMT_DEDC,0),2);
   CLOSE C_DEDC_SEP;

   IF C_DEDC_OCT%ISOPEN THEN
         CLOSE C_DEDC_OCT;
   END IF;
   OPEN C_DEDC_OCT(K.DEDC_CODE,K.EMP_DEDC_CODE);
   FETCH C_DEDC_OCT INTO M_OCT_AMT_DEDC;
   M_OCT_AMT_DEDC :=  ROUND(NVL(M_OCT_AMT_DEDC,0),2);
   CLOSE C_DEDC_OCT;


   IF C_DEDC_NOV%ISOPEN THEN
         CLOSE C_DEDC_NOV;
   END IF;
   OPEN C_DEDC_NOV(K.DEDC_CODE,K.EMP_DEDC_CODE);
   FETCH C_DEDC_NOV INTO M_NOV_AMT_DEDC;
   M_NOV_AMT_DEDC :=  ROUND(NVL(M_NOV_AMT_DEDC,0),2);
   CLOSE C_DEDC_NOV;

   IF C_DEDC_DEC%ISOPEN THEN
         CLOSE C_DEDC_DEC;
   END IF;
   OPEN C_DEDC_DEC(K.DEDC_CODE,K.EMP_DEDC_CODE);
   FETCH C_DEDC_DEC INTO M_DEC_AMT_DEDC;
   M_DEC_AMT_DEDC :=  ROUND(NVL(M_DEC_AMT_DEDC,0),2);
   CLOSE C_DEDC_DEC;


   IF C_TOT_SUM%ISOPEN THEN
         CLOSE C_TOT_SUM;
   END IF;
   OPEN C_TOT_SUM(K.DEDC_CODE,K.EMP_DEDC_CODE);
   FETCH C_TOT_SUM INTO M_TOT_AMT;
   M_TOT_AMT:= ROUND(NVL(M_TOT_AMT,0),2);
   CLOSE C_TOT_SUM;


   IF C1_PER_DEDC%ISOPEN THEN
        CLOSE C1_PER_DEDC;
    END IF;
    OPEN  C1_PER_DEDC(K.DEDC_CODE,K.EMP_DEDC_CODE);
    FETCH C1_PER_DEDC INTO M_COUNT_DEDC;
    CLOSE C1_PER_DEDC;

    IF C2_PER_DEDC%ISOPEN THEN
        CLOSE C2_PER_DEDC;
    END IF;
    OPEN  C2_PER_DEDC(K.DEDC_CODE,K.EMP_DEDC_CODE);
    FETCH C2_PER_DEDC INTO M_PER_AMT_DEDC;
    CLOSE C2_PER_DEDC;
  M_PER_MTH_AVG_DEDC := (M_PER_AMT_DEDC/M_COUNT_DEDC);
  M_PER_MTH_AVG_DEDC:=  ROUND(NVL(M_PER_MTH_AVG_DEDC,0),2);

  IF C1_MON_DEDC%ISOPEN THEN
        CLOSE C1_MON_DEDC;
    END IF;
    OPEN  C1_MON_DEDC(K.DEDC_CODE);
    FETCH C1_MON_DEDC INTO M_MOM_PER_DEDC;
    CLOSE C1_MON_DEDC;

     INSERT INTO PW_DEDC_COST_ALLOCATION ( DCA_COMP_CODE,
                                          DCA_REP_KEY_NO,
                                          DCA_EMP_EARN_CODE,
                                          DCA_EARN_CODE,
                                          DCA_MOM_MON_PER,
                                          DCA_JAN_EARN,
                                          DCA_FEB_EARN,
                                          DCA_MAR_EARN,
                                          DCA_APR_EARN,
                                          DCA_MAY_EARN,
                                          DCA_JUN_EARN,
                                          DCA_JUL_EARN,
                                          DCA_AUG_EARN,
                                          DCA_SEP_EARN,
                                          DCA_OCT_EARN,
                                          DCA_NOV_EARN,
                                          DCA_DEC_EARN,
                                          DCA_TOT_EARN,
                                          DCA_PER_MON_AUG)
                                  VALUES( P_COMP_CODE,
                                          P_REP_KEY_NO,
                                          K.EMP_DEDC_CODE,
                                          K.DEDC_CODE,
                                          M_MOM_PER_DEDC,
                                          M_JAN_AMT_DEDC,
                                          M_FEB_AMT_DEDC,
                                          M_MAR_AMT_DEDC,
                                          M_APR_AMT_DEDC,
                                          M_MAY_AMT_DEDC,
                                          M_JUN_AMT_DEDC,
                                          M_JUL_AMT_DEDC,
                                          M_AUG_AMT_DEDC,
                                          M_SEP_AMT_DEDC,
                                          M_OCT_AMT_DEDC,
                                          M_NOV_AMT_DEDC,
                                          M_DEC_AMT_DEDC,
                                          M_TOT_AMT,
                                          M_PER_MTH_AVG_DEDC);


   END LOOP ;

   FOR M IN C_KIND(I.EMP_CODE) LOOP

   DELETE FROM PW_KIND_COST_ALLOCATION WHERE  kca_rep_key_no = P_REP_KEY_NO;

  IF C_KIND_JAN%ISOPEN THEN
         CLOSE C_KIND_JAN;
   END IF;
   OPEN C_KIND_JAN(M.KIND_CODE,M.EMP_KIND_CODE);
   FETCH C_KIND_JAN INTO M_JAN_AMT_KIND;
   M_JAN_AMT_KIND:= ROUND(NVL(M_JAN_AMT_KIND,0),2);
   CLOSE C_KIND_JAN;

   IF C_KIND_FEB%ISOPEN THEN
         CLOSE C_KIND_FEB;
   END IF;
   OPEN C_KIND_FEB(M.KIND_CODE,M.EMP_KIND_CODE);
   FETCH C_KIND_FEB INTO M_FEB_AMT_KIND;
   M_FEB_AMT_KIND :=  ROUND(NVL(M_FEB_AMT_KIND,0),2);
   CLOSE C_KIND_FEB;

   IF C_KIND_MAR%ISOPEN THEN
         CLOSE C_KIND_MAR;
   END IF;
   OPEN C_KIND_MAR(M.KIND_CODE,M.EMP_KIND_CODE);
   FETCH C_KIND_MAR INTO M_MAR_AMT_KIND;
   M_MAR_AMT_KIND :=  ROUND(NVL(M_MAR_AMT_KIND,0),2);
   CLOSE C_KIND_MAR;

   IF C_KIND_APR%ISOPEN THEN
         CLOSE C_KIND_APR;
   END IF;
   OPEN C_KIND_APR(M.KIND_CODE,M.EMP_KIND_CODE);
   FETCH C_KIND_APR INTO M_APR_AMT_KIND;
   M_APR_AMT_KIND :=  ROUND(NVL(M_APR_AMT_KIND,0),2);
   CLOSE C_KIND_APR;

   IF C_KIND_MAY%ISOPEN THEN
         CLOSE C_KIND_MAY;
   END IF;
   OPEN C_KIND_MAY(M.KIND_CODE,M.EMP_KIND_CODE);
   FETCH C_KIND_MAY INTO M_MAY_AMT_KIND;
   M_MAY_AMT_KIND :=  ROUND(NVL(M_MAY_AMT_KIND,0),2);
   CLOSE C_KIND_MAY;

   IF C_KIND_JUN%ISOPEN THEN
         CLOSE C_KIND_JUN;
   END IF;
   OPEN C_KIND_JUN(M.KIND_CODE,M.EMP_KIND_CODE);
   FETCH C_KIND_JUN INTO M_JUN_AMT_KIND;
   M_JUN_AMT_KIND :=  ROUND(NVL(M_JUN_AMT_KIND,0),2);
   CLOSE C_KIND_JUN;


   IF C_KIND_JUL%ISOPEN THEN
         CLOSE C_KIND_JUL;
   END IF;
   OPEN C_KIND_JUL(M.KIND_CODE,M.EMP_KIND_CODE);
   FETCH C_KIND_JUL INTO M_JUL_AMT_KIND;
   M_JUL_AMT_KIND :=  ROUND(NVL(M_JUL_AMT_KIND,0),2);
   CLOSE C_KIND_JUL;


   IF C_KIND_AUG%ISOPEN THEN
         CLOSE C_KIND_AUG;
   END IF;
   OPEN C_KIND_AUG(M.KIND_CODE,M.EMP_KIND_CODE);
   FETCH C_KIND_AUG INTO M_AUG_AMT_KIND;
   M_AUG_AMT_KIND :=  ROUND(NVL(M_AUG_AMT_KIND,0),2);
   CLOSE C_KIND_AUG;

   IF C_KIND_SEP%ISOPEN THEN
         CLOSE C_KIND_SEP;
   END IF;
   OPEN C_KIND_SEP(M.KIND_CODE,M.EMP_KIND_CODE);
   FETCH C_KIND_SEP INTO M_SEP_AMT_KIND;
   M_SEP_AMT_KIND :=  ROUND(NVL(M_SEP_AMT_KIND,0),2);
   CLOSE C_KIND_SEP;

   IF C_KIND_OCT%ISOPEN THEN
         CLOSE C_KIND_OCT;
   END IF;
   OPEN C_KIND_OCT(M.KIND_CODE,M.EMP_KIND_CODE);
   FETCH C_KIND_OCT INTO M_OCT_AMT_KIND;
   M_OCT_AMT_KIND :=  ROUND(NVL(M_OCT_AMT_KIND,0),2);
   CLOSE C_KIND_OCT;


   IF C_KIND_NOV%ISOPEN THEN
         CLOSE C_KIND_NOV;
   END IF;
   OPEN C_KIND_NOV(M.KIND_CODE,M.EMP_KIND_CODE);
   FETCH C_KIND_NOV INTO M_NOV_AMT_KIND;
   M_NOV_AMT_KIND :=  ROUND(NVL(M_NOV_AMT_KIND,0),2);
   CLOSE C_KIND_NOV;

   IF C_KIND_DEC%ISOPEN THEN
         CLOSE C_KIND_DEC;
   END IF;
   OPEN C_KIND_DEC(M.KIND_CODE,M.EMP_KIND_CODE);
   FETCH C_KIND_DEC INTO M_DEC_AMT_KIND;
   M_DEC_AMT_KIND :=  ROUND(NVL(M_DEC_AMT_KIND,0),2);
   CLOSE C_KIND_DEC;


   IF C_TOT_SUM%ISOPEN THEN
         CLOSE C_TOT_SUM;
   END IF;
   OPEN C_TOT_SUM(M.KIND_CODE,M.EMP_KIND_CODE);
   FETCH C_TOT_SUM INTO M_TOT_AMT;
   M_TOT_AMT:= ROUND(NVL(M_TOT_AMT,0),2);
   CLOSE C_TOT_SUM;


   IF C1_PER_KIND%ISOPEN THEN
        CLOSE C1_PER_KIND;
    END IF;
    OPEN  C1_PER_KIND(M.KIND_CODE,M.EMP_KIND_CODE);
    FETCH C1_PER_KIND INTO M_COUNT_KIND;
    CLOSE C1_PER_KIND;

    IF C2_PER_KIND%ISOPEN THEN
        CLOSE C2_PER_KIND;
    END IF;
    OPEN  C2_PER_KIND(M.KIND_CODE,M.EMP_KIND_CODE);
    FETCH C2_PER_KIND INTO M_PER_AMT_KIND;
    CLOSE C2_PER_KIND;
  M_PER_MTH_AVG_KIND := (M_PER_AMT_KIND/M_COUNT_KIND);
  M_PER_MTH_AVG_KIND:=  ROUND(NVL(M_PER_MTH_AVG_KIND,0),2);

  IF C1_MON_KIND%ISOPEN THEN
        CLOSE C1_MON_KIND;
    END IF;
    OPEN  C1_MON_KIND(M.KIND_CODE);
    FETCH C1_MON_KIND INTO M_MOM_PER_KIND;
    CLOSE C1_MON_KIND;

  INSERT INTO PW_KIND_COST_ALLOCATION ( KCA_COMP_CODE,
                                          KCA_REP_KEY_NO,
                                          KCA_EMP_EARN_CODE,
                                          KCA_EARN_CODE,
                                          KCA_MOM_MON_PER,
                                          KCA_JAN_EARN,
                                          KCA_FEB_EARN,
                                          KCA_MAR_EARN,
                                          KCA_APR_EARN,
                                          KCA_MAY_EARN,
                                          KCA_JUN_EARN,
                                          KCA_JUL_EARN,
                                          KCA_AUG_EARN,
                                          KCA_SEP_EARN,
                                          KCA_OCT_EARN,
                                          KCA_NOV_EARN,
                                          KCA_DEC_EARN,
                                          KCA_TOT_EARN,
                                          KCA_PER_MON_AUG)
                                  VALUES( P_COMP_CODE,
                                          P_REP_KEY_NO,
                                          M.EMP_KIND_CODE,
                                          M.KIND_CODE,
                                          M_MOM_PER_KIND,
                                          M_JAN_AMT_KIND,
                                          M_FEB_AMT_KIND,
                                          M_MAR_AMT_KIND,
                                          M_APR_AMT_KIND,
                                          M_MAY_AMT_KIND,
                                          M_JUN_AMT_KIND,
                                          M_JUL_AMT_KIND,
                                          M_AUG_AMT_KIND,
                                          M_SEP_AMT_KIND,
                                          M_OCT_AMT_KIND,
                                          M_NOV_AMT_KIND,
                                          M_DEC_AMT_KIND,
                                          M_TOT_AMT,
                                          M_PER_MTH_AVG_KIND);


   END LOOP;


   END LOOP;

END P_EMP_COST_ALLOCATION;

PROCEDURE P_BANK_ADVICE ( P_COMP_CODE IN VARCHAR2,
                          P_REP_KEY_NO IN NUMBER,
                          P_FM_EMP   IN VARCHAR2,
                          P_TO_EMP   IN VARCHAR2,
                          P_FM_DIVN IN VARCHAR2,
                          P_TO_DIVN IN VARCHAR2,
                          P_FM_DEPT IN VARCHAR2,
                          P_TO_DEPT IN VARCHAR2,
                          P_FM_LOCN IN VARCHAR2,
                          P_TO_LOCN IN VARCHAR2,
                          P_FM_CC   IN VARCHAR2,
                          P_TO_CC   IN VARCHAR2,
                          P_FM_TYPE IN VARCHAR2,
                          P_TO_TYPE IN VARCHAR2,
                          P_FM_COUNTRY IN VARCHAR2,
                          P_TO_COUNTRY IN VARCHAR2,
                          P_FM_BANK  IN VARCHAR2,
                          P_FM_DATE IN DATE) IS

MM_LANG_CODE VARCHAR2(240);

CURSOR C1 IS
      SELECT     BANKC_COMP_CODE "Q_1_COMP_CODE",
                DECODE(MM_LANG_CODE,'ENG',BANK_NAME, 'LANG_01', BANK_NAME_LANG_01, 'LANG_02', BANK_NAME_LANG_02, 'LANG_03', BANK_NAME_LANG_03, 'LANG_04', BANK_NAME_LANG_04, 'LANG_05', BANK_NAME_LANG_05, 'LANG_06', BANK_NAME_LANG_06, 'LANG_07', BANK_NAME_LANG_07, 'LANG_08', BANK_NAME_LANG_08, 'LANG_09', BANK_NAME_LANG_09, 'LANG_10', BANK_NAME_LANG_10,BANK_NAME) "Q_1_BANK_NAME",
    BANK_ADD1 "Q_1_BANK_ADD1",
    BANK_ADD2  "Q_1_BANK_ADD2",
    BANK_ADD3  "Q_1_BANK_ADD3",
    BANKC_CODE "Q_1_BANK_CODE",
    BANKC_ACNT_NO "Q_1_BANKC_ACNT"
from         PM_BANK  ,PM_BANK_COMP
WHERE BANKC_COMP_CODE = P_COMP_CODE
AND       BANKC_CODE             = BANK_CODE
AND  BANKC_CODE=P_FM_BANK    --Condition added by bhuvaneshwari for ALKHAMIS_INT-1912100
AND       NVL(BANKC_ACNT_NO,'0') != '0' ;

CURSOR C2 IS
      SELECT     B.BANKC_CODE "Q_2_COMP_BANK_CODE",
    B.BANKC_ACNT_NO "Q_2_COMP_BANK_ACNT_NO" ,
    DECODE(MM_LANG_CODE,'ENG',B.BANK_NAME, 'LANG_01', B.BANK_NAME_LANG_01, 'LANG_02', B.BANK_NAME_LANG_02, 'LANG_03', B.BANK_NAME_LANG_03, 'LANG_04', B.BANK_NAME_LANG_04, 'LANG_05', B.BANK_NAME_LANG_05, 'LANG_06', B.BANK_NAME_LANG_06, 'LANG_07', B.BANK_NAME_LANG_07, 'LANG_08', B.BANK_NAME_LANG_08, 'LANG_09', B.BANK_NAME_LANG_09, 'LANG_10', B.BANK_NAME_LANG_10,B.BANK_NAME) "Q_2_COMP_BANK_NAME",
    DECODE(MM_LANG_CODE,'ENG',B.BANK_SHORT_NAME, 'LANG_01', B.BANK_SHORT_NAME_LANG_01, 'LANG_02', B.BANK_SHORT_NAME_LANG_02, 'LANG_03', B.BANK_SHORT_NAME_LANG_03, 'LANG_04', B.BANK_SHORT_NAME_LANG_04, 'LANG_05', B.BANK_SHORT_NAME_LANG_05, 'LANG_06', B.BANK_SHORT_NAME_LANG_06, 'LANG_07', B.BANK_SHORT_NAME_LANG_07, 'LANG_08', B.BANK_SHORT_NAME_LANG_08, 'LANG_09', B.BANK_SHORT_NAME_LANG_09, 'LANG_10', B.BANK_SHORT_NAME_LANG_10,B.BANK_SHORT_NAME) "Q_2_COMP_BANK_SHORT_NAME",
    B.BANK_ADD1 "Q_2_COMP_BANK_ADD_1",
    B.BANK_ADD2 "Q_2_COMP_BANK_ADD_2",
    B.BANK_ADD3 "Q_2_COMP_BANK_ADD_3",
    EMPY_BANK_CODE "Q_2_EMPY_BANK_CODE",
    EMPY_BANK_REMARKS "Q_2_EMPY_BANK_REMARKS",
    EMPY_CODE "Q_2_EMPY_CODE",
    DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06, 'LANG_07', EMP_NAME_LANG_07, 'LANG_08', EMP_NAME_LANG_08, 'LANG_09', EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10,EMP_NAME)  "Q_2_EMP_NAME",
    DECODE(MM_LANG_CODE,'ENG',A.BANK_NAME, 'LANG_01', A.BANK_NAME_LANG_01, 'LANG_02', A.BANK_NAME_LANG_02, 'LANG_03', A.BANK_NAME_LANG_03, 'LANG_04', A.BANK_NAME_LANG_04, 'LANG_05', A.BANK_NAME_LANG_05, 'LANG_06', A.BANK_NAME_LANG_06, 'LANG_07', A.BANK_NAME_LANG_07, 'LANG_08', A.BANK_NAME_LANG_08, 'LANG_09', A.BANK_NAME_LANG_09, 'LANG_10', A.BANK_NAME_LANG_10,A.BANK_NAME)        "Q_2_EMP_BANK_NAME",
    DECODE(MM_LANG_CODE,'ENG',A.BANK_SHORT_NAME, 'LANG_01', A.BANK_SHORT_NAME_LANG_01, 'LANG_02', A.BANK_SHORT_NAME_LANG_02, 'LANG_03', A.BANK_SHORT_NAME_LANG_03, 'LANG_04', A.BANK_SHORT_NAME_LANG_04, 'LANG_05', A.BANK_SHORT_NAME_LANG_05, 'LANG_06', A.BANK_SHORT_NAME_LANG_06, 'LANG_07', A.BANK_SHORT_NAME_LANG_07, 'LANG_08', A.BANK_SHORT_NAME_LANG_08, 'LANG_09', A.BANK_SHORT_NAME_LANG_09, 'LANG_10', A.BANK_SHORT_NAME_LANG_10,A.BANK_SHORT_NAME)     "Q_2_EMP_BANK_SHORT_NAME",
    A.BANK_ADD1 "Q_2_EMP_BANK_ADD_1",
    A.BANK_ADD2 "Q_2_EMP_BANK_ADD_2",
    A.BANK_ADD3 "Q_2_EMP_BANK_ADD_3",
    FP_CURR_CODE "Q_2_EMP_CURR_CODE",
    SUM(DECODE(ALLW_EARN_DEDUC, 'E', NVL(FP_FC_AMOUNT,0),    ((-1)*NVL(FP_FC_AMOUNT,0)))) "Q_2_FP_FC_AMOUNT"
FROM      PS_FINAL_PROC,
                      PM_BANK_COMP A,
                      PM_BANK_COMP B,
                      PM_BANK A,
                      PM_BANK B,
                      PM_EMP_KEY,
                      PM_EMP_PAY,
                      PM_ALLOWANCE
WHERE      FP_COMP_CODE = P_COMP_CODE
AND     EMP_COMP_CODE = FP_COMP_CODE
AND       EMPY_COMP_CODE = FP_COMP_CODE
AND    A.BANKC_COMP_CODE = FP_COMP_CODE
AND     A.BANKC_COMP_CODE = B.BANKC_COMP_CODE
AND     EMP_CODE = EMPY_CODE
AND            EMPY_PAY_MODE = 'B'
AND            B.BANKC_CODE      = B.BANK_CODE
AND            B.BANKC_CODE      = P_FM_BANK
AND    EMPY_BANK_CODE = A.BANK_CODE
AND    EMPY_COMP_BANK_CODE= B.BANKC_CODE
AND    EMPY_BANK_CODE        = FP_BANK_CODE
AND    EMPY_BANK_CODE        = A.BANKC_CODE
AND    EMP_CODE          = FP_EMP_CODE
AND            ALLW_CODE        = FP_ALLW_CODE
AND        EMP_STATUS NOT IN (4, 5, 6) /*added by shaibu on 10/10/2005 for fixing the issue id JAMOMAN-88901. Employees who has terminated or  made EOS should not be displayed */
AND            FP_PROC_MTH    = To_Number(To_Char(TO_DATE(P_FM_DATE,'DD/MM/RRRR'),'YYYYMM'))
AND    FP_EMP_CODE BETWEEN  P_FM_EMP  AND        P_TO_EMP
AND       FP_CONT_TYPE_CODE BETWEEN P_FM_TYPE AND P_TO_TYPE
AND    FP_DIVN_CODE BETWEEN P_FM_DIVN AND       P_TO_DIVN
AND            FP_DEPT_CODE BETWEEN P_FM_DEPT AND       P_TO_DEPT
AND            FP_LOCN_CODE BETWEEN P_FM_LOCN AND       P_TO_LOCN
AND        FP_CC_CODE BETWEEN P_FM_CC AND       P_TO_CC
AND        NVL(FP_CNTRY_CODE,P_FM_COUNTRY)    BETWEEN  P_FM_COUNTRY     AND       P_TO_COUNTRY
--having clause added by shaibu on 11/02/2006 for fixing the issue id ORIONQC-GDC-814988
HAVING     SUM(DECODE(ALLW_EARN_DEDUC, 'E', NVL(FP_FC_AMOUNT,0), ((-1)*NVL(FP_FC_AMOUNT,0)))) > 0
GROUP BY
    B.BANKC_CODE ,
    B.BANKC_ACNT_NO  ,
    DECODE(MM_LANG_CODE,'ENG',B.BANK_NAME, 'LANG_01', B.BANK_NAME_LANG_01, 'LANG_02', B.BANK_NAME_LANG_02, 'LANG_03', B.BANK_NAME_LANG_03, 'LANG_04', B.BANK_NAME_LANG_04, 'LANG_05', B.BANK_NAME_LANG_05, 'LANG_06', B.BANK_NAME_LANG_06, 'LANG_07', B.BANK_NAME_LANG_07, 'LANG_08', B.BANK_NAME_LANG_08, 'LANG_09', B.BANK_NAME_LANG_09, 'LANG_10', B.BANK_NAME_LANG_10,B.BANK_NAME),
    DECODE(MM_LANG_CODE,'ENG',B.BANK_SHORT_NAME, 'LANG_01', B.BANK_SHORT_NAME_LANG_01, 'LANG_02', B.BANK_SHORT_NAME_LANG_02, 'LANG_03', B.BANK_SHORT_NAME_LANG_03, 'LANG_04', B.BANK_SHORT_NAME_LANG_04, 'LANG_05', B.BANK_SHORT_NAME_LANG_05, 'LANG_06', B.BANK_SHORT_NAME_LANG_06, 'LANG_07', B.BANK_SHORT_NAME_LANG_07, 'LANG_08', B.BANK_SHORT_NAME_LANG_08, 'LANG_09', B.BANK_SHORT_NAME_LANG_09, 'LANG_10', B.BANK_SHORT_NAME_LANG_10,B.BANK_SHORT_NAME),
     B.BANK_ADD1 ,
    B.BANK_ADD2 ,
    B.BANK_ADD3 ,
    EMPY_BANK_CODE ,
    EMPY_BANK_REMARKS ,
    EMPY_CODE ,
     DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06, 'LANG_07', EMP_NAME_LANG_07, 'LANG_08', EMP_NAME_LANG_08, 'LANG_09', EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10,EMP_NAME),
    DECODE(MM_LANG_CODE,'ENG',A.BANK_NAME, 'LANG_01', A.BANK_NAME_LANG_01, 'LANG_02', A.BANK_NAME_LANG_02, 'LANG_03', A.BANK_NAME_LANG_03, 'LANG_04', A.BANK_NAME_LANG_04, 'LANG_05', A.BANK_NAME_LANG_05, 'LANG_06', A.BANK_NAME_LANG_06, 'LANG_07', A.BANK_NAME_LANG_07, 'LANG_08', A.BANK_NAME_LANG_08, 'LANG_09', A.BANK_NAME_LANG_09, 'LANG_10', A.BANK_NAME_LANG_10,A.BANK_NAME),
   DECODE(MM_LANG_CODE,'ENG',A.BANK_SHORT_NAME, 'LANG_01', A.BANK_SHORT_NAME_LANG_01, 'LANG_02', A.BANK_SHORT_NAME_LANG_02, 'LANG_03', A.BANK_SHORT_NAME_LANG_03, 'LANG_04', A.BANK_SHORT_NAME_LANG_04, 'LANG_05', A.BANK_SHORT_NAME_LANG_05, 'LANG_06', A.BANK_SHORT_NAME_LANG_06, 'LANG_07', A.BANK_SHORT_NAME_LANG_07, 'LANG_08', A.BANK_SHORT_NAME_LANG_08, 'LANG_09', A.BANK_SHORT_NAME_LANG_09, 'LANG_10', A.BANK_SHORT_NAME_LANG_10,A.BANK_SHORT_NAME),
    A.BANK_ADD1 ,
    A.BANK_ADD2,
    A.BANK_ADD3,
    FP_CURR_CODE
ORDER BY EMPY_CODE;


CURSOR C_REP_VAL_3 IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;




BEGIN
   DELETE FROM PW_BANK_ADVICE WHERE BA_REP_KEY_NO = P_REP_KEY_NO;

    DELETE FROM OW_REP_COLS WHERE REP_KEY_NO = P_REP_KEY_NO;

   MM_LANG_CODE := NULL;

   IF C_REP_VAL_3%ISOPEN THEN
       CLOSE C_REP_VAL_3;
    END IF;

    OPEN C_REP_VAL_3;
    FETCH C_REP_VAL_3 INTO MM_LANG_CODE;
    CLOSE C_REP_VAL_3;

     INSERT INTO OW_REP_COLS
(REP_SYS_ID, REP_NAME, COL_TYPE, COL_NAME, COL_TAB_NAME, COL_LEVEL, COL_LINK_LEVEL, COL_LINK, LINK_COLUMN_YN, COL_SEQ, SUB_WHERE_COND, SUB_TAB_NAME, SUB_RET_NAME, COL_LABEL_NAME, COL_ORDER_YN, COL_ORDER_SEQ, COL_FORMAT_MASK, COL_WIDTH, COL_ORDER_ASC_DESC, COL_MATRIX_TYPE, COL_FORMULA, COL_FOR_DATA_TYPE, REP_TYPE_FLAG, REP_USER_ID, COL_DISP_YN, REP_COL_SYS_ID, COL_ALIGN, COL_CASE, REP_COL_CR_UID, REP_COL_CR_DT, REP_COL_UPD_UID, REP_COL_UPD_DT, COL_LABEL_BL_NAME, COL_FORMULA_YN, COL_EXPORT_WIDTH, COL_EXPORT_WRAP_YN, SUB_CLIENT_ID, SUB_INST_CODE, SUB_SECURITY_CODE, REP_CLIENT_ID, REP_INST_CODE, REP_SECURITY_CODE, LINK_CLIENT_ID, LINK_INST_CODE, LINK_SECURITY_CODE, COL_CLIENT_ID, COL_INST_CODE, COL_SECURITY_CODE, CURR_FORMAT_YN_NUM, CURR_FORMAT_LC_FC, CURR_COL_NAME, REP_KEY_NO,COL_LABEL_NAME_LANG_01,COL_LABEL_NAME_LANG_02,COL_LABEL_NAME_LANG_03,COL_LABEL_NAME_LANG_04,COL_LABEL_NAME_LANG_05,COL_LABEL_NAME_LANG_06,COL_LABEL_NAME_LANG_07,COL_LABEL_NAME_LANG_08,COL_LABEL_NAME_LANG_09,COL_LABEL_NAME_LANG_10)
SELECT REP_SYS_ID, REP_NAME, COL_TYPE, COL_NAME, COL_TAB_NAME, COL_LEVEL, COL_LINK_LEVEL, COL_LINK, LINK_COLUMN_YN, COL_SEQ, SUB_WHERE_COND, SUB_TAB_NAME, SUB_RET_NAME, COL_LABEL_NAME, COL_ORDER_YN, COL_ORDER_SEQ, COL_FORMAT_MASK, COL_WIDTH, COL_ORDER_ASC_DESC, COL_MATRIX_TYPE, COL_FORMULA, COL_FOR_DATA_TYPE, REP_TYPE_FLAG, REP_USER_ID, COL_DISP_YN, REP_COL_SYS_ID, COL_ALIGN, COL_CASE, REP_COL_CR_UID, REP_COL_CR_DT, REP_COL_UPD_UID, REP_COL_UPD_DT, COL_LABEL_BL_NAME, COL_FORMULA_YN, COL_EXPORT_WIDTH, COL_EXPORT_WRAP_YN, SUB_CLIENT_ID, SUB_INST_CODE, SUB_SECURITY_CODE, C.REP_CLIENT_ID, C.REP_INST_CODE, C.REP_SECURITY_CODE, LINK_CLIENT_ID, LINK_INST_CODE, LINK_SECURITY_CODE, COL_CLIENT_ID, COL_INST_CODE, COL_SECURITY_CODE, CURR_FORMAT_YN_NUM, CURR_FORMAT_LC_FC, CURR_COL_NAME, P_REP_KEY_NO,COL_LABEL_NAME_LANG_01,COL_LABEL_NAME_LANG_02,COL_LABEL_NAME_LANG_03,COL_LABEL_NAME_LANG_04,COL_LABEL_NAME_LANG_05,COL_LABEL_NAME_LANG_06,COL_LABEL_NAME_LANG_07,COL_LABEL_NAME_LANG_08,COL_LABEL_NAME_LANG_09,COL_LABEL_NAME_LANG_10 FROM REP_COLS C, IP_REP_INFO WHERE REP_SYS_ID = REP_ID AND  REP_KEY_NO = P_REP_KEY_NO;


FOR I IN C1 LOOP

FOR J IN C2 LOOP

 INSERT INTO PW_BANK_ADVICE  ( BA_COMP_CODE,
                                  BA_REP_KEY_NO,
                                  BA_BANK_NAME,
                                  BA_BANK_ADD1,
                                  BA_BANK_ADD2,
                                  BA_BANK_ADD3,
                                  BA_BANK_CODE,
                                  BA_BANK_NO,
                                  BA_COMP_BANK_CODE,
                                  BA_COMP_BANK_NO,
                                  BA_COMP_BANK_NAME,
                                  BA_COMP_BANK_SHORT_NAME,
                                  BA_COMP_BANK_ADD1,
                                  BA_COMP_BANK_ADD2,
                                  BA_COMP_BANK_ADD3,
                                  BA_EMPY_BANK_CODE,
                                  BA_EMPY_BANK_REMARKS,
                                  BA_EMP_CODE,
                                  BA_EMP_NAME,
                                  BA_EMP_BANK_NAME,
                                  BA_EMP_BANK_SHORT_NAME,
                                  BA_EMP_BANK_ADD1,
                                  BA_EMP_BANK_ADD2,
                                  BA_EMP_BANK_ADD3,
                                  BA_EMP_CURR_CODE,
                                  BA_FC_AMOUNT,
                                  BA_DATE)
                         VALUES ( P_COMP_CODE,
                                  P_REP_KEY_NO,
                                  I.Q_1_BANK_NAME,
                                  I.Q_1_BANK_ADD1,
                                  I.Q_1_BANK_ADD2,
                                  I.Q_1_BANK_ADD3,
                                  I.Q_1_BANK_CODE,
                                  I.Q_1_BANKC_ACNT,
                                  J.Q_2_COMP_BANK_CODE,
                                  J.Q_2_COMP_BANK_ACNT_NO,
                                  J.Q_2_COMP_BANK_NAME,
                                  J.Q_2_COMP_BANK_SHORT_NAME,
                                  J.Q_2_COMP_BANK_ADD_1,
                                  J.Q_2_COMP_BANK_ADD_2,
                                  J.Q_2_COMP_BANK_ADD_3,
                                  J.Q_2_EMPY_BANK_CODE,
                                  J.Q_2_EMPY_BANK_REMARKS,
                                  J.Q_2_EMPY_CODE,
                                  J.Q_2_EMP_NAME,
                                  J.Q_2_EMP_BANK_NAME,
                                  J.Q_2_EMP_BANK_SHORT_NAME,
                                  J.Q_2_EMP_BANK_ADD_1,
                                  J.Q_2_EMP_BANK_ADD_2,
                                  J.Q_2_EMP_BANK_ADD_3,
                                  J.Q_2_EMP_CURR_CODE,
                                  J.Q_2_FP_FC_AMOUNT,
                                  SYSDATE);

END LOOP;

END LOOP;

END P_BANK_ADVICE;

PROCEDURE P_TRAINING_COMPLETION ( P_COMP_CODE  IN VARCHAR2,
                                  P_REP_KEY_NO IN NUMBER,
                                  P_FM_DATE    IN DATE,
                                  P_TO_DATE    IN DATE,
                                  P_STATUS     IN VARCHAR2) IS

CURSOR C1 IS
      SELECT TCD_TYPE_CODE  Q_1_TCD_TYPE_CODE,
               TCD_CODE       Q_1_TCD_CODE,
               TCD_FROM_DT    Q_1_TCD_FROM_DT,
               TCD_TO_DT      Q_1_TCD_TO_DT,
               TCD_BATCH_NO   Q_1_TCD_BATCH_NO,
               TCD_TRAINER_CODE   Q_1_TCD_TRAINER_CODE,
                TCD_VENUE    Q_1_TCD_VENUE,
               TCD_CURR_CODE  Q_1_TCD_CURR_CODE,
               TCD_FC_AMOUNT  Q_1_TCD_FC_AMOUNT
      FROM   PT_TRAIN_CALENDAR_HEAD, PT_TRAIN_CALENDAR_DETAIL
      WHERE  TCH_COMP_CODE        = P_COMP_CODE
      AND       TCH_SYS_ID           = TCD_TCH_SYS_ID
      AND       (TCH_FROM_DT BETWEEN P_FM_DATE AND  P_TO_DATE
      OR      TCH_TO_DT   BETWEEN P_FM_DATE AND  P_TO_DATE )
      AND    NVL(TCD_COMPLETE_YN,'N') = P_STATUS
      ORDER BY TCD_CODE;
BEGIN

DELETE FROM PW_TRAINING_COMPLETION WHERE TC_REP_KEY_NO = P_REP_KEY_NO;

   FOR I IN C1 LOOP

      INSERT INTO PW_TRAINING_COMPLETION ( TC_COMP_CODE,
                                           TC_REP_KEY_NO,
                                           TC_TYPE_CODE,
                                           TC_CODE,
                                           TC_FROM_DT,
                                           TC_TO_DT,
                                           TC_BATCH_NO,
                                           TC_TRAINER_CODE,
                                           TC_VENUE,
                                           TC_CURR_CODE,
                                           TC_FC_AMOUNT)
                                  VALUES ( P_COMP_CODE,
                                           P_REP_KEY_NO,
                                           I.Q_1_TCD_TYPE_CODE,
                                           I.Q_1_TCD_CODE,
                                           I.Q_1_TCD_FROM_DT,
                                           I.Q_1_TCD_TO_DT,
                                           I.Q_1_TCD_BATCH_NO,
                                           I.Q_1_TCD_TRAINER_CODE,
                                           I.Q_1_TCD_VENUE,
                                           I.Q_1_TCD_CURR_CODE,
                                           I.Q_1_TCD_FC_AMOUNT);

   END LOOP;

END P_TRAINING_COMPLETION;

PROCEDURE P_EMP_ATTENDED_TRAININGS ( P_COMP_CODE  IN VARCHAR2,
                                     P_REP_KEY_NO IN NUMBER,
                                     P_FM_TRAIN   IN VARCHAR2,
                                     P_TO_TRAIN   IN VARCHAR2,
                                     P_FM_DIVN    IN VARCHAR2,
                                     P_TO_DIVN    IN VARCHAR2,
                                     P_FM_DEPT    IN VARCHAR2,
                                     P_TO_DEPT    IN VARCHAR2,
                                     P_FM_DATE    IN DATE,
                                     P_TO_DATE    IN DATE,
                                     P_STATUS     IN VARCHAR2) IS

MM_LANG_CODE VARCHAR2(240);

CURSOR C1 IS
SELECT EMP_CODE  "Q_1_EMP_CODE",
       DECODE(MM_LANG_CODE,'ENG',EMP_NAME, 'LANG_01', EMP_NAME_LANG_01, 'LANG_02', EMP_NAME_LANG_02, 'LANG_03', EMP_NAME_LANG_03, 'LANG_04', EMP_NAME_LANG_04, 'LANG_05', EMP_NAME_LANG_05, 'LANG_06', EMP_NAME_LANG_06, 'LANG_07', EMP_NAME_LANG_07, 'LANG_08', EMP_NAME_LANG_08, 'LANG_09', EMP_NAME_LANG_09, 'LANG_10', EMP_NAME_LANG_10,EMP_NAME) "Q_1_EMP_NAME",
         EMP_PERSONAL_GRADE   "Q_1_PERSONAL_GRADE"
FROM     PM_EMP_KEY, PT_TRAIN_NOMIN_HEAD, PT_TRAIN_NOMIN_DETAIL
WHERE  EMP_COMP_CODE = TNH_COMP_CODE
AND    EMP_COMP_CODE = P_COMP_CODE
AND    TNH_CODE BETWEEN P_FM_TRAIN AND P_TO_TRAIN
AND    EMP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
AND    EMP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
AND       (TNH_FROM_DT BETWEEN P_FM_DATE AND  P_TO_DATE
OR      TNH_TO_DT   BETWEEN P_FM_DATE AND  P_TO_DATE )
AND     NVL(TND_DROP_CHANGE,'N') = P_STATUS;

CURSOR C_REP_VAL_3 IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;



BEGIN
DELETE FROM PW_EMP_ATTENDED_TRAININGS WHERE EAT_REP_KEY_NO = P_REP_KEy_NO;

    MM_LANG_CODE := NULL;

IF C_REP_VAL_3%ISOPEN THEN
       CLOSE C_REP_VAL_3;
    END IF;

    OPEN C_REP_VAL_3;
    FETCH C_REP_VAL_3 INTO MM_LANG_CODE;
    CLOSE C_REP_VAL_3;


   FOR I IN C1 LOOP

       INSERT INTO PW_EMP_ATTENDED_TRAININGS ( EAT_COMP_CODE,
                                               EAT_REP_KEY_NO,
                                               EAT_EMP_CODE,
                                               EAT_EMP_NAME,
                                               EAT_PERSONAL_GRADE)
                                      VALUES ( P_COMP_CODE,
                                               P_REP_KEY_NO,
                                               I.Q_1_EMP_CODE,
                                               I.Q_1_EMP_NAME,
                                               I.Q_1_PERSONAL_GRADE);
   END LOOP;
END P_EMP_ATTENDED_TRAININGS;

PROCEDURE P_TRAINING_EMP_EVALUATION ( P_COMP_CODE  IN VARCHAR2,
                                      P_REP_KEY_NO IN NUMBER,
                                      P_FM_TRAIN   IN VARCHAR2,
                                      P_TO_TRAIN   IN VARCHAR2,
                                      P_FM_DIVN    IN VARCHAR2,
                                      P_TO_DIVN    IN VARCHAR2,
                                      P_FM_DEPT    IN VARCHAR2,
                                      P_TO_DEPT    IN VARCHAR2,
                                      P_FM_DATE    IN DATE,
                                      P_TO_DATE    IN DATE,
                                      P_STATUS     IN VARCHAR2) IS

                                      MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;
CURSOR C1 IS
SELECT DISTINCT EMP_CODE  "Q_1_EMP_CODE",
      DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10)
 "Q_1_EMP_NAME",
         EMP_PERSONAL_GRADE   "Q_1_PERSONAL_GRADE"
FROM     PM_EMP_KEY, PT_TRAIN_EVALTN_HEAD
WHERE  EMP_COMP_CODE = TNEH_COMP_CODE
AND    EMP_COMP_CODE = P_COMP_CODE
AND    TNEH_CODE BETWEEN P_FM_TRAIN AND P_TO_TRAIN
AND    EMP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
AND    EMP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
AND       (TNEH_FROM_DT BETWEEN P_FM_DATE AND  P_TO_DATE
OR      TNEH_TO_DT   BETWEEN P_FM_DATE AND  P_TO_DATE )
AND     NVL(TNEH_RETRAIN_YN,'N') = P_STATUS;

BEGIN

DELETE FROM PW_TRAINING_EMP_EVALUATION WHERE TEE_REP_KEY_NO = P_REP_KEY_NO;


    MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;


   FOR I IN C1 LOOP

       INSERT INTO PW_TRAINING_EMP_EVALUATION ( TEE_COMP_CODE,
                                                TEE_REP_KEY_NO,
                                                TEE_EMP_CODE,
                                                TEE_EMP_NAME,
                                                TEE_PERSONAL_GRADE)
                                       VALUES ( P_COMP_CODE,
                                                P_REP_KEY_NO,
                                                I.Q_1_EMP_CODE,
                                                I.Q_1_EMP_NAME,
                                                I.Q_1_PERSONAL_GRADE);
   END LOOP;
END P_TRAINING_EMP_EVALUATION;

PROCEDURE P_OVERTIME_REPORT_FOR_EMP ( P_COMP_CODE  IN VARCHAR2,
                                      P_REP_KEY_NO IN NUMBER,
                                      P_FM_DIVN    IN VARCHAR2,
                                      P_TO_DIVN    IN VARCHAR2,
                                      P_FM_DEPT    IN VARCHAR2,
                                      P_TO_DEPT    IN VARCHAR2,
                                      P_FM_LOCN    IN VARCHAR2,
                                      P_TO_LOCN    IN VARCHAR2,
                                      P_FM_DATE    IN DATE,
                                      P_TO_DATE    IN DATE,
                                      P_FM_EMP     IN VARCHAR2,
                                      P_TO_EMP     IN VARCHAR2,
                                      P_FM_GRADE   IN VARCHAR2,
                                      P_TO_GRADE   IN VARCHAR2,
                                      P_FM_OT      IN VARCHAR2,
                                      P_TO_OT      IN VARCHAR2,
                                      P_STATUS     IN VARCHAR2) IS

                                      MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

CURSOR C1 IS
SELECT NVL(NVL(OTH_DIVN_CODE,OTD_DIVN_CODE),EMP_DIVN_CODE) ||'-'|| DECODE(MM_LANG_CODE, 'ENG',DIVN_SHORT_NAME ,'LANG_01',DIVN_SHORT_NAME_LANG_01,'LANG_02',DIVN_SHORT_NAME_LANG_02,'LANG_03',DIVN_SHORT_NAME_LANG_03,'LANG_04',DIVN_SHORT_NAME_LANG_04,'LANG_05',DIVN_SHORT_NAME_LANG_05,'LANG_06',DIVN_SHORT_NAME_LANG_06,'LANG_07',DIVN_SHORT_NAME_LANG_07,'LANG_08',DIVN_SHORT_NAME_LANG_08,'LANG_09',DIVN_SHORT_NAME_LANG_09,'LANG_10',DIVN_SHORT_NAME_LANG_10) DIVN,
       NVL(NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),EMP_DEPT_CODE) ||'-'|| DECODE(MM_LANG_CODE, 'ENG',DEPT_SHORT_NAME ,'LANG_01',DEPT_SHORT_NAME_LANG_01,'LANG_02',DEPT_SHORT_NAME_LANG_02,'LANG_03',DEPT_SHORT_NAME_LANG_03,'LANG_04',DEPT_SHORT_NAME_LANG_04,'LANG_05',DEPT_SHORT_NAME_LANG_05,'LANG_06',DEPT_SHORT_NAME_LANG_06,'LANG_07',DEPT_SHORT_NAME_LANG_07,'LANG_08',DEPT_SHORT_NAME_LANG_08,'LANG_09',DEPT_SHORT_NAME_LANG_09,'LANG_10',DEPT_SHORT_NAME_LANG_10) DEPT,
       OTP_EMP_CODE,
       DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) EMP_NAME,
       DECODE(EMP_STATUS,'1','Probation Period','2','Confirmed','3','Temporary') EMP_STATUS,
       --OT_CODE ||'-'|| OT_SHORT_DESC OT_DESC,
       OT_CODE ||'-'|| DECODE(MM_LANG_CODE,'ENG',OT_SHORT_DESC, 'LANG_01', OT_SHORT_DESC_LANG_01, 'LANG_02', OT_SHORT_DESC_LANG_02,
'LANG_03', OT_SHORT_DESC_LANG_03, 'LANG_04', OT_SHORT_DESC_LANG_04, 'LANG_05', OT_SHORT_DESC_LANG_05, 'LANG_06',
OT_SHORT_DESC_LANG_06, 'LANG_07', OT_SHORT_DESC_LANG_07, 'LANG_08', OT_SHORT_DESC_LANG_08, 'LANG_09', OT_SHORT_DESC_LANG_09,
'LANG_10', OT_SHORT_DESC_LANG_10,OT_SHORT_DESC) OT_DESC,
       OTP_OT_SLAB_CODE,
                   OTS_ALLW_CODE,
       NVL(OTP_OT_HRS,0) NORMAL_OT_HRS,
       NVL(OTS_OT_RATE,0) HOURLY_RATE,
       --NVL(FP_LC_AMOUNT,0) NORMAL_TOT_AMT_HRS,
                   0 NORMAL_TOT_AMT_HRS,
       DECODE(NVL(OTH_APPR_UID,'*'),'*','Unapproved','Approved') OTH_APPR_STATUS,
                  OTP_DATE
FROM         PM_EMP_KEY,
       PM_OVERTIME,
       PM_OVERTIME_SLABS,
       PT_OVERTIME_HEAD,
       PT_OVERTIME_DETAIL,
       PT_OVERTIME_PROCESS,
          FM_DIVISION,
       FM_DEPARTMENT
WHERE  OTH_COMP_CODE  =P_COMP_CODE
AND    OTH_COMP_CODE  = EMP_COMP_CODE
AND    OTP_COMP_CODE  = OTH_COMP_CODE
AND    EMP_COMP_CODE  = DIVN_COMP_CODE
AND    EMP_COMP_CODE  = DEPT_COMP_CODE
AND    EMP_DIVN_CODE  = NVL(NVL(OTH_DIVN_CODE,OTD_DIVN_CODE) ,EMP_DIVN_CODE)
AND    EMP_DEPT_CODE  = NVL(NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),EMP_DEPT_CODE)
AND    EMP_DIVN_CODE  = DIVN_CODE
AND    DEPT_DIVN_CODE = DIVN_CODE
AND    EMP_DEPT_CODE  = DEPT_CODE
AND    OTP_OTH_SYS_ID = OTH_SYS_ID
AND    OTD_OTH_SYS_ID = OTH_SYS_ID
AND    OTP_EMP_CODE   = EMP_CODE
AND    OT_CODE           = OTP_OT_CODE
AND    OT_CODE          = OTS_CODE
AND    OTS_CODE          = OTP_OT_CODE
AND    OTS_OT_SLAB_CODE = OTP_OT_SLAB_CODE
AND    NVL(EMP_PROC_STATUS,'0') IN ('0','1','2') -- ADDED BY ASHIK ON 10/JUN/2012 FOR THE ISSUE JBF-720911
AND    NVL(NVL(OTH_DIVN_CODE,OTD_DIVN_CODE),EMP_DIVN_CODE) BETWEEN  P_FM_DIVN AND P_TO_DIVN
AND    NVL(NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),EMP_DEPT_CODE) BETWEEN  P_FM_DEPT AND P_TO_DEPT
AND    EMP_LOCN_CODE BETWEEN  P_FM_LOCN AND P_TO_LOCN
AND    OTP_EMP_CODE  BETWEEN  P_FM_EMP  AND P_TO_EMP
AND    EMP_PERSONAL_GRADE BETWEEN  P_FM_GRADE  AND P_TO_GRADE
AND    OTP_OT_CODE   BETWEEN  P_FM_OT      AND P_TO_OT
AND    OTH_APPR_UID  IS NOT NULL
AND    OTH_APPR_DT     IS NOT NULL
AND    P_STATUS  = 'Approved'
AND  OTP_DATE BETWEEN  P_FM_DATE          AND P_TO_DATE -- ADDED BY ASHIK FOR SMC-335650 ON  30/09/2009
GROUP BY NVL(OTH_DIVN_CODE,OTD_DIVN_CODE),
           NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),
         OTP_EMP_CODE,
         DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10),
         EMP_STATUS,
         OT_CODE,
         DECODE(MM_LANG_CODE,'ENG',OT_SHORT_DESC, 'LANG_01', OT_SHORT_DESC_LANG_01, 'LANG_02', OT_SHORT_DESC_LANG_02,
'LANG_03', OT_SHORT_DESC_LANG_03, 'LANG_04', OT_SHORT_DESC_LANG_04, 'LANG_05', OT_SHORT_DESC_LANG_05, 'LANG_06',
OT_SHORT_DESC_LANG_06, 'LANG_07', OT_SHORT_DESC_LANG_07, 'LANG_08', OT_SHORT_DESC_LANG_08, 'LANG_09', OT_SHORT_DESC_LANG_09,
'LANG_10', OT_SHORT_DESC_LANG_10,OT_SHORT_DESC),
         OTP_OT_SLAB_CODE,
                                 OTS_ALLW_CODE,
         OTP_OT_HRS,
         OTS_OT_RATE,
         --FP_LC_AMOUNT,
         OT_RATE_2,
         OTH_APPR_UID,
         DECODE(MM_LANG_CODE, 'ENG',DIVN_SHORT_NAME ,'LANG_01',DIVN_SHORT_NAME_LANG_01,'LANG_02',DIVN_SHORT_NAME_LANG_02,'LANG_03',DIVN_SHORT_NAME_LANG_03,'LANG_04',DIVN_SHORT_NAME_LANG_04,'LANG_05',DIVN_SHORT_NAME_LANG_05,'LANG_06',DIVN_SHORT_NAME_LANG_06,'LANG_07',DIVN_SHORT_NAME_LANG_07,'LANG_08',DIVN_SHORT_NAME_LANG_08,'LANG_09',DIVN_SHORT_NAME_LANG_09,'LANG_10',DIVN_SHORT_NAME_LANG_10),
         DECODE(MM_LANG_CODE, 'ENG',DEPT_SHORT_NAME ,'LANG_01',DEPT_SHORT_NAME_LANG_01,'LANG_02',DEPT_SHORT_NAME_LANG_02,'LANG_03',DEPT_SHORT_NAME_LANG_03,'LANG_04',DEPT_SHORT_NAME_LANG_04,'LANG_05',DEPT_SHORT_NAME_LANG_05,'LANG_06',DEPT_SHORT_NAME_LANG_06,'LANG_07',DEPT_SHORT_NAME_LANG_07,'LANG_08',DEPT_SHORT_NAME_LANG_08,'LANG_09',DEPT_SHORT_NAME_LANG_09,'LANG_10',DEPT_SHORT_NAME_LANG_10),
                                 EMP_DIVN_CODE,
                                 EMP_DEPT_CODE,
OTP_DATE
UNION ALL
SELECT NVL(NVL(OTH_DIVN_CODE,OTD_DIVN_CODE),EMP_DIVN_CODE) ||'-'|| DECODE(MM_LANG_CODE, 'ENG',DIVN_SHORT_NAME ,'LANG_01',DIVN_SHORT_NAME_LANG_01,'LANG_02',DIVN_SHORT_NAME_LANG_02,'LANG_03',DIVN_SHORT_NAME_LANG_03,'LANG_04',DIVN_SHORT_NAME_LANG_04,'LANG_05',DIVN_SHORT_NAME_LANG_05,'LANG_06',DIVN_SHORT_NAME_LANG_06,'LANG_07',DIVN_SHORT_NAME_LANG_07,'LANG_08',DIVN_SHORT_NAME_LANG_08,'LANG_09',DIVN_SHORT_NAME_LANG_09,'LANG_10',DIVN_SHORT_NAME_LANG_10) DIVN,
       NVL(NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),EMP_DEPT_CODE) ||'-'|| DECODE(MM_LANG_CODE, 'ENG',DEPT_SHORT_NAME ,'LANG_01',DEPT_SHORT_NAME_LANG_01,'LANG_02',DEPT_SHORT_NAME_LANG_02,'LANG_03',DEPT_SHORT_NAME_LANG_03,'LANG_04',DEPT_SHORT_NAME_LANG_04,'LANG_05',DEPT_SHORT_NAME_LANG_05,'LANG_06',DEPT_SHORT_NAME_LANG_06,'LANG_07',DEPT_SHORT_NAME_LANG_07,'LANG_08',DEPT_SHORT_NAME_LANG_08,'LANG_09',DEPT_SHORT_NAME_LANG_09,'LANG_10',DEPT_SHORT_NAME_LANG_10) DEPT,
       OTP_EMP_CODE,
       DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) EMP_NAME,
       DECODE(EMP_STATUS,'1','Probation Period','2','Confirmed','3','Temporary') EMP_STATUS,
       --OT_CODE ||'-'|| OT_SHORT_DESC OT_DESC,
       OT_CODE ||'-'|| DECODE(MM_LANG_CODE,'ENG',OT_SHORT_DESC, 'LANG_01', OT_SHORT_DESC_LANG_01, 'LANG_02', OT_SHORT_DESC_LANG_02,
'LANG_03', OT_SHORT_DESC_LANG_03, 'LANG_04', OT_SHORT_DESC_LANG_04, 'LANG_05', OT_SHORT_DESC_LANG_05, 'LANG_06',
OT_SHORT_DESC_LANG_06, 'LANG_07', OT_SHORT_DESC_LANG_07, 'LANG_08', OT_SHORT_DESC_LANG_08, 'LANG_09', OT_SHORT_DESC_LANG_09,
'LANG_10', OT_SHORT_DESC_LANG_10,OT_SHORT_DESC) OT_DESC,
       OTP_OT_SLAB_CODE,
                   OTS_ALLW_CODE,
       NVL(OTP_OT_HRS,0) NORMAL_OT_HRS,
       NVL(OTS_OT_RATE,0) HOURLY_RATE,
                   --NVL(FP_LC_AMOUNT,0) NORMAL_TOT_AMT_HRS,
                  0 NORMAL_TOT_AMT_HRS,
       DECODE(NVL(OTH_APPR_UID,'*'),'*','Unapproved','Approved') OTH_APPR_STATUS,
OTP_DATE
FROM   PM_EMP_KEY,
       PM_OVERTIME,
       PM_OVERTIME_SLABS,
       PT_OVERTIME_HEAD,
       PT_OVERTIME_DETAIL,
       PT_OVERTIME_PROCESS,
          FM_DIVISION,
       FM_DEPARTMENT
--       PS_FINAL_PROC
WHERE  OTH_COMP_CODE  =P_COMP_CODE
AND    OTH_COMP_CODE  = EMP_COMP_CODE
AND    OTP_COMP_CODE  = OTH_COMP_CODE
AND    EMP_COMP_CODE  = DIVN_COMP_CODE
AND    EMP_COMP_CODE  = DEPT_COMP_CODE
--AND    EMP_COMP_CODE = FP_COMP_CODE
AND    EMP_DIVN_CODE  = NVL(NVL(OTH_DIVN_CODE,OTD_DIVN_CODE) ,EMP_DIVN_CODE)
AND    EMP_DEPT_CODE  = NVL(NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),EMP_DEPT_CODE)
AND    EMP_DIVN_CODE  = DIVN_CODE
AND    DEPT_DIVN_CODE = DIVN_CODE
AND    EMP_DEPT_CODE  = DEPT_CODE
AND    OTP_OTH_SYS_ID = OTH_SYS_ID
AND    OTD_OTH_SYS_ID = OTH_SYS_ID
AND    OTP_EMP_CODE   = EMP_CODE
--AND    EMP_CODE = FP_EMP_CODE
AND    OT_CODE           = OTP_OT_CODE
--AND    OTS_ALLW_CODE = FP_ALLW_CODE
AND    OT_CODE          = OTS_CODE
AND    OTS_CODE          = OTP_OT_CODE
AND    OTS_OT_SLAB_CODE = OTP_OT_SLAB_CODE
--AND    EMP_STATUS     IN ('1','2','3') -- COMMENTED BY ASHIK FOR THE ISSUE AWAL-368036 ON 23/FEB/2010
--AND    NVL(EMP_PROC_STATUS,'0') IN ('1','2')
AND    NVL(EMP_PROC_STATUS,'0') IN ('0','1','2') --- ADDED BY ASHIK ON 10/JUN/2012 FOR THE ISSUE JBF-720911
AND    NVL(NVL(OTH_DIVN_CODE,OTD_DIVN_CODE),EMP_DIVN_CODE) BETWEEN  P_FM_DIVN AND P_TO_DIVN
AND    NVL(NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),EMP_DEPT_CODE) BETWEEN  P_FM_DEPT AND P_TO_DEPT
AND    EMP_LOCN_CODE BETWEEN  P_FM_LOCN AND P_TO_LOCN
--AND    TO_DATE(TO_CHAR(FP_PROC_MTH),'YYYYMM')     BETWEEN  P_FM_DATE          AND P_TO_DATE
AND    OTP_EMP_CODE  BETWEEN  P_FM_EMP  AND P_TO_EMP
AND    EMP_PERSONAL_GRADE BETWEEN  P_FM_GRADE  AND P_TO_GRADE
AND    OTP_OT_CODE   BETWEEN  P_FM_OT      AND P_TO_OT
AND    OTH_APPR_UID  IS NULL
AND    OTH_APPR_DT     IS NULL
AND  OTP_DATE BETWEEN  P_FM_DATE AND P_TO_DATE -- ADDED BY ASHIK FOR SMC-335650 ON  30/09/2009
AND    P_STATUS  = 'Unapproved'
GROUP BY NVL(OTH_DIVN_CODE,OTD_DIVN_CODE),
           NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),
         OTP_EMP_CODE,
         DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10),
         EMP_STATUS,
         OT_CODE,
         DECODE(MM_LANG_CODE,'ENG',OT_SHORT_DESC, 'LANG_01', OT_SHORT_DESC_LANG_01, 'LANG_02', OT_SHORT_DESC_LANG_02,
'LANG_03', OT_SHORT_DESC_LANG_03, 'LANG_04', OT_SHORT_DESC_LANG_04, 'LANG_05', OT_SHORT_DESC_LANG_05, 'LANG_06',
OT_SHORT_DESC_LANG_06, 'LANG_07', OT_SHORT_DESC_LANG_07, 'LANG_08', OT_SHORT_DESC_LANG_08, 'LANG_09', OT_SHORT_DESC_LANG_09,
'LANG_10', OT_SHORT_DESC_LANG_10,OT_SHORT_DESC),
         OTP_OT_SLAB_CODE,
                                 OTS_ALLW_CODE,
         OTP_OT_HRS,
         OTS_OT_RATE,
                                 --FP_LC_AMOUNT,
         OT_RATE_2,
         OTH_APPR_UID,
         DECODE(MM_LANG_CODE, 'ENG',DIVN_SHORT_NAME ,'LANG_01',DIVN_SHORT_NAME_LANG_01,'LANG_02',DIVN_SHORT_NAME_LANG_02,'LANG_03',DIVN_SHORT_NAME_LANG_03,'LANG_04',DIVN_SHORT_NAME_LANG_04,'LANG_05',DIVN_SHORT_NAME_LANG_05,'LANG_06',DIVN_SHORT_NAME_LANG_06,'LANG_07',DIVN_SHORT_NAME_LANG_07,'LANG_08',DIVN_SHORT_NAME_LANG_08,'LANG_09',DIVN_SHORT_NAME_LANG_09,'LANG_10',DIVN_SHORT_NAME_LANG_10),
         DECODE(MM_LANG_CODE, 'ENG',DEPT_SHORT_NAME ,'LANG_01',DEPT_SHORT_NAME_LANG_01,'LANG_02',DEPT_SHORT_NAME_LANG_02,'LANG_03',DEPT_SHORT_NAME_LANG_03,'LANG_04',DEPT_SHORT_NAME_LANG_04,'LANG_05',DEPT_SHORT_NAME_LANG_05,'LANG_06',DEPT_SHORT_NAME_LANG_06,'LANG_07',DEPT_SHORT_NAME_LANG_07,'LANG_08',DEPT_SHORT_NAME_LANG_08,'LANG_09',DEPT_SHORT_NAME_LANG_09,'LANG_10',DEPT_SHORT_NAME_LANG_10),
                                 EMP_DIVN_CODE,
                                 EMP_DEPT_CODE,
OTP_DATE
UNION ALL
SELECT NVL(NVL(OTH_DIVN_CODE,OTD_DIVN_CODE),EMP_DIVN_CODE) ||'-'|| DECODE(MM_LANG_CODE, 'ENG',DIVN_SHORT_NAME ,'LANG_01',DIVN_SHORT_NAME_LANG_01,'LANG_02',DIVN_SHORT_NAME_LANG_02,'LANG_03',DIVN_SHORT_NAME_LANG_03,'LANG_04',DIVN_SHORT_NAME_LANG_04,'LANG_05',DIVN_SHORT_NAME_LANG_05,'LANG_06',DIVN_SHORT_NAME_LANG_06,'LANG_07',DIVN_SHORT_NAME_LANG_07,'LANG_08',DIVN_SHORT_NAME_LANG_08,'LANG_09',DIVN_SHORT_NAME_LANG_09,'LANG_10',DIVN_SHORT_NAME_LANG_10) DIVN,
       NVL(NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),EMP_DEPT_CODE) ||'-'|| DECODE(MM_LANG_CODE, 'ENG',DEPT_SHORT_NAME ,'LANG_01',DEPT_SHORT_NAME_LANG_01,'LANG_02',DEPT_SHORT_NAME_LANG_02,'LANG_03',DEPT_SHORT_NAME_LANG_03,'LANG_04',DEPT_SHORT_NAME_LANG_04,'LANG_05',DEPT_SHORT_NAME_LANG_05,'LANG_06',DEPT_SHORT_NAME_LANG_06,'LANG_07',DEPT_SHORT_NAME_LANG_07,'LANG_08',DEPT_SHORT_NAME_LANG_08,'LANG_09',DEPT_SHORT_NAME_LANG_09,'LANG_10',DEPT_SHORT_NAME_LANG_10) DEPT,
       OTP_EMP_CODE,
       DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) EMP_NAME,
       DECODE(EMP_STATUS,'1','Probation Period','2','Confirmed','3','Temporary') EMP_STATUS,
       --OT_CODE ||'-'|| OT_SHORT_DESC OT_DESC,
       OT_CODE ||'-'|| DECODE(MM_LANG_CODE,'ENG',OT_SHORT_DESC, 'LANG_01', OT_SHORT_DESC_LANG_01, 'LANG_02', OT_SHORT_DESC_LANG_02,
'LANG_03', OT_SHORT_DESC_LANG_03, 'LANG_04', OT_SHORT_DESC_LANG_04, 'LANG_05', OT_SHORT_DESC_LANG_05, 'LANG_06',
OT_SHORT_DESC_LANG_06, 'LANG_07', OT_SHORT_DESC_LANG_07, 'LANG_08', OT_SHORT_DESC_LANG_08, 'LANG_09', OT_SHORT_DESC_LANG_09,
'LANG_10', OT_SHORT_DESC_LANG_10,OT_SHORT_DESC) OT_DESC,
       OTP_OT_SLAB_CODE,
                   OTS_ALLW_CODE,
       NVL(OTP_OT_HRS,0) NORMAL_OT_HRS,
       NVL(OTS_OT_RATE,0) HOURLY_RATE,
                   --NVL(FP_LC_AMOUNT,0) NORMAL_TOT_AMT_HRS,
                    0 NORMAL_TOT_AMT_HRS,
       DECODE(NVL(OTH_APPR_UID,'*'),'*','Unapproved','Approved') OTH_APPR_STATUS,
OTP_DATE
FROM   PM_EMP_KEY,
       PM_OVERTIME,
       PM_OVERTIME_SLABS,
       PT_OVERTIME_HEAD,
       PT_OVERTIME_DETAIL,
       PT_OVERTIME_PROCESS,
          FM_DIVISION,
       FM_DEPARTMENT
--       PS_FINAL_PROC
WHERE  OTH_COMP_CODE  =P_COMP_CODE
AND    OTH_COMP_CODE  = EMP_COMP_CODE
AND    OTP_COMP_CODE  = OTH_COMP_CODE
AND    EMP_COMP_CODE  = DIVN_COMP_CODE
AND    EMP_COMP_CODE  = DEPT_COMP_CODE
--AND    EMP_COMP_CODE = FP_COMP_CODE
AND    EMP_DIVN_CODE  = NVL(NVL(OTH_DIVN_CODE,OTD_DIVN_CODE) ,EMP_DIVN_CODE)
AND    EMP_DEPT_CODE  = NVL(NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),EMP_DEPT_CODE)
AND    EMP_DIVN_CODE  = DIVN_CODE
AND    DEPT_DIVN_CODE = DIVN_CODE
AND    EMP_DEPT_CODE  = DEPT_CODE
AND    OTP_OTH_SYS_ID = OTH_SYS_ID
AND    OTD_OTH_SYS_ID = OTH_SYS_ID
AND    OTP_EMP_CODE   = EMP_CODE
--AND    EMP_CODE = FP_EMP_CODE
AND    OT_CODE           = OTP_OT_CODE
--AND    OTS_ALLW_CODE = FP_ALLW_CODE
AND    OT_CODE          = OTS_CODE
AND    OTS_CODE          = OTP_OT_CODE
AND    OTS_OT_SLAB_CODE = OTP_OT_SLAB_CODE
--AND    EMP_STATUS     IN ('1','2','3') -- COMMENTED BY ASHIK FOR THE ISSUE AWAL-368036 ON 23/FEB/2010
--AND    NVL(EMP_PROC_STATUS,'0') IN ('1','2')
AND    NVL(EMP_PROC_STATUS,'0') IN ('0','1','2') -- ADDED BY ASHIK ON 10/JUN/2012 FOR THE ISSUE JBF-720911
AND    NVL(NVL(OTH_DIVN_CODE,OTD_DIVN_CODE),EMP_DIVN_CODE) BETWEEN  P_FM_DIVN AND P_TO_DIVN
AND    NVL(NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),EMP_DEPT_CODE) BETWEEN  P_FM_DEPT AND P_TO_DEPT
AND    EMP_LOCN_CODE BETWEEN  P_FM_LOCN AND P_TO_LOCN
--AND    TO_DATE(TO_CHAR(FP_PROC_MTH),'YYYYMM')     BETWEEN  P_FM_DATE          AND P_TO_DATE
AND    OTP_EMP_CODE  BETWEEN  P_FM_EMP  AND P_TO_EMP
AND    EMP_PERSONAL_GRADE BETWEEN  P_FM_GRADE  AND P_TO_GRADE
AND    OTP_OT_CODE   BETWEEN  P_FM_OT      AND P_TO_OT
AND    P_STATUS  = 'All'
AND  OTP_DATE BETWEEN  P_FM_DATE AND P_TO_DATE -- ADDED BY ASHIK FOR SMC-335650 ON  30/09/2009
GROUP BY NVL(OTH_DIVN_CODE,OTD_DIVN_CODE),
           NVL(OTH_DEPT_CODE,OTD_DEPT_CODE),
         OTP_EMP_CODE,
         DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10),
         EMP_STATUS,
         OT_CODE,
         DECODE(MM_LANG_CODE,'ENG',OT_SHORT_DESC, 'LANG_01', OT_SHORT_DESC_LANG_01, 'LANG_02', OT_SHORT_DESC_LANG_02,
'LANG_03', OT_SHORT_DESC_LANG_03, 'LANG_04', OT_SHORT_DESC_LANG_04, 'LANG_05', OT_SHORT_DESC_LANG_05, 'LANG_06',
OT_SHORT_DESC_LANG_06, 'LANG_07', OT_SHORT_DESC_LANG_07, 'LANG_08', OT_SHORT_DESC_LANG_08, 'LANG_09', OT_SHORT_DESC_LANG_09,
'LANG_10', OT_SHORT_DESC_LANG_10,OT_SHORT_DESC),
         OTP_OT_SLAB_CODE,
                                 OTS_ALLW_CODE,
         OTP_OT_HRS,
         OTS_OT_RATE,
--                                 FP_LC_AMOUNT,
         OT_RATE_2,
         OTH_APPR_UID,
         DECODE(MM_LANG_CODE, 'ENG',DIVN_SHORT_NAME ,'LANG_01',DIVN_SHORT_NAME_LANG_01,'LANG_02',DIVN_SHORT_NAME_LANG_02,'LANG_03',DIVN_SHORT_NAME_LANG_03,'LANG_04',DIVN_SHORT_NAME_LANG_04,'LANG_05',DIVN_SHORT_NAME_LANG_05,'LANG_06',DIVN_SHORT_NAME_LANG_06,'LANG_07',DIVN_SHORT_NAME_LANG_07,'LANG_08',DIVN_SHORT_NAME_LANG_08,'LANG_09',DIVN_SHORT_NAME_LANG_09,'LANG_10',DIVN_SHORT_NAME_LANG_10),
         DECODE(MM_LANG_CODE, 'ENG',DEPT_SHORT_NAME ,'LANG_01',DEPT_SHORT_NAME_LANG_01,'LANG_02',DEPT_SHORT_NAME_LANG_02,'LANG_03',DEPT_SHORT_NAME_LANG_03,'LANG_04',DEPT_SHORT_NAME_LANG_04,'LANG_05',DEPT_SHORT_NAME_LANG_05,'LANG_06',DEPT_SHORT_NAME_LANG_06,'LANG_07',DEPT_SHORT_NAME_LANG_07,'LANG_08',DEPT_SHORT_NAME_LANG_08,'LANG_09',DEPT_SHORT_NAME_LANG_09,'LANG_10',DEPT_SHORT_NAME_LANG_10),
                                 EMP_DIVN_CODE,
                                 EMP_DEPT_CODE,
OTP_DATE;

CURSOR C2(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2,P_DATE IN DATE) IS
SELECT NVL(FP_LC_AMOUNT,0)FROM PS_FINAL_PROC
    WHERE  FP_EMP_CODE = P_EMP_CODE
    AND    FP_ALLW_CODE = P_ALLW_CODE
    AND    FP_COMP_CODE =  P_COMP_CODE
    AND TO_CHAR(TO_DATE(TO_CHAR(FP_PROC_MTH),'YYYYMM'),'RRRRMM')=TO_CHAR(P_DATE,'RRRRMM');
M_AMT NUMBER;
BEGIN

DELETE FROM PW_OVERTIME_EMPLOYEE WHERE OPE_REP_KEY_NO = P_REP_KEY_NO;


    MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;

  FOR I IN C1 LOOP

     IF C2%ISOPEN THEN
          CLOSE C2;
     END IF;
     OPEN C2(I.OTP_EMP_CODE,I.OTS_ALLW_CODE,I.OTP_DATE);
     FETCH C2 INTO M_AMT;
     CLOSE C2;

     INSERT INTO PW_OVERTIME_EMPLOYEE( OPE_COMP_CODE,
                                       OPE_REP_KEY_NO,
                                       OPE_DIVN,
                                       OPE_DEPT,
                                       OPE_EMP_CODE,
                                       OPE_EMP_NAME,
                                       OPE_EMP_STATUS,
                                       OPE_OT_DESC,
                                       OPE_SLAB_CODE,
                                       OPE_ALLW_CODE,
                                       OPE_HRS,
                                       OPE_RATE,
                                       OPE_TOT_HRS,
                                       OPE_APPR_STATUS,
                                       OPE_DATE,
                                       OPE_AMONT)
                              VALUES ( P_COMP_CODE,
                                       P_REP_KEy_NO,
                                       I.DIVN,
                                       I.DEPT,
                                       I.OTP_EMP_CODE,
                                       I.EMP_NAME,
                                       I.EMP_STATUS,
                                       I.OT_DESC,
                                       I.OTP_OT_SLAB_CODE,
                                       I.OTS_ALLW_CODE,
                                       I.NORMAL_OT_HRS,
                                       I.HOURLY_RATE,
                                       I.NORMAL_TOT_AMT_HRS,
                                       I.OTH_APPR_STATUS,
                                       I.OTP_DATE,
                                       M_AMT);

  END LOOP;



END P_OVERTIME_REPORT_FOR_EMP;

PROCEDURE P_INTERVIEW_SCHEDULE ( P_COMP_CODE  IN VARCHAR2,
                                 P_REP_KEY_NO IN NUMBER,
                                 P_FM_DT      IN DATE,
                                 P_TO_DT      IN DATE,
                                 P_FM_JOB     IN VARCHAR2,
                                 P_TO_JOB     IN VARCHAR2) IS

CURSOR C1 IS
      SELECT CVJ_JOB_TITLE_CODE, CVH_NAME, CVH_OFF_ADD_1 || CVH_OFF_ADD_2 || CVH_OFF_ADD_3 ADDRESS,
    --TO_CHAR(INTS_DT,'DD/MM/RRRR') INTS_DT-- ALSHABAB_INT-1453409 not a valid month error-commented by viji
      INTS_DT ,TO_CHAR(INTS_TIME,'HH24:MI') INTS_TIME, INTS_PLACE, INTH_FLEXI_VAL1
      FROM   PT_CV_JOB_TITLES,PT_CV_HEAD,PT_INT_HEAD,PT_INT_SCHEDULE
      WHERE  CVJ_CVH_SYS_ID = CVH_SYS_ID
      AND    INTH_SYS_ID = INTS_INTH_SYS_ID
      AND    INTH_REF_NO = CVH_NO
      AND    INTH_DT BETWEEN P_FM_DT AND P_TO_DT
      AND    CVJ_JOB_TITLE_CODE IN ( SELECT JOB_TITLE_CODE FROM PM_JOB_TITLE
                                  WHERE JOB_TITLE_CODE BETWEEN P_FM_JOB AND P_TO_JOB);

CURSOR C2(P_CVJ_JOB_TITLE_CODE IN VARCHAR2) IS
      SELECT POSN_JOB_GRADE_CODE_FROM ,POSN_JOB_GRADE_CODE_TO
      FROM   PM_POSITION
      WHERE  POSN_JOB_TITLE_CODE = P_CVJ_JOB_TITLE_CODE;
M_GRADE_FROM VARCHAR2(12);
M_GRADE_TO VARCHAR2(12);

BEGIN

DELETE FROM PW_INTERVIEW_SCHEDULE WHERE IS_REP_KEY_NO = P_REP_KEY_NO;

FOR I IN C1 LOOP

IF C2%ISOPEN THEN
      CLOSE C2;
  END IF;
  OPEN C2(I.CVJ_JOB_TITLE_CODE);
  FETCH C2 INTO M_GRADE_FROM,M_GRADE_TO;
  --:CP_GRADE_CODE := M_GRADE_FROM || ' - ' ||M_GRADE_TO;
  CLOSE C2;
  --RETURN(:CP_GRADE_CODE);

   INSERT INTO  PW_INTERVIEW_SCHEDULE ( IS_COMP_CODE,
                                        IS_REP_KEY_NO,
                                        IS_JOB_TITLE_CODE,
                                        IS_CVH_NAME,
                                        IS_ADDRESS,
                                        IS_DATE,
                                        IS_TIME,
                                        IS_PLACE,
                                        IS_FLEXI_VAL1,
                                        IS_JOB_GRADE_CODE_FROM,
                                        IS_JOB_GRADE_CODE_TO)
                               VALUES ( P_COMP_CODE,
                                        P_REP_KEY_NO,
                                        I.CVJ_JOB_TITLE_CODE,
                                        I.CVH_NAME,
                                        I.ADDRESS,
                                        I.INTS_DT,
                                        I.INTS_TIME,
                                        I.INTS_PLACE,
                                        I.INTH_FLEXI_VAL1,
                                        M_GRADE_FROM,
                                        M_GRADE_TO);

END LOOP;


END P_INTERVIEW_SCHEDULE;

PROCEDURE P_PENDING_DOCUMENT_APPR ( P_COMP_CODE   IN VARCHAR2,
                                    P_REP_KEY_NO  IN NUMBER,
                                    P_FM_DT       IN DATE,
                                    P_TO_DT       IN DATE,
                                    P_FM_DOC_NO   IN VARCHAR2,   -- CHANGED BY PARTHA   ALKHAMIS_INT-1460012
                                    P_TO_DOC_NO   IN VARCHAR2,
                                    P_FM_DIVN     IN VARCHAR2,
                                    P_TO_DIVN     IN VARCHAR2,
                                    P_FM_DEPT     IN VARCHAR2,
                                    P_TO_DEPT     IN VARCHAR2,
                                    P_FM_LOCN     IN VARCHAR2,
                                    P_TO_LOCN     IN VARCHAR2,
                                    P_FM_CC       IN VARCHAR2,
                                    P_TO_CC       IN VARCHAR2,
                                    P_FM_CONTRACT IN VARCHAR2,
                                    P_TO_CONTRACT IN VARCHAR2,
                                    P_FM_EMP      IN VARCHAR2,
                                    P_TO_EMP      IN VARCHAR2) IS
                                    MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

CURSOR C1 IS
      SELECT EMP_CODE  Q_1_EMP_CODE,
            DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) Q_1_EMP_NAME,
               EMPD_DOCU_CODE   Q_1_DOC_CODE,
               EMPD_NUMBER  Q_1_DOC_NO,
               EMPD_ISS_PLACE  Q_1_ISS_PL,
               EMPD_ISS_DT Q_1_ISS_DT,
               EMPD_EXP_DT   Q_1_EXP_DT,
               EMPD_INIT_DAYS    Q_1_INIT_DAYS
      FROM     PM_EMP_KEY, PM_EMP_DOCUMENT
      WHERE  EMP_COMP_CODE    =  P_COMP_CODE
      AND       EMPD_COMP_CODE   = EMP_COMP_CODE
      AND       EMPD_CODE           = EMP_CODE
      AND       EMP_CODE BETWEEN P_FM_EMP AND P_TO_EMP
      AND       EMP_DIVN_CODE    BETWEEN P_FM_DIVN AND P_TO_DIVN
      AND       EMP_DEPT_CODE  BETWEEN P_FM_DEPT AND P_TO_DEPT
      AND       (EMPD_EXP_DT - EMPD_INIT_DAYS) BETWEEN P_FM_DT  AND P_TO_DT
      AND       EMP_LOCN_CODE BETWEEN P_FM_LOCN AND P_TO_LOCN
      AND       EMP_CC_CODE BETWEEN P_FM_CC AND P_TO_CC
      AND       EMP_CONT_TYPE_CODE BETWEEN P_FM_CONTRACT AND P_TO_CONTRACT
      AND       EMPD_DOCU_CODE BETWEEN P_FM_DOC_NO  AND P_TO_DOC_NO
      AND    EMP_STATUS IN ('1','2','3')  --Condition added by Rajasekaran on 18/08/2007 for DANA-174851
      ORDER BY EMPD_DOCU_CODE, EMP_CODE;


BEGIN

   DELETE FROM PW_PENDING_DOCUMENT_APPR WHERE PDP_REP_KEY_NO = P_REP_KEY_NO;

     MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;




   FOR I IN C1 LOOP

      INSERT INTO PW_PENDING_DOCUMENT_APPR ( PDP_COMP_CODE,
                                             PDP_REP_KEY_NO,
                                             PDP_EMP_CODE,
                                             PDP_EMP_NAME,
                                             PDP_DOCU_CODE,
                                             PDP_DOC_NO,
                                             PDP_PLACE,
                                             PDP_ISS_DT,
                                             PDP_EXP_DT,
                                             PDP_INIT_DAYS)
                                    VALUES ( P_COMP_CODE,
                                             P_REP_KEY_NO,
                                             I.Q_1_EMP_CODE,
                                             I.Q_1_EMP_NAME,
                                             I.Q_1_DOC_CODE,
                                             I.Q_1_DOC_NO,
                                             I.Q_1_ISS_PL,
                                             I.Q_1_ISS_DT,
                                             I.Q_1_EXP_DT,
                                             I.Q_1_INIT_DAYS);

   END LOOP;

END P_PENDING_DOCUMENT_APPR;

PROCEDURE P_AIR_PASSAGE_ENTITLEMENT( P_COMP_CODE   IN VARCHAR2,
                                     P_REP_KEY_NO  IN NUMBER,
                                     P_FM_DIVN     IN VARCHAR2,
                                     P_TO_DIVN     IN VARCHAR2,
                                     P_FM_DEPT     IN VARCHAR2,
                                     P_TO_DEPT     IN VARCHAR2,
                                     P_FM_LOCN     IN VARCHAR2,
                                     P_TO_LOCN     IN VARCHAR2,
                                     P_FM_EMP      IN VARCHAR2,
                                     P_TO_EMP      IN VARCHAR2,
                                     P_FM_GRADE    IN VARCHAR2,
                                     P_TO_GRADE    IN VARCHAR2,
                                     P_FM_EARN     IN VARCHAR2,
                                     P_TO_EARN     IN VARCHAR2) IS
                                     MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;


CURSOR C1 IS
      SELECT EMP_CODE EMP,DECODE(MM_LANG_CODE, 'ENG',EMP_SHORT_NAME ,'LANG_01',EMP_SHORT_NAME_LANG_01,'LANG_02',EMP_SHORT_NAME_LANG_02,'LANG_03',EMP_SHORT_NAME_LANG_03,'LANG_04',EMP_SHORT_NAME_LANG_04,'LANG_05',EMP_SHORT_NAME_LANG_05,'LANG_06',EMP_SHORT_NAME_LANG_06,'LANG_07',EMP_SHORT_NAME_LANG_07,'LANG_08',EMP_SHORT_NAME_LANG_08,'LANG_09',EMP_SHORT_NAME_LANG_09,'LANG_10',EMP_SHORT_NAME_LANG_10) EMP_SHORT_NAME, EMP_JOIN_DT  DOJ,
       EMP_DIVN_CODE||'-'||DECODE(MM_LANG_CODE, 'ENG',DIVN_NAME ,'LANG_01',DIVN_NAME_LANG_01,'LANG_02',DIVN_NAME_LANG_02,'LANG_03',DIVN_NAME_LANG_03,'LANG_04',DIVN_NAME_LANG_04,'LANG_05',DIVN_NAME_LANG_05,'LANG_06',DIVN_NAME_LANG_06,'LANG_07',DIVN_NAME_LANG_07,'LANG_08',DIVN_NAME_LANG_08,'LANG_09',DIVN_NAME_LANG_09,'LANG_10',DIVN_NAME_LANG_10) DIV ,EMP_DIVN_CODE,
       EMP_DEPT_CODE||'-'||DECODE(MM_LANG_CODE, 'ENG',DEPT_NAME ,'LANG_01',DEPT_NAME_LANG_01,'LANG_02',DEPT_NAME_LANG_02,'LANG_03',DEPT_NAME_LANG_03,'LANG_04',DEPT_NAME_LANG_04,'LANG_05',DEPT_NAME_LANG_05,'LANG_06',DEPT_NAME_LANG_06,'LANG_07',DEPT_NAME_LANG_07,'LANG_08',DEPT_NAME_LANG_08,'LANG_09',DEPT_NAME_LANG_09,'LANG_10',DEPT_NAME_LANG_10) DEPT,EMP_DEPT_CODE DEP,
       EMP_PERSONAL_GRADE||'-'||DECODE(MM_LANG_CODE, 'ENG',GRADE_SHORT_DESC ,'LANG_01',GRADE_SHORT_DESC_LANG_01,'LANG_02',GRADE_SHORT_DESC_LANG_02,'LANG_03',GRADE_SHORT_DESC_LANG_03,'LANG_04',GRADE_SHORT_DESC_LANG_04,'LANG_05',GRADE_SHORT_DESC_LANG_05,'LANG_06',GRADE_SHORT_DESC_LANG_06,'LANG_07',GRADE_SHORT_DESC_LANG_07,'LANG_08',GRADE_SHORT_DESC_LANG_08,'LANG_09',GRADE_SHORT_DESC_LANG_09,'LANG_10',GRADE_SHORT_DESC_LANG_10)  PER,
       DECODE(EMPL_TICKET_CLASS,'BC','Business Class','EC','Economy Class','FC','First Class') class,
         EMPL_PASS_CODE,EMPA_ALLW_CODE||'-'||ALLW_SHORT_DESC ALLW,
       EMPA_ALLW_CODE
FROM   PM_EMP_ALLOWANCE,PM_EMP_KEY,FM_DIVISION,FM_DEPARTMENT,PM_EMP_LEAVE,
             PM_ALLOWANCE,PM_LEAVE,PM_GRADE
WHERE  EMP_COMP_CODE= P_COMP_CODE
 AND   EMP_COMP_CODE=EMPA_COMP_CODE
 AND   EMP_COMP_CODE=DIVN_COMP_CODE
 AND EMP_COMP_CODE=DEPT_COMP_CODE
 AND EMP_COMP_CODE=EMPL_COMP_CODE
 AND EMP_DIVN_CODE=DIVN_CODE
 AND DEPT_DIVN_CODE=DIVN_CODE
 AND EMP_DEPT_CODE=DEPT_CODE
AND EMP_PERSONAL_GRADE=GRADE_CODE
 AND EMP_CODE=EMPA_CODE
 AND EMP_CODE=EMPL_CODE
 AND EMPA_ALLW_CODE=ALLW_CODE
 AND ALLW_EARN_DEDUC='E'
 AND ALLW_TYPE='5'
 --AND EMPA_ALLW_CODE IN (:P_TIKADL,:P_TIKCHL,:P_TIKINF)
 AND EMPL_LV_CATG_CODE= LV_CATG_CODE
 AND LV_TYPE_CODE='1'
 AND EMP_END_OF_SERVICE_DT IS NULL
 AND EMPA_EXCLUDE_FROM_DT IS NULL
 AND EMPA_EXCLUDE_UPTO_DT IS NULL
 AND EMP_CODE      BETWEEN P_FM_EMP  AND P_TO_EMP
 AND EMP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
 AND EMP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
 AND EMP_LOCN_CODE BETWEEN P_FM_LOCN AND P_TO_LOCN
 AND EMP_PERSONAL_GRADE  BETWEEN P_FM_GRADE AND P_TO_GRADE
 AND    EMPA_ALLW_CODE   BETWEEN P_FM_EARN AND P_TO_EARN
GROUP BY EMP_DIVN_CODE ,EMP_DEPT_CODE, EMP_PERSONAL_GRADE, GRADE_SHORT_DESC, EMP_CODE,
DEPT_NAME ,DEPT_NAME_LANG_01, DEPT_NAME_LANG_02, DEPT_NAME_LANG_03,DEPT_NAME_LANG_04, DEPT_NAME_LANG_05,
DEPT_NAME_LANG_06, DEPT_NAME_LANG_07, DEPT_NAME_LANG_08, DEPT_NAME_LANG_09, DEPT_NAME_LANG_10,
DIVN_NAME, DIVN_NAME_LANG_01, DIVN_NAME_LANG_02, DIVN_NAME_LANG_03, DIVN_NAME_LANG_04, DIVN_NAME_LANG_05,
DIVN_NAME_LANG_06, DIVN_NAME_LANG_07, DIVN_NAME_LANG_08, DIVN_NAME_LANG_09, DIVN_NAME_LANG_10,
EMP_SHORT_NAME, EMP_SHORT_NAME_LANG_01, EMP_SHORT_NAME_LANG_02, EMP_SHORT_NAME_LANG_03, EMP_SHORT_NAME_LANG_04,
EMP_SHORT_NAME_LANG_05, EMP_SHORT_NAME_LANG_06, EMP_SHORT_NAME_LANG_07, EMP_SHORT_NAME_LANG_08, EMP_SHORT_NAME_LANG_09,
EMP_SHORT_NAME_LANG_10, EMPL_TICKET_CLASS, EMPL_PASS_CODE,EMPA_ALLW_CODE,ALLW_SHORT_DESC,EMP_JOIN_DT,
GRADE_SHORT_DESC_LANG_01, GRADE_SHORT_DESC_LANG_02, GRADE_SHORT_DESC_LANG_03, GRADE_SHORT_DESC_LANG_04, GRADE_SHORT_DESC_LANG_05,
GRADE_SHORT_DESC_LANG_06, GRADE_SHORT_DESC_LANG_07, GRADE_SHORT_DESC_LANG_08, GRADE_SHORT_DESC_LANG_09,   GRADE_SHORT_DESC_LANG_10
               ORDER BY EMP_DIVN_CODE , EMP_DEPT_CODE,EMP_CODE,EMP_JOIN_DT;


HRA                   NUMBER;
ALLW_AMT             NUMBER;
M_ALLW_CODE     VARCHAR2(12);
HRA_PREC         NUMBER;
HRA_FLAG      VARCHAR2(1);
TOTAL       NUMBER := 0;
TOTAL_EARNINGS NUMBER:=0;

CURSOR C2(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
    SELECT        EMPA_CE
    FROM             PM_EMP_ALLOWANCE,PM_ALLOWANCE
    WHERE         EMPA_CODE      =P_EMP_CODE
    AND             EMPA_ALLW_CODE =ALLW_CODE
    AND                ALLW_EARN_DEDUC='E'
    AND             ALLW_TYPE      ='5'
    AND       EMPA_ALLW_CODE =P_ALLW_CODE
    --AND  EMPA_ALLW_CODE IN (:P_TIKADL,:P_TIKCHL,:P_TIKINF)
    AND             EMPA_COMP_CODE =P_COMP_CODE
    AND             TO_CHAR(EMPA_FROM_DT,'MMYYYY') = (SELECT MAX(TO_CHAR(EMPA_FROM_DT,'MMYYYY'))
                                                           FROM   PM_EMP_ALLOWANCE
                                                        WHERE  EMPA_COMP_CODE=P_COMP_CODE
                                                        AND    EMPA_CODE=P_EMP_CODE
                                                         --AND    EMPA_ALLW_CODE IN(:P_TIKADL,:P_TIKCHL,:P_TIKINF)
                                                         AND    SYSDATE BETWEEN  EMPA_FROM_DT AND EMPA_UPTO_DT);

CURSOR C3(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
    SELECT         NVL(EMPA_LC_AMOUNT,0)
    FROM             PM_EMP_ALLOWANCE,PM_ALLOWANCE
    WHERE         EMPA_CODE      =P_EMP_CODE
    AND             EMPA_ALLW_CODE =ALLW_CODE
    AND                ALLW_EARN_DEDUC='E'
    AND             ALLW_TYPE      ='5'
    AND       EMPA_ALLW_CODE =P_ALLW_CODE
--    AND  EMPA_ALLW_CODE IN (:P_TIKADL,:P_TIKCHL,:P_TIKINF)
    AND             EMPA_COMP_CODE =P_COMP_CODE
AND             TO_CHAR(EMPA_FROM_DT,'MMYYYY') = (SELECT MAX(TO_CHAR(EMPA_FROM_DT,'MMYYYY'))
                                                           FROM   PM_EMP_ALLOWANCE
                                                        WHERE  EMPA_COMP_CODE=P_COMP_CODE
                                                        AND    EMPA_CODE=P_EMP_CODE
                                                     --    AND    EMPA_ALLW_CODE IN(:P_TIKADL,:P_TIKCHL,:P_TIKINF)
                                                         AND    SYSDATE BETWEEN  EMPA_FROM_DT AND EMPA_UPTO_DT);

CURSOR C4(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
    SELECT    EMPAC_ALLW_CODE,EMPAC_ALLW_PERC
    FROM         PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_ALLOWANCE_CE
    WHERE     EMPA_COMP_CODE = P_COMP_CODE
    AND     EMPA_CODE         = P_EMP_CODE
    AND     EMPA_COMP_CODE =  EMPAC_COMP_CODE
    AND     EMPA_CODE        =  EMPAC_CODE
    AND     EMPA_ALLW_CODE =P_ALLW_CODE
    AND         EMPA_ALLW_CODE =  ALLW_CODE
    AND     EMPA_ALLW_CODE =  EMPAC_BASE_ALLW_CODE
    AND            ALLW_EARN_DEDUC= 'E'
    AND         ALLW_TYPE         = '5'
    --AND EMPA_ALLW_CODE IN (:P_TIKADL,:P_TIKCHL,:P_TIKINF)
    AND         EMPA_COMP_CODE = P_COMP_CODE
    AND     EMPA_FROM_DT   =  EMPAC_FROM_DT
    AND             TO_CHAR(EMPA_FROM_DT,'MMYYYY') = (SELECT MAX(TO_CHAR(EMPA_FROM_DT,'MMYYYY'))
                                                           FROM   PM_EMP_ALLOWANCE
                                                        WHERE  EMPA_COMP_CODE=P_COMP_CODE
                                                        AND    EMPA_CODE=P_EMP_CODE
                                                     --    AND    EMPA_ALLW_CODE IN(:P_TIKADL,:P_TIKCHL,:P_TIKINF)
                                                         AND    SYSDATE BETWEEN  EMPA_FROM_DT AND EMPA_UPTO_DT);

CURSOR C5(P_EMP_CODE IN VARCHAR2) IS
SELECT    NVL(EMPA_LC_AMOUNT,0)
FROM         PM_EMP_ALLOWANCE,PM_ALLOWANCE
WHERE     EMPA_CODE             =P_EMP_CODE
--AND       EMPA_ALLW_CODE =P_ALLW_CODE
AND         EMPA_ALLW_CODE =ALLW_CODE
AND     EMPA_ALLW_CODE = M_ALLW_CODE
AND            ALLW_EARN_DEDUC='E'
AND         EMPA_COMP_CODE =P_COMP_CODE
AND             TO_CHAR(EMPA_FROM_DT,'MMYYYY') = (SELECT MAX(TO_CHAR(EMPA_FROM_DT,'MMYYYY'))
                                                           FROM   PM_EMP_ALLOWANCE
                                                        WHERE  EMPA_COMP_CODE=P_COMP_CODE
                                                        AND    EMPA_CODE=P_EMP_CODE
                                                         --AND    EMPA_ALLW_CODE IN(:P_TIKADL,:P_TIKCHL,:P_TIKINF)
                                                         AND    SYSDATE BETWEEN  EMPA_FROM_DT AND EMPA_UPTO_DT);

M_REVH_DATE  DATE;
M_TOT  NUMBER;
HRA_1                   NUMBER;
ALLW_AMT_1             NUMBER;
M_ALLW_CODE_1     VARCHAR2(12);
HRA_PREC_1         NUMBER;
HRA_FLAG_1      VARCHAR2(1);
TOTAL_1       NUMBER := 0;
TOTAL_EARNINGS_1 NUMBER:=0;
M_AMT_E1 NUMBER;
M_AMT_C1 NUMBER;
M_AMT_E2 NUMBER;
M_AMT_C2 NUMBER;



CURSOR REVH_DAYS(P_EMP_CODE IN VARCHAR2) IS
     SELECT MAX(LVRH_RESU_DT)+1
     FROM  PT_LEAVE_RESU_HEAD,
                PT_LEAVE_APPLICATION_HEAD,
             PM_LEAVE,PM_EMP_ALLOWANCE
     WHERE   LVRH_COMP_CODE=P_COMP_CODE
       AND     LVRH_COMP_CODE=EMPA_COMP_CODE
       AND     LVAH_EMP_CODE=EMPA_CODE
     --AND     EMPA_ALLW_CODE IN (:P_TIKADL,:P_TIKCHL,:P_TIKINF)
     AND     LVRH_EMP_CODE=P_EMP_CODE
       AND    LVAH_COMP_CODE=LVRH_COMP_CODE
       AND    LVAH_EMP_CODE=LVRH_EMP_CODE
       AND    LVAH_LV_CATG_CODE= LV_CATG_CODE
       AND    LV_TYPE_CODE='1';



CURSOR DIFF_DAYS IS
             SELECT ROUND(SYSDATE - M_REVH_DATE) FROM  DUAL;

CURSOR C6(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
    SELECT        EMPA_CE
    FROM             PM_EMP_ALLOWANCE,PM_ALLOWANCE
    WHERE         EMPA_CODE      =P_EMP_CODE
    AND             EMPA_ALLW_CODE =ALLW_CODE
    AND                ALLW_EARN_DEDUC='E'
    AND             ALLW_TYPE      ='5'
    AND       EMPA_ALLW_CODE =P_ALLW_CODE
--    AND  EMPA_ALLW_CODE IN (:P_TIKADL,:P_TIKCHL,:P_TIKINF)
    AND             EMPA_COMP_CODE =P_COMP_CODE
    AND             TO_CHAR(EMPA_FROM_DT,'MMYYYY') = (SELECT MAX(TO_CHAR(EMPA_FROM_DT,'MMYYYY'))
                                                           FROM   PM_EMP_ALLOWANCE
                                                        WHERE  EMPA_COMP_CODE=P_COMP_CODE
                                                        AND    EMPA_CODE=P_EMP_CODE
                                                     --    AND    EMPA_ALLW_CODE IN(:P_TIKADL,:P_TIKCHL,:P_TIKINF)
                                                         AND    SYSDATE BETWEEN  EMPA_FROM_DT AND EMPA_UPTO_DT);

CURSOR C7(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
    SELECT         NVL(EMPA_LC_AMOUNT,0)
    FROM             PM_EMP_ALLOWANCE,PM_ALLOWANCE
    WHERE         EMPA_CODE      =P_EMP_CODE
    AND             EMPA_ALLW_CODE =ALLW_CODE
    AND                ALLW_EARN_DEDUC='E'
    AND             ALLW_TYPE      ='5'
    AND       EMPA_ALLW_CODE =P_ALLW_CODE
--    AND  EMPA_ALLW_CODE IN (:P_TIKADL,:P_TIKCHL,:P_TIKINF)
    AND             EMPA_COMP_CODE =P_COMP_CODE
AND             TO_CHAR(EMPA_FROM_DT,'MMYYYY') = (SELECT MAX(TO_CHAR(EMPA_FROM_DT,'MMYYYY'))
                                                           FROM   PM_EMP_ALLOWANCE
                                                        WHERE  EMPA_COMP_CODE=P_COMP_CODE
                                                        AND    EMPA_CODE=P_EMP_CODE
                                                 --        AND    EMPA_ALLW_CODE IN(:P_TIKADL,:P_TIKCHL,:P_TIKINF)
                                                         AND    SYSDATE BETWEEN  EMPA_FROM_DT AND EMPA_UPTO_DT);

CURSOR C8(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
    SELECT    EMPAC_ALLW_CODE,EMPAC_ALLW_PERC
    FROM         PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_ALLOWANCE_CE
    WHERE     EMPA_COMP_CODE = P_COMP_CODE
    AND     EMPA_CODE         = P_EMP_CODE
    AND     EMPA_COMP_CODE =  EMPAC_COMP_CODE
    AND     EMPA_CODE        =  EMPAC_CODE
    AND     EMPA_ALLW_CODE =P_ALLW_CODE
    AND         EMPA_ALLW_CODE =  ALLW_CODE
    AND     EMPA_ALLW_CODE =  EMPAC_BASE_ALLW_CODE
    AND            ALLW_EARN_DEDUC= 'E'
    AND         ALLW_TYPE         = '5'
    --AND EMPA_ALLW_CODE IN (:P_TIKADL,:P_TIKCHL,:P_TIKINF)
    AND         EMPA_COMP_CODE = P_COMP_CODE
    AND     EMPA_FROM_DT   =  EMPAC_FROM_DT
    AND             TO_CHAR(EMPA_FROM_DT,'MMYYYY') = (SELECT MAX(TO_CHAR(EMPA_FROM_DT,'MMYYYY'))
                                                           FROM   PM_EMP_ALLOWANCE
                                                        WHERE  EMPA_COMP_CODE=P_COMP_CODE
                                                        AND    EMPA_CODE=P_EMP_CODE
                                                 --        AND    EMPA_ALLW_CODE IN(:P_TIKADL,:P_TIKCHL,:P_TIKINF)
                                                         AND    SYSDATE BETWEEN  EMPA_FROM_DT AND EMPA_UPTO_DT);

CURSOR C9(P_EMP_CODE IN VARCHAR2,P_ALLW_CODE IN VARCHAR2) IS
SELECT    NVL(EMPA_LC_AMOUNT,0)
FROM         PM_EMP_ALLOWANCE,PM_ALLOWANCE
WHERE     EMPA_CODE             =P_EMP_CODE
AND       EMPA_ALLW_CODE =P_ALLW_CODE
AND         EMPA_ALLW_CODE =ALLW_CODE
AND     EMPA_ALLW_CODE = M_ALLW_CODE
AND            ALLW_EARN_DEDUC='E'
AND         EMPA_COMP_CODE =P_COMP_CODE
AND             TO_CHAR(EMPA_FROM_DT,'MMYYYY') = (SELECT MAX(TO_CHAR(EMPA_FROM_DT,'MMYYYY'))
                                                           FROM   PM_EMP_ALLOWANCE
                                                        WHERE  EMPA_COMP_CODE=P_COMP_CODE
                                                        AND    EMPA_CODE=P_EMP_CODE
                                                     --    AND    EMPA_ALLW_CODE IN(:P_TIKADL,:P_TIKCHL,:P_TIKINF)
                                                         AND    SYSDATE BETWEEN  EMPA_FROM_DT AND EMPA_UPTO_DT);

 CURSOR C10 IS
      SELECT PARA_VALUE
      FROM   PM_COMP_PARAMETER
         WHERE  PARA_COMP_CODE =  P_COMP_CODE
        AND    PARA_TYPE='PYBSDYFLAG';

        CURSOR C11 IS
      SELECT TO_CHAR(LAST_DAY(SYSDATE),'DD')
        FROM DUAL;

        CURSOR C12 IS
        SELECT PARA_VALUE
        FROM   PM_COMP_PARAMETER
        WHERE  PARA_COMP_CODE =  P_COMP_CODE
        AND    PARA_TYPE='PYBSDYS';

      M_DAYS NUMBER;
      M_TYPE VARCHAR2(1);
      DAYS NUMBER;

BEGIN
   DELETE FROM PW_AIR_PASSAGE_ENTITLEMENT WHERE APE_COMP_CODE = P_COMP_CODE;
       MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;


   FOR I IN C1 LOOP

       IF C2%ISOPEN THEN
     CLOSE C2;
    END IF ;

    OPEN C2(I.EMP,I.EMPA_ALLW_CODE);
       -- FETCH C3 INTO HRA_FLAG; -- COMMENTED BY PARTHA ON 04-03-2018  FAISALHO_INT-1482661
        FETCH C2 INTO HRA_FLAG; --  CHANGED BY PARTHA ON 04-03-2018  FAISALHO_INT-1482661

    CLOSE C2;

    IF HRA_FLAG = 'E' THEN
        IF C3%ISOPEN THEN
         CLOSE C3;
        END IF ;
        OPEN C3(I.EMP,I.EMPA_ALLW_CODE);
        LOOP
            FETCH C3 INTO HRA;
            EXIT WHEN C3%NOTFOUND;
            END LOOP;
          CLOSE C3;
         --SRW.MESSAGE(1,'HRA'||HRA);
        --RETURN NVL(HRA,0);
    ELSE
     IF C4%ISOPEN THEN
         CLOSE C4;
        END IF ;
        OPEN C4(I.EMP,I.EMPA_ALLW_CODE);
         TOTAL:= 0 ;
            LOOP
             FETCH C4 INTO M_ALLW_CODE,HRA_PREC;
                EXIT WHEN C4%NOTFOUND;
                 IF C5%ISOPEN THEN
                     CLOSE C5;
                 END IF ;
                 OPEN C5(I.EMP) ;
                    FETCH C5 INTO ALLW_AMT;
               CLOSE C5;
             TOTAL := TOTAL + NVL(ALLW_AMT * HRA_PREC /100,0);
          END LOOP;
          --CLOSE C3; -- COMMENTED BY PARTHA ON 04-03-2018  FAISALHO_INT-1482661
        CLOSE C4;    --  CHANGED BY PARTHA ON 04-03-2018  FAISALHO_INT-1482661
        --HRA := TOTAL;
       END IF;
    --SRW.MESSAGE(1,'CF1EARNING----'||TOTAL_EARNINGS);
        TOTAL_EARNINGS:=NVL(HRA,0)+NVL(TOTAL,0);


    IF REVH_DAYS%ISOPEN THEN
        CLOSE REVH_DAYS;
        END IF;

        OPEN REVH_DAYS(I.EMP);
        FETCH REVH_DAYS INTO M_REVH_DATE;
        CLOSE REVH_DAYS;


      IF DIFF_DAYS%ISOPEN THEN
        CLOSE DIFF_DAYS;
        END IF;

        OPEN DIFF_DAYS;
        FETCH DIFF_DAYS INTO M_TOT;
        CLOSE DIFF_DAYS;

    IF C6%ISOPEN THEN
     CLOSE C6;
    END IF ;

    OPEN C6(I.EMP,I.EMPA_ALLW_CODE);

        FETCH C6 INTO HRA_FLAG_1;

    CLOSE C6;

      OPEN C10;
        FETCH C10 INTO M_TYPE;
        CLOSE C10;
        OPEN C11;
        FETCH C11 INTO M_DAYS;
        CLOSE C11;
        OPEN C12;
        FETCH C12 INTO DAYS;
        CLOSE C12;
        IF M_TYPE = 'E' THEN
        --RETURN(:CP_34);
    DAYS :=DAYS;
        ELSIF M_TYPE='A' THEN
      --RETURN(:CP_33);
    M_DAYS:= M_DAYS;
    END IF;

    IF HRA_FLAG_1 = 'E' THEN
        IF C7%ISOPEN THEN
         CLOSE C7;
        END IF ;
        OPEN C7(I.EMP,I.EMPA_ALLW_CODE);
        LOOP
            FETCH C7 INTO HRA_1;
            EXIT WHEN C7%NOTFOUND;
            END LOOP;
          CLOSE C7;
                             IF M_TYPE='A' THEN
                            M_AMT_E1:=NVL((NVL(HRA_1,0)/NVL(M_DAYS,0)),0);
                            ELSE
                            M_AMT_E1:=NVL((NVL(HRA_1,0)/NVL(DAYS,0)),0);
                            END IF;
                            --SRW.MESSAGE(1,'FLAG---'||M_TYPE);
                            --SRW.MESSAGE(2,'FLAG---'||M_DAYS);
                            --SRW.MESSAGE(1,'HRA----'||HRA);
                            --SRW.MESSAGE(1,'ONEDAY-----'||M_AMT_E1);
                            M_AMT_E2:=NVL((NVL(M_AMT_E1,0)* NVL(M_TOT,0)),0);
                            --SRW.MESSAGE(1,'DAYS----'||M_TOT);
                --SRW.MESSAGE(1,'NOOFDAY-----'||M_AMT_E2);
    ELSE
     IF C8%ISOPEN THEN
         CLOSE C8;
        END IF ;
        OPEN C8(I.EMP,I.EMPA_ALLW_CODE);
         TOTAL:= 0 ;
            LOOP
             FETCH C8 INTO M_ALLW_CODE,HRA_PREC_1;
                EXIT WHEN C8%NOTFOUND;
                 IF C9%ISOPEN THEN
                     CLOSE C9;
                 END IF ;
                 OPEN C9(I.EMP,I.EMPA_ALLW_CODE) ;
                    FETCH C9 INTO ALLW_AMT_1;
               CLOSE C9;
                   IF M_TYPE='A' THEN
                                                M_AMT_C1:=ROUND(NVL((NVL(ALLW_AMT,0)/NVL(M_DAYS,0)),0));
                                            ELSE
                                                M_AMT_C1:=ROUND(NVL((NVL(ALLW_AMT,0)/NVL(DAYS,0)),0));
                                            END IF;
                                        M_AMT_C2:=ROUND(NVL((NVL(M_AMT_C1,0)* NVL(M_TOT,0)),0));
                                       TOTAL_1 := NVL(TOTAL_1,0) + NVL(M_AMT_C2,0) * HRA_PREC_1 /100;

          END LOOP;
        CLOSE C8;

    END IF;

        TOTAL_EARNINGS_1:=NVL(M_AMT_E2,0)+NVL(TOTAL_1,0);

    INSERT INTO  PW_AIR_PASSAGE_ENTITLEMENT ( APE_COMP_CODE,
                                              APE_REP_KEY_NO,
                                              APE_EMP_CODE,
                                              APE_EMP_NAME,
                                              APE_DIVISION,
                                              APE_DEPARTMENT,
                                              APE_GRADE,
                                              APE_DOJ,
                                              APE_CLASS,
                                              APE_PASS_CODE,
                                              APE_ALLW_SHORT_DESC,
                                              APE_TOTAL_EARNINGS,
                                              APE_TOTAL_EARNINGS_1)
                                     VALUES ( P_COMP_CODE,
                                              P_REP_KEY_NO,
                                              I.EMP,
                                              I.EMP_SHORT_NAME,
                                              I.DIV,
                                              I.DEPT,
                                              I.PER,
                                              I.DOJ,
                                              I.CLASS,
                                              I.EMPL_PASS_CODE,
                                              I.ALLW,
                                              TOTAL_EARNINGS,
                                              TOTAL_EARNINGS_1);

   END LOOP;

END P_AIR_PASSAGE_ENTITLEMENT;

PROCEDURE P_EMP_DISCIPLINARY_ACTION ( P_COMP_CODE   IN VARCHAR2,
                                      P_REP_KEY_NO  IN NUMBER,
                                      P_FM_DIVN     IN VARCHAR2,
                                      P_TO_DIVN     IN VARCHAR2,
                                      P_FM_DEPT     IN VARCHAR2,
                                      P_TO_DEPT     IN VARCHAR2,
                                      P_FM_LOCN     IN VARCHAR2,
                                      P_TO_LOCN     IN VARCHAR2,
                                      P_FM_DT       IN DATE,
                                      P_TO_DT       IN DATE,
                                      P_FM_EMP      IN VARCHAR2,
                                      P_TO_EMP      IN VARCHAR2,
                                      P_FM_GRADE    IN VARCHAR2,
                                      P_TO_GRADE    IN VARCHAR2) IS

                                      MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;
CURSOR C1 IS
      SELECT DISCA_EMP_CODE,EMP_COMP_CODE,
             DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) EMP_NAME, EMP_DIVN_CODE,EMP_DEPT_CODE, EMP_LOCN_CODE,
             EMP_JOIN_DT, EMP_PERSONAL_GRADE, EMP_JOB_LONG_DESC, DISCA_TXN_CODE || '-' || DISCA_NO NO,
             DISCA_DT, DISCA_DISC_CODE, DISC_DESC,DISCA_ANNOTATION
      FROM   PT_DISCIPLINE_ACTION,PM_EMP_KEY,PM_DISCIPLINE
      WHERE  EMP_CODE = DISCA_EMP_CODE
      AND    EMP_COMP_CODE =  DISCA_COMP_CODE
      AND    DISC_CODE = DISCA_DISC_CODE
      AND    EMP_END_OF_SERVICE_DT IS NULL
      AND    EMP_COMP_CODE= P_COMP_CODE
      AND    EMP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
      AND    EMP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
      AND    EMP_LOCN_CODE BETWEEN P_FM_LOCN AND P_TO_LOCN
      AND    DISCA_DT BETWEEN P_FM_DT AND P_TO_DT
      AND    EMP_CODE BETWEEN P_FM_EMP AND P_TO_EMP
      AND    EMP_PERSONAL_GRADE BETWEEN P_FM_GRADE AND P_TO_GRADE
      GROUP BY EMP_DIVN_CODE,EMP_DEPT_CODE,DISCA_EMP_CODE, DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10), EMP_LOCN_CODE,
               EMP_JOIN_DT, EMP_PERSONAL_GRADE, EMP_JOB_LONG_DESC,
               DISCA_TXN_CODE || '-' || DISCA_NO, DISCA_DT, DISCA_DISC_CODE,
               DISC_DESC,DISCA_ANNOTATION,EMP_COMP_CODE;

BEGIN
DELETE FROM PW_EMP_DISCIPLINARY_ACTION WHERE EDA_REP_KEY_NO = P_REP_KEY_NO;


    MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;


FOR I IN C1 LOOP

     INSERT INTO PW_EMP_DISCIPLINARY_ACTION  ( EDA_COMP_CODE,
                                               EDA_REP_KEY_NO,
                                               EDA_DISCA_EMP_CODE,
                                               EDA_EMP_NAME,
                                               EDA_DIVN_CODE,
                                               EDA_DEPT_CODE,
                                               EDA_LOCN_CODE,
                                               EDA_JOIN_DT,
                                               EDA_PERSONAL_GRADE,
                                               EDA_JOB_LONG_DESC,
                                               EDA_TXN,
                                               EDA_DT,
                                               EAD_DISC_CODE,
                                               EDA_DISC_DESC,
                                               EDA_ANNOTATION)
                                     VALUES   (P_COMP_CODE,
                                               P_REP_KEY_NO,
                                               I.DISCA_EMP_CODE,
                                               I.EMP_NAME,
                                               I.EMP_DIVN_CODE,
                                               I.EMP_DEPT_CODE,
                                               I.EMP_LOCN_CODE,
                                               I.EMP_JOIN_DT,
                                               I.EMP_PERSONAL_GRADE,
                                               I.EMP_JOB_LONG_DESC,
                                               I.NO,
                                               I.DISCA_DT,
                                               I.DISCA_DISC_CODE,
                                               I.DISC_DESC,
                                               I.DISCA_ANNOTATION);
END LOOP;

END P_EMP_DISCIPLINARY_ACTION;

PROCEDURE P_BONUS_INCENTIVE_PAYMENT ( P_COMP_CODE   IN VARCHAR2,
                                      P_REP_KEY_NO  IN NUMBER,
                                      P_FM_DIVN     IN VARCHAR2,
                                      P_TO_DIVN     IN VARCHAR2,
                                      P_FM_DEPT     IN VARCHAR2,
                                      P_TO_DEPT     IN VARCHAR2,
                                      P_FM_LOCN     IN VARCHAR2,
                                      P_TO_LOCN     IN VARCHAR2,
                                      P_FM_DT       IN DATE,
                                      P_TO_DT       IN DATE,
                                      P_FM_EMP      IN VARCHAR2,
                                      P_TO_EMP      IN VARCHAR2,
                                      P_FM_GRADE    IN VARCHAR2,
                                      P_TO_GRADE    IN VARCHAR2,
                                      P_FM_TXN_TYPE IN VARCHAR2,
                                      P_TO_TXN_TYPE IN VARCHAR2,
                                      P_STATUS      IN VARCHAR2) IS
                                      MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

CURSOR C1 IS
      SELECT VAH_EMP_CODE EMP_CODE, EMP_CODE EMP, VAH_DIVN_CODE  EMP_DIVN_CODE,
             VAH_DIVN_CODE  DIVN_CODE, VAH_DEPT_CODE  DEPT_CODE, VAH_DEPT_CODE  EMP_DEPT_CODE,
             VAH_TXN_CODE   EMP_TXN_CODE, VAH_NO VAHNO, VAH_AE         AE,
     EMPA_LC_AMOUNT  BASIC,
     VAD_LC_AMOUNT   BONUS,
     VAH_STATUS      STATUS,
     ALLW_DESC       DESCR,
     EMP_PERSONAL_GRADE GRADE,
     VAH_REMARKS     REMARKS,
     DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10)    EMP_NAME FROM  PT_VAR_ALLW_HEAD,PT_VAR_ALLW_DETAIL,PM_EMP_ALLOWANCE
,PM_ALLOWANCE,PM_EMP_KEY
WHERE VAH_SYS_ID = VAD_VAH_SYS_ID
AND VAH_COMP_CODE = P_COMP_CODE
AND VAH_EMP_CODE = EMPA_CODE
AND VAH_COMP_CODE = EMPA_COMP_CODE
AND VAD_ALLW_CODE = EMPA_ALLW_CODE
AND ALLW_CODE = EMPA_ALLW_CODE
AND EMP_CODE = EMPA_CODE
AND EMP_CODE = VAH_EMP_CODE
AND EMP_COMP_CODE = VAH_COMP_CODE
AND ALLW_TYPE = '1'
AND EMP_END_OF_SERVICE_DT IS NULL
AND EMPA_EXCLUDE_FROM_DT IS NULL
AND  EMPA_EXCLUDE_UPTO_DT IS NULL
    -- AND EMPA_FROM_DT  BETWEEN '01-SEP-2009'  AND '20-NOV-2009'
AND    EMP_CODE    BETWEEN P_FM_EMP  AND P_TO_EMP
AND    EMP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
AND    EMP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
AND    EMP_LOCN_CODE BETWEEN P_FM_LOCN AND P_TO_LOCN
AND    EMP_PERSONAL_GRADE  BETWEEN P_FM_GRADE AND P_TO_GRADE
AND   VAH_DT  BETWEEN P_FM_DT AND P_TO_DT
AND   VAH_TXN_CODE  BETWEEN P_FM_TXN_TYPE AND P_TO_TXN_TYPE
AND    VAH_APPR_UID  IS  NULL
AND    VAH_APPR_DT  IS  NULL
AND    P_STATUS  =  'Unapproved'
UNION ALL
SELECT  VAH_EMP_CODE   EMP_CODE,
      EMP_CODE                EMP,
      VAH_DIVN_CODE  EMP_DIVN_CODE,
      VAH_DIVN_CODE  DIVN_CODE,
      VAH_DEPT_CODE  DEPT_CODE,
      VAH_DEPT_CODE  EMP_DEPT_CODE,
     VAH_TXN_CODE   EMP_TXN_CODE,
     VAH_NO         VAHNO,
     VAH_AE         AE,
     EMPA_LC_AMOUNT  BASIC,
     VAD_LC_AMOUNT   BONUS,
     VAH_STATUS      STATUS,
     ALLW_DESC       DESCR,
     EMP_PERSONAL_GRADE GRADE,
     VAH_REMARKS     REMARKS,
    DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10)  EMP_NAME FROM  PT_VAR_ALLW_HEAD,PT_VAR_ALLW_DETAIL,PM_EMP_ALLOWANCE
,PM_ALLOWANCE,PM_EMP_KEY
WHERE VAH_SYS_ID = VAD_VAH_SYS_ID
AND VAH_COMP_CODE = P_COMP_CODE
AND VAH_EMP_CODE = EMPA_CODE
AND VAH_COMP_CODE = EMPA_COMP_CODE
AND VAD_ALLW_CODE = EMPA_ALLW_CODE
AND ALLW_CODE = EMPA_ALLW_CODE
AND EMP_CODE = EMPA_CODE
AND EMP_CODE = VAH_EMP_CODE
AND EMP_COMP_CODE = VAH_COMP_CODE
AND ALLW_TYPE = '1'
AND EMP_END_OF_SERVICE_DT IS NULL
AND EMPA_EXCLUDE_FROM_DT IS NULL
AND  EMPA_EXCLUDE_UPTO_DT IS NULL
    -- AND EMPA_FROM_DT  BETWEEN '01-SEP-2009'  AND '20-NOV-2009'
AND    EMP_CODE    BETWEEN P_FM_EMP  AND P_TO_EMP
AND    EMP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
AND    EMP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
AND    EMP_LOCN_CODE BETWEEN P_FM_LOCN AND P_TO_LOCN
AND    EMP_PERSONAL_GRADE  BETWEEN P_FM_GRADE AND P_TO_GRADE
AND   VAH_DT  BETWEEN P_FM_DT AND P_TO_DT
AND   VAH_TXN_CODE  BETWEEN P_FM_TXN_TYPE AND P_TO_TXN_TYPE
AND    VAH_APPR_UID  IS NOT NULL
AND    VAH_APPR_DT  IS  NOT NULL
AND    P_STATUS  =  'Approved'
UNION ALL
SELECT  VAH_EMP_CODE   EMP_CODE,
      EMP_CODE                EMP,
      VAH_DIVN_CODE  EMP_DIVN_CODE,
      VAH_DIVN_CODE  DIVN_CODE,
      VAH_DEPT_CODE  DEPT_CODE,
      VAH_DEPT_CODE  EMP_DEPT_CODE,
     VAH_TXN_CODE   EMP_TXN_CODE,
     VAH_NO         VAHNO,
     VAH_AE         AE,
     EMPA_LC_AMOUNT  BASIC,
     VAD_LC_AMOUNT   BONUS,
     VAH_STATUS      STATUS,
     ALLW_DESC       DESCR,
     EMP_PERSONAL_GRADE GRADE,
     VAH_REMARKS     REMARKS,
     DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10)    EMP_NAME FROM  PT_VAR_ALLW_HEAD,PT_VAR_ALLW_DETAIL,PM_EMP_ALLOWANCE
,PM_ALLOWANCE,PM_EMP_KEY
WHERE VAH_SYS_ID = VAD_VAH_SYS_ID
AND VAH_COMP_CODE = P_COMP_CODE
AND VAH_EMP_CODE = EMPA_CODE
AND VAH_COMP_CODE = EMPA_COMP_CODE
AND VAD_ALLW_CODE = EMPA_ALLW_CODE
AND ALLW_CODE = EMPA_ALLW_CODE
AND EMP_CODE = EMPA_CODE
AND EMP_CODE = VAH_EMP_CODE
AND EMP_COMP_CODE = VAH_COMP_CODE
AND ALLW_TYPE = '1'
AND EMP_END_OF_SERVICE_DT IS NULL
AND EMPA_EXCLUDE_FROM_DT IS NULL
AND  EMPA_EXCLUDE_UPTO_DT IS NULL
    -- AND EMPA_FROM_DT  BETWEEN '01-SEP-2009'  AND '20-NOV-2009'
AND    EMP_CODE    BETWEEN P_FM_EMP  AND P_TO_EMP
AND    EMP_DIVN_CODE BETWEEN P_FM_DIVN AND P_TO_DIVN
AND    EMP_DEPT_CODE BETWEEN P_FM_DEPT AND P_TO_DEPT
AND    EMP_LOCN_CODE BETWEEN P_FM_LOCN AND P_TO_LOCN
AND    EMP_PERSONAL_GRADE  BETWEEN P_FM_GRADE AND P_TO_GRADE
AND   VAH_DT  BETWEEN P_FM_DT AND P_TO_DT
AND   VAH_TXN_CODE  BETWEEN P_FM_TXN_TYPE AND P_TO_TXN_TYPE
AND    P_STATUS  = 'All'
ORDER BY EMP_DIVN_CODE,EMP_DEPT_CODE,EMP_CODE;

CURSOR C2(P_EMP_CODE IN VARCHAR2) IS
      SELECT EMP_DIVN_CODE,EMP_DEPT_CODE,DECODE(MM_LANG_CODE, 'ENG',DEPT_NAME ,'LANG_01',DEPT_NAME_LANG_01,'LANG_02',DEPT_NAME_LANG_02,'LANG_03',DEPT_NAME_LANG_03,'LANG_04',DEPT_NAME_LANG_04,'LANG_05',DEPT_NAME_LANG_05,'LANG_06',DEPT_NAME_LANG_06,'LANG_07',DEPT_NAME_LANG_07,'LANG_08',DEPT_NAME_LANG_08,'LANG_09',DEPT_NAME_LANG_09,'LANG_10',DEPT_NAME_LANG_10),DECODE(MM_LANG_CODE, 'ENG',DIVN_NAME ,'LANG_01',DIVN_NAME_LANG_01,'LANG_02',DIVN_NAME_LANG_02,'LANG_03',DIVN_NAME_LANG_03,'LANG_04',DIVN_NAME_LANG_04,'LANG_05',DIVN_NAME_LANG_05,'LANG_06',DIVN_NAME_LANG_06,'LANG_07',DIVN_NAME_LANG_07,'LANG_08',DIVN_NAME_LANG_08,'LANG_09',DIVN_NAME_LANG_09,'LANG_10',DIVN_NAME_LANG_10)
      FROM   PM_EMP_KEY,FM_DIVISION,FM_DEPARTMENT
      WHERE  EMP_CODE = P_EMP_CODE
      AND    EMP_COMP_CODE=P_COMP_CODE
      AND    DIVN_CODE=EMP_DIVN_CODE
      AND    DEPT_CODE=EMP_DEPT_CODE
      AND    DIVN_COMP_CODE=EMP_COMP_CODE
      AND    DEPT_COMP_CODE=EMP_COMP_CODE
      AND    DEPT_DIVN_CODE=DIVN_CODE;

CURSOR EMP_NAME(P_EMP_CODE IN VARCHAR2) IS
          SELECT DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10)
        FROM   PM_EMP_KEY
        WHERE  EMP_COMP_CODE = P_COMP_CODE
        AND    EMP_CODE      = P_EMP_CODE;

CURSOR C3 IS
        SELECT DECODE(MM_LANG_CODE, 'ENG',DEPT_NAME ,'LANG_01',DEPT_NAME_LANG_01,'LANG_02',DEPT_NAME_LANG_02,'LANG_03',DEPT_NAME_LANG_03,'LANG_04',DEPT_NAME_LANG_04,'LANG_05',DEPT_NAME_LANG_05,'LANG_06',DEPT_NAME_LANG_06,'LANG_07',DEPT_NAME_LANG_07,'LANG_08',DEPT_NAME_LANG_08,'LANG_09',DEPT_NAME_LANG_09,'LANG_10',DEPT_NAME_LANG_10),DECODE(MM_LANG_CODE, 'ENG',DIVN_NAME ,'LANG_01',DIVN_NAME_LANG_01,'LANG_02',DIVN_NAME_LANG_02,'LANG_03',DIVN_NAME_LANG_03,'LANG_04',DIVN_NAME_LANG_04,'LANG_05',DIVN_NAME_LANG_05,'LANG_06',DIVN_NAME_LANG_06,'LANG_07',DIVN_NAME_LANG_07,'LANG_08',DIVN_NAME_LANG_08,'LANG_09',DIVN_NAME_LANG_09,'LANG_10',DIVN_NAME_LANG_10)
          FROM   FM_DIVISION,FM_DEPARTMENT
          WHERE  DIVN_CODE=DIVN_CODE
          AND    DEPT_CODE=DEPT_CODE
          AND    DIVN_COMP_CODE=P_COMP_CODE
          AND    DEPT_COMP_CODE=P_COMP_CODE
          AND    DEPT_DIVN_CODE=DIVN_CODE;

   M_NAME      VARCHAR2(60);
   CP_4 VARCHAR2(12);
   CP_5 VARCHAR2(12);
   CP_3 VARCHAR2(240);
   CP_2 VARCHAR2(240);
   CP_7 VARCHAR2(240);
   cp_6 VARCHAR2(240);

BEGIN

   DELETE FROM PW_BONUS_INCENTIVE_PAYMENT WHERE BIP_REP_KEY_NO = P_REP_KEY_NO;


    MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;

   FOR I IN C1 LOOP

       IF C2%ISOPEN THEN
          CLOSE C2;
       END IF;

       OPEN C2(I.EMP_CODE);
       FETCH C2 INTO CP_4,CP_5,CP_3,CP_2;
           CLOSE C2;

       OPEN  EMP_NAME(I.EMP_CODE) ;
           FETCH EMP_NAME INTO M_NAME;
           CLOSE EMP_NAME;


           OPEN C3;
           FETCH C3 INTO CP_7,CP_6;
           CLOSE c3;

       INSERT INTO PW_BONUS_INCENTIVE_PAYMENT ( BIP_COMP_CODE,
                                                BIP_REP_KEY_NO,
                                                BIP_EMP_CODE,
                                                BIP_EMP,
                                                BIP_EMP_DIVN_CODE,
                                                BIP_DIVN_CODE,
                                                BIP_DEPT_CODE,
                                                BIP_EMP_DEPT_CODE,
                                                BIP_TXN_CODE,
                                                BIP_NO,
                                                BIP_AE,
                                                BIP_BASIC,
                                                BIP_BONUS,
                                                BIP_STATUS,
                                                BIP_DESCR,
                                                BIP_GRADE,
                                                BIP_REMARKS,
                                                BIP_EMP_NAME,
                                                BIP_CP_4,
                                                BIP_CP_5,
                                                BIP_CP_3,
                                                BIP_CP_2,
                                                BIP_CP_7,
                                                BIP_CP_6)
                                       VALUES ( P_COMP_CODE,
                                                P_REP_KEY_NO,
                                                I.EMP_CODE,
                                                I.EMP,
                                                I.EMP_DIVN_CODE,
                                                I.DIVN_CODE,
                                                I.DEPT_CODE,
                                                I.EMP_DEPT_CODE,
                                                I.EMP_TXN_CODE,
                                                I.VAHNO,
                                                I.AE,
                                                I.BASIC,
                                                I.BONUS,
                                                I.STATUS,
                                                I.DESCR,
                                                I.GRADE,
                                                I.REMARKS,
                                                I.EMP_NAME,
                                                CP_4,
                                                CP_5,
                                                CP_3,
                                                CP_2,
                                                CP_7,
                                                CP_6);

   END LOOP;

END P_BONUS_INCENTIVE_PAYMENT;

PROCEDURE P_TRIP_AND_REIMBURSEMENT ( P_COMP_CODE   IN VARCHAR2,
                                     P_REP_KEY_NO  IN NUMBER,
                                     P_FM_DIVN     IN VARCHAR2,
                                     P_TO_DIVN     IN VARCHAR2,
                                     P_FM_DEPT     IN VARCHAR2,
                                     P_TO_DEPT     IN VARCHAR2,
                                     P_FM_LOCN     IN VARCHAR2,
                                     P_TO_LOCN     IN VARCHAR2,
                                     P_FM_DT       IN DATE,
                                     P_TO_DT       IN DATE,
                                     P_FM_EMP      IN VARCHAR2,
                                     P_TO_EMP      IN VARCHAR2,
                                     P_FM_TRIP     IN VARCHAR2,
                                     P_TO_TRIP     IN VARCHAR2) IS
                                     MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

CURSOR C1 IS
      SELECT TRRH_EMP_CODE, DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) EMP_NAME, EMP_PERSONAL_GRADE, LOCN_DESC, TRRH_REF_TXN_CODE ||'-'|| TRRH_REF_NO TXN_REF_NO,
               TRRH_TXN_CODE ||'-'||TRRH_NO TXN_NO, TRRH_DT, DECODE(MM_LANG_CODE, 'ENG',TRIP_TYPE_DESC ,'LANG_01',TRIP_TYPE_DESC_LANG_01,'LANG_02',TRIP_TYPE_DESC_LANG_02,'LANG_03',TRIP_TYPE_DESC_LANG_03,'LANG_04',TRIP_TYPE_DESC_LANG_04,'LANG_05',TRIP_TYPE_DESC_LANG_05,'LANG_06',TRIP_TYPE_DESC_LANG_06,'LANG_07',TRIP_TYPE_DESC_LANG_07,'LANG_08',TRIP_TYPE_DESC_LANG_08,'LANG_09',TRIP_TYPE_DESC_LANG_09,'LANG_10',TRIP_TYPE_DESC_LANG_10) TRIP_TYPE_DESC, TRAH_FLEXI_VAL1, TRRH_FROM_DT,
               TRRH_UPTO_DT, TRRH_TICKET_CHARGE_CURR_CODE, TRRH_TRANSP_CURR_CODE, TRRH_TOT_PER_DIEM_CURR_CODE,
               TRRH_ACCO_COST_CURR_CODE, TRRH_ENT_EXP_CURR_CODE, TRRH_OTH_CURR_CODE, TRRH_TICKET_FC_CHARGE,
               TRRH_TRANSP_FC_CHARGE, TRRH_TOT_PER_DIEM_FC, TRRH_ACCO_FC_COST, TRRH_ENT_EXP_FC_COST,
               TRRH_OTH_FC_COST, TRRH_TICKET_LC_CHARGE, TRRH_TRANSP_LC_CHARGE, TRRH_TOT_PER_DIEM_LC,
               TRRH_ACCO_LC_COST, TRRH_ENT_EXP_LC_COST, TRRH_OTH_LC_COST, TRRVC_DESCRIPTION,
               TRRVC_CURR_CODE, TRRVC_FC_COST, TRRVC_LC_COST
     FROM    PT_TRIP_REIMB_HEAD, PM_EMP_KEY, PM_LOCN, PM_TRIP_TYPE, PT_TRIP_APPLICATION_HEAD,
               PT_TRIP_REIMB_VAR_COST, FM_DIVISION, FM_DEPARTMENT
     WHERE   TRRH_COMP_CODE  = P_COMP_CODE
     AND       TRRH_COMP_CODE  = EMP_COMP_CODE
     AND     TRRH_COMP_CODE  = TRAH_COMP_CODE
     AND     EMP_COMP_CODE   = DIVN_COMP_CODE
     AND     EMP_COMP_CODE   = DEPT_COMP_CODE
     AND       EMP_DIVN_CODE   = DIVN_CODE
     AND       DIVN_CODE       = DEPT_DIVN_CODE
     AND     EMP_DEPT_CODE   = DEPT_CODE
     AND     TRRH_SYS_ID        = TRRVC_TRRH_SYS_ID
   --  AND     TRRH_REF_SYS_ID(+) =  TRAH_SYS_ID
     AND     TRRH_EMP_CODE   = EMP_CODE
    -- AND     TRRH_EMP_CODE   = TRAH_EMP_CODE
     AND       EMP_LOCN_CODE   = LOCN_CODE
     AND       TRRH_TRIP_TYPE_CODE = TRIP_TYPE_CODE
    -- AND     TRRH_APPR_UID   IS NOT NULL
   --  AND       TRRH_APPR_DT       IS NOT NULL
     AND     EMP_DIVN_CODE   BETWEEN P_FM_DIVN AND P_TO_DIVN
     AND       EMP_DEPT_CODE   BETWEEN P_FM_DEPT AND P_TO_DEPT
     AND       TRRH_DT           BETWEEN P_FM_DT AND P_TO_DT
     AND       EMP_LOCN_CODE   BETWEEN P_FM_LOCN AND P_TO_LOCN
     AND       TRRH_EMP_CODE   BETWEEN P_FM_EMP  AND P_TO_EMP
     AND       TRRH_TRIP_TYPE_CODE BETWEEN P_FM_TRIP  AND P_TO_TRIP;

M_NO_DAYS_AVIAL         NUMBER;
M_FIXED_LC_COST            NUMBER;

M_BASE_CURR        VARCHAR2(12);
M_EX_RATE            NUMBER;

CURSOR C2 IS
        SELECT PARA_VALUE
        FROM   PM_PARAMETER
        WHERE  PARA_TYPE = 'BASECURR';

CURSOR C3( P_EMP_CODE IN VARCHAR2 , P_TKT_CURR IN VARCHAR2)IS
      SELECT CER_EXG_RATE
        FROM   PT_TRIP_REIMB_HEAD,      FM_EXCHANGE_RATE
        WHERE  TRRH_COMP_CODE  = P_COMP_CODE
        AND       TRRH_EMP_CODE   =P_EMP_CODE
        AND    TRRH_TICKET_CHARGE_CURR_CODE    =P_TKT_CURR
        AND       TRRH_TICKET_CHARGE_CURR_CODE = CER_CONV_TO_CURR_CODE
        AND       CER_CONV_FM_CURR_CODE = M_BASE_CURR
        AND    TRRH_FROM_DT >= CER_EFF_FRM_DT
        AND    TRRH_UPTO_DT <= CER_EFF_TO_DT
        AND    CER_EXG_RATE_TYPE = 'B';

CURSOR C4( P_EMP_CODE IN VARCHAR2 , P_TRANSP_CURR IN VARCHAR2) IS
      SELECT CER_EXG_RATE
        FROM   PT_TRIP_REIMB_HEAD,
                     FM_EXCHANGE_RATE
        WHERE  TRRH_COMP_CODE  =P_COMP_CODE
        AND       TRRH_EMP_CODE   =P_EMP_CODE
        AND    TRRH_TICKET_CHARGE_CURR_CODE    =P_TRANSP_CURR
        AND       TRRH_TICKET_CHARGE_CURR_CODE = CER_CONV_TO_CURR_CODE
        AND       CER_CONV_FM_CURR_CODE = M_BASE_CURR
        AND    TRRH_FROM_DT >= CER_EFF_FRM_DT
        AND    TRRH_UPTO_DT <= CER_EFF_TO_DT
        AND    CER_EXG_RATE_TYPE = 'B';
M_EX_RATE_1            NUMBER;

CURSOR C5( P_EMP_CODE IN VARCHAR2 , P_TOT_PER_DIEM_CURR IN VARCHAR2) IS
      SELECT CER_EXG_RATE
        FROM   PT_TRIP_REIMB_HEAD, FM_EXCHANGE_RATE
          WHERE  TRRH_COMP_CODE  =P_COMP_CODE
          AND       TRRH_EMP_CODE   =P_EMP_CODE
          AND    TRRH_TICKET_CHARGE_CURR_CODE    =P_TOT_PER_DIEM_CURR
          AND       TRRH_TICKET_CHARGE_CURR_CODE = CER_CONV_TO_CURR_CODE
          AND       CER_CONV_FM_CURR_CODE = M_BASE_CURR
          AND    TRRH_FROM_DT >= CER_EFF_FRM_DT
          AND    TRRH_UPTO_DT <= CER_EFF_TO_DT
          AND    CER_EXG_RATE_TYPE = 'B';

M_EX_RATE_2            NUMBER;

CURSOR C6( P_EMP_CODE IN VARCHAR2 , P_ACCO_COST_CURR IN VARCHAR2) IS
      SELECT CER_EXG_RATE
        FROM   PT_TRIP_REIMB_HEAD, FM_EXCHANGE_RATE
        WHERE  TRRH_COMP_CODE  =P_COMP_CODE
        AND       TRRH_EMP_CODE   =P_EMP_CODE
        AND    TRRH_TICKET_CHARGE_CURR_CODE    =P_ACCO_COST_CURR
        AND       TRRH_TICKET_CHARGE_CURR_CODE = CER_CONV_TO_CURR_CODE
        AND       CER_CONV_FM_CURR_CODE = M_BASE_CURR
        AND    TRRH_FROM_DT >= CER_EFF_FRM_DT
        AND    TRRH_UPTO_DT <= CER_EFF_TO_DT
        AND    CER_EXG_RATE_TYPE = 'B';

M_EX_RATE_3            NUMBER;

CURSOR C7( P_EMP_CODE IN VARCHAR2 , P_ENT_EXP_CURR IN VARCHAR2) IS
     SELECT CER_EXG_RATE
       FROM   PT_TRIP_REIMB_HEAD, FM_EXCHANGE_RATE
       WHERE  TRRH_COMP_CODE  = P_COMP_CODE
       AND      TRRH_EMP_CODE   = P_EMP_CODE
       AND    TRRH_TICKET_CHARGE_CURR_CODE    =P_ENT_EXP_CURR
       AND      TRRH_TICKET_CHARGE_CURR_CODE = CER_CONV_TO_CURR_CODE
       AND      CER_CONV_FM_CURR_CODE = M_BASE_CURR
       AND    TRRH_FROM_DT >= CER_EFF_FRM_DT
       AND    TRRH_UPTO_DT <= CER_EFF_TO_DT
       AND    CER_EXG_RATE_TYPE = 'B';

M_EX_RATE_4            NUMBER;

CURSOR C8( P_EMP_CODE IN VARCHAR2 , P_OTH_CURR_CURR IN VARCHAR2) IS
     SELECT CER_EXG_RATE
       FROM   PT_TRIP_REIMB_HEAD, FM_EXCHANGE_RATE
       WHERE  TRRH_COMP_CODE  = P_COMP_CODE
       AND      TRRH_EMP_CODE   =P_EMP_CODE
       AND    TRRH_TICKET_CHARGE_CURR_CODE    =P_OTH_CURR_CURR
       AND      TRRH_TICKET_CHARGE_CURR_CODE = CER_CONV_TO_CURR_CODE
       AND      CER_CONV_FM_CURR_CODE = M_BASE_CURR
       AND    TRRH_FROM_DT >= CER_EFF_FRM_DT
       AND    TRRH_UPTO_DT <= CER_EFF_TO_DT
       AND    CER_EXG_RATE_TYPE = 'B';

M_EX_RATE_5            NUMBER;

CURSOR C9( P_EMP_CODE IN VARCHAR2 , P_CURR_CURR IN VARCHAR2) IS
      SELECT CER_EXG_RATE
        FROM   PT_TRIP_REIMB_HEAD, PT_TRIP_REIMB_VAR_COST, FM_EXCHANGE_RATE
        WHERE  TRRH_COMP_CODE  = P_COMP_CODE
        AND       TRRH_EMP_CODE   = P_EMP_CODE
        AND       TRRH_SYS_ID       = TRRVC_TRRH_SYS_ID
        AND    TRRVC_CURR_CODE        =P_CURR_CURR
--    AND    TRRH_TICKET_CHARGE_CURR_CODE    =:TRRH_TICKET_CHARGE_CURR_CODE
        AND       TRRH_TICKET_CHARGE_CURR_CODE = CER_CONV_TO_CURR_CODE
        AND       CER_CONV_FM_CURR_CODE = M_BASE_CURR
        AND    TRRH_FROM_DT >= CER_EFF_FRM_DT
        AND    TRRH_UPTO_DT <= CER_EFF_TO_DT
        AND    CER_EXG_RATE_TYPE = 'B';

M_EX_RATE_6            NUMBER;

BEGIN
   DELETE FROM PW_TRIP_AND_REIMBURSEMENT WHERE TR_REP_KEY_NO = P_REP_KEY_NO;
     MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;
   FOR I IN C1 LOOP

      M_NO_DAYS_AVIAL := ((I.TRRH_UPTO_DT - I.TRRH_FROM_DT)+1);

      M_FIXED_LC_COST := (NVL(I.TRRH_TICKET_LC_CHARGE,0) + NVL(I.TRRH_TRANSP_LC_CHARGE,0) + NVL(I.TRRH_TOT_PER_DIEM_LC,0) + NVL(I.TRRH_ACCO_LC_COST,0) + NVL(I.TRRH_ENT_EXP_LC_COST,0) + NVL(I.TRRH_OTH_LC_COST,0));

    /*  IF C2%ISOPEN THEN
             CLOSE C2;
        END IF;
        OPEN  C2;
        FETCH C2 INTO M_BASE_CURR;
        CLOSE C2;      */

      M_BASE_CURR:=F_GET_BASE_CURR(P_COMP_CODE);

        IF C3%ISOPEN THEN
            CLOSE C3;
        END IF;
        OPEN  C3(I.TRRH_EMP_CODE,I.TRRH_TICKET_CHARGE_CURR_CODE);
        FETCH C3 INTO M_EX_RATE;
        CLOSE C3;

      IF C4%ISOPEN THEN
             CLOSE C4;
        END IF;
        OPEN  C4(I.TRRH_EMP_CODE,I.TRRH_TRANSP_CURR_CODE);
        FETCH C4 INTO M_EX_RATE_1;
        CLOSE C4;

      IF C5%ISOPEN THEN
             CLOSE C5;
        END IF;
        OPEN  C5(I.TRRH_EMP_CODE,I.TRRH_TOT_PER_DIEM_CURR_CODE);
        FETCH C5 INTO M_EX_RATE_2;
        CLOSE C5;

      IF C6%ISOPEN THEN
             CLOSE C6;
        END IF;
        OPEN  C6(I.TRRH_EMP_CODE,I.TRRH_ACCO_COST_CURR_CODE);
        FETCH C6 INTO M_EX_RATE_3;
        CLOSE C6;

      IF C7%ISOPEN THEN
             CLOSE C7;
        END IF;
        OPEN  C7(I.TRRH_EMP_CODE,I.TRRH_ENT_EXP_CURR_CODE);
        FETCH C7 INTO M_EX_RATE_4;
        CLOSE C7;

      IF C8%ISOPEN THEN
             CLOSE C8;
        END IF;
        OPEN  C8(I.TRRH_EMP_CODE,I.TRRH_OTH_CURR_CODE);
        FETCH C8 INTO M_EX_RATE_5;
        CLOSE C8;

      IF C9%ISOPEN THEN
             CLOSE C9;
        END IF;
        OPEN  C9(I.TRRH_EMP_CODE,I.TRRVC_CURR_CODE);
        FETCH C9 INTO M_EX_RATE_6;
        CLOSE C9;

      INSERT INTO PW_TRIP_AND_REIMBURSEMENT ( TR_COMP_CODE,
                                              TR_REP_KEY_NO,
                                              TR_EMP_CODE,
                                              TR_EMP_NAME,
                                              TR_PERSONAL_GRADE,
                                              TR_LOCN_DESC,
                                              TR_REF_NO,
                                              TR_NO,
                                              TR_DT,
                                              TR_TYPE_DESC,
                                              TR_FLEXI_VAL,
                                              TR_FROM_DT,
                                              TR_UPTO_DT,
                                              TR_TICKET_CHARGE_CURR_CODE,
                                              TR_TRANSP_CURR_CODE,
                                              TR_TOT_PER_DIEM_CURR_CODE,
                                              TR_ACCO_COST_CURR_CODE,
                                              TR_ENT_EXP_CURR_CODE,
                                              TR_OTH_CURR_CODE,
                                              TR_TICKET_FC_CHARGE,
                                              TR_TRANSP_FC_CHARGE,
                                              TR_TOT_PER_DIEM_FC,
                                              TR_ACCO_FC_COST,
                                              TR_ENT_EXP_FC_COST,
                                              TR_OTH_FC_COST,
                                              TR_TICKET_LC_CHARGE,
                                              TR_TRANSP_LC_CHARGE,
                                              TR_TOT_PER_DIEM_LC,
                                              TR_ACCO_LC_COST,
                                              TR_ENT_EXP_LC_COST,
                                              TR_OTH_LC_COST,
                                              TR_DESCRIPTION,
                                              TR_CURR_CODE,
                                              TR_FC_COST,
                                              TR_LC_COST,
                                              TR_NO_DAYS_AVIAL,
                                              TR_FIXED_LC_COST,
                                              TR_EX_RATE,
                                              TR_EX_RATE_1,
                                              TR_EX_RATE_2,
                                              TR_EX_RATE_3,
                                              TR_EX_RATE_4,
                                              TR_EX_RATE_5,
                                              TR_EX_RATE_6)
                                     VALUES ( P_COMP_CODE,
                                              P_REP_KEY_NO,
                                              I.TRRH_EMP_CODE,
                                              I.EMP_NAME,
                                              I.EMP_PERSONAL_GRADE,
                                              I.LOCN_DESC,
                                              I.TXN_REF_NO,
                                              I.TXN_NO,
                                              I.TRRH_DT,
                                              I.TRIP_TYPE_DESC,
                                              I.TRAH_FLEXI_VAL1,
                                              I.TRRH_FROM_DT,
                                              I.TRRH_UPTO_DT,
                                              I.TRRH_TICKET_CHARGE_CURR_CODE,
                                              I.TRRH_TRANSP_CURR_CODE,
                                              I.TRRH_TOT_PER_DIEM_CURR_CODE,
                                              I.TRRH_ACCO_COST_CURR_CODE,
                                              I.TRRH_ENT_EXP_CURR_CODE,
                                              I.TRRH_OTH_CURR_CODE,
                                              I.TRRH_TICKET_FC_CHARGE,
                                              I.TRRH_TRANSP_FC_CHARGE,
                                              I.TRRH_TOT_PER_DIEM_FC,
                                              I.TRRH_ACCO_FC_COST,
                                              I.TRRH_ENT_EXP_FC_COST,
                                              I.TRRH_OTH_FC_COST,
                                              I.TRRH_TICKET_LC_CHARGE,
                                              I.TRRH_TRANSP_LC_CHARGE,
                                              I.TRRH_TOT_PER_DIEM_LC,
                                              I.TRRH_ACCO_LC_COST,
                                              I.TRRH_ENT_EXP_LC_COST,
                                              I.TRRH_OTH_LC_COST,
                                              I.TRRVC_DESCRIPTION,
                                              I.TRRVC_CURR_CODE,
                                              I.TRRVC_FC_COST,
                                              I.TRRVC_LC_COST,
                                              M_NO_DAYS_AVIAL,
                                              M_FIXED_LC_COST,
                                              M_EX_RATE,
                                              M_EX_RATE_1,
                                              M_EX_RATE_2,
                                              M_EX_RATE_3,
                                              M_EX_RATE_4,
                                              M_EX_RATE_5,
                                              M_EX_RATE_6);




   END LOOP;


END P_TRIP_AND_REIMBURSEMENT;

PROCEDURE P_TRIP_EXPENSES ( P_COMP_CODE   IN VARCHAR2,
                            P_REP_KEY_NO  IN NUMBER,
                            P_FM_DIVN     IN VARCHAR2,
                            P_TO_DIVN     IN VARCHAR2,
                            P_FM_DEPT     IN VARCHAR2,
                            P_TO_DEPT     IN VARCHAR2,
                            P_FM_LOCN     IN VARCHAR2,
                            P_TO_LOCN     IN VARCHAR2,
                            P_FM_DT       IN DATE,
                            P_TO_DT       IN DATE,
                            P_FM_EMP      IN VARCHAR2,
                            P_TO_EMP      IN VARCHAR2,
                            P_FM_TRIP     IN VARCHAR2,
                            P_TO_TRIP     IN VARCHAR2) IS
                            MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;

CURSOR C1 IS
      SELECT TRAH_EMP_CODE, DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) EMP_NAME, EMP_PERSONAL_GRADE, DECODE(MM_LANG_CODE, 'ENG',LOCN_DESC ,'LANG_01',LOCN_DESC_LANG_01,'LANG_02',LOCN_DESC_LANG_02,'LANG_03',LOCN_DESC_LANG_03,'LANG_04',LOCN_DESC_LANG_04,'LANG_05',LOCN_DESC_LANG_05,'LANG_06',LOCN_DESC_LANG_06,'LANG_07',LOCN_DESC_LANG_07,'LANG_08',LOCN_DESC_LANG_08,'LANG_09',LOCN_DESC_LANG_09,'LANG_10',LOCN_DESC_LANG_10) LOCN_DESC, TRAH_TXN_CODE||'-'||TRAH_NO TXN_NO,
               TRAH_DT, TRAH_APPR_DT, DECODE(MM_LANG_CODE, 'ENG',TRIP_TYPE_DESC ,'LANG_01',TRIP_TYPE_DESC_LANG_01,'LANG_02',TRIP_TYPE_DESC_LANG_02,'LANG_03',TRIP_TYPE_DESC_LANG_03,'LANG_04',TRIP_TYPE_DESC_LANG_04,'LANG_05',TRIP_TYPE_DESC_LANG_05,'LANG_06',TRIP_TYPE_DESC_LANG_06,'LANG_07',TRIP_TYPE_DESC_LANG_07,'LANG_08',TRIP_TYPE_DESC_LANG_08,'LANG_09',TRIP_TYPE_DESC_LANG_09,'LANG_10',TRIP_TYPE_DESC_LANG_10) TRIP_TYPE_DESC, TRAH_FLEXI_VAL1, TRAH_FROM_DT, TRAH_UPTO_DT,
               TRAH_NO_DAYS, TRAH_TICKET_CHARGE_CURR_CODE, TRAH_TICKET_FC_CHARGE, TRAH_TICKET_LC_CHARGE,
               TRAH_TRANSP_CURR_CODE, TRAH_TRANSP_FC_CHARGE, TRAH_TRANSP_LC_CHARGE, TRAH_TOT_PER_DIEM_CURR_CODE,
               TRAH_TOT_PER_DIEM_FC, TRAH_TOT_PER_DIEM_LC, TRAH_ACCO_COST_CURR_CODE, TRAH_ACCO_FC_COST,
               TRAH_ACCO_LC_COST, TRAH_ENT_EXP_CURR_CODE, TRAH_ENT_EXP_FC_COST, TRAH_ENT_EXP_LC_COST,
               TRAH_OTH_CURR_CODE, TRAH_OTH_FC_COST, TRAH_OTH_LC_COST, TRAVC_DESCRIPTION,
               TRAVC_CURR_CODE, TRAVC_FC_COST, TRAVC_LC_COST
      FROM   PM_EMP_KEY, FM_DIVISION, FM_DEPARTMENT, PM_LOCN, PM_TRIP_TYPE, PT_TRIP_APPLICATION_HEAD,
               PT_TRIP_APPLICATION_VAR_COST
      WHERE  EMP_COMP_CODE   = TRAH_COMP_CODE
      AND    DIVN_COMP_CODE  = EMP_COMP_CODE
      AND       DEPT_COMP_CODE  = EMP_COMP_CODE
      AND       DIVN_CODE       = EMP_DIVN_CODE
      AND       DIVN_CODE       = DEPT_DIVN_CODE
      AND       DEPT_CODE       = EMP_DEPT_CODE
      AND       LOCN_CODE       = EMP_LOCN_CODE
      AND       TRIP_TYPE_CODE  = TRAH_TRIP_TYPE_CODE
      AND    EMP_CODE           = TRAH_EMP_CODE
      AND       TRAH_SYS_ID       = TRAVC_TRAH_SYS_ID
      AND    TRAH_APPR_UID   IS NOT NULL
      AND       TRAH_APPR_DT    IS NOT NULL
      AND       TRAH_COMP_CODE  = P_COMP_CODE
      AND    EMP_DIVN_CODE   BETWEEN P_FM_DIVN AND P_TO_DIVN
      AND       EMP_DEPT_CODE   BETWEEN P_FM_DEPT AND P_TO_DEPT
      AND       TRAH_DT           BETWEEN P_FM_DT AND P_TO_DT
      AND       EMP_LOCN_CODE   BETWEEN P_FM_LOCN AND P_TO_LOCN
      AND       TRAH_EMP_CODE   BETWEEN P_FM_EMP  AND P_TO_EMP
      AND       TRAH_TRIP_TYPE_CODE BETWEEN P_FM_TRIP  AND P_TO_TRIP;

M_FIXED_LC_COST            NUMBER;

M_BASE_CURR        VARCHAR2(12);
M_EX_RATE            NUMBER;

CURSOR C2 IS
        SELECT PARA_VALUE
        FROM   PM_PARAMETER
        WHERE  PARA_TYPE = 'BASECURR';

CURSOR C3(P_EMP_CODE IN VARCHAR2,P_TICKET_CHARGE_CURR IN VARCHAR2) IS
      SELECT CER_EXG_RATE
        FROM   PT_TRIP_APPLICATION_HEAD, FM_EXCHANGE_RATE
            WHERE  TRAH_COMP_CODE  =P_COMP_CODE
            AND       TRAH_EMP_CODE   =P_EMP_CODE
            AND    TRAH_TICKET_CHARGE_CURR_CODE    =P_TICKET_CHARGE_CURR
            AND       TRAH_TICKET_CHARGE_CURR_CODE = CER_CONV_TO_CURR_CODE
            AND       CER_CONV_FM_CURR_CODE = M_BASE_CURR
            AND    TRAH_FROM_DT >= CER_EFF_FRM_DT
            AND    TRAH_UPTO_DT <= CER_EFF_TO_DT
        AND    CER_EXG_RATE_TYPE = 'B';

CURSOR C4(P_EMP_CODE IN VARCHAR2,P_TRANSP_CURR IN VARCHAR2) IS
     SELECT CER_EXG_RATE
       FROM   PT_TRIP_APPLICATION_HEAD, FM_EXCHANGE_RATE
       WHERE  TRAH_COMP_CODE  =P_COMP_CODE
       AND       TRAH_EMP_CODE   =P_EMP_CODE
       AND    TRAH_TICKET_CHARGE_CURR_CODE    =P_TRANSP_CURR
       AND       TRAH_TICKET_CHARGE_CURR_CODE = CER_CONV_TO_CURR_CODE
       AND       CER_CONV_FM_CURR_CODE = M_BASE_CURR
       AND    TRAH_FROM_DT >= CER_EFF_FRM_DT
       AND    TRAH_UPTO_DT <= CER_EFF_TO_DT
       AND    CER_EXG_RATE_TYPE = 'B';

M_EX_RATE_1            NUMBER;

CURSOR C5(P_EMP_CODE IN VARCHAR2,P_TOT_PER_DIEM_CURR IN VARCHAR2) IS
      SELECT CER_EXG_RATE
        FROM   PT_TRIP_APPLICATION_HEAD, FM_EXCHANGE_RATE
        WHERE  TRAH_COMP_CODE  =P_COMP_CODE
        AND       TRAH_EMP_CODE   =P_EMP_CODE
        AND    TRAH_TICKET_CHARGE_CURR_CODE    =P_TOT_PER_DIEM_CURR
        AND       TRAH_TICKET_CHARGE_CURR_CODE = CER_CONV_TO_CURR_CODE
        AND       CER_CONV_FM_CURR_CODE = M_BASE_CURR
        AND    TRAH_FROM_DT >= CER_EFF_FRM_DT
        AND    TRAH_UPTO_DT <= CER_EFF_TO_DT
        AND    CER_EXG_RATE_TYPE = 'B';

M_EX_RATE_2 NUMBER;

CURSOR C6(P_EMP_CODE IN VARCHAR2,P_ACCO_COST_CURR IN VARCHAR2) IS
      SELECT CER_EXG_RATE
        FROM   PT_TRIP_APPLICATION_HEAD, FM_EXCHANGE_RATE
        WHERE  TRAH_COMP_CODE  =P_COMP_CODE
        AND       TRAH_EMP_CODE   =TRAH_EMP_CODE
        AND    TRAH_TICKET_CHARGE_CURR_CODE    =P_ACCO_COST_CURR
        AND       TRAH_TICKET_CHARGE_CURR_CODE = CER_CONV_TO_CURR_CODE
        AND       CER_CONV_FM_CURR_CODE = M_BASE_CURR
        AND    TRAH_FROM_DT >= CER_EFF_FRM_DT
        AND    TRAH_UPTO_DT <= CER_EFF_TO_DT
        AND    CER_EXG_RATE_TYPE = 'B';

M_EX_RATE_3 NUMBER;

CURSOR C7(P_EMP_CODE IN VARCHAR2,P_ENT_EXP_CURR IN VARCHAR2) IS
      SELECT CER_EXG_RATE
        FROM   PT_TRIP_APPLICATION_HEAD, FM_EXCHANGE_RATE
        WHERE  TRAH_COMP_CODE  =P_COMP_CODE
        AND       TRAH_EMP_CODE   =P_EMP_CODE
        AND    TRAH_TICKET_CHARGE_CURR_CODE    =P_ENT_EXP_CURR
        AND       TRAH_TICKET_CHARGE_CURR_CODE = CER_CONV_TO_CURR_CODE
        AND       CER_CONV_FM_CURR_CODE = M_BASE_CURR
        AND    TRAH_FROM_DT >= CER_EFF_FRM_DT
        AND    TRAH_UPTO_DT <= CER_EFF_TO_DT
        AND    CER_EXG_RATE_TYPE = 'B';

M_EX_RATE_4 NUMBER;

CURSOR C8(P_EMP_CODE IN VARCHAR2,P_OTH_CURR IN VARCHAR2) IS
      SELECT CER_EXG_RATE
        FROM   PT_TRIP_APPLICATION_HEAD, FM_EXCHANGE_RATE
        WHERE  TRAH_COMP_CODE  =P_COMP_CODE
        AND       TRAH_EMP_CODE   =P_EMP_CODE
        AND    TRAH_TICKET_CHARGE_CURR_CODE    =P_OTH_CURR
        AND       TRAH_TICKET_CHARGE_CURR_CODE = CER_CONV_TO_CURR_CODE
        AND       CER_CONV_FM_CURR_CODE = M_BASE_CURR
        AND    TRAH_FROM_DT >= CER_EFF_FRM_DT
        AND    TRAH_UPTO_DT <= CER_EFF_TO_DT
        AND    CER_EXG_RATE_TYPE = 'B';

M_EX_RATE_5 NUMBER;

CURSOR C9(P_EMP_CODE IN VARCHAR2,P_CURR_CODE IN VARCHAR2) IS
      SELECT CER_EXG_RATE
        FROM   PT_TRIP_APPLICATION_HEAD, PT_TRIP_APPLICATION_VAR_COST, FM_EXCHANGE_RATE
        WHERE  TRAH_COMP_CODE  =P_COMP_CODE
        AND       TRAH_EMP_CODE   =P_EMP_CODE
        AND       TRAH_SYS_ID       = TRAVC_TRAH_SYS_ID
        AND    TRAVC_CURR_CODE        =P_CURR_CODE
        AND       TRAH_TICKET_CHARGE_CURR_CODE = CER_CONV_TO_CURR_CODE
        AND       CER_CONV_FM_CURR_CODE = M_BASE_CURR
        AND    TRAH_FROM_DT >= CER_EFF_FRM_DT
        AND    TRAH_UPTO_DT <= CER_EFF_TO_DT
        AND    CER_EXG_RATE_TYPE = 'B';

M_EX_RATE_6 NUMBER;

CURSOR C10(P_EMP_CODE IN VARCHAR2) IS
   SELECT EMP_JOB_LONG_DESC
   FROM PM_EMP_KEY
   WHERE EMP_CODE = P_EMP_CODE
   AND EMP_COMP_CODE = P_COMP_CODE;

   M_DESIGNATION VARCHAR2(2000);

BEGIN

   DELETE FROM PW_TRIP_EXPENSES WHERE TE_REP_KEY_NO = P_REP_KEY_NO;

       MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;




   FOR I IN C1 LOOP

       M_FIXED_LC_COST := (NVL(I.TRAH_TICKET_LC_CHARGE,0) + NVL(I.TRAH_TRANSP_LC_CHARGE,0) + NVL(I.TRAH_TOT_PER_DIEM_LC,0) + NVL(I.TRAH_ACCO_LC_COST,0) + NVL(I.TRAH_ENT_EXP_LC_COST,0) + NVL(I.TRAH_OTH_LC_COST,0));

     /*  IF C2%ISOPEN THEN
              CLOSE C2;
         END IF;
         OPEN  C2;
         FETCH C2 INTO M_BASE_CURR;
         CLOSE C2;      */
       M_BASE_CURR:=F_GET_BASE_CURR(P_COMP_CODE);

       IF C3%ISOPEN THEN
              CLOSE C3;
         END IF;
         OPEN  C3(I.TRAH_EMP_CODE,I.TRAH_TICKET_CHARGE_CURR_CODE);
         FETCH C3 INTO M_EX_RATE;
       M_EX_RATE := Nvl(M_EX_RATE,0);
         CLOSE C3;

       IF C4%ISOPEN THEN
              CLOSE C4;
         END IF;
         OPEN  C4(I.TRAH_EMP_CODE,I.TRAH_TRANSP_CURR_CODE);
         FETCH C4 INTO M_EX_RATE_1;
       M_EX_RATE_1 := Nvl(M_EX_RATE_1,0);
         CLOSE C4;

       IF C5%ISOPEN THEN
              CLOSE C5;
         END IF;
         OPEN  C5(I.TRAH_EMP_CODE,I.TRAH_TOT_PER_DIEM_CURR_CODE);
         FETCH C5 INTO M_EX_RATE_2;
       M_EX_RATE_2 := Nvl(M_EX_RATE_2,0);
         CLOSE C5;

       IF C6%ISOPEN THEN
              CLOSE C6;
         END IF;
         OPEN  C6(I.TRAH_EMP_CODE,I.TRAH_ACCO_COST_CURR_CODE);
         FETCH C6 INTO M_EX_RATE_3;
       M_EX_RATE_3 := Nvl(M_EX_RATE_3,0);
         CLOSE C6;

       IF C7%ISOPEN THEN
              CLOSE C7;
         END IF;
         OPEN  C7(I.TRAH_EMP_CODE,I.TRAH_ENT_EXP_CURR_CODE);
         FETCH C7 INTO M_EX_RATE_4;
       M_EX_RATE_4 := Nvl(M_EX_RATE_4,0);
         CLOSE C7;

       IF C8%ISOPEN THEN
              CLOSE C8;
         END IF;
         OPEN  C8(I.TRAH_EMP_CODE,I.TRAH_OTH_CURR_CODE);
         FETCH C8 INTO M_EX_RATE_5;
       M_EX_RATE_5 := Nvl(M_EX_RATE_5,0);
         CLOSE C8;

       IF C9%ISOPEN THEN
              CLOSE C9;
         END IF;
         OPEN  C9(I.TRAH_EMP_CODE,I.TRAVC_CURR_CODE);
         FETCH C9 INTO M_EX_RATE_6;
       M_EX_RATE_6 := Nvl(M_EX_RATE_6,0);
         CLOSE C9;

       IF C10%ISOPEN THEN
              CLOSE C10;
         END IF;
         OPEN  C10(I.TRAH_EMP_CODE);
         FETCH C10 INTO M_DESIGNATION;
       CLOSE C10;

       INSERT INTO PW_TRIP_EXPENSES  ( TE_COMP_CODE,
                                       TE_REP_KEY_NO,
                                       TE_EMP_CODE,
                                       TE_EMP_NAME,
                                       TE_PERSONAL_GRADE,
                                       TE_LOCN_DESC,
                                       TE_TXN_NO,
                                       TE_DT,
                                       TE_APPR_DT,
                                       TE_TYPE_DESC,
                                       TE_FLEXI_VAL,
                                       TE_FROM_DT,
                                       TE_UPTO_DT,
                                       TE_NO_DAYS,
                                       TE_TICKET_CHARGE_CURR_CODE,
                                       TE_TICKET_FC_CHARGE,
                                       TE_TICKET_LC_CHARGE,
                                       TE_TRANSP_CURR_CODE,
                                       TE_TRANSP_FC_CHARGE,
                                       TE_TRANSP_LC_CHARGE,
                                       TE_TOT_PER_DIEM_CURR_CODE,
                                       TE_TOT_PER_DIEM_FC,
                                       TE_TOT_PER_DIEM_LC,
                                       TE_ACCO_COST_CURR_CODE,
                                       TE_ACCO_FC_COST,
                                       TE_ACCO_LC_COST,
                                       TE_ENT_EXP_CURR_CODE,
                                       TE_ENT_EXP_FC_COST,
                                       TE_ENT_EXP_LC_COST,
                                       TE_OTH_CURR_CODE,
                                       TE_OTH_FC_COST,
                                       TE_OTH_LC_COST,
                                       TE_DESCRIPTION,
                                       TE_CURR_CODE,
                                       TE_FC_COST,
                                       TE_LC_COST,
                                       TE_FIXED_LC_COST,
                                       TE_EX_RATE,
                                       TE_EX_RATE_1,
                                       TE_EX_RATE_2,
                                       TE_EX_RATE_3,
                                       TE_EX_RATE_4,
                                       TE_EX_RATE_5,
                                       TE_EX_RATE_6,
                                       TE_DESIGNATION)
                              VALUES ( P_COMP_CODE,
                                       P_REP_KEY_NO,
                                       I.TRAH_EMP_CODE,
                                       I.EMP_NAME,
                                       I.EMP_PERSONAL_GRADE,
                                       I.LOCN_DESC,
                                       I.TXN_NO,
                                       I.TRAH_DT,
                                       I.TRAH_APPR_DT,
                                       I.TRIP_TYPE_DESC,
                                       I.TRAH_FLEXI_VAL1,
                                       I.TRAH_FROM_DT,
                                       I.TRAH_UPTO_DT,
                                       I.TRAH_NO_DAYS,
                                       I.TRAH_TICKET_CHARGE_CURR_CODE,
                                       I.TRAH_TICKET_FC_CHARGE,
                                       I.TRAH_TICKET_LC_CHARGE,
                                       I.TRAH_TRANSP_CURR_CODE,
                                       I.TRAH_TRANSP_FC_CHARGE,
                                       I.TRAH_TRANSP_LC_CHARGE,
                                       I.TRAH_TOT_PER_DIEM_CURR_CODE,
                                       I.TRAH_TOT_PER_DIEM_FC,
                                       I.TRAH_TOT_PER_DIEM_LC,
                                       I.TRAH_ACCO_COST_CURR_CODE,
                                       I.TRAH_ACCO_FC_COST,
                                       I.TRAH_ACCO_LC_COST,
                                       I.TRAH_ENT_EXP_CURR_CODE,
                                       I.TRAH_ENT_EXP_FC_COST,
                                       I.TRAH_ENT_EXP_LC_COST,
                                       I.TRAH_OTH_CURR_CODE,
                                       I.TRAH_OTH_FC_COST,
                                       I.TRAH_OTH_LC_COST,
                                       I.TRAVC_DESCRIPTION,
                                       I.TRAVC_CURR_CODE,
                                       I.TRAVC_FC_COST,
                                       I.TRAVC_LC_COST,
                                       M_FIXED_LC_COST,
                                       M_EX_RATE,
                                       M_EX_RATE_1,
                                       M_EX_RATE_2,
                                       M_EX_RATE_3,
                                       M_EX_RATE_4,
                                       M_EX_RATE_5,
                                       M_EX_RATE_6,
                                       M_DESIGNATION);

   END LOOP;

END P_TRIP_EXPENSES;

PROCEDURE P_DISC_ACTION ( P_COMP_CODE   IN VARCHAR2,
                          P_REP_KEY_NO  IN NUMBER,
                          P_FM_EMP      IN VARCHAR2,
                          P_TO_EMP      IN VARCHAR2,
                          P_FM_TXN      IN VARCHAR2,
                          P_TO_TXN      IN VARCHAR2,
                          P_FM_DOC_NO   IN NUMBER,
                          P_TO_DOC_NO   IN NUMBER,
                          P_FM_DOC_DT   IN DATE,
                          P_TO_DOC_DT   IN DATE) IS

                          MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;



CURSOR C1 IS
      SELECT DISTINCT DISCA_EMP_CODE "Q_1_DISCA_EMP_CODE", DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) "Q_1_EMP_SHORT_NAME",
             DISCA_DT "Q_1_DISCA_DT", DISCA_TXN_CODE ||'-'||DISCA_NO "Q_1_DISCA_NO", DISCA_DISC_CODE "Q_1_DISCA_DISC_CODE",
             DISC_SHORT_DESC    "Q_1_DISC_SHORT_DESC", DISCA_COMM_CODE   "Q_1_DISC_COMM_CODE",
             COMH_SHORT_DESC "Q_1_DISCA_COMM_DESC", decode(SUBSTR(DISCA_REMARKS,1,60),NULL,'No Disc. Remarks',SUBSTR(DISCA_REMARKS,1,60)) "Q_1_DISCA_REMARKS",
             decode(disca_ref_from, 'D',' - ', TO_CHAR(SHOC_DT,'DD/MM/YYYY') )"Q_1_SHOC_DT",
             decode(disca_ref_from, 'D',' - ', SHOC_NO) "Q_1_SHOC_NO",
             decode(disca_ref_from, 'D','No Referred Transaction', decode(SUBSTR(SHOC_REMARKS,1,60),NULL, 'No Show cause Remarks',SUBSTR(SHOC_REMARKS,1,60))) "Q_1_SHOC_REMARKS"
      FROM   PT_DISCIPLINE_ACTION, PM_DISCIPLINE, FM_CURRENCY, PM_ALLOWANCE     , PM_REASON, PM_TXN_TYPE, PM_EMP_KEY,PM_COMMITTEE_HEAD, PT_SHOW_CAUSE
      WHERE     EMP_CODE(+) = DISCA_EMP_CODE
      AND    DISC_CODE(+) = DISCA_DISC_CODE
      AND    CURR_CODE(+) = DISCA_DEDUC_CURR_CODE
      AND    ALLW_CODE(+) = DISCA_DEDUC_CODE
      AND    DISCA_COMP_CODE = P_COMP_CODE
      AND    DISCA_EMP_CODE BETWEEN P_FM_EMP AND P_TO_EMP
      AND    DISCA_TXN_CODE BETWEEN P_FM_TXN AND          P_TO_TXN
      AND    DISCA_DT BETWEEN P_FM_DOC_DT AND  P_TO_DOC_DT
      AND    DISCA_NO BETWEEN P_FM_DOC_NO AND  P_TO_DOC_NO
      AND    TT_SHORT_CODE(+) =  DISCA_REF_FROM
      AND    RES_CODE(+)  =  DISCA_AMD_RES_CODE
      AND    COMH_CODE(+) = DISCA_COMM_CODE
      AND    ( SHOC_SYS_ID = DISCA_REF_SYS_ID
      OR     DISCA_REF_FROM = 'D')
      ORDER BY DISCA_EMP_CODE, DISCA_DT;

BEGIN

   DELETE FROM PW_DISC_ACTION WHERE  DA_REP_KEY_NO = P_REP_KEY_NO;

    MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;



   FOR I IN C1 LOOP

       INSERT INTO  PW_DISC_ACTION ( DA_COMP_CODE,
                                     DA_REP_KEY_NO,
                                     DA_Q_1_DISCA_EMP_CODE,
                                     DA_Q_1_EMP_SHORT_NAME,
                                     DA_Q_1_DISCA_DT,
                                     DA_Q_1_DISCA_NO,
                                     DA_Q_1_DISCA_DISC_CODE,
                                     DA_Q_1_DISC_SHORT_DESC,
                                     DA_Q_1_DISC_COMM_CODE,
                                     DA_Q_1_DISCA_COMM_DESC,
                                     DA_Q_1_DISCA_REMARKS,
                                     DA_Q_1_SHOC_DT,
                                     DA_Q_1_SHOC_NO,
                                     DA_Q_1_SHOC_REMARKS)
                            VALUES ( P_COMP_CODE,
                                     P_REP_KEY_NO,
                                     I.Q_1_DISCA_EMP_CODE,
                                     I.Q_1_EMP_SHORT_NAME,
                                     I.Q_1_DISCA_DT,
                                     I.Q_1_DISCA_NO,
                                     I.Q_1_DISCA_DISC_CODE,
                                     I.Q_1_DISC_SHORT_DESC,
                                     I.Q_1_DISC_COMM_CODE,
                                     I.Q_1_DISCA_COMM_DESC,
                                     I.Q_1_DISCA_REMARKS,
                                     I.Q_1_SHOC_DT,
                                     I.Q_1_SHOC_NO,
                                     I.Q_1_SHOC_REMARKS);

   END LOOP;

END P_DISC_ACTION;

PROCEDURE P_MONTHLY_WISE_TAX_SUM( P_COMP_CODE  IN VARCHAR2,
                                  P_REP_KEY_NO IN NUMBER,
                                  P_ASS_YEAR   IN VARCHAR2,
                                  P_FM_MONTH   IN NUMBER,
                                  P_TO_MONTH   IN NUMBER) IS

CURSOR C1 IS
      SELECT ITS_MONTH, SUM(ITS_TOT_ITAX) ITS_TOT_ITAX
      FROM   PS_IT_ITAX
      WHERE  ITS_COMP_CODE= P_COMP_CODE
      AND    ITS_ASSESSMENT_YEAR=  P_ASS_YEAR
      AND    ITS_MONTH BETWEEN TO_NUMBER(P_FM_MONTH) AND TO_NUMBER( P_TO_MONTH)
      GROUP BY ITS_MONTH;

M_MON_IN_WRDS VARCHAR2(20);

BEGIN

   FOR I IN C1 LOOP

      P_GET_MONTH(I.ITS_MONTH, M_MON_IN_WRDS);

      INSERT INTO PW_MONTHLY_WISE_TAX_SUM( MWTS_COMP_CODE,
                                           MWTS_REP_KEY_NO,
                                           MWTS_MONTH,
                                           MWTS_TOT_ITAX,
                                           MWTS_MON_IN_WRDS)
                                  VALUES ( P_COMP_CODE,
                                           P_REP_KEY_NO,
                                           I.ITS_MONTH,
                                           I.ITS_TOT_ITAX,
                                           M_MON_IN_WRDS);

   END LOOP;

END P_MONTHLY_WISE_TAX_SUM;
PROCEDURE P_GET_MONTH ( P_MONTH  IN VARCHAR2,
                      P_WORD   IN OUT VARCHAR2) IS


   CURSOR C1 IS
     SELECT DECODE(P_MONTH, '01','January','02','February','03','March','04','April','05','May','06','June',
                   '07','July','08','August','09','September','10','October','11','November','12','December')
     FROM DUAL ;
BEGIN

   IF C1%ISOPEN THEN
        CLOSE C1;
   END IF;

   OPEN C1 ;
      FETCH C1 INTO P_WORD ;
   CLOSE C1 ;

END  P_GET_MONTH ;

PROCEDURE P_EMP_WISE_TAX_SUM ( P_COMP_CODE  IN VARCHAR2,
                               P_REP_KEY_NO IN NUMBER,
                               P_ASS_YEAR   IN VARCHAR2,
                               P_FM_EMP     IN VARCHAR2,
                               P_TO_EMP     IN VARCHAR2) IS

CURSOR C1 IS
      SELECT A.ITS_EMP_CODE EMP_CODE, B.EMP_NAME EMP_NAME, SUM(A.ITS_TOT_ITAX) ITS_TOT_ITAX
      FROM   PS_IT_ITAX   A,  PM_EMP_KEY B
      WHERE  A.ITS_EMP_CODE = B.EMP_CODE
      AND    A.ITS_COMP_CODE= P_COMP_CODE
      AND    A.ITS_ASSESSMENT_YEAR=  P_ASS_YEAR
      AND    A.ITS_EMP_CODE BETWEEN P_FM_EMP AND P_TO_EMP
      GROUP BY A.ITS_EMP_CODE, B.EMP_NAME;

BEGIN

      DELETE FROM PW_EMP_WISE_TAX_SUM WHERE EWTS_REP_KEY_NO = P_REP_KEY_NO;

      FOR I IN C1 LOOP

         INSERT INTO PW_EMP_WISE_TAX_SUM ( EWTS_COMP_CODE,
                                           EWTS_REP_KEY_NO,
                                           EWTS_EMP_CODE,
                                           EWTS_EMP_NAME,
                                           EWTS_IT_AMOUNT)
                                  VALUES ( P_COMP_CODE,
                                           P_REP_KEY_NO,
                                           I.EMP_CODE ,
                                           I.EMP_NAME,
                                           I.ITS_TOT_ITAX);


      END LOOP;

END P_EMP_WISE_TAX_SUM;

PROCEDURE P_EMP_WISE_DET_TAX ( P_COMP_CODE  IN VARCHAR2,
                               P_REP_KEY_NO IN NUMBER,
                               P_ASS_YEAR   IN VARCHAR2,
                               P_FM_EMP     IN VARCHAR2,
                               P_TO_EMP     IN VARCHAR2) IS

CURSOR C1 IS
      SELECT A.ITS_EMP_CODE EMP_CODE,  B.EMP_NAME EMP_NAME, SUM(A.ITS_TOT_ITAX) ITS_TOT_ITAX,
             A.ITS_COMP_CODE COMP_CODE, A.ITS_ASSESSMENT_YEAR ASSESSMENT_YEAR
      FROM   PS_IT_ITAX  A,  PM_EMP_KEY  B
      WHERE  A.ITS_EMP_CODE = B.EMP_CODE
      AND    A.ITS_COMP_CODE= P_COMP_CODE
      AND    A.ITS_ASSESSMENT_YEAR= P_ASS_YEAR
      AND    A.ITS_EMP_CODE BETWEEN P_FM_EMP AND P_TO_EMP
      GROUP BY A.ITS_COMP_CODE, A.ITS_ASSESSMENT_YEAR, A.ITS_EMP_CODE, B.EMP_NAME;

CURSOR C2(P_EMP IN VARCHAR2, P_COMP IN VARCHAR2,P_YEAR IN VARCHAR2) IS
      SELECT ITS_MONTH,ITS_TOT_ITAX,ITS_EMP_CODE, ITS_COMP_CODE,ITS_ASSESSMENT_YEAR
      FROM   PS_IT_ITAX
      WHERE  ITS_COMP_CODE = P_COMP
      AND    ITS_EMP_CODE  = P_EMP
      AND    ITS_ASSESSMENT_YEAR = P_YEAR
      ORDER BY  ITS_EMP_CODE,  ITS_MONTH;

M_MONTH NUMBER;
M_TAX NUMBER;
M_EMP_CODE VARCHAR2(12);
M_COMP_CODE VARCHAR2(12);
M_ASS_YEAR VARCHAR2(10);

BEGIN

      DELETE FROM PW_EMP_WISE_DET_TAX WHERE EWDT_REP_KEY_NO = P_REP_KEY_NO;

      FOR I IN C1 LOOP

         IF C2%ISOPEN THEN
            CLOSE C2;
         END IF;

         OPEN C2(I.EMP_CODE,I.COMP_CODE,I.ASSESSMENT_YEAR);
         FETCH C2 INTO M_MONTH,M_TAX,M_EMP_CODE,M_COMP_CODE,M_ASS_YEAR;
         CLOSE C2;

          INSERT INTO PW_EMP_WISE_DET_TAX  ( EWDT_COMP_CODE,
                                             EWDT_REP_KEY_NO,
                                             EWDT_EMP_CODE,
                                             EWDT_EMP_NAME,
                                             EWDT_IT_AMOUNT,
                                             EWDT_ASSEMENT_YEAR,
                                             EWDT_MONTH,
                                             EWDT_DET_TOT_ITAX,
                                             EWDT_DET_EMP_CODE,
                                             EWDT_DET_COMP_CODE,
                                             EWDT_DET_ASS_YEAR)
                                    VALUES ( P_COMP_CODE,
                                             P_REP_KEY_NO,
                                             I.EMP_CODE,
                                             I.EMP_NAME,
                                             I.ITS_TOT_ITAX,
                                             I.ASSESSMENT_YEAR,
                                             M_MONTH,
                                             M_TAX,
                                             M_EMP_CODE,
                                             M_COMP_CODE,
                                             M_ASS_YEAR);

      END LOOP;

END P_EMP_WISE_DET_TAX;

PROCEDURE P_TAX_DEDUCTION_CARD( P_COMP_CODE  IN VARCHAR2,
                                P_REP_KEY_NO IN NUMBER,
                                P_FM_EMP     IN VARCHAR2,
                                P_TO_EMP     IN VARCHAR2,
                                P_YEAR       IN NUMBER) IS

                                MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;
CURSOR C1 IS
      SELECT EMP_CODE,DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) EMP_NAME,DECODE(MM_LANG_CODE, 'ENG',EMP_SHORT_NAME ,'LANG_01',EMP_SHORT_NAME_LANG_01,'LANG_02',EMP_SHORT_NAME_LANG_02,'LANG_03',EMP_SHORT_NAME_LANG_03,'LANG_04',EMP_SHORT_NAME_LANG_04,'LANG_05',EMP_SHORT_NAME_LANG_05,'LANG_06',EMP_SHORT_NAME_LANG_06,'LANG_07',EMP_SHORT_NAME_LANG_07,'LANG_08',EMP_SHORT_NAME_LANG_08,'LANG_09',EMP_SHORT_NAME_LANG_09,'LANG_10',EMP_SHORT_NAME_LANG_10) EMP_SHORT_NAME,EMP_PAN_NO,ITP_EMP_CODE,TO_CHAR(TO_DATE(ITP_CPMTH,'RRRRMM'),'Month') MTH,
             ITP_CPMTH,ITP_GROSS_PAY,ITP_BENEFITS,ITP_AMOUNT_1,ITP_AMOUNT_2, ITP_AMOUNT_3,ITP_AMOUNT_4,ITP_AMOUNT_5,
             ITP_AMOUNT_6,ITP_AMOUNT_7,ITP_TAXABLE_AMT,ITP_TAX_AMT,ITP_AMOUNT_8, ITP_TAX_PAYABLE
       FROM  PS_IT_PROC,PM_EMP_KEY
       WHERE ITP_COMP_CODE = P_COMP_CODE
       AND   ITP_EMP_CODE = EMP_CODE
       AND   ITP_EMP_CODE BETWEEN P_FM_EMP AND P_TO_EMP
       AND   SUBSTR(ITP_CPMTH,1,4) = P_YEAR
       ORDER BY EMP_CODE,ITP_CPMTH;

CURSOR C2 IS
      SELECT DISTINCT COMP_CODE,COMP_NAME,COMP_TAN_NO
      FROM   FM_COMPANY,PM_EMP_KEY,PM_COMP_TDS_MASTER
      WHERE  COMP_TDS_CODE = COMP_CODE;

BEGIN

   DELETE FROM PW_TAX_DEDUCTION_CARD WHERE TDC_REP_KEY_NO = P_REP_KEY_NO;
      MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;



   FOR I IN C1 LOOP

       INSERT INTO PW_TAX_DEDUCTION_CARD ( TDC_COMP_CODE,
                                           TDC_REP_KEY_NO,
                                           TDC_EMP_CODE,
                                           TDC_EMP_NAME,
                                           TDC_EMP_SHORT_NAME,
                                           TDC_PAN_NO,
                                           TDC_ITP_EMP_CODE,
                                           TDC_MTH,
                                           TDC_CPMTH,
                                           TDC_GROSS_PAY,
                                           TDC_BENEFITS,
                                           TDC_AMOUNT_1,
                                           TDC_AMOUNT_2,
                                           TDC_AMOUNT_3,
                                           TDC_AMOUNT_4,
                                           TDC_AMOUNT_5,
                                           TDC_AMOUNT_6,
                                           TDC_AMOUNT_7,
                                           TDC_TAXABLE_AMT,
                                           TDC_TAX_AMT,
                                           TDC_AMOUNT_8,
                                           TDC_TAX_PAYABLE)
                                  VALUES ( P_COMP_CODE,
                                           P_REP_KEY_NO,
                                           I.EMP_CODE,
                                           I.EMP_NAME,
                                           I.EMP_SHORT_NAME,
                                           I.EMP_PAN_NO,
                                           I.ITP_EMP_CODE,
                                           I.MTH,
                                           I.ITP_CPMTH,
                                           I.ITP_GROSS_PAY,
                                           I.ITP_BENEFITS,
                                           I.ITP_AMOUNT_1,
                                           I.ITP_AMOUNT_2,
                                           I.ITP_AMOUNT_3,
                                           I.ITP_AMOUNT_4,
                                           I.ITP_AMOUNT_5,
                                           I.ITP_AMOUNT_6,
                                           I.ITP_AMOUNT_7,
                                           I.ITP_TAXABLE_AMT ,
                                           I.ITP_TAX_AMT,
                                           I.ITP_AMOUNT_8,
                                           I.ITP_TAX_PAYABLE);

   END LOOP;

END P_TAX_DEDUCTION_CARD;

PROCEDURE P_SUPPORTING_LIST ( P_COMP_CODE  IN VARCHAR2,
                              P_REP_KEY_NO IN NUMBER,
                              P_FM_EMP     IN VARCHAR2,
                              P_TO_EMP     IN VARCHAR2,
                              P_YEAR       IN NUMBER) IS

                              MM_LANG_CODE VARCHAR2(240);

CURSOR C_LANG IS
   SELECT REP_VALUE_3
   FROM IP_REP_INFO
   WHERE REP_KEY_NO = P_REP_KEY_NO;


CURSOR C1 IS
      SELECT ITP_EMP_CODE,DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10) EMP_NAME,SUM(ITP_TAXABLE_AMT)EMOLUMENT,SUM(ITP_TAX_PAYABLE)DEDUCTED
      FROM   PS_IT_PROC,PM_EMP_KEY
      WHERE  ITP_EMP_CODE = EMP_CODE
      AND    ITP_EMP_CODE BETWEEN NVL(P_FM_EMP,0) AND NVL(P_TO_EMP,0)
      AND    ITP_COMP_CODE = P_COMP_CODE
      AND    SUBSTR(ITP_CPMTH,1,4) = P_YEAR
      GROUP BY ITP_EMP_CODE,DECODE(MM_LANG_CODE, 'ENG',EMP_NAME ,'LANG_01',EMP_NAME_LANG_01,'LANG_02',EMP_NAME_LANG_02,'LANG_03',EMP_NAME_LANG_03,'LANG_04',EMP_NAME_LANG_04,'LANG_05',EMP_NAME_LANG_05,'LANG_06',EMP_NAME_LANG_06,'LANG_07',EMP_NAME_LANG_07,'LANG_08',EMP_NAME_LANG_08,'LANG_09',EMP_NAME_LANG_09,'LANG_10',EMP_NAME_LANG_10);

BEGIN

   DELETE FROM PW_SUPPORTING_LIST WHERE SL_REP_KEY_NO = P_REP_KEy_NO;
     MM_LANG_CODE := NULL;

    IF C_LANG%ISOPEN THEN
       CLOSE C_LANG;
    END IF;

    OPEN C_LANG;
    FETCH C_LANG INTO MM_LANG_CODE;
    CLOSE C_LANG;


   FOR I IN C1 LOOP

      INSERT INTO PW_SUPPORTING_LIST ( SL_COMP_CODE,
                                       SL_REP_KEY_NO,
                                       SL_EMP_CODE,
                                       SL_EMP_NAME,
                                       SL_EMOLUMENT,
                                       SL_DEDUCTED )
                              VALUES ( P_COMP_CODE,
                                       P_REP_KEY_NO,
                                       I.ITP_EMP_CODE,
                                       I.EMP_NAME,
                                       I.EMOLUMENT,
                                       I.DEDUCTED);


   END LOOP;

END P_SUPPORTING_LIST;

PROCEDURE P_MANPOWER_PLANNING ( P_COMP_CODE  IN VARCHAR2,
                                P_REP_KEY_NO IN NUMBER,
                                P_FM_GRADE   IN VARCHAR2,
                                P_TO_GRADE   IN VARCHAR2) IS

CURSOR C1 IS
       SELECT LSH_LEVEL_CODE, LSH_LEVEL_TYPE_CODE||'-'|| LEVEL_TYPE_SHORT_DESC TYPE,
              LMR_LEVEL_CODE||'-'||GRADE_SHORT_DESC LVEL, LMR_LEVEL_CODE, LMR_POSTN_REQD
       FROM   PM_LEVEL_MANPOWER_REQ, PM_LEVEL_SETUP_HEAD, PM_LEVEL, PM_GRADE
      WHERE   LMR_COMP_CODE= P_COMP_CODE
      AND     LSH_COMP_CODE=LMR_COMP_CODE
      AND     LSH_SYS_ID=LMR_LSH_SYS_ID
      AND     LSH_LEVEL_TYPE_CODE=LEVEL_TYPE_CODE
      AND     LMR_LEVEL_CODE=GRADE_CODE
      AND     GRADE_CODE BETWEEN P_FM_GRADE AND P_TO_GRADE;

M_COUNT NUMBER:=0;

CURSOR C2 (P_LEVEL_CODE IN VARCHAR2) IS
     SELECT COUNT(*)
     FROM PM_EMP_KEY
     WHERE  EMP_COMP_CODE=P_COMP_CODE
     AND    EMP_PERSONAL_GRADE=P_LEVEL_CODE
     AND    EMP_JOIN_DT  <= SYSDATE;

M_REQU_JAN NUMBER:=0;
M_REQU_FEB NUMBER:=0;
M_REQU_MAR NUMBER:=0;
M_REQU_APR NUMBER:=0;
M_REQU_MAY NUMBER:=0;
M_REQU_JUN NUMBER:=0;
M_REQU_JUL NUMBER:=0;
M_REQU_AUG NUMBER:=0;
M_REQU_SEP NUMBER:=0;
M_REQU_OCT NUMBER:=0;
M_REQU_NOV NUMBER:=0;
M_REQU_DEC NUMBER:=0;


BEGIN

DELETE FROM PW_MANPOWER_PLANNING WHERE MP_REP_KEY_NO = P_REP_KEY_NO;

FOR I IN C1 LOOP

   IF C2%ISOPEN THEN
       CLOSE C2;
   END IF;
   OPEN C2(I.LMR_LEVEL_CODE);
   FETCH C2 INTO M_COUNT;
   CLOSE C2;
   M_COUNT:= NVL(M_COUNT,0);

   M_REQU_JAN:=NVL(I.LMR_POSTN_REQD,0)/12;
   M_REQU_FEB:=NVL(I.LMR_POSTN_REQD,0)/11;
   M_REQU_MAR:=NVL(I.LMR_POSTN_REQD,0)/10;
   M_REQU_APR:=NVL(I.LMR_POSTN_REQD,0)/9;
   M_REQU_MAY:=NVL(I.LMR_POSTN_REQD,0)/8;
   M_REQU_JUN:=NVL(I.LMR_POSTN_REQD,0)/7;
   M_REQU_JUL:=NVL(I.LMR_POSTN_REQD,0)/6;
   M_REQU_AUG:=NVL(I.LMR_POSTN_REQD,0)/5;
   M_REQU_SEP:=NVL(I.LMR_POSTN_REQD,0)/4;
   M_REQU_OCT:=NVL(I.LMR_POSTN_REQD,0)/3;
   M_REQU_NOV:=NVL(I.LMR_POSTN_REQD,0)/2;
   M_REQU_DEC:=NVL(I.LMR_POSTN_REQD,0)/1;

      INSERT INTO  PW_MANPOWER_PLANNING ( MP_COMP_CODE,
                                          MP_REP_KEY_NO,
                                          MP_LEVEL_CODE,
                                          MP_TYPE,
                                          MP_LEVEL,
                                          MP_LMR_LEVEL,
                                          MP_POSTN_REQD,
                                          MP_COUNT,
                                          MP_REQU_JAN,
                                          MP_REQU_FEB,
                                          MP_REQU_MAR,
                                          MP_REQU_APR,
                                          MP_REQU_MAY,
                                          MP_REQU_JUN,
                                          MP_REQU_JUL,
                                          MP_REQU_AUG,
                                          MP_REQU_SEP,
                                          MP_REQU_OCT,
                                          MP_REQU_NOV,
                                          MP_REQU_DEC)
                                 VALUES ( P_COMP_CODE,
                                          P_REP_KEY_NO,
                                          I.LSH_LEVEL_CODE,
                                          I.TYPE,
                                          I.LVEL,
                                          I.LMR_LEVEL_CODE,
                                          I.LMR_POSTN_REQD,
                                          M_COUNT,
                                          M_REQU_JAN,
                                          M_REQU_FEB,
                                          M_REQU_MAR,
                                          M_REQU_APR,
                                          M_REQU_MAY,
                                          M_REQU_JUN,
                                          M_REQU_JUL,
                                          M_REQU_AUG,
                                          M_REQU_SEP,
                                          M_REQU_OCT,
                                          M_REQU_NOV,
                                          M_REQU_DEC );


END LOOP;

END P_MANPOWER_PLANNING;

FUNCTION F_CHANGE_IN_COST_RES ( P_COMP_CODE IN VARCHAR2,
                                P_DIVN_CODE IN VARCHAR2,
                                P_DEPT_CODE IN VARCHAR2,
                                P_LOCN_CODE IN VARCHAR2,
                                P_GRADE     IN VARCHAR2,
                                P_FM_MTH    IN NUMBER,
                                P_TO_MTH    IN NUMBER) RETURN NUMBER  IS

HRA                   NUMBER;
ALLW_AMT             NUMBER;
M_ALLW_CODE     VARCHAR2(12);
HRA_PREC           NUMBER;
HRA_FLAG         VARCHAR2(1);
TOTAL         NUMBER := 0;
M_EMP_CODE        VARCHAR2(12);
M_AMT_E                NUMBER;
M_AMT_C                NUMBER;
M_AMT_C1                NUMBER;
M_AMT_C2                NUMBER;
M_AMT_E1            NUMBER;
M_AMT_E2            NUMBER;
TOTAL1                NUMBER;
TOTAL_EMP            NUMBER := 0;

CURSOR EMP IS
   SELECT EMP_CODE
   FROM PM_EMP_KEY
     WHERE EMP_END_OF_SERVICE_DT IS NOT NULL
     AND   EMP_DIVN_CODE=P_DIVN_CODE
     AND   EMP_DEPT_CODE=P_DEPT_CODE
   AND   EMP_LOCN_CODE=P_LOCN_CODE
   AND   EMP_STATUS = '4'  -- added by Binso on 09/07/07 for the issue JOHNBITAR-165450
   AND   EMP_PERSONAL_GRADE=P_GRADE
   --AND EMP_JOIN_DT  <=TO_DATE(P_FM_MTH,'YYYYMM');
   AND   EMP_END_OF_SERVICE_DT BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM'));




   CURSOR RES IS
   SELECT ROUND(EMP_END_OF_SERVICE_DT - TO_DATE(P_FM_MTH,'YYYYMM'))
   FROM  PM_EMP_KEY
   WHERE EMP_CODE=M_EMP_CODE
   AND   EMP_END_OF_SERVICE_DT IS NOT NULL
   AND   EMP_STATUS='4'
   AND   EMP_COMP_CODE =P_COMP_CODE
   AND   EMP_DIVN_CODE=P_DIVN_CODE
   AND   EMP_DEPT_CODE=P_DEPT_CODE
   AND   EMP_LOCN_CODE=P_LOCN_CODE
   AND   EMP_PERSONAL_GRADE=P_GRADE
   AND   EMP_END_OF_SERVICE_DT BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM'));


 CURSOR C1 IS
    SELECT    EMPA_CE
    FROM         PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
    WHERE     EMPA_CODE      = M_EMP_CODE
    AND     EMPA_CODE      = EMP_CODE
    AND         EMPA_ALLW_CODE =ALLW_CODE
    AND            ALLW_EARN_DEDUC='E'
  --AND    ALLW_FIX_VAR='V'  ---- commented by Binso on 07/07/07 for the issue JOHNBITAR-165450
    AND         EMPA_COMP_CODE =P_COMP_CODE
    AND     EMPA_EXCLUDE_FROM_DT IS NULL;  --  added and commented by Binso on 15/07/07 for the issue JOHNBITAR-165450
/*    AND         EMPA_FROM_DT   = (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY
                                       WHERE EMPA_CODE=M_EMP_CODE
                                                AND   EMPA_CODE=EMP_CODE
                                       AND   EMPA_COMP_CODE=P_COMP_CODE
                                              AND   EMP_END_OF_SERVICE_DT BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));
    */


 CURSOR C2 IS
     SELECT    SUM(NVL(EMPA_LC_AMOUNT,0))
     FROM     PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
     WHERE     EMPA_CODE      =M_EMP_CODE
     AND       EMPA_CODE      = EMP_CODE
     AND         EMPA_ALLW_CODE =ALLW_CODE
   AND        ALLW_EARN_DEDUC='E'
  -- AND   ALLW_FIX_VAR='V'  -- -- commented by Binso on 07/07/07 for the issue JOHNBITAR-165450
     AND         EMPA_COMP_CODE =P_COMP_CODE
     AND     EMPA_EXCLUDE_FROM_DT IS NULL; --  added and commented by Binso on 15/07/07 for the issue JOHNBITAR-165450
    /* AND         EMPA_FROM_DT   = (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY
                                       WHERE EMPA_CODE=M_EMP_CODE
                                        AND EMPA_CODE      = EMP_CODE
                                                            AND EMPA_COMP_CODE=P_COMP_CODE
                                                        --AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                                        --AND EMP_JOIN_DT  <=TO_DATE(P_FM_MTH,'YYYYMM'));
                                                        AND   EMP_END_OF_SERVICE_DT BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));*/

 CURSOR C3 IS
    SELECT    EMPAC_ALLW_CODE,EMPAC_ALLW_PERC
    FROM         PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_ALLOWANCE_CE,PM_EMP_KEY
    WHERE     EMPA_COMP_CODE = P_COMP_CODE
    AND     EMPA_CODE         =  M_EMP_CODE
    AND     EMPA_CODE         =  EMP_CODE
    AND     EMPA_COMP_CODE =  EMPAC_COMP_CODE
    AND     EMPA_CODE        =  EMPAC_CODE
    AND         EMPA_ALLW_CODE =  ALLW_CODE
    AND     EMPA_ALLW_CODE =  EMPAC_BASE_ALLW_CODE
    AND            ALLW_EARN_DEDUC= 'E'
  --    AND       ALLW_FIX_VAR='V'  -- -- commented by Binso on 07/07/07 for the issue JOHNBITAR-165450
    AND     EMPA_FROM_DT   =  EMPAC_FROM_DT
    AND     EMPA_EXCLUDE_FROM_DT IS NULL;        --  added and commented by Binso on 15/07/07 for the issue JOHNBITAR-165450
    /*AND         EMPA_FROM_DT   IN  (SELECT MAX(EMPA_FROM_DT)FROM PM_EMP_ALLOWANCE,PM_EMP_KEY
                                       WHERE EMPA_CODE    =M_EMP_CODE
                                                 AND   EMPA_CODE = EMP_CODE
                                              AND   EMPA_COMP_CODE =P_COMP_CODE
                                                        --AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                                        --AND EMP_JOIN_DT  <=TO_DATE(P_FM_MTH,'YYYYMM'));
                                                        AND   EMP_END_OF_SERVICE_DT BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));*/

 CURSOR C4 IS
  SELECT    NVL(EMPA_LC_AMOUNT,0)
  FROM         PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
  WHERE     EMPA_CODE             =M_EMP_CODE
  AND       EMPA_CODE             = EMP_CODE
  AND         EMPA_ALLW_CODE =ALLW_CODE
  AND     EMPA_ALLW_CODE = M_ALLW_CODE
  AND            ALLW_EARN_DEDUC='E'
  --AND       ALLW_FIX_VAR='V'  -- -- commented by Binso on 07/07/07 for the issue JOHNBITAR-165450
  AND         EMPA_COMP_CODE =P_COMP_CODE
  AND     EMPA_EXCLUDE_FROM_DT IS NULL;  --  added and commented by Binso on 15/07/07 for the issue JOHNBITAR-165450
  /*AND         EMPA_FROM_DT IN (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY
                             WHERE EMPA_CODE=M_EMP_CODE
                                       AND   EMPA_CODE = EMP_CODE
--                                           AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                                 --AND EMP_JOIN_DT  <=TO_DATE(P_FM_MTH,'YYYYMM'));
                                                 AND   EMP_END_OF_SERVICE_DT BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));*/
  M_RES NUMBER;
BEGIN

IF EMP%ISOPEN THEN
     CLOSE EMP;
  END IF ;
    OPEN EMP;
    TOTAL_EMP:= 0 ;
    LOOP
        FETCH EMP INTO M_EMP_CODE;
          EXIT WHEN EMP%NOTFOUND;
          IF RES%ISOPEN THEN
         CLOSE RES;
        END IF;
           OPEN RES;
          FETCH RES INTO M_RES; --:CP_RES;
          CLOSE RES;
          --IF :CP_RES > 0 THEN

          M_AMT_E2 :=0;   --added by Binso on 16/07/07 for the issue JOHNBITAR-165450
          M_AMT_C  := 0;  --added by Binso on 16/07/07 for the issue JOHNBITAR-165450
          TOTAL    := 0;  --added by Binso on 16/07/07 for the issue JOHNBITAR-165450
            IF C1%ISOPEN THEN
              CLOSE C1;
          END IF ;
             OPEN C1;
             LOOP
                  FETCH C1 INTO HRA_FLAG;
                    EXIT WHEN C1%NOTFOUND;
                    IF HRA_FLAG = 'E'  THEN
                          IF C2%ISOPEN THEN
                            CLOSE C2;
                          END IF ;

                            OPEN C2;
                            FETCH C2 INTO M_AMT_E;
                            CLOSE C2;
                            -- commented by Binso on 07/07/07 for the issue JOHNBITAR-165450
                            /*
                            IF :CP_32='A' THEN
                            M_AMT_E1:=NVL((NVL(M_AMT_E,0)/NVL(:CP_33,0)),0);
                            ELSE
                            M_AMT_E1:=NVL((NVL(M_AMT_E,0)/NVL(:CP_34,0)),0);
                            END IF;
                        M_AMT_C2:=ROUND(NVL((NVL(M_AMT_C1,0)* NVL(:CP_TRANS_OUT,0)),0),2);
                                */
                         M_AMT_E2:=ROUND(NVL(M_AMT_E,0),2);

                    ELSE
                             IF C3%ISOPEN THEN
                             CLOSE C3;
                            END IF ;
                            OPEN C3;
                            TOTAL:= 0 ;
                            LOOP
                                    FETCH C3 INTO M_ALLW_CODE,HRA_PREC;
                                    EXIT WHEN C3%NOTFOUND;
                                         IF C4%ISOPEN THEN
                                          CLOSE C4;
                                         END IF ;
                                         OPEN C4 ;
                                         FETCH C4 INTO ALLW_AMT;
                                       CLOSE C4;
                                       -- commented by Binso on 07/07/07 for the issue JOHNBITAR-165450
                                   /*
                                           IF :CP_32='A' THEN
                             M_AMT_C1:=NVL((NVL(ALLW_AMT,0)/NVL(:CP_33,0)),0);
                             ELSE
                             M_AMT_C1:=NVL((NVL(ALLW_AMT,0)/NVL(:CP_34,0)),0);
                             END IF;
                             M_AMT_C2:=NVL((NVL(M_AMT_C1,0)* NVL(:CP_RES,0)),0);
                             */
                             M_AMT_C2:=NVL(ALLW_AMT,0);
                            TOTAL := NVL(TOTAL,0) + NVL(M_AMT_C2,0) * HRA_PREC /100;
                            END LOOP;
                             CLOSE C3;
                     END IF;
           END LOOP;
           CLOSE C1;
           M_AMT_C := TOTAL;
    --     SRW.MESSAGE(5,'RESIGN EMP - '||M_EMP_CODE||' - C - '||M_AMT_C||' - E - '||M_AMT_E2);
        TOTAL_EMP:= NVL(TOTAL_EMP,0) + NVL(M_AMT_C,0)    + NVL(M_AMT_E2,0);
    END LOOP;
    CLOSE EMP;
    HRA:=TOTAL_EMP;
    RETURN (ROUND(NVL(HRA,0),2));

END F_CHANGE_IN_COST_RES;

FUNCTION F_CHANGE_IN_COST_TERM ( P_COMP_CODE IN VARCHAR2,
                                 P_DIVN_CODE IN VARCHAR2,
                                 P_DEPT_CODE IN VARCHAR2,
                                 P_LOCN_CODE IN VARCHAR2,
                                 P_GRADE     IN VARCHAR2,
                                 P_FM_MTH    IN NUMBER,
                                 P_TO_MTH    IN NUMBER) RETURN NUMBER IS

HRA                   NUMBER;
ALLW_AMT             NUMBER;
M_ALLW_CODE     VARCHAR2(12);
HRA_PREC           NUMBER;
HRA_FLAG         VARCHAR2(1);
TOTAL         NUMBER := 0;
M_EMP_CODE        VARCHAR2(12);
M_AMT_E                NUMBER;
M_AMT_C                NUMBER;
M_AMT_C1                NUMBER;
M_AMT_C2                NUMBER;
M_AMT_E1            NUMBER;
M_AMT_E2            NUMBER;
TOTAL1                NUMBER;
TOTAL_EMP            NUMBER := 0;

   CURSOR EMP IS
   SELECT EMP_CODE
   FROM PM_EMP_KEY
     WHERE EMP_COMP_CODE=P_COMP_CODE
     AND   EMP_DIVN_CODE=P_DIVN_CODE
     AND   EMP_DEPT_CODE=P_DEPT_CODE
   AND   EMP_LOCN_CODE=P_LOCN_CODE
   AND   EMP_PERSONAL_GRADE=P_GRADE
   AND   EMP_END_OF_SERVICE_DT IS NOT NULL
   --AND   EMP_STATUS = '5'  --commented and added by Binso on 15/07/07 for the issue JOHNBITAR-165450
   AND   EMP_STATUS IN ('5','6')
    --AND EMP_JOIN_DT  <=TO_DATE(P_FM_MTH,'YYYYMM');
   AND   EMP_END_OF_SERVICE_DT BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM'));


CURSOR RES IS
   SELECT  ROUND(EMP_END_OF_SERVICE_DT - TO_DATE(P_FM_MTH,'YYYYMM'))
   FROM    PM_EMP_KEY
   WHERE   EMP_CODE=M_EMP_CODE
   AND   EMP_END_OF_SERVICE_DT IS NOT NULL
   --AND   EMP_STATUS='5' --commented and added by Binso on 15/07/07 for the issue JOHNBITAR-165450
   AND   EMP_STATUS IN ('5','6')
   AND   EMP_COMP_CODE =P_COMP_CODE
   AND   EMP_DIVN_CODE=P_DIVN_CODE
   AND   EMP_DEPT_CODE=P_DEPT_CODE
   AND   EMP_LOCN_CODE=P_LOCN_CODE
   AND   EMP_PERSONAL_GRADE=P_GRADE
   AND   EMP_END_OF_SERVICE_DT BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM'));


CURSOR C1 IS
    SELECT        EMPA_CE
    FROM             PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
    WHERE         EMPA_CODE      = M_EMP_CODE
    AND       EMPA_CODE      = EMP_CODE
    AND             EMPA_ALLW_CODE =ALLW_CODE
    AND                ALLW_EARN_DEDUC='E'
--  AND       ALLW_FIX_VAR='V'   -- commented by Binso on 16/07/07 for the issue JOHNBITAR-165450
    AND             EMPA_COMP_CODE =P_COMP_CODE
    AND     EMPA_EXCLUDE_FROM_DT IS NULL; --commented and added by Binso on 15/07/07 for the issue JOHNBITAR-165450
/*    AND             EMPA_FROM_DT   = (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY
                                        WHERE EMPA_CODE=M_EMP_CODE
                                                AND    EMPA_CODE=EMP_CODE
                                       AND EMPA_COMP_CODE=P_COMP_CODE
                                              AND EMP_END_OF_SERVICE_DT BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));            */


CURSOR C2 IS
     SELECT     SUM(NVL(EMPA_LC_AMOUNT,0))
     FROM             PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
     WHERE         EMPA_CODE      =M_EMP_CODE
     AND           EMPA_CODE      = EMP_CODE
     AND             EMPA_ALLW_CODE =ALLW_CODE
   AND            ALLW_EARN_DEDUC='E'
--   AND       ALLW_FIX_VAR='V'   -- commented by Binso on 16/07/07 for the issue JOHNBITAR-165450
     AND             EMPA_COMP_CODE =P_COMP_CODE
     AND     EMPA_EXCLUDE_FROM_DT IS NULL; --commented and added by Binso on 15/07/07 for the issue JOHNBITAR-165450
/*     AND             EMPA_FROM_DT   = (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY
                                        WHERE EMPA_CODE=M_EMP_CODE
                                        AND   EMPA_CODE      = EMP_CODE
                                                            AND EMPA_COMP_CODE=P_COMP_CODE
                                                        --AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                                        --AND EMP_JOIN_DT  <=TO_DATE(P_FM_MTH,'YYYYMM'));
                                                        AND   EMP_END_OF_SERVICE_DT BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));*/
CURSOR C3 IS
    SELECT    EMPAC_ALLW_CODE,EMPAC_ALLW_PERC
    FROM         PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_ALLOWANCE_CE,PM_EMP_KEY
    WHERE     EMPA_COMP_CODE = P_COMP_CODE
    AND     EMPA_CODE         =  M_EMP_CODE
    AND     EMPA_CODE         =  EMP_CODE
    AND     EMPA_COMP_CODE =  EMPAC_COMP_CODE
    AND     EMPA_CODE        =  EMPAC_CODE
    AND         EMPA_ALLW_CODE =  ALLW_CODE
    AND     EMPA_ALLW_CODE =  EMPAC_BASE_ALLW_CODE
    AND            ALLW_EARN_DEDUC= 'E'
--    AND       ALLW_FIX_VAR='V'  -- commented by Binso on 16/07/07 for the issue JOHNBITAR-165450
    AND     EMPA_FROM_DT   =  EMPAC_FROM_DT
    AND     EMPA_EXCLUDE_FROM_DT IS NULL;    --commented and added by Binso on 15/07/07 for the issue JOHNBITAR-165450
/*    AND         EMPA_FROM_DT   IN  (SELECT MAX(EMPA_FROM_DT)FROM PM_EMP_ALLOWANCE,PM_EMP_KEY
                                       WHERE EMPA_CODE    =M_EMP_CODE
                                    AND   EMPA_CODE = EMP_CODE
                                    AND EMPA_COMP_CODE =P_COMP_CODE
                                                        --AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                                        --AND EMP_JOIN_DT  <=TO_DATE(P_FM_MTH,'YYYYMM'));
                                                        AND   EMP_END_OF_SERVICE_DT BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));*/

CURSOR C4 IS
SELECT    NVL(EMPA_LC_AMOUNT,0)
FROM         PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
WHERE     EMPA_CODE             =M_EMP_CODE
AND       EMPA_CODE             = EMP_CODE
AND         EMPA_ALLW_CODE =ALLW_CODE
AND     EMPA_ALLW_CODE = M_ALLW_CODE
AND            ALLW_EARN_DEDUC='E'
--AND       ALLW_FIX_VAR='V'  -- commented by Binso on 16/07/07 for the issue JOHNBITAR-165450
AND         EMPA_COMP_CODE =P_COMP_CODE
AND     EMPA_EXCLUDE_FROM_DT IS NULL; --commented and added by Binso on 15/07/07 for the issue JOHNBITAR-165450
/*AND         EMPA_FROM_DT IN (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY
                             WHERE EMPA_CODE=M_EMP_CODE
                             AND   EMPA_CODE = EMP_CODE
--                                           AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                                 --AND EMP_JOIN_DT  <=TO_DATE(P_FM_MTH,'YYYYMM'));
                                                 AND   EMP_END_OF_SERVICE_DT BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));*/
M_TERMINATED NUMBER;
BEGIN
   IF EMP%ISOPEN THEN
     CLOSE EMP;
  END IF ;
    OPEN EMP;
    TOTAL_EMP:= 0 ;
    LOOP
        FETCH EMP INTO M_EMP_CODE;
          EXIT WHEN EMP%NOTFOUND;
          IF RES%ISOPEN THEN
        CLOSE RES;
        END IF;
           OPEN RES;
          FETCH RES INTO M_TERMINATED; --:CP_TERMINATED;
          CLOSE RES;

      M_AMT_E2 :=0;  --added by Binso on 16/07/07 for the issue JOHNBITAR-165450
          M_AMT_C  := 0;  --added by Binso on 16/07/07 for the issue JOHNBITAR-165450
          TOTAL    := 0;   --added by Binso on 16/07/07 for the issue JOHNBITAR-165450

            IF C1%ISOPEN THEN
              CLOSE C1;
          END IF ;
             OPEN C1;
             LOOP
                  FETCH C1 INTO HRA_FLAG;
                    EXIT WHEN C1%NOTFOUND;
                    IF HRA_FLAG = 'E'  THEN
                          IF C2%ISOPEN THEN
                            CLOSE C2;
                            END IF ;
                            OPEN C2;
                            FETCH C2 INTO M_AMT_E;
                            CLOSE C2;
                            ---- commented by Binso on 07/07/07 for the issue JOHNBITAR-165450
                            /*
                            IF :CP_32='A' THEN
                            M_AMT_E1:=NVL((NVL(M_AMT_E,0)/NVL(:CP_33,0)),0);

                            ELSE
                            M_AMT_E1:=NVL((NVL(M_AMT_E,0)/NVL(:CP_34,0)),0);

                            END IF;
                                M_AMT_E2:=NVL((NVL(M_AMT_E1,0)* NVL(:CP_TERMINATED,0)),0);
                            */
                            M_AMT_E2:=NVL(M_AMT_E,0);

                    ELSE
                             IF C3%ISOPEN THEN
                             CLOSE C3;
                            END IF ;
                            OPEN C3;
                            TOTAL:= 0 ;
                            LOOP
                                    FETCH C3 INTO M_ALLW_CODE,HRA_PREC;
                                    EXIT WHEN C3%NOTFOUND;
                                     IF C4%ISOPEN THEN
                                      CLOSE C4;
                                     END IF ;
                                     OPEN C4 ;
                                     FETCH C4 INTO ALLW_AMT;
                                   CLOSE C4;
                                       -- commented by Binso on 09/07/07 for the issue JOHNBITAR-165450
                                       /*
                                           IF :CP_32='A' THEN
                                 M_AMT_C1:=NVL((NVL(ALLW_AMT,0)/NVL(:CP_33,0)),0);

                                   ELSE
                                  M_AMT_C1:=NVL((NVL(ALLW_AMT,0)/NVL(:CP_34,0)),0);

                                  END IF;
                                   M_AMT_C2:=NVL((NVL(M_AMT_C1,0)* NVL(:CP_TERMINATED,0)),0);
                                  */
                                  M_AMT_C2:=NVL(ALLW_AMT,0);
                                  TOTAL := NVL(TOTAL,0) + NVL(M_AMT_C2,0) * HRA_PREC /100;
                            END LOOP;
                             CLOSE C3;
                   END IF;
           END LOOP;
           CLOSE C1;
           M_AMT_C := TOTAL;

        -- SRW.MESSAGE(6,'TERMIN EMP - '||M_EMP_CODE||' - C - '||M_AMT_C||' - E - '||M_AMT_E2);
        TOTAL_EMP:= NVL(TOTAL_EMP,0) + NVL(M_AMT_C,0)    + NVL(M_AMT_E2,0);
     END LOOP;
     CLOSE EMP;
     HRA:=TOTAL_EMP;
    RETURN (ROUND(NVL(HRA,0),2));
END F_CHANGE_IN_COST_TERM;

FUNCTION F_CHANGE_IN_COST_TRANSFERS_IN ( P_COMP_CODE IN VARCHAR2,
                                         P_DIVN_CODE IN VARCHAR2,
                                         P_DEPT_CODE IN VARCHAR2,
                                         P_LOCN_CODE IN VARCHAR2,
                                         P_GRADE     IN VARCHAR2,
                                         P_FM_MTH    IN NUMBER,
                                         P_TO_MTH    IN NUMBER) RETURN NUMBER IS

HRA                   NUMBER;
 ALLW_AMT             NUMBER;
 M_ALLW_CODE     VARCHAR2(12);
 HRA_PREC           NUMBER;
 HRA_FLAG         VARCHAR2(1);
 TOTAL         NUMBER := 0;
 M_EMP_CODE        VARCHAR2(12);
 M_AMT_E                NUMBER;
 M_AMT_C                NUMBER;
 M_AMT_C1            NUMBER;
 M_AMT_C2            NUMBER;
 M_AMT_E1            NUMBER;
 M_AMT_E2            NUMBER;
 TOTAL1                NUMBER;
 TOTAL_EMP            NUMBER := 0;

  CURSOR EMP IS
   SELECT TRF_EMP_CODE
   FROM  PM_EMP_KEY,PT_TRANSFERS
     WHERE EMP_CODE=TRF_EMP_CODE
       AND EMP_COMP_CODE = TRF_TO_COMP_CODE
       AND EMP_DIVN_CODE=P_DIVN_CODE
         AND EMP_DEPT_CODE=P_DEPT_CODE
     AND EMP_LOCN_CODE=P_LOCN_CODE
     AND EMP_PERSONAL_GRADE=P_GRADE  ----
     --AND  EMP_END_OF_SERVICE_DT IS  NULL
     AND TRF_EFF_DT  BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM'));


  CURSOR RES IS
   SELECT ROUND(TRF_EFF_DT - TO_DATE(P_FM_MTH,'YYYYMM'))
   FROM   PT_TRANSFERS,
          PM_EMP_KEY
     WHERE  EMP_COMP_CODE =P_COMP_CODE
     AND    EMP_CODE=M_EMP_CODE
   AND    EMP_COMP_CODE = TRF_TO_COMP_CODE
   AND    EMP_CODE     =  TRF_EMP_CODE
   AND    EMP_DIVN_CODE=P_DIVN_CODE
   AND    EMP_DEPT_CODE=P_DEPT_CODE
   AND    EMP_LOCN_CODE=P_LOCN_CODE
   --AND    EMP_PERSONAL_GRADE!=EMP_PERSONAL_GRADE
   AND    TRF_EFF_DT BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM'));


 CURSOR C1 IS
    SELECT        EMPA_CE
    FROM             PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
    WHERE         EMPA_CODE      = M_EMP_CODE
    AND       EMPA_CODE      = EMP_CODE
    AND             EMPA_ALLW_CODE =ALLW_CODE
    AND                ALLW_EARN_DEDUC='E'
  AND       ALLW_FIX_VAR='V'
    AND             EMPA_COMP_CODE =P_COMP_CODE
    AND     EMPA_EXCLUDE_FROM_DT IS NULL; --  added and commented by Binso on 15/07/07 for the issue JOHNBITAR-165450
/*    AND             EMPA_FROM_DT   = (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY,PT_TRANSFERS
                                        WHERE EMPA_CODE=M_EMP_CODE
                                                  AND   EMPA_CODE=EMP_CODE
                                         AND   EMPA_COMP_CODE=P_COMP_CODE
                                        AND   EMPA_CODE=TRF_EMP_CODE
                                                AND   TRF_EFF_DT  BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));
    */

  CURSOR C2 IS
     SELECT     SUM(NVL(EMPA_LC_AMOUNT,0))
     FROM             PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
     WHERE         EMPA_CODE      =M_EMP_CODE
     AND           EMPA_CODE      = EMP_CODE
     AND             EMPA_ALLW_CODE =ALLW_CODE
   AND            ALLW_EARN_DEDUC='E'
   AND       ALLW_FIX_VAR='V'
     AND             EMPA_COMP_CODE =P_COMP_CODE
     AND     EMPA_EXCLUDE_FROM_DT IS NULL; --  added and commented by Binso on 15/07/07 for the issue JOHNBITAR-165450
     /*AND             EMPA_FROM_DT   = (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY,PT_TRANSFERS
                                        WHERE EMPA_CODE=M_EMP_CODE
                                        AND   EMPA_CODE      = EMP_CODE
                                        AND EMPA_COMP_CODE=P_COMP_CODE
                                        AND   EMPA_CODE=TRF_EMP_CODE
                                                        --AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                                        --AND EMP_JOIN_DT  <=TO_DATE(P_FM_MTH,'YYYYMM'));
                                                        AND   TRF_EFF_DT  BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));*/

 CURSOR C3 IS
    SELECT    EMPAC_ALLW_CODE,EMPAC_ALLW_PERC
    FROM         PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_ALLOWANCE_CE,PM_EMP_KEY
    WHERE     EMPA_COMP_CODE = P_COMP_CODE
    AND     EMPA_CODE         =  M_EMP_CODE
    AND     EMPA_CODE         =  EMP_CODE
    AND     EMPA_COMP_CODE =  EMPAC_COMP_CODE
    AND     EMPA_CODE        =  EMPAC_CODE
    AND         EMPA_ALLW_CODE =  ALLW_CODE
    AND     EMPA_ALLW_CODE =  EMPAC_BASE_ALLW_CODE
    AND            ALLW_EARN_DEDUC= 'E'
    AND       ALLW_FIX_VAR='V'
    AND     EMPA_FROM_DT   =  EMPAC_FROM_DT
    AND     EMPA_EXCLUDE_FROM_DT IS NULL; --  added and commented by Binso on 15/07/07 for the issue JOHNBITAR-165450
    /*AND         EMPA_FROM_DT   IN  (SELECT MAX(EMPA_FROM_DT)FROM PM_EMP_ALLOWANCE,PM_EMP_KEY,PT_TRANSFERS
                                       WHERE EMPA_CODE    =M_EMP_CODE
                                        AND EMPA_COMP_CODE =P_COMP_CODE
                                    AND   EMPA_CODE = EMP_CODE
                                    AND   EMPA_CODE=TRF_EMP_CODE

                                                        --AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                                        --AND EMP_JOIN_DT  <=TO_DATE(P_FM_MTH,'YYYYMM'));
                                                        AND   TRF_EFF_DT  BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));*/

 CURSOR C4 IS
  SELECT    NVL(EMPA_LC_AMOUNT,0)
  FROM         PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
  WHERE     EMPA_CODE             =M_EMP_CODE
  AND       EMPA_CODE             = EMP_CODE
  AND         EMPA_ALLW_CODE =ALLW_CODE
  AND     EMPA_ALLW_CODE = M_ALLW_CODE
  AND            ALLW_EARN_DEDUC='E'
  AND     ALLW_FIX_VAR='V'
  AND         EMPA_COMP_CODE =P_COMP_CODE
  AND     EMPA_EXCLUDE_FROM_DT IS NULL; --  added and commented by Binso on 15/07/07 for the issue JOHNBITAR-165450
  /*AND         EMPA_FROM_DT IN (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY,PT_TRANSFERS
                             WHERE EMPA_CODE=M_EMP_CODE
                                       AND   EMPA_CODE = EMP_CODE
                                       AND   EMPA_CODE=TRF_EMP_CODE
                                       AND EMPA_COMP_CODE =P_COMP_CODE
                                                -- AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                             --AND EMP_JOIN_DT  <=TO_DATE(P_FM_MTH,'YYYYMM'));
                                             AND   TRF_EFF_DT  BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));*/
M_TRANS_IN NUMBER;
BEGIN

   IF EMP%ISOPEN THEN
  CLOSE EMP;
  END IF ;
    OPEN EMP;
    TOTAL_EMP:= 0 ;
    LOOP
        FETCH EMP INTO M_EMP_CODE;
          EXIT WHEN EMP%NOTFOUND;
          IF RES%ISOPEN THEN
        CLOSE RES;
        END IF;
           OPEN RES;
          FETCH RES INTO M_TRANS_IN;--:CP_TRANS_IN;
          CLOSE RES;
            IF C1%ISOPEN THEN
              CLOSE C1;
            END IF ;

            M_AMT_E2 := 0;  --added by Binso on 16/07/07 for the issue JOHNBITAR-165450
            TOTAL    := 0;  --added by Binso on 16/07/07 for the issue JOHNBITAR-165450
            M_AMT_C  := 0;  --added by Binso on 16/07/07 for the issue JOHNBITAR-165450

             OPEN C1;
             LOOP
                  FETCH C1 INTO HRA_FLAG;
                    EXIT WHEN C1%NOTFOUND;
                    IF HRA_FLAG = 'E'  THEN
                          IF C2%ISOPEN THEN
                            CLOSE C2;
                            END IF ;
                            OPEN C2;
                            FETCH C2 INTO M_AMT_E;
                            CLOSE C2;
                            --SRW.MESSAGE(6,'M_AMT_E'||M_AMT_E);
                            -- commented by Binso on 07/07/07 for the issue JOHNBITAR-165450
                            /*
                            IF :CP_32='A' THEN
                            M_AMT_E1:=ROUND(NVL((NVL(M_AMT_E,0)/NVL(:CP_33,0)),0),2);

                            ELSE
                            M_AMT_E1:=ROUND(NVL((NVL(M_AMT_E,0)/NVL(:CP_34,0)),0),2);

                            END IF;
                                M_AMT_E2:=ROUND(NVL((NVL(M_AMT_E1,0)* NVL(:CP_TRANS_IN,0)),0),2);
                          */
                            M_AMT_E2:=ROUND(NVL(M_AMT_E,0),2);

                            --SRW.MESSAGE(1,:CP_32);
                            --SRW.MESSAGE(1,'ONE DAY'||M_AMT_E1);
                            --SRW.MESSAGE(1,'NO DAY'||M_AMT_E2);

                    ELSE
                             IF C3%ISOPEN THEN
                             CLOSE C3;
                            END IF ;
                            OPEN C3;
                            TOTAL:= 0 ;
                            LOOP
                                     FETCH C3 INTO M_ALLW_CODE,HRA_PREC;
                                     EXIT WHEN C3%NOTFOUND;
                                      IF C4%ISOPEN THEN
                                           CLOSE C4;
                                      END IF ;
                                      OPEN C4 ;
                                      FETCH C4 INTO ALLW_AMT;
                                    CLOSE C4;
                                    --SRW.MESSAGE(7,'ALLW_AMT'||ALLW_AMT);
                                    -- commented by Binso on 07/07/07 for the issue JOHNBITAR-165450
                                       /*
                                           IF :CP_32='A' THEN
                                   M_AMT_C1:=ROUND(NVL((NVL(ALLW_AMT,0)/NVL(:CP_33,0)),0),2);
                                 ELSE
                                 M_AMT_C1:=ROUND(NVL((NVL(ALLW_AMT,0)/NVL(:CP_34,0)),0),2);
                                   END IF;
                                 M_AMT_C2:=ROUND(NVL((NVL(M_AMT_C1,0)* NVL(:CP_TRANS_IN,0)),0),2);
                                   */
                            M_AMT_C2:=ROUND(NVL(ALLW_AMT,0),2);
                                     TOTAL := NVL(TOTAL,0) + NVL(M_AMT_C2,0) * HRA_PREC /100;
                                    --SRW.MESSAGE(2,'ONE DAY-----'||M_AMT_C1);
                                 --SRW.MESSAGE(2,'NO DAY-----'||M_AMT_C2);

                                 --SRW.MESSAGE(3,'TOTAL'||TOTAL);
                            END LOOP;
                             CLOSE C3;
                     END IF;
           END LOOP;
           CLOSE C1;
           M_AMT_C := TOTAL;
        TOTAL_EMP:= NVL(TOTAL_EMP,0) + NVL(M_AMT_C,0)    + NVL(M_AMT_E2,0);
        --SRW.MESSAGE(4,'TOTAL_EMP'||TOTAL_EMP);
    END LOOP;
    CLOSE EMP;
    HRA:=TOTAL_EMP;
    --SRW.MESSAGE(1,'HRA----'||HRA);
    RETURN (ROUND(NVL(HRA,0),2));

END  F_CHANGE_IN_COST_TRANSFERS_IN;

FUNCTION F_COST ( P_COMP_CODE IN VARCHAR2,
                  P_DIVN_CODE IN VARCHAR2,
                  P_DEPT_CODE IN VARCHAR2,
                  P_LOCN_CODE IN VARCHAR2,
                  P_GRADE     IN VARCHAR2,
                  P_FM_MTH    IN NUMBER,
                  P_TO_MTH    IN NUMBER) RETURN NUMBER IS

HRA                   NUMBER;
ALLW_AMT             NUMBER;
M_ALLW_CODE     VARCHAR2(12);
HRA_PREC           NUMBER;
HRA_FLAG         VARCHAR2(1);
TOTAL         NUMBER := 0;
M_EMP_CODE        VARCHAR2(12);
M_AMT_E                NUMBER;
M_AMT_C                NUMBER;
M_AMT_E1                NUMBER;
TOTAL1                NUMBER;
TOTAL_EMP            NUMBER := 0;


CURSOR EMP IS
   SELECT EMP_CODE
   FROM PM_EMP_KEY
     WHERE EMP_COMP_CODE=P_COMP_CODE
     AND   EMP_DIVN_CODE=P_DIVN_CODE
     AND   EMP_DEPT_CODE=P_DEPT_CODE
   AND   EMP_LOCN_CODE=P_LOCN_CODE
   AND   EMP_PERSONAL_GRADE=P_GRADE
   AND   EMP_JOIN_DT  <TO_DATE(P_FM_MTH,'YYYYMM')
   AND   (EMP_END_OF_SERVICE_DT IS NULL OR EMP_END_OF_SERVICE_DT >= TO_DATE(P_FM_MTH,'YYYYMM')); -- >= added by Binso on 16/07/07 for the issue JOHNBITAR-165450
   --AND   (EMP_END_OF_SERVICE_DT IS NULL OR EMP_END_OF_SERVICE_DT > TO_DATE(P_FM_MTH,'YYYYMM'));--added by shaibu on 20/09/2005 for fixing the issue id ASG-86749


CURSOR C1 IS
    SELECT        EMPA_CE
    FROM             PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
    WHERE         EMPA_CODE      = M_EMP_CODE
    AND       EMPA_CODE      = EMP_CODE
    AND             EMPA_ALLW_CODE =ALLW_CODE
    AND                ALLW_EARN_DEDUC='E'
    AND             EMPA_COMP_CODE =P_COMP_CODE
  AND EMPA_EXCLUDE_FROM_DT IS NULL;    --  added and commented by Binso on 15/07/07 for the issue JOHNBITAR-165450
/*    AND             EMPA_FROM_DT   = (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY
                                        WHERE EMPA_CODE=M_EMP_CODE
                                                  AND EMPA_CODE=EMP_CODE
                                        AND EMPA_COMP_CODE=P_COMP_CODE
                                                --AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                               AND EMP_JOIN_DT  <TO_DATE(P_FM_MTH,'YYYYMM'));*/

CURSOR C2 IS
     SELECT     SUM(NVL(EMPA_LC_AMOUNT,0))
     FROM             PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
     WHERE         EMPA_CODE      =M_EMP_CODE
     AND           EMPA_CODE      = EMP_CODE
     AND             EMPA_ALLW_CODE =ALLW_CODE
   AND            ALLW_EARN_DEDUC='E'
     AND             EMPA_COMP_CODE =P_COMP_CODE
   AND EMPA_EXCLUDE_FROM_DT IS NULL; --  added and commented by Binso on 15/07/07 for the issue JOHNBITAR-165450
/*     AND             EMPA_FROM_DT   = (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY
                                        WHERE EMPA_CODE=M_EMP_CODE
                                        AND   EMPA_CODE      = EMP_CODE
                                                            AND EMPA_COMP_CODE=P_COMP_CODE
                                                        --AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                                        AND EMP_JOIN_DT  <TO_DATE(P_FM_MTH,'YYYYMM'));                                            */

CURSOR C3 IS
    SELECT    EMPAC_ALLW_CODE,EMPAC_ALLW_PERC
    FROM         PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_ALLOWANCE_CE,PM_EMP_KEY
    WHERE     EMPA_COMP_CODE = P_COMP_CODE
    AND     EMPA_CODE         =  M_EMP_CODE
    AND     EMPA_CODE         =  EMP_CODE
    AND     EMPA_COMP_CODE =  EMPAC_COMP_CODE
    AND     EMPA_CODE        =  EMPAC_CODE
    AND         EMPA_ALLW_CODE =  ALLW_CODE
    AND     EMPA_ALLW_CODE =  EMPAC_BASE_ALLW_CODE
    AND            ALLW_EARN_DEDUC= 'E'
    AND     EMPA_FROM_DT   =  EMPAC_FROM_DT
  AND EMPA_EXCLUDE_FROM_DT IS NULL;    --  added and commented by Binso on 15/07/07 for the issue JOHNBITAR-165450
/*    AND         EMPA_FROM_DT   IN  (SELECT MAX(EMPA_FROM_DT)FROM PM_EMP_ALLOWANCE,PM_EMP_KEY
                                       WHERE EMPA_CODE    =M_EMP_CODE
                                    AND   EMPA_CODE = EMP_CODE
                                    AND EMPA_COMP_CODE =P_COMP_CODE
                                                        --AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                                        AND EMP_JOIN_DT  <TO_DATE(P_FM_MTH,'YYYYMM'));*/

 CURSOR C4 IS
  SELECT    NVL(EMPA_LC_AMOUNT,0)
  FROM         PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
  WHERE EMPA_CODE             =M_EMP_CODE
  AND     EMPA_CODE             = EMP_CODE
  AND     EMPA_ALLW_CODE =ALLW_CODE
  AND   EMPA_ALLW_CODE = M_ALLW_CODE
  AND        ALLW_EARN_DEDUC='E'
  AND     EMPA_COMP_CODE =P_COMP_CODE
  AND   EMPA_EXCLUDE_FROM_DT IS NULL; --  added and commented by Binso on 15/07/07 for the issue JOHNBITAR-165450
  /*AND   EMPA_FROM_DT IN (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY
                             WHERE EMPA_CODE=M_EMP_CODE
                             AND   EMPA_CODE = EMP_CODE
--                                           AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                                 AND EMP_JOIN_DT  <TO_DATE(P_FM_MTH,'YYYYMM'));
                                                 */

BEGIN

  IF EMP%ISOPEN THEN
     CLOSE EMP;
  END IF ;
    OPEN EMP;
    TOTAL_EMP:= 0 ;
    LOOP
        FETCH EMP INTO M_EMP_CODE;
          EXIT WHEN EMP%NOTFOUND;
            IF C1%ISOPEN THEN
              CLOSE C1;
          END IF ;
             OPEN C1;
             LOOP
                    FETCH C1 INTO HRA_FLAG;
                      EXIT WHEN C1%NOTFOUND;
                        IF HRA_FLAG = 'E'  THEN
                          IF C2%ISOPEN THEN
                            CLOSE C2;
                            END IF ;
                            OPEN C2;
                            FETCH C2 INTO M_AMT_E    ;
                            CLOSE C2;
                        ELSE
                             IF C3%ISOPEN THEN
                             CLOSE C3;
                            END IF ;
                            OPEN C3;
                            TOTAL:= 0 ;
                                LOOP
                                    FETCH C3 INTO M_ALLW_CODE,HRA_PREC;
                                    EXIT WHEN C3%NOTFOUND;
                                         IF C4%ISOPEN THEN
                                          CLOSE C4;
                                         END IF ;
                                         OPEN C4 ;
                                         FETCH C4 INTO ALLW_AMT;
                                       CLOSE C4;
                                       TOTAL := TOTAL + ALLW_AMT * HRA_PREC /100;
                                   --SRW.MESSAGE(1,'  TOTOAL :'||TOTAL || 'ALLW_AMT' || ALLW_AMT );
                                END LOOP;
                             CLOSE C3;
                         END IF;
           END LOOP;
           CLOSE C1;
           M_AMT_C := TOTAL;
        --SRW.MESSAGE(2,'OP - EMP :'||M_EMP_CODE||'   AMT_C :'||M_AMT_C||' AMT_E :'||M_AMT_E);
        TOTAL_EMP:= NVL(TOTAL_EMP,0) + NVL(M_AMT_C,0)    + NVL(M_AMT_E,0);
        --start of addition by shaibu on 20/09/2005 for fixing the issue id ASG-86749
        M_AMT_E := 0;
        M_AMT_C    := 0;
        TOTAL := 0;
        --end of addition by shaibu on 20/09/2005 for fixing the issue id ASG-86749
    END LOOP;
    CLOSE EMP;
    HRA:=TOTAL_EMP;
    RETURN (ROUND(NVL(HRA,0),2));

END F_COST;

FUNCTION F_COST_TRANSFERS_OUT ( P_COMP_CODE IN VARCHAR2,
                                P_DIVN_CODE IN VARCHAR2,
                                P_DEPT_CODE IN VARCHAR2,
                                P_LOCN_CODE IN VARCHAR2,
                                P_FM_MTH    IN NUMBER,
                                P_TO_MTH    IN NUMBER) RETURN NUMBER IS

HRA                   NUMBER;
 ALLW_AMT         NUMBER;
 M_ALLW_CODE     VARCHAR2(12);
 HRA_PREC       NUMBER;
 HRA_FLAG       VARCHAR2(1);
 TOTAL        NUMBER := 0;
 M_EMP_CODE        VARCHAR2(12);
 M_AMT_E            NUMBER;
 M_AMT_C            NUMBER;
 M_AMT_C1            NUMBER;
 M_AMT_C2            NUMBER;
 M_AMT_E1            NUMBER;
 M_AMT_E2            NUMBER;
 TOTAL1                NUMBER;
 TOTAL_EMP        NUMBER := 0;

 CURSOR EMP IS
   SELECT TRF_EMP_CODE
   FROM   PM_EMP_KEY,PT_TRANSFERS
   WHERE  EMP_CODE=TRF_EMP_CODE
   AND    EMP_COMP_CODE != TRF_TO_COMP_CODE
   AND    EMP_DIVN_CODE!=P_DIVN_CODE
     AND    EMP_DEPT_CODE!=P_DEPT_CODE
   AND    EMP_LOCN_CODE!=P_LOCN_CODE
   --AND   EMP_PERSONAL_GRADE=P_GRADE
   AND    EMP_END_OF_SERVICE_DT IS  NULL
   AND    TRF_EFF_DT  BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM'));


 CURSOR RES IS
   SELECT ROUND(TRF_EFF_DT - TO_DATE(P_FM_MTH,'YYYYMM'))
   FROM   PT_TRANSFERS,
          PM_EMP_KEY
     WHERE  EMP_COMP_CODE = P_COMP_CODE
     AND    EMP_CODE = M_EMP_CODE
   AND    EMP_END_OF_SERVICE_DT IS  NULL
   AND    EMP_COMP_CODE != TRF_TO_COMP_CODE
   AND    EMP_CODE      =  TRF_EMP_CODE
   AND    EMP_DIVN_CODE != P_DIVN_CODE
   AND    EMP_DEPT_CODE != P_DEPT_CODE
   AND    EMP_LOCN_CODE != P_LOCN_CODE
   --AND    EMP_PERSONAL_GRADE!=EMP_PERSONAL_GRADE
   AND    TRF_EFF_DT BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM'));


 CURSOR C1 IS
     SELECT    EMPA_CE
     FROM     PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
     WHERE     EMPA_CODE      = M_EMP_CODE
     AND    EMPA_CODE      = EMP_CODE
     AND         EMPA_ALLW_CODE =ALLW_CODE
     AND        ALLW_EARN_DEDUC='E'
   AND    ALLW_FIX_VAR='V'
     AND         EMPA_COMP_CODE =P_COMP_CODE
     AND    EMPA_EXCLUDE_FROM_DT IS NULL; --  added and commented by Binso on 15/07/07 for the issue JOHNBITAR-165450
     /*
     AND             EMPA_FROM_DT   = (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY,PT_TRANSFERS
                                        WHERE EMPA_CODE=M_EMP_CODE
                                                AND    EMPA_CODE=EMP_CODE
                                       AND EMPA_COMP_CODE=P_COMP_CODE
                                       AND   EMPA_CODE=TRF_EMP_CODE
                                              AND TRF_EFF_DT  BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));
        */

 CURSOR C2 IS
     SELECT     SUM(NVL(EMPA_LC_AMOUNT,0))
     FROM     PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
     WHERE     EMPA_CODE      =M_EMP_CODE
     AND       EMPA_CODE      = EMP_CODE
     AND         EMPA_ALLW_CODE =ALLW_CODE
   AND        ALLW_EARN_DEDUC='E'
   AND    ALLW_FIX_VAR='V'
     AND         EMPA_COMP_CODE =P_COMP_CODE
     AND    EMPA_EXCLUDE_FROM_DT IS NULL; --  added and commented by Binso on 15/07/07 for the issue JOHNBITAR-165450
     /*AND             EMPA_FROM_DT   = (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY,PT_TRANSFERS
                                        WHERE EMPA_CODE=M_EMP_CODE
                                        AND   EMPA_CODE      = EMP_CODE
                                        AND EMPA_COMP_CODE=P_COMP_CODE
                                        AND   EMPA_CODE=TRF_EMP_CODE
                                                        --AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                                        --AND EMP_JOIN_DT  <=TO_DATE(P_FM_MTH,'YYYYMM'));
                                                        AND   TRF_EFF_DT  BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));*/

 CURSOR C3 IS
     SELECT    EMPAC_ALLW_CODE,EMPAC_ALLW_PERC
     FROM         PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_ALLOWANCE_CE,PM_EMP_KEY
     WHERE     EMPA_COMP_CODE = P_COMP_CODE
     AND     EMPA_CODE         =  M_EMP_CODE
     AND     EMPA_CODE         =  EMP_CODE
     AND     EMPA_COMP_CODE =  EMPAC_COMP_CODE
     AND     EMPA_CODE        =  EMPAC_CODE
     AND         EMPA_ALLW_CODE =  ALLW_CODE
     AND     EMPA_ALLW_CODE =  EMPAC_BASE_ALLW_CODE
     AND            ALLW_EARN_DEDUC= 'E'
     AND       ALLW_FIX_VAR='V'
     AND     EMPA_FROM_DT   =  EMPAC_FROM_DT
     AND     EMPA_EXCLUDE_FROM_DT IS NULL;    --  added and commented by Binso on 15/07/07 for the issue JOHNBITAR-165450
     /*AND         EMPA_FROM_DT   IN  (SELECT MAX(EMPA_FROM_DT)FROM PM_EMP_ALLOWANCE,PM_EMP_KEY,PT_TRANSFERS
                                       WHERE EMPA_CODE    =M_EMP_CODE
                                        AND EMPA_COMP_CODE =P_COMP_CODE
                                    AND   EMPA_CODE = EMP_CODE
                                    AND   EMPA_CODE=TRF_EMP_CODE

                                                        --AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                                        --AND EMP_JOIN_DT  <=TO_DATE(P_FM_MTH,'YYYYMM'));
                                                        AND   TRF_EFF_DT  BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));*/

 CURSOR C4 IS
   SELECT    NVL(EMPA_LC_AMOUNT,0)
   FROM         PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
   WHERE     EMPA_CODE             =M_EMP_CODE
   AND       EMPA_CODE             = EMP_CODE
   AND         EMPA_ALLW_CODE =ALLW_CODE
   AND     EMPA_ALLW_CODE = M_ALLW_CODE
   AND            ALLW_EARN_DEDUC='E'
   AND       ALLW_FIX_VAR='V'
   AND         EMPA_COMP_CODE =P_COMP_CODE
   AND     EMPA_EXCLUDE_FROM_DT IS NULL; --  added and commented by Binso on 15/07/07 for the issue JOHNBITAR-165450
   /*AND         EMPA_FROM_DT IN (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY,PT_TRANSFERS
                             WHERE EMPA_CODE=M_EMP_CODE
                             AND   EMPA_CODE = EMP_CODE
                             AND   EMPA_CODE=TRF_EMP_CODE
                             AND EMPA_COMP_CODE =P_COMP_CODE
                                                 AND   TRF_EFF_DT  BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));*/
  M_TRANS_OUT NUMBER;
BEGIN

IF EMP%ISOPEN THEN
     CLOSE EMP;
   END IF ;
     OPEN EMP;
     TOTAL_EMP:= 0 ;
     LOOP
         FETCH EMP INTO M_EMP_CODE;
           EXIT WHEN EMP%NOTFOUND;

           IF RES%ISOPEN THEN
         CLOSE RES;
         END IF;
            OPEN RES;
           FETCH RES INTO M_TRANS_OUT;--:CP_TRANS_OUT;
           CLOSE RES;
             IF C1%ISOPEN THEN
              CLOSE C1;
             END IF ;

             M_AMT_E2 := 0;  --added by Binso on 16/07/07 for the issue JOHNBITAR-165450
             M_AMT_C  := 0;  --added by Binso on 16/07/07 for the issue JOHNBITAR-165450
             TOTAL    := 0;  --added by Binso on 16/07/07 for the issue JOHNBITAR-165450

              OPEN C1;
              LOOP
                    FETCH C1 INTO HRA_FLAG;
                      EXIT WHEN C1%NOTFOUND;
                        IF HRA_FLAG = 'E'  THEN
                           IF C2%ISOPEN THEN
                             CLOSE C2;
                             END IF ;
                             OPEN C2;
                             FETCH C2 INTO M_AMT_E;
                             CLOSE C2;
                             -- commented by Binso on 09/07/07 for the issue JOHNBITAR-165450
                             /*
                             IF :CP_32='A' THEN
                             M_AMT_E1:=ROUND(NVL((NVL(M_AMT_E,0)/NVL(:CP_33,0)),0),2);

                             ELSE
                             M_AMT_E1:=ROUND(NVL((NVL(M_AMT_E,0)/NVL(:CP_34,0)),0),2);

                             END IF;
                                M_AMT_E2:=ROUND(NVL((NVL(M_AMT_E1,0)* NVL(:CP_TRANS_OUT,0)),0),2);
                           */
                           M_AMT_E2:=ROUND(NVL(M_AMT_E,0),2);

                        ELSE
                              IF C3%ISOPEN THEN
                              CLOSE C3;
                             END IF ;
                             OPEN C3;
                             TOTAL:= 0 ;
                             LOOP
                                     FETCH C3 INTO M_ALLW_CODE,HRA_PREC;
                                     EXIT WHEN C3%NOTFOUND;
                                      IF C4%ISOPEN THEN
                                       CLOSE C4;
                                      END IF ;
                                      OPEN C4 ;
                                      FETCH C4 INTO ALLW_AMT;
                                    CLOSE C4;
                                    -- commented by Binso on 09/07/07 for the issue JOHNBITAR-165450
                                       /*
                                           IF :CP_32='A' THEN
                                  M_AMT_C1:=ROUND(NVL((NVL(ALLW_AMT,0)/NVL(:CP_33,0)),0),2);

                                  ELSE
                                  M_AMT_C1:=ROUND(NVL((NVL(ALLW_AMT,0)/NVL(:CP_34,0)),0),2);

                                  END IF;

                                    M_AMT_C2:=ROUND(NVL((NVL(M_AMT_C1,0)* NVL(:CP_TRANS_OUT,0)),0),2);
                                     */
                                M_AMT_C2:=ROUND(NVL(ALLW_AMT,0),2);

                                    TOTAL := NVL(TOTAL,0) + NVL(M_AMT_C2,0) * HRA_PREC /100;
                             END LOOP;
                              CLOSE C3;
                         END IF;
            END LOOP;

            CLOSE C1;
            M_AMT_C := TOTAL;
         TOTAL_EMP:= NVL(TOTAL_EMP,0) + NVL(M_AMT_C,0)    + NVL(M_AMT_E2,0);

     END LOOP;
     CLOSE EMP;
     HRA:=TOTAL_EMP;
      RETURN (ROUND(NVL(HRA,0),2));

END F_COST_TRANSFERS_OUT;

FUNCTION F_EMP ( P_COMP_CODE IN VARCHAR2,
                 P_DIVN_CODE IN VARCHAR2,
                 P_DEPT_CODE IN VARCHAR2,
                 P_LOCN_CODE IN VARCHAR2,
                 P_GRADE     IN VARCHAR2,
                 P_FM_MTH    IN NUMBER,
                 P_TO_MTH    IN NUMBER) RETURN NUMBER IS

CURSOR C1 IS
   SELECT NVL(COUNT(EMP_CODE),0) NO1
   FROM   PM_EMP_KEY
   WHERE  EMP_COMP_CODE =P_COMP_CODE
   --Consolidation
   --commented and added by shaibu on 20/09/2005 for fixing the issue id ASG-86749
   /*AND    EMP_DIVN_CODE BETWEEN :P_FROM_DIVN_CODE AND :P_TO_DIVN_CODE
   AND    EMP_DEPT_CODE BETWEEN :P_FROM_DEPT_CODE AND :P_TO_DEPT_CODE
   AND    EMP_LOCN_CODE BETWEEN :P_FROM_LOCN_CODE AND :P_TO_LOCN_CODE
   AND    EMP_PERSONAL_GRADE BETWEEN :P_FROM_GRADE_CODE AND :P_TO_GRADE_CODE*/
   AND    EMP_DIVN_CODE = P_DIVN_CODE
   AND    EMP_DEPT_CODE = P_DEPT_CODE
   AND    EMP_LOCN_CODE = P_LOCN_CODE
   AND    EMP_PERSONAL_GRADE = P_GRADE
   AND    (EMP_END_OF_SERVICE_DT IS NULL OR EMP_END_OF_SERVICE_DT >= TO_DATE(P_FM_MTH,'YYYYMM')) -- >= added by Binso on 16/07/07 for the issue JOHNBITAR-165450
--   AND    (EMP_END_OF_SERVICE_DT IS NULL OR EMP_END_OF_SERVICE_DT > TO_DATE(P_FM_MTH,'YYYYMM'))----OR condition added by shaibu on 20/09/2005 for fixing the issue id ASG-86749
   AND    EMP_JOIN_DT < TO_DATE(P_FM_MTH,'YYYYMM');

   CURSOR C2 IS
   SELECT NVL(COUNT(EMP_CODE),0) NO2
   FROM   PM_EMP_KEY
   WHERE  EMP_COMP_CODE =P_COMP_CODE
   --consolidation
   --commented and added by shaibu on 20/09/2005 for fixing the issue id ASG-86749
   /*AND    EMP_DIVN_CODE BETWEEN :P_FROM_DIVN_CODE AND :P_TO_DIVN_CODE
   AND    EMP_DEPT_CODE BETWEEN :P_FROM_DEPT_CODE AND :P_TO_DEPT_CODE
   AND    EMP_LOCN_CODE BETWEEN :P_FROM_LOCN_CODE AND :P_TO_LOCN_CODE
   AND    EMP_PERSONAL_GRADE BETWEEN :P_FROM_GRADE_CODE AND :P_TO_GRADE_CODE*/
   AND    EMP_DIVN_CODE = P_DIVN_CODE
   AND    EMP_DEPT_CODE = P_DEPT_CODE
   AND    EMP_LOCN_CODE = P_LOCN_CODE
   AND    EMP_PERSONAL_GRADE = P_GRADE
   AND    EMP_END_OF_SERVICE_DT IS NULL
   AND    EMP_JOIN_DT <= LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM'));

   M_EMP NUMBER;
   M_END_EMP NUMBER;

BEGIN

IF C1%ISOPEN THEN
     CLOSE C1;
     END IF;
     OPEN C1;
     FETCH  C1 INTO M_EMP;--:CP_EMP;
     CLOSE C1;


     IF C2%ISOPEN THEN
         CLOSE C2;
     END IF;
     OPEN C2;
     FETCH  C2 INTO M_END_EMP;--:CP_END_EMP;
     CLOSE C2;
     --RETURN NVL(:CP_EMP,0);
  RETURN NVL(M_EMP,0);

END F_EMP;

FUNCTION F_END_COST ( P_COMP_CODE IN VARCHAR2,
                      P_EMP_CODE  IN VARCHAR2,
                      P_ALLW_CODE IN VARCHAR2,
                      P_DIVN_CODE IN VARCHAR2,
                      P_DEPT_CODE IN VARCHAR2,
                      P_LOCN_CODE IN VARCHAR2,
                      P_GRADE     IN VARCHAR2,
                      P_FM_MTH    IN NUMBER,
                      P_TO_MTH    IN NUMBER) RETURN NUMBER IS

HRA                   NUMBER;
ALLW_AMT             NUMBER;
M_ALLW_CODE     VARCHAR2(12);
HRA_PREC           NUMBER;
HRA_FLAG         VARCHAR2(1);
TOTAL         NUMBER := 0;
M_EMP_CODE        VARCHAR2(12);
M_AMT_E                NUMBER;
M_AMT_C                NUMBER;
M_AMT_E1                NUMBER;
TOTAL1                NUMBER;
TOTAL_EMP            NUMBER := 0;

CURSOR EMP IS
   SELECT EMP_CODE
   FROM PM_EMP_KEY
     WHERE EMP_DIVN_CODE=P_DIVN_CODE
     AND   EMP_DEPT_CODE=P_DEPT_CODE
   AND   EMP_LOCN_CODE=P_LOCN_CODE
   AND   EMP_PERSONAL_GRADE=P_GRADE
   AND    EMP_JOIN_DT <= LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM'));



CURSOR C1 IS
    SELECT        EMPA_CE
    FROM             PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
    WHERE         EMPA_CODE      = P_EMP_CODE
    AND       EMPA_CODE      = EMP_CODE
    AND             EMPA_ALLW_CODE =ALLW_CODE
    AND                ALLW_EARN_DEDUC='E'
    AND             EMPA_COMP_CODE =P_COMP_CODE
    AND     EMPA_EXCLUDE_FROM_DT IS NULL;
/*    AND             EMPA_FROM_DT   = (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY
                                        WHERE EMPA_CODE=M_EMP_CODE
                                           AND    EMPA_CODE=EMP_CODE
                                        AND EMPA_COMP_CODE=P_COMP_CODE
                                        --AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                     AND    EMP_JOIN_DT <= LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));*/

CURSOR C2 IS
     SELECT     SUM(NVL(EMPA_LC_AMOUNT,0))
     FROM             PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
     WHERE         EMPA_CODE      =P_EMP_CODE
     AND           EMPA_CODE      = EMP_CODE
     AND             EMPA_ALLW_CODE =ALLW_CODE
   AND            ALLW_EARN_DEDUC='E'
     AND             EMPA_COMP_CODE =P_COMP_CODE
     AND     EMPA_EXCLUDE_FROM_DT IS NULL;
/*     AND             EMPA_FROM_DT   = (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY
                                        WHERE EMPA_CODE=M_EMP_CODE
                                        AND   EMPA_CODE      = EMP_CODE
                                                            AND EMPA_COMP_CODE=P_COMP_CODE
                                                        --AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                                 AND    EMP_JOIN_DT <= LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM'))); */

CURSOR C3 IS
    SELECT    EMPAC_ALLW_CODE,EMPAC_ALLW_PERC
    FROM         PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_ALLOWANCE_CE,PM_EMP_KEY
    WHERE     EMPA_COMP_CODE = P_COMP_CODE
    AND     EMPA_CODE         =  P_EMP_CODE
    AND     EMPA_CODE         =  EMP_CODE
    AND     EMPA_COMP_CODE =  EMPAC_COMP_CODE
    AND     EMPA_CODE        =  EMPAC_CODE
    AND         EMPA_ALLW_CODE =  ALLW_CODE
    AND     EMPA_ALLW_CODE =  EMPAC_BASE_ALLW_CODE
    AND            ALLW_EARN_DEDUC= 'E'
    AND     EMPA_FROM_DT   =  EMPAC_FROM_DT
AND     EMPA_EXCLUDE_FROM_DT IS NULL;
/*    AND         EMPA_FROM_DT   IN  (SELECT MAX(EMPA_FROM_DT)FROM PM_EMP_ALLOWANCE,PM_EMP_KEY
                                       WHERE EMPA_CODE    =M_EMP_CODE
                                    AND   EMPA_CODE = EMP_CODE
                                    AND EMPA_COMP_CODE =P_COMP_CODE
                                                        --AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                                  AND    EMP_JOIN_DT <= LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM'))); */

CURSOR C4 IS
SELECT    NVL(EMPA_LC_AMOUNT,0)
FROM         PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
WHERE     EMPA_CODE             =P_EMP_CODE
AND     EMPA_CODE             = EMP_CODE
AND         EMPA_ALLW_CODE =ALLW_CODE
AND     EMPA_ALLW_CODE = P_ALLW_CODE
AND            ALLW_EARN_DEDUC='E'
AND         EMPA_COMP_CODE =P_COMP_CODE
AND     EMPA_EXCLUDE_FROM_DT IS NULL;
/*AND         EMPA_FROM_DT IN (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY
                             WHERE EMPA_CODE=M_EMP_CODE
                             AND   EMPA_CODE = EMP_CODE
--                                           AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                          AND    EMP_JOIN_DT <= LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));*/

BEGIN
IF EMP%ISOPEN THEN
     CLOSE EMP;
END IF ;
     OPEN EMP;
            TOTAL_EMP:= 0 ;
     LOOP
      FETCH EMP INTO M_EMP_CODE;
        EXIT WHEN EMP%NOTFOUND;
            IF C1%ISOPEN THEN
              CLOSE C1;
          END IF ;
             OPEN C1;
                 LOOP
                 FETCH C1 INTO HRA_FLAG;
                    EXIT WHEN C1%NOTFOUND;
                        IF HRA_FLAG = 'E'  THEN
                          IF C2%ISOPEN THEN
                            CLOSE C2;
                            END IF ;
                            OPEN C2;
                            FETCH C2 INTO M_AMT_E    ;
                            CLOSE C2;
                        ELSE
                             IF C3%ISOPEN THEN
                             CLOSE C3;
                            END IF ;
                            OPEN C3;
                            TOTAL:= 0 ;
                                LOOP
                                    FETCH C3 INTO M_ALLW_CODE,HRA_PREC;
                                    EXIT WHEN C3%NOTFOUND;
                                         IF C4%ISOPEN THEN
                                          CLOSE C4;
                                         END IF ;
                                         OPEN C4 ;
                                         FETCH C4 INTO ALLW_AMT;
                                       CLOSE C4;
                                       TOTAL := TOTAL + ALLW_AMT * HRA_PREC /100;
                                END LOOP;
                             CLOSE C3;
                         END IF;
               END LOOP;
           CLOSE C1;
           M_AMT_C := TOTAL;
     TOTAL_EMP:= NVL(TOTAL_EMP,0) + NVL(M_AMT_C,0)    + NVL(M_AMT_E,0);
     END LOOP;
     CLOSE EMP;
     HRA:=TOTAL_EMP;
    RETURN (ROUND(NVL(HRA,0),2));
END F_END_COST;

FUNCTION F_TERMINATION ( P_COMP_CODE IN VARCHAR2,
                         P_DIVN_CODE IN VARCHAR2,
                         P_DEPT_CODE IN VARCHAR2,
                         P_LOCN_CODE IN VARCHAR2,
                         P_GRADE     IN VARCHAR2,
                         P_FM_MTH    IN NUMBER,
                         P_TO_MTH    IN NUMBER) RETURN NUMBER IS

CURSOR C5 IS
   SELECT NVL(COUNT(EMP_CODE),0)
   FROM PM_EMP_KEY
   WHERE EMP_END_OF_SERVICE_DT IS NOT NULL
--   AND   EMP_STATUS='5'  --commented  and added by Binso on 15/07/07 for the issue JOHNBITAR-165450
   AND   EMP_STATUS IN ('5','6')
   AND    EMP_COMP_CODE =P_COMP_CODE
   AND    EMP_DIVN_CODE=P_DIVN_CODE
   AND    EMP_DEPT_CODE=P_DEPT_CODE
   AND    EMP_LOCN_CODE=P_LOCN_CODE
   AND    EMP_PERSONAL_GRADE=P_GRADE
   AND    EMP_END_OF_SERVICE_DT BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM'));
   M_30 NUMBER;
BEGIN
IF C5%ISOPEN THEN
   CLOSE C5;
   END IF;
   OPEN C5;
   FETCH C5 INTO  M_30; --:CP_30
   CLOSE C5;
   --SRW.MESSAGE(1,'CP30---'||:CP_30);
   --SRW.MESSAGE(1,'NVLCP30---'||NVL(:CP_30,0));
   RETURN (NVL(M_30,0));
END F_TERMINATION;

FUNCTION F_JOIN_DT ( P_COMP_CODE IN VARCHAR2,
                     P_DIVN_CODE IN VARCHAR2,
                     P_DEPT_CODE IN VARCHAR2,
                     P_LOCN_CODE IN VARCHAR2,
                     P_GRADE     IN VARCHAR2,
                     P_FM_MTH    IN NUMBER,
                     P_TO_MTH    IN NUMBER) RETURN NUMBER IS

 HRA                    NUMBER;
 ALLW_AMT          NUMBER;
 M_ALLW_CODE      VARCHAR2(12);
 M_ALLW_CODE1  VARCHAR2(12);
 HRA_PREC        NUMBER;
 HRA_FLAG        VARCHAR2(1);
 HRA_FLAG1        VARCHAR2(1);
 TOTAL         NUMBER := 0;
 M_EMP_CODE         VARCHAR2(12);
 M_AMT_E             NUMBER;
 M_AMT_C             NUMBER;
 M_AMT_C1             NUMBER;
 M_AMT_C2             NUMBER;
 M_AMT_E1             NUMBER;
 TOTAL1                 NUMBER:=0;
 TOTAL_EMP         NUMBER := 0;
 TOTAL_EMP1         NUMBER := 0;
 ALLW_AMT1     NUMBER;
 HRA1          NUMBER;
 HRA2          NUMBER;
 M_AMT_E2      NUMBER;
 HRA_PREC1        NUMBER;

 CURSOR EMP IS
   SELECT EMP_CODE
   FROM PM_EMP_KEY
     WHERE EMP_COMP_CODE=P_COMP_CODE
       AND EMP_DIVN_CODE=P_DIVN_CODE
       AND EMP_DEPT_CODE=P_DEPT_CODE
     AND EMP_LOCN_CODE=P_LOCN_CODE
     AND EMP_PERSONAL_GRADE=P_GRADE
     --AND EMP_END_OF_SERVICE_DT IS NULL  --  commented by Binso on 07/07/07 for the issue JOHNBITAR-165450
     AND EMP_JOIN_DT BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM'));


 CURSOR C1 IS
    SELECT EMPA_CE
    FROM      PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
    WHERE  EMPA_CODE      = M_EMP_CODE
      AND  EMPA_CODE      = EMP_CODE
      AND  EMPA_ALLW_CODE = ALLW_CODE
      AND     ALLW_EARN_DEDUC='E'
      AND  EMPA_COMP_CODE =P_COMP_CODE
      AND  EMPA_EXCLUDE_FROM_DT IS NULL ; --  added and commented by Binso on 15/07/07 for the issue JOHNBITAR-165450
      /*AND  EMPA_FROM_DT   = (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY
                                      WHERE EMPA_CODE=M_EMP_CODE
                                                  AND EMPA_CODE=EMP_CODE
                                        AND EMPA_COMP_CODE=P_COMP_CODE
                                                --AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                              AND EMP_JOIN_DT BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));
        */

 CURSOR C2 IS
    SELECT SUM(NVL(EMPA_LC_AMOUNT,0))
    FROM      PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
    WHERE  EMPA_CODE      = M_EMP_CODE
      AND  EMPA_CODE      = EMP_CODE
      AND  EMPA_ALLW_CODE = ALLW_CODE
    AND     ALLW_EARN_DEDUC= 'E'
      AND  EMPA_COMP_CODE = P_COMP_CODE
      AND  EMPA_EXCLUDE_FROM_DT IS NULL ; --  added and commented by Binso on 15/07/07 for the issue JOHNBITAR-165450
      /*
      AND  EMPA_FROM_DT   = (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY
                                      WHERE EMPA_CODE  =  M_EMP_CODE
                                        AND EMPA_CODE  = EMP_CODE
                                                            AND EMPA_COMP_CODE = P_COMP_CODE
                                                        --AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                                    AND EMP_JOIN_DT BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));
        */

 CURSOR C3 IS
    SELECT    EMPAC_ALLW_CODE,EMPAC_ALLW_PERC
    FROM   PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_ALLOWANCE_CE,PM_EMP_KEY
    WHERE  EMPA_COMP_CODE = P_COMP_CODE
      AND  EMPA_CODE        = M_EMP_CODE
      AND  EMPA_CODE        = EMP_CODE
      AND  EMPA_COMP_CODE = EMPAC_COMP_CODE
      AND  EMPA_CODE         = EMPAC_CODE
      AND  EMPA_ALLW_CODE = ALLW_CODE
      AND  EMPA_ALLW_CODE = EMPAC_BASE_ALLW_CODE
      AND     ALLW_EARN_DEDUC= 'E'
      AND  EMPA_FROM_DT   = EMPAC_FROM_DT
      AND  EMPA_EXCLUDE_FROM_DT IS NULL ; --  added and commented by Binso on 15/07/07 for the issue JOHNBITAR-165450
     /* AND  EMPA_FROM_DT   IN  (SELECT MAX(EMPA_FROM_DT)FROM PM_EMP_ALLOWANCE,PM_EMP_KEY
                                       WHERE EMPA_CODE      = M_EMP_CODE
                                                  AND EMPA_CODE      = EMP_CODE
                                                AND EMPA_COMP_CODE =P_COMP_CODE
                                                          --AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                                      AND EMP_JOIN_DT BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));
        */

 CURSOR C4 IS
  SELECT    NVL(EMPA_LC_AMOUNT,0)
  FROM     PM_EMP_ALLOWANCE,PM_ALLOWANCE,PM_EMP_KEY
  WHERE EMPA_CODE             = M_EMP_CODE
    AND EMPA_CODE             = EMP_CODE
    AND EMPA_ALLW_CODE = ALLW_CODE
    AND EMPA_ALLW_CODE = M_ALLW_CODE
    AND    ALLW_EARN_DEDUC= 'E'
    AND EMPA_COMP_CODE = P_COMP_CODE
    AND  EMPA_EXCLUDE_FROM_DT IS NULL ;--  added and commented by Binso on 15/07/07 for the issue JOHNBITAR-165450
    /*
    AND EMPA_FROM_DT IN (SELECT MAX(EMPA_FROM_DT) FROM PM_EMP_ALLOWANCE,PM_EMP_KEY
                             WHERE EMPA_CODE = M_EMP_CODE
                                         AND EMPA_CODE = EMP_CODE
                           --AND EMP_JOIN_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
                                             AND EMP_JOIN_DT BETWEEN  TO_DATE(P_FM_MTH,'YYYYMM') AND LAST_DAY(TO_DATE(P_TO_MTH,'YYYYMM')));
        */

BEGIN

IF EMP%ISOPEN THEN
     CLOSE EMP;
 END IF ;
 OPEN EMP;
 TOTAL_EMP:= 0 ;
 LOOP
      FETCH EMP INTO M_EMP_CODE;
        EXIT WHEN EMP%NOTFOUND;
      IF C1%ISOPEN THEN
      CLOSE C1;
      END IF ;
      M_AMT_E2 := 0;   --added by Binso on 16/07/07 for the issue JOHNBITAR-165450
      M_AMT_C  := 0;   --added by Binso on 16/07/07 for the issue JOHNBITAR-165450
      TOTAL    := 0;   --added by Binso on 16/07/07 for the issue JOHNBITAR-165450
      OPEN C1;
      LOOP
           FETCH C1 INTO HRA_FLAG;
             EXIT WHEN C1%NOTFOUND;
             IF HRA_FLAG = 'E'  THEN
                    IF C2%ISOPEN THEN
                      CLOSE C2;
                      END IF ;
                      OPEN C2;
                      FETCH C2 INTO M_AMT_E;
                      CLOSE C2;
                      --SRW.MESSAGE(6,'EMP_CODE - '||M_EMP_CODE||' - M_AMT_E - '||M_AMT_E); --TESTED
                      --commented by Binso on 07/07/07 for the issue JOHNBITAR-165450
                    /*
                              IF :CP_32='A' THEN
                                 M_AMT_E1:=ROUND(NVL((NVL(M_AMT_E,0)/NVL(:CP_33,0)),0));
                                ELSE
                                 M_AMT_E1:=ROUND(NVL((NVL(M_AMT_E,0)/NVL(:CP_34,0)),0));
                              END IF;
                                M_AMT_E2:=ROUND(NVL((NVL(M_AMT_E1,0)* NVL(:CP_JOIN_DT,0)),0));
                  */
                      M_AMT_E2:=ROUND(NVL(M_AMT_E,0),0);
                    --SRW.MESSAGE(1,' 1 - EMP_CODE - '||M_EMP_CODE||' - M_AMT_E2 - '||M_AMT_E2);
             ELSE
                       IF C3%ISOPEN THEN
                       CLOSE C3;
                      END IF ;
                      OPEN C3;
                      TOTAL:= 0 ;
                        LOOP
                                 FETCH C3 INTO M_ALLW_CODE,HRA_PREC;
                                 EXIT WHEN C3%NOTFOUND;
                                IF C4%ISOPEN THEN
                                    CLOSE C4;
                                  END IF ;
                                  OPEN C4 ;
                                  FETCH C4 INTO ALLW_AMT;
                                CLOSE C4;
                                --SRW.MESSAGE(7,'7ALLW_AMT---- '||M_EMP_CODE||' - '||ALLW_AMT);
                                -- commented by Binso on 07/07/07 for the issue JOHNBITAR-165450
                              /*
                                   IF :CP_32='A' THEN
                                                 M_AMT_C1:=ROUND(NVL((NVL(ALLW_AMT,0)/NVL(:CP_33,0)),0));
                                            ELSE
                                                 M_AMT_C1:=ROUND(NVL((NVL(ALLW_AMT,0)/NVL(:CP_34,0)),0));
                                            END IF;
                                          M_AMT_C2:=ROUND(NVL((NVL(M_AMT_C1,0)* NVL(:CP_JOIN_DT,0)),0));
                              */
                             M_AMT_C2:=ROUND(NVL(ALLW_AMT,0),0);
                                TOTAL := NVL(TOTAL,0) + NVL(M_AMT_C2,0) * HRA_PREC /100;
                               --SRW.MESSAGE(2,'--- 2 EMP CODE - '||M_EMP_CODE||' - '||M_AMT_C2||' - ' ||TOTAL);
                      END LOOP;
                         CLOSE C3;
              END IF;
    END LOOP;
      CLOSE C1;
    M_AMT_C := TOTAL;
    --TOTAL_EMP:= NVL(TOTAL_EMP,0) + NVL(M_AMT_C,0)    + NVL(M_AMT_E2,0);
    --SRW.MESSAGE(4,'TOTAL_EMP '||TOTAL_EMP||'--'||'M_EMP_CODE--'||M_EMP_CODE||'--'||M_AMT_C);

   -- HRA:=TOTAL_EMP;             --comented by Binso on 16/07/07 for the issue JOHNBITAR-165450
   --RETURN (NVL(HRA,0));
     -- M_AMT_C2 := TOTAL;          ----comented by Binso on 16/07/07 for the issue JOHNBITAR-165450
    TOTAL_EMP:= NVL(TOTAL_EMP,0) + NVL(M_AMT_C,0)    + NVL(M_AMT_E2,0);
    --SRW.MESSAGE(3,'JOIN EMP - '||M_EMP_CODE||' - C - '||M_AMT_C||' - E - '||M_AMT_E2);
    HRA:=TOTAL_EMP;
  END LOOP;
  CLOSE EMP;
  --END IF;
  --HRA2:=NVL(HRA,0)+NVL(HRA1,0);

    RETURN (ROUND(NVL(HRA,0),2));

END F_JOIN_DT;

FUNCTION P_GET_FC_DECIMAL (P_COMP_CODE   IN  VARCHAR2,
                           P_FOR_CURR    IN  VARCHAR2)
RETURN NUMBER IS
CURSOR C1 IS
     SELECT CURR_DECIMAL
       FROM   FM_CURRENCY
       WHERE  CURR_CODE      = P_FOR_CURR;
P_FC_DECIMAL NUMBER(1);
BEGIN
IF C1%ISOPEN THEN
   CLOSE C1;
END IF;
OPEN C1;
FETCH C1 INTO P_FC_DECIMAL;
IF C1%NOTFOUND THEN
   CLOSE C1;
   RETURN (-1);
ELSE
   CLOSE C1;
   RETURN (P_FC_DECIMAL);
END IF;
RETURN NULL;
END P_GET_FC_DECIMAL;

PROCEDURE P_CONV_AMT_TO_WORDS(P_AMT       IN NUMBER,
                                                         P_CURR_CODE IN VARCHAR2,
                                                         P_LANG_CODE IN VARCHAR2,
                              P_TEXT      IN OUT VARCHAR2) IS
M_TOP_AMT_TEXT       VARCHAR2(2000) ;
M_BOTTOM_AMT_TEXT    VARCHAR2(2000) ;
M_DECIMAL_TEXT       VARCHAR2(2000) ;
M_TOP_AMT            NUMBER ;
M_BOTTOM_AMT         NUMBER ;
M_DECIMAL            NUMBER ;
M_UNIT_NAME          VARCHAR2(15) ;
M_NO_DECIMAL         NUMBER(3) ;
M_AMT                NUMBER;
M_TEXT               VARCHAR2(2000) ;
CURSOR C1 IS
       SELECT DECODE(P_LANG_CODE,'ENG',CURR_UNIT_NAME, CURR_BL_UNIT_NAME),
          CURR_DECIMAL
       FROM   FM_CURRENCY
       WHERE  CURR_CODE = P_CURR_CODE ;
BEGIN
   OPEN C1 ;
   FETCH C1 INTO M_UNIT_NAME, M_NO_DECIMAL ;
   CLOSE C1 ;
   M_TOP_AMT_TEXT    := NULL ;
   M_BOTTOM_AMT_TEXT := NULL ;
   M_DECIMAL_TEXT    := NULL ;

   M_DECIMAL    := P_AMT - TRUNC(P_AMT) ;
   M_AMT        := TRUNC(P_AMT) ;
   IF M_DECIMAL > 0 THEN
      IF M_NO_DECIMAL = 0 THEN
     M_DECIMAL := 0 ;
      END IF ;
      IF M_NO_DECIMAL = 1 THEN
     M_DECIMAL := M_DECIMAL * 10 ;
      END IF ;
      IF M_NO_DECIMAL = 2 THEN
     M_DECIMAL := M_DECIMAL * 100 ;
      END IF ;
      IF M_NO_DECIMAL = 3 THEN
     M_DECIMAL := M_DECIMAL * 1000 ;
      END IF ;
   END IF ;
   M_TOP_AMT    := TRUNC(M_AMT / 1000000) ;
   M_BOTTOM_AMT := M_AMT - (M_TOP_AMT * 1000000) ;
   IF M_TOP_AMT > 0 THEN
      M_TOP_AMT_TEXT := TO_CHAR(TO_DATE(M_TOP_AMT,'J'),'JSP') ;
      M_TOP_AMT_TEXT := M_TOP_AMT_TEXT || ' MILLION ' ;
   END IF ;
   IF M_BOTTOM_AMT > 0 THEN
      M_BOTTOM_AMT_TEXT := TO_CHAR(TO_DATE(M_BOTTOM_AMT,'J'),'JSP') ;
   END IF ;
   IF M_DECIMAL > 0 THEN
      IF NVL(M_BOTTOM_AMT,0) + NVL(M_TOP_AMT,0) > 0 THEN
         M_DECIMAL_TEXT := ' AND ' || M_UNIT_NAME || ' ' ||
               TO_CHAR(TO_DATE(M_DECIMAL,'J'),'JSP') ;
      ELSE
         M_DECIMAL_TEXT := M_UNIT_NAME || ' ' ||
               TO_CHAR(TO_DATE(M_DECIMAL,'J'),'JSP') ;
      END IF ;
   END IF ;
   M_TEXT := M_TOP_AMT_TEXT || M_BOTTOM_AMT_TEXT || M_DECIMAL_TEXT || ' ONLY ' ;
   P_TEXT := M_TEXT;
END P_CONV_AMT_TO_WORDS;

PROCEDURE P_EMP_MASTER_DATA ( P_COMP_CODE         IN VARCHAR2,
                            P_REP_KEY_NO        IN NUMBER,
                            P_FM_EMP_CODE       IN VARCHAR2,
                            P_TO_EMP_CODE       IN VARCHAR2,
                            P_FM_GRADE          IN VARCHAR2,
                            P_TO_GRADE          IN VARCHAR2,
                            P_FM_DIVN           IN VARCHAR2,
                            P_TO_DIVN           IN VARCHAR2,
                            P_FM_DEPT           IN VARCHAR2,
                            P_TO_DEPT           IN VARCHAR2,
                            P_FM_LOCN           IN VARCHAR2,
                            P_TO_LOCN           IN VARCHAR2,
                            P_FM_CONTRACT_TYPE  IN VARCHAR2,
                            P_TO_CONTRACT_TYPE  IN VARCHAR2,
                            P_FM_JOIN_DT        IN DATE,
                            P_TO_JOIN_DT        IN DATE,
                            P_FM_COUNTRY_CODE   IN VARCHAR2,
                            P_TO_COUNTRY_CODE   IN VARCHAR2 ) IS

    CURSOR C_Q1 IS
        SELECT EMP_CODE Q1_EMP_CODE,
                INITCAP (EMP_NAME) AS Q1_EMP_NAME,
                EMP_COMP_CODE Q1_EMP_COMP_CODE,
                EMP_DIVN_CODE Q1_EMP_DIVN_CODE,
                (SELECT INITCAP (DIVN_NAME)
                 FROM FM_DIVISION
                WHERE     DIVN_COMP_CODE = EMP_COMP_CODE
                      AND DIVN_CODE = EMP_DIVN_CODE)
                 AS DIVN_NAME,
                 EMP_DEPT_CODE Q1_EMP_DEPT_CODE,
                (SELECT INITCAP (DEPT_NAME)
                 FROM FM_DEPARTMENT
                WHERE     DEPT_COMP_CODE = EMP_COMP_CODE
                      AND DEPT_DIVN_CODE = EMP_DIVN_CODE
                      AND DEPT_CODE = EMP_DEPT_CODE)
                 AS DEPT_NAME,
                 EMP_PERSONAL_GRADE Q1_EMP_PERSONAL_GRADE,
                (SELECT INITCAP (GRADE_DESC)
                 FROM PM_GRADE
                WHERE GRADE_CODE = EMP_PERSONAL_GRADE)
                 AS GRADE_DESC,
                 EMP_JOB_TITLE_CODE Q1_EMP_JOB_TITLE_CODE,
                (SELECT INITCAP (JOB_TITLE_DESC)
                 FROM PM_JOB_TITLE
                WHERE JOB_TITLE_CODE = EMP_JOB_TITLE_CODE)
                 AS JOB_TITLE_DESC,
                 EMP_LOCN_CODE Q1_EMP_LOCN_CODE,
                (SELECT INITCAP (LOCN_DESC)
                 FROM PM_LOCN
                WHERE LOCN_CODE = EMP_LOCN_CODE)
                 AS LOCATION,
                (SELECT INITCAP (PM_OM_OFFICENAME)
                 FROM PM_OFFICEMASTER
                WHERE PM_OM_OFFICECODE = EMP_OFFICE_CODE)
                 AS OFFICE_NAME,
                 EMP_CONT_TYPE_CODE Q1_EMP_CONT_TYPE_CODE,
                (SELECT INITCAP (CONT_TYPE_DESC)
                 FROM PM_CONTRACT_TYPE
                WHERE CONT_TYPE_CODE = EMP_CONT_TYPE_CODE)
                 AS CONTRACT_DESC,
                DECODE (EMP_STATUS,
                      '1', 'Probation',
                      '2', 'Confirmed',
                      '3', 'Temporary',
                      '4', 'Resigned',
                      '5', 'Terminated',
                      '6', 'Retired',
                      '7', 'Dead',
                      '8', 'Transfered',
                      '9', 'Salary Stopped',
                      '10', 'Deputation',
                      '11', 'Repartiate')
                 AS EMP_STATUS,
                DECODE (EMP_PROC_STATUS,
                      '0', 'Not Processed',
                      '1', 'Pre Payroll',
                      '2', 'Final Payroll')
                 AS EMP_PROC_STATUS,
                DECODE (EMP_FRZ_FLAG,  'N', 'Yes',  'Y', 'No') EMP_FRZ_FLAG,
                emp_join_dt Q1_EMP_JOIN_DT,
                EMP_BIRTH_DT Q1_EMP_BIRTH_DT,
                (SELECT DECODE (EMPY_PAY_MODE,  'C', 'Cash',  'B', 'Bank',  'Q', 'Cheque') FROM PM_EMP_PAY WHERE EMP_CODE = EMPY_CODE) Q1_EMP_PAY_MODE,
                DECODE(EMPY_PAY_TYPE,'M','Monthly','Non Monthly') Q1_EMP_PAY_TYPE,
                EMPY_BANK_CODE || ' - '|| (SELECT BANK_NAME FROM PM_BANK WHERE BANK_CODE = EMPY_BANK_CODE) Q1_EMP_BANK,
                EMPY_BANK_REMARKS Q1_EMP_BANK_AC_NO,
                HRMSFUN_get_total_sal (K.EMP_COMP_CODE, K.EMP_CODE) Q1_EMP_NET_SAL,
                K.EMP_REPORTING_TO || ' - '|| (SELECT R.EMP_NAME FROM PM_EMP_KEY R WHERE R.EMP_CODE = K.EMP_REPORTING_TO) Q1_EMP_REPORTING_TO,
                EMPS_RELIGION_CODE || ' - ' || (SELECT RELG_DESC FROM PM_RELIGION WHERE EMPS_RELIGION_CODE = RELG_CODE) Q1_EMP_RELIGION,
                EMPS_CNTRY_CODE || ' - ' || (SELECT CNTRY_NATIONALITY FROM PM_COUNTRY WHERE EMPS_CNTRY_CODE = CNTRY_CODE) Q1_EMP_NATIONALITY,
                EMPL_PASS_cODE ||' - '|| (SELECT PASS_DESC FROM PM_PASSAGE WHERE PASS_CODE = EMPL_PASS_CODE) Q1_EMP_PASSAGE,
                emp_cr_uid Q1_EMP_CR_UID,
                emp_cr_dt Q1_EMP_CR_DT
        FROM    PM_EMP_KEY K, PM_EMP_PERS, PM_EMP_LEAVE, PM_EMP_PAY
        WHERE   EMP_COMP_CODE = P_COMP_CODE
        AND     EMP_CODE = EMPY_CODE
        AND     EMP_CODE = EMPS_CODE (+)
        AND     EMP_CODE = EMPL_CODE(+)
        AND     EMPL_LV_CATG_CODE IN (SELECT LV_CATG_CODE FROM PM_LEAVE WHERE LV_TYPE_CODE = '1')
        AND     EMP_CODE           BETWEEN  P_FM_EMP_CODE AND P_TO_EMP_CODE
        AND     EMP_PERSONAL_GRADE BETWEEN  P_FM_GRADE  AND P_TO_GRADE
        AND     EMP_DIVN_CODE      BETWEEN  P_FM_DIVN AND P_TO_DIVN
        AND     EMP_DEPT_CODE      BETWEEN  P_FM_DEPT AND P_TO_DEPT
        AND     EMP_LOCN_CODE      BETWEEN  P_FM_LOCN AND P_TO_LOCN
        AND     EMP_CONT_TYPE_CODE BETWEEN  P_FM_CONTRACT_TYPE AND P_TO_CONTRACT_TYPE
        AND     EMPS_CNTRY_CODE(+) BETWEEN  P_FM_COUNTRY_CODE AND P_TO_COUNTRY_CODE
--        AND     EMP_JOIN_DT        BETWEEN  P_FM_JOIN_DT AND P_TO_JOIN_DT
        AND     EMP_FRZ_FLAG = 'N'
        ORDER BY EMP_COMP_CODE, EMP_DIVN_CODE, EMP_DEPT_CODE, EMP_CODE;


    CURSOR C_Q3 (P_EMP_CODE IN VARCHAR2)IS
        SELECT EMPA_CODE Q3_EMPA_CODE,EMPA_FROM_DT Q3_FRM_DT ,EMPA_UPTO_DT Q3_TO_DT ,
               DECODE('ENG', 'ENG', ALLW_SHORT_DESC, ALLW_BL_SHORT_DESC) Q3_ALLW_NAME,
               EMPA_CURR_CODE Q3_CURR,    EMPA_LC_AMOUNT Q3_FC_AMT,
             DECODE(EMPA_CE,'C','CALCULATED', 'ENTERED') EMPA_CE,
               EMPAC_ALLW_CODE, EMPAC_ALLW_PERC
        FROM   PM_EMP_ALLOWANCE,PM_ALLOWANCE, PM_EMP_ALLOWANCE_CE
        WHERE  EMPA_COMP_CODE = P_COMP_CODE
        AND    EMPA_ALLW_CODE = ALLW_CODE
        AND    EMPAC_COMP_CODE(+) = EMPA_COMP_CODE
        AND    EMPAC_CODE(+) = EMPA_CODE
        AND    EMPA_CODE = P_EMP_CODE
        AND    EMPAC_BASE_ALLW_CODE(+) = EMPA_ALLW_CODE
        AND    EMPAC_FROM_DT(+) = EMPA_FROM_DT
        AND    EMPA_EXCLUDE_FROM_DT IS NULL;

    CURSOR C_CALC_ALLW_DESC (P_ALLW IN VARCHAR2) IS
        SELECT     DECODE('ENG', 'ENG', ALLW_SHORT_DESC, ALLW_BL_SHORT_DESC)
        FROM PM_ALLOWANCE
        WHERE ALLW_CODE = P_ALLW;

    M_CALC_ALLW_DESC VARCHAR2(100);

    CURSOR C_Q4 (P_EMP_CODE IN VARCHAR2) IS
        SELECT EMPD_CODE  Q4_EMPD_CDE , DECODE('ENG', 'ENG',     DOCU_SHORT_DESC, DOCU_BL_SHORT_DESC) Q4_EMP_DOCUMEN_NAME ,
               EMPD_NUMBER  Q4_EMPD_NO ,EMPD_ISS_PLACE Q4_ISS_PLACE ,EMPD_ISS_DT Q4_ISS_DT ,
               EMPD_EXP_DT Q4_EXP_DT , EMPD_INIT_DAYS
        FROM   PM_EMP_DOCUMENT, PM_DOCUMENT
        WHERE  EMPD_COMP_CODE = P_COMP_CODE
        AND    EMPD_DOCU_CODE = DOCU_CODE
        AND    EMPD_CODE = P_EMP_CODE;

    CURSOR C_Q5 (P_EMP_CODE IN VARCHAR2) IS
        SELECT LVAC_EMP_CODE,LVAC_LV_CODE,DECODE('ENG', 'ENG', LV_SHORT_DESC, LV_BL_SHORT_DESC) Q5_LEAVE_TYPE ,
             SUM(NVL(LVAC_ACCRUED_DAYS,0))-SUM(NVL(LVAC_AVAILED_DAYS,0))  Q5_BALANCE_DAYS
        FROM   PM_LEAVE,PS_LEAVE_ACCRUAL_CURR
        WHERE  LVAC_COMP_CODE = P_COMP_CODE
        AND    LVAC_LV_CODE   = LV_CATG_CODE
        AND    LVAC_EMP_CODE = P_EMP_CODE
        GROUP BY LVAC_EMP_CODE,LVAC_LV_CODE,LV_SHORT_DESC,LV_BL_SHORT_DESC;

    CURSOR C_Q6 (P_EMP_CODE IN VARCHAR2) IS
        SELECT EMPG_CODE,EMPG_FROM_DT,EMPG_UPTO_DT, EMPG_GRAT_DAYS, EMPG_GRAT_PER_AMOUNT,
               EMPG_GRAT_LIB_AMOUNT
        FROM   PM_EMP_GRATUITY
        WHERE  EMPG_COMP_CODE = P_COMP_CODE
        AND    EMPG_CODE = P_EMP_CODE;


    CURSOR C_GRAT_DTLS (P_EMP_CODE IN VARCHAR2) IS
        SELECT MIN(EMPG_FROM_DT) GRAT_FROM_DT, MAX(EMPG_UPTO_DT) GRAT_UPTO_DT, MAX(EMPG_GRAT_DAYS) GRAT_DAYS, MAX(EMPG_GRAT_LIB_AMOUNT) GRAT_AMT
        FROM   PM_EMP_GRATUITY
        WHERE  EMPG_COMP_CODE = P_COMP_CODE
        AND    EMPG_CODE = P_EMP_CODE;

    M_GRAT_FROM_DT DATE;
    M_GRAT_UPTO_DT DATE;
    M_GRAT_DAYS NUMBER;
    M_GRAT_AMOUNT NUMBER;

    M_Q2_EMP_CODE VARCHAR2(12);
    M_Q2_BANK_CDE VARCHAR2(12);
    m_Q2_BANK_AC NUMBER;
    M_Q2_EMPY_PAY_TYPE VARCHAR2(12);
    M_Q2_EMPY_PAY_MODE VARCHAR2(12);
    M_Q3_EMPA_CODE   VARCHAR2(12);
    M_Q3_FRM_DT      DATE;
    M_Q3_TO_DT        DATE;
    M_Q3_ALLW_NAME    VARCHAR2(30);
    M_Q3_CURR         VARCHAR2(12);
    M_Q3_FC_AMT       NUMBER;
    M_EMPA_CE         VARCHAR2(12);
    M_EMPAC_ALLW_CODE  VARCHAR2(12);
    M_EMPAC_ALLW_PERC  NUMBER;
    M_Q4_EMPD_CDE      VARCHAR2(12);
    M_Q4_EMP_DOCUMEN_NAME  VARCHAR2(240);
    M_Q4_EMPD_NO     VARCHAR2(30);
    M_Q4_ISS_PLACE   VARCHAR2(15) ;
    M_Q4_ISS_DT      DATE;
    M_Q4_EXP_DT      DATE;
    M_EMPD_INIT_DAYS  NUMBER(3);
    M_LVAC_EMP_CODE    VARCHAR2(12);
    M_LVAC_LV_CODE     VARCHAR2(12);
    M_Q5_LEAVE_TYPE   VARCHAR2(240);
    M_Q5_BALANCE_DAYS NUMBER;
    M_EMPG_CODE       VARCHAR2(12);
    M_EMPG_FROM_DT    DATE;
    M_EMPG_UPTO_DT    DATE;
    M_EMPG_GRAT_DAYS  NUMBER;
    M_EMPG_GRAT_PER_AMOUNT NUMBER;
    M_EMPG_GRAT_LIB_AMOUNT NUMBER;
BEGIN

/*DUMMY('Starting Report = comp = ' || P_COMP_CODE || ':: KEY =' || P_REP_KEY_NO || ':: FM_EMP = ' || P_FM_EMP_CODE || '::TO_EMP =' ||
P_TO_EMP_CODE || ':: FM_GRAD= ' || P_FM_GRADE || ':: TO_GRADE =' || P_TO_GRADE || ':: FM_DIVN = ' || P_FM_DIVN || ':: TO_DIVN =' ||
P_TO_DIVN || ':: FM_DEPT =' ||
P_FM_DEPT || ':: TO_DEPT= ' || P_TO_DEPT || ':: FM_LOCN= ' || P_FM_LOCN  || ':: TO_LOCN =' || P_TO_LOCN || ':: FM_CONT =' ||
P_FM_CONTRACT_TYPE || ':: TO_CONT = ' ||
P_TO_CONTRACT_TYPE || ':: FM_JOINDT = ' || P_FM_JOIN_DT || ':: TO_JOINDT = ' || P_TO_JOIN_DT || ':: FM_CNTRY = ' ||
P_FM_COUNTRY_CODE || ':: TO_CNTRY =' || P_TO_COUNTRY_CODE);  */

   DELETE FROM PW_EMP_MASTER_DATA WHERE EMPD_REP_KEY_NO = P_REP_KEY_NO;
   DELETE FROM PW_EMP_MASTER_DATA_Q3  WHERE  empd_q3_rep_key_no = P_REP_KEY_NO;
   DELETE FROM PW_EMP_MASTER_DATA_Q4 WHERE empd_q4_rep_key_no = P_REP_KEY_NO;
   DELETE FROM PW_EMP_MASTER_DATA_Q5 WHERE EMPD_REP_KEY_NO = P_REP_KEY_NO;
   DELETE FROM PW_EMP_MASTER_DATA_Q6 WHERE EMPD_REP_KEY_NO = P_REP_KEY_NO;

--   DELETE FROM PW_EMP_MASTER_DATA_q2 WHERE empd_q2_rep_key_no = P_REP_KEY_NO;
   --DUMMY(2);
   FOR I IN C_Q1
   LOOP

      OPEN C_GRAT_DTLS (I.Q1_EMP_CODE);
      FETCH C_GRAT_DTLS INTO M_GRAT_FROM_DT, M_GRAT_UPTO_DT, M_GRAT_DAYS, M_GRAT_AMOUNT;
      CLOSE C_GRAT_DTLS;


      INSERT INTO PW_EMP_MASTER_DATA (EMPMD_COMP_CODE,
                                      EMPD_REP_KEY_NO,
                                      EMPMD_EMP_CODE,
                                      EMPMD_EMP_NAME,
                                      EMPMD_EMP_DIVN_CODE,
                                      EMPMD_DIVN_NAME,
                                      EMPMD_EMP_DEPT_CODE,
                                      EMPMD_DEPT_NAME,
                                      EMPMD_EMP_PERSONAL_GRADE,
                                      EMPMD_GRADE_DESC,
                                      EMPMD_EMP_JOB_TITLE_CODE,
                                      EMPMD_JOB_TITLE_DESC,
                                      EMPMD_EMP_LOCN_CODE,
                                      EMPMD_LOCATION,
                                      EMPMD_OFFICE_NAME,
                                      EMPMD_EMP_CONT_TYPE_CODE,
                                      EMPMD_CONTRACT_DESC,
                                      EMPMD_EMP_STATUS,
                                      EMPMD_EMP_PROC_STATUS,
                                      EMPMD_EMP_FRZ_FLAG,
                                      EMPMD_EMP_JOIN_DT,
                                      EMPMD_EMP_BIRTH_DT,
                                      EMPMD_EMP_PAY_MODE,
                                      EMPMD_EMP_PAY_TYPE,
                                      EMPMD_EMP_BANK,
                                      EMPMD_EMP_BANK_AC_NO,
                                      EMPMD_EMP_NET_SAL,
                                      EMPMD_EMP_REPORTING_TO,
                                      EMPMD_EMP_RELIGION,
                                      EMPMD_EMP_NATIONALITY,
                                      EMPMD_EMP_PASSAGE,
                                      EMPMD_EMP_CR_UID,
                                      EMPMD_EMP_CR_DT,
                                      EMPMD_GRAT_FROM_DT,
                                      EMPMD_GRAT_UPTO_DT,
                                      EMPMD_GRAT_DAYS,
                                      EMPMD_GRAT_AMOUNT,
                                      EMPD_CLIENT_ID)
        VALUES (                      P_COMP_CODE,
                                      P_REP_KEY_NO,
                                      I.Q1_EMP_CODE,
                                      I.Q1_EMP_NAME,
                                      I.Q1_EMP_DIVN_CODE,
                                      I.DIVN_NAME,
                                      I.Q1_EMP_DEPT_CODE,
                                      I.DEPT_NAME,
                                      I.Q1_EMP_PERSONAL_GRADE,
                                      I.GRADE_DESC,
                                      I.Q1_EMP_JOB_TITLE_CODE,
                                      I.JOB_TITLE_DESC,
                                      I.Q1_EMP_LOCN_CODE,
                                      I.LOCATION,
                                      I.OFFICE_NAME,
                                      I.Q1_EMP_CONT_TYPE_CODE,
                                      I.CONTRACT_DESC,
                                      I.EMP_STATUS,
                                      I.EMP_PROC_STATUS,
                                      I.EMP_FRZ_FLAG,
                                      I.Q1_EMP_JOIN_DT,
                                      I.Q1_EMP_BIRTH_DT,
                                      I.Q1_EMP_PAY_MODE,
                                      I.Q1_EMP_PAY_TYPE,
                                      I.Q1_EMP_BANK,
                                      I.Q1_EMP_BANK_AC_NO,
                                      I.Q1_EMP_NET_SAL,
                                      I.Q1_EMP_REPORTING_TO,
                                      I.Q1_EMP_RELIGION,
                                      I.Q1_EMP_NATIONALITY,
                                      I.Q1_EMP_PASSAGE,
                                      I.Q1_EMP_CR_UID,
                                      I.Q1_EMP_CR_DT,
                                      M_GRAT_FROM_DT,
                                      M_GRAT_UPTO_DT,
                                      M_GRAT_DAYS,
                                      M_GRAT_AMOUNT,
                                      P_COMP_CODE);


        FOR K IN C_Q3(I.Q1_EMP_CODE) LOOP
            IF C_CALC_ALLW_DESC%ISOPEN THEN
                CLOSE C_CALC_ALLW_DESC;
            END IF;

            OPEN C_CALC_ALLW_DESC(K.EMPAC_ALLW_CODE);
            FETCH C_CALC_ALLW_DESC INTO M_CALC_ALLW_DESC;
            CLOSE C_CALC_ALLW_DESC;

            INSERT INTO PW_EMP_MASTER_DATA_Q3  ( EMPD_Q3_COMP_CODE,
                                              EMPD_Q3_REP_KEY_NO,
                                              EMPD_Q3_EMPA_CODE,
                                              EMPD_Q3_FRM_DT,
                                              EMPD_Q3_TO_DT,
                                              EMPD_Q3_ALLW_NAME,
                                              EMPD_Q3_CURR,
                                              EMPD_Q3_FC_AMT,
                                              EMPD_EMPA_CE,
                                              EMPD_EMPAC_ALLW_CODE,
                                              EMPD_EMPAC_ALLW_PERC  )
                                 VALUES ( P_cOMP_CODE,
                                          P_REP_KEY_NO,
                                          K.Q3_EMPA_CODE,
                                          K.Q3_FRM_DT,
                                          K.Q3_TO_DT,
                                          K.Q3_ALLW_NAME,
                                          K.Q3_CURR,
                                          K.Q3_FC_AMT,
                                          K.EMPA_CE,
                                          K.EMPAC_ALLW_CODE,
                                          K.EMPAC_ALLW_PERC);

        END LOOP;

        FOR M IN C_Q4 (I.Q1_EMP_CODE) LOOP

            INSERT INTO PW_EMP_MASTER_DATA_Q4 ( EMPD_Q4_COMP_CODE,
                                                  EMPD_Q4_REP_KEY_NO,
                                                  EMPD_Q4_EMPD_CDE,
                                                  EMPD_Q4_EMP_DOCUMEN_NAME,
                                                  EMPD_Q4_EMPD_NO,
                                                  EMPD_Q4_ISS_PLACE,
                                                  EMPD_Q4_ISS_DT,
                                                  EMPD_Q4_EXP_DT,
                                                  EMPD_EMPD_INIT_DAYS)
                                        VALUES ( P_COMP_CODE,
                                                 P_REP_KEY_NO,
                                                 M.Q4_EMPD_CDE,
                                                 M.Q4_EMP_DOCUMEN_NAME,
                                                 M.Q4_EMPD_NO,
                                                 M.Q4_ISS_PLACE,
                                                 M.Q4_ISS_DT,
                                                 M.Q4_EXP_DT,
                                                 M.EMPD_INIT_DAYS);

        END LOOP;

        FOR N IN C_Q5 (I.Q1_EMP_CODE) LOOP

            INSERT INTO PW_EMP_MASTER_DATA_Q5 ( EMPD_COMP_CODE,
                                              EMPD_REP_KEY_NO,
                                              EMPD_LVAC_EMP_CODE,
                                              EMPD_LVAC_LV_CODE,
                                              EMPD_Q5_LEAVE_TYPE,
                                              EMPD_Q5_BALANCE_DAYS )
                                      VALUES ( P_COMP_cODE,
                                               P_REP_KEY_NO,
                                               N.LVAC_EMP_CODE,
                                               N.LVAC_LV_CODE,
                                               N.Q5_LEAVE_TYPE,
                                               N.Q5_BALANCE_DAYS);

        END LOOP;

        FOR O IN C_Q6 (I.Q1_EMP_CODE) LOOP

            INSERT INTO PW_EMP_MASTER_DATA_Q6 ( EMPD_COMP_CODE,
                                      EMPD_REP_KEY_NO,
                                      EMPD_EMPG_CODE,
                                      EMPD_EMPG_FROM_DT,
                                      EMPD_EMPG_UPTO_DT,
                                      EMPD_EMPG_GRAT_DAYS,
                                      EMPD_EMPG_GRAT_PER_AMOUNT,
                                      EMPD_EMPG_GRAT_LIB_AMOUNT)
                              VALUES ( P_COMP_CODE,
                                       P_REP_KEY_NO,
                                       O.EMPG_CODE,
                                       O.EMPG_FROM_DT,
                                       O.EMPG_UPTO_DT,
                                       O.EMPG_GRAT_DAYS,
                                       O.EMPG_GRAT_PER_AMOUNT,
                                       O.EMPG_GRAT_LIB_AMOUNT);

        END LOOP;

   END LOOP;

END P_EMP_MASTER_DATA;

--ADDED BY SURESH_B IN00951 REQ2928 - Maintaining the Leave Accrual History START

PROCEDURE P_GET_LEAVE_BAL_DTLS ( P_COMP_CODE           IN     VARCHAR2,
                                 P_EMP_CODE            IN     VARCHAR2,
                                 P_LV_CATG_CODE        IN     VARCHAR2,
                                 P_DATE                IN     DATE    ,
                                 P_ACCRUED_AMT_FC      IN OUT NUMBER,
                                 P_ACCRUED_AMT_LC      OUT    NUMBER,
                                 P_TYPE_CODE           IN     NUMBER,
                                 P_LV_BAL              OUT    NUMBER,
                                 P_AVAILED_LV_BAL      OUT    NUMBER,
                                 P_CARRY_FRWD_LV_BAL   OUT    NUMBER ) IS

   M_COMP_CODE  PW_FS.COMP_CODE%TYPE;
   M_BALANCE    PW_FS.AMOUNT%TYPE;
   M_AVAILED_LV_BAL    PW_FS.AMOUNT%TYPE;
   M_CARRY_FRWD_LV_BAL    PW_FS.AMOUNT%TYPE;



   P_ACCR_AMT   PW_FS.AMOUNT%TYPE;

   M_EMP_CURR_CODE VARCHAR2(12);
   M_FC_AMOUNT  NUMBER;
   M_PERC  NUMBER(5,2);
   M_TYPE_CODE VARCHAR2(6);
   M_ALLW_AMT NUMBER;
   M_ACCR_DAYS NUMBER;
   M_AVAIL_DAYS NUMBER;
   M_ELIG_DAYS NUMBER;
   M_CPTODT_1 DATE;
   M_CPFMDT_1 DATE;

CURSOR C2(P_FM_DT DATE,P_TO_DT DATE) IS
      SELECT EMPA_CURR_CODE, EMPA_FC_AMOUNT, LVA_PERC, LVA_TYPE_CODE
      FROM   PM_EMP_ALLOWANCE, PM_LEAVE_ALLOWANCE, PM_EMP_LEAVE
      WHERE EMPA_COMP_CODE = M_COMP_CODE
      AND   EMPA_CODE = P_EMP_CODE
      AND   EMPA_ALLW_CODE = LVA_ALLW_CODE
      AND   EMPL_CODE = EMPA_CODE
      AND   EMPL_LV_CATG_CODE = LVA_CATG_CODE
      AND   LVA_TYPE_CODE = '1'
      AND  (EMPA_FROM_DT  BETWEEN P_FM_DT AND P_TO_DT
        OR EMPA_UPTO_DT BETWEEN P_FM_DT AND P_TO_DT
        OR P_FM_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT
        OR P_TO_DT BETWEEN EMPA_FROM_DT AND EMPA_UPTO_DT);


   M_PARA_VALUE VARCHAR2(30);

CURSOR C_PARA_VALUE IS
      SELECT PARA_VALUE
      FROM   PM_COMP_PARAMETER
      WHERE  PARA_COMP_CODE = M_COMP_CODE
      AND   PARA_TYPE = 'LVBSDYFLAG'
      AND   PARA_CODE = 'LVBSDYFLAG';


   M_PARA_VALUE_1 VARCHAR2(30);

CURSOR C_PARA_VALUE_1 IS
     SELECT PARA_VALUE
     FROM   PM_COMP_PARAMETER
     WHERE  PARA_COMP_CODE = M_COMP_CODE
     AND   PARA_TYPE = 'LVBSDYS'
     AND   PARA_CODE = 'LVBSDYS';


   M_CPTODT VARCHAR2(30);
CURSOR C_CPTODT IS
     SELECT PARA_VALUE
     FROM   PM_COMP_PARAMETER
     WHERE  PARA_COMP_CODE = M_COMP_CODE
     AND    PARA_CODE = 'CPTODT'
     AND    PARA_TYPE = 'CPTODT';

   M_DAYS NUMBER;
   M_CPFMDT VARCHAR2(30);

CURSOR C_CPFMDT IS
     SELECT PARA_VALUE
     FROM   PM_COMP_PARAMETER
     WHERE  PARA_COMP_CODE = M_COMP_CODE
     AND    PARA_CODE = 'CPFMDT'
     AND    PARA_TYPE = 'CPFMDT';

CURSOR C_GET_LV_BAL IS
      SELECT SUM(LVAC_ACCRUED_DAYS), NVL(SUM(LVAC_AVAILED_DAYS),0)
      FROM     PS_LEAVE_ACCRUAL_CURR
          WHERE  LVAC_COMP_CODE        = M_COMP_CODE
          AND       LVAC_EMP_CODE        = P_EMP_CODE
      AND    LVAC_LV_CODE = P_LV_CATG_CODE
          AND      (TO_CHAR(LVAC_YEAR) < TO_CHAR(P_DATE,'YYYY') -- MODIFIED BY ASHIK FOR THE ISSUE FALCONCHEM-367351 ON 11/01/2010
          OR    (TO_CHAR(LVAC_YEAR) = TO_CHAR(P_DATE,'YYYY')
         AND      LPAD(TO_CHAR(NVL(LVAC_MONTH,0)),2,'0') <= TO_CHAR(P_DATE,'MM')));
 --ADDED BY SURESH_B IN00951 REQ2928 - Maintaining the Leave Accrual History START
CURSOR C_GET_CRY_FRWRD_LV_BAL IS
      SELECT SUM(NVL(LVAC_ACCRUED_DAYS,0)) -  SUM(NVL(LVAC_AVAILED_DAYS,0)) LVAC_CARRY_FRWD_DAYS
               FROM PS_LEAVE_ACCRUAL_CURR
               WHERE LVAC_COMP_CODE        = M_COMP_CODE
                  AND       LVAC_EMP_CODE        = P_EMP_CODE
                  AND    LVAC_LV_CODE = P_LV_CATG_CODE
                  AND NVL(LVAC_MONTH,0) = 0 ;

--ADDED BY SURESH_B IN00951 REQ2928 - Maintaining the Leave Accrual History END
CURSOR C1 IS
            SELECT LV_DAYS
            FROM PM_LEAVE
            WHERE    LV_CATG_CODE = P_LV_CATG_CODE
            AND LV_TYPE_CODE = P_TYPE_CODE;
CURSOR C_GET_LV_BAL_PREV IS
      SELECT     SUM(LVAP_ACCRUED_DAYS), NVL(SUM(LVAP_AVAILED_DAYS),0)
          FROM      PS_LEAVE_ACCRUAL_PREV
          WHERE      LVAP_COMP_CODE        = M_COMP_CODE
          AND        LVAP_EMP_CODE        = P_EMP_CODE
      AND     LVAP_LV_CODE = P_LV_CATG_CODE
          AND        TO_CHAR(LVAP_YEAR) = TO_CHAR(P_DATE,'YYYY')
          AND        LPAD(TO_CHAR(NVL(LVAP_MONTH,0)),2,'0') <= TO_CHAR(P_DATE,'MM');


  M_LVAC_CARRY_FRWD_DAYS  NUMBER;
   M_ACCR_DAYS_PREV NUMBER;
   M_AVAIL_DAYS_PREV NUMBER;

CURSOR C_CPMTH IS
      SELECT PARA_VALUE
      FROM   PM_COMP_PARAMETER
      WHERE PARA_COMP_CODE = M_COMP_CODE
      AND   PARA_CODE = 'CPMTH'
      AND   PARA_TYPE = 'CPMTH';

M_CPMTH VARCHAR2(6);

CURSOR C_PREV_YEAR_DATA_IN_CURR IS
          SELECT 'X'
          FROM   PS_LEAVE_ACCRUAL_CURR
          WHERE  LVAC_COMP_CODE = M_COMP_CODE
          AND    LVAC_EMP_CODE = P_EMP_CODE
          AND    LVAC_LV_CODE = P_LV_CATG_CODE
          AND    TO_CHAR(LVAC_YEAR) = TO_CHAR(P_DATE,'YYYY');


   M_PREV_EXIST VARCHAR2(1);


CURSOR C_GET_BASE_CURR IS
        SELECT COMP_BASE_CURR_CODE_1
        FROM FM_COMPANY
        WHERE COMP_CODE = M_COMP_CODE;

   M_BASE_CURR VARCHAR2(12);


BEGIN

   M_BALANCE   := 0;
   M_COMP_CODE := P_COMP_CODE;
   OPEN C_GET_LV_BAL;
   /*commented and added below by Rajasekaran on 17/03/2008 for AIN-206999 issue.
   Addition start by Rajasekaran
   FETCH C_GET_LV_BAL INTO M_BALANCE;--COMMENTED , P_ACCR_AMT;-- P_ACCR_AMT is added by Rajat on 05/10/2006 to display Accrued Amount*/
   FETCH C_GET_LV_BAL INTO M_ACCR_DAYS,M_AVAIL_DAYS ;
   CLOSE C_GET_LV_BAL;
   --ADDED BY SURESH_B IN00951 REQ2928 - Maintaining the Leave Accrual History START
   OPEN C_GET_CRY_FRWRD_LV_BAL;
   FETCH C_GET_CRY_FRWRD_LV_BAL INTO M_LVAC_CARRY_FRWD_DAYS ;
   CLOSE C_GET_CRY_FRWRD_LV_BAL;
   --ADDED BY SURESH_B IN00951 REQ2928 - Maintaining the Leave Accrual History END
-- ADDED BY ASHIK
   OPEN C_GET_LV_BAL_PREV;
   FETCH C_GET_LV_BAL_PREV INTO M_ACCR_DAYS_PREV,M_AVAIL_DAYS_PREV;
   CLOSE C_GET_LV_BAL_PREV;

     OPEN C_CPMTH;
     FETCH C_CPMTH INTO M_CPMTH;
     CLOSE C_CPMTH;

        OPEN C_PREV_YEAR_DATA_IN_CURR;
        FETCH C_PREV_YEAR_DATA_IN_CURR INTO M_PREV_EXIST;
        CLOSE C_PREV_YEAR_DATA_IN_CURR;

        IF TO_CHAR(P_DATE,'YYYY') < SUBSTR(M_CPMTH,1,4) AND NVL(M_PREV_EXIST,'Y') <> 'X'THEN
                 M_BALANCE := M_ACCR_DAYS_PREV - M_AVAIL_DAYS_PREV;
         ELSE
-- ADDED BY ASHIK
           OPEN C1;
           FETCH C1 INTO M_ELIG_DAYS;
           CLOSE C1;

           IF M_ACCR_DAYS IS NULL THEN
--                   M_BALANCE := M_ELIG_DAYS - M_AVAIL_DAYS;
-- COMMENTED ABOVE AND ADDED BELOW BY ASHIK FOR THE ISSUE ALS-399979 ON 19-05-2010
                   M_BALANCE := NVL(M_ACCR_DAYS,0) - M_AVAIL_DAYS;
            ELSE
                   M_BALANCE := M_ACCR_DAYS - M_AVAIL_DAYS;
            END IF;
        END IF;
   --Addition end by Rajasekaran for AIN-206999 issue.
--   M_BALANCE := NVL(M_BALANCE,0);
--   M_BALANCE := ROUND(NVL(M_BALANCE,0));
--  COMMENTED ABOVE AND ADDED BELOW BY ASHIK FOR THE ISSUE ASI-425964 ON 04-AUG-2010
   M_BALANCE := ROUND(NVL(M_BALANCE,0),2);
   --P_ACCRUED_AMT_FC := NVL(P_ACCR_AMT,0);

-- ADDED BELOW BY ASHIK FOR THE ISSUE ALS-399979 ON 20-05-2010

    --M_CPFMDT_1 :=TO_DATE(TO_DATE(P_DATE,'YYYYMM'),'DD/MM/RRRR');
  M_CPFMDT_1 := p_date;
    --M_CPTODT_1 :=TO_DATE(LAST_DAY(TO_DATE(P_DATE,'YYYYMM')),'DD/MM/RRRR');
  M_CPTODT_1 := Last_Day(P_DATE);

-- Added by Rajesh M for the issue TAMEER-164898 on 30/06/2007
--   OPEN C2;
-- COMMENTED ABOVE AND ADDED BELOW BY ASHIK FOR THE ISSUE ALS-399979 ON 20-05-2010
   OPEN C2(M_CPFMDT_1,M_CPTODT_1);
 LOOP
   FETCH C2 INTO M_EMP_CURR_CODE, M_FC_AMOUNT, M_PERC, M_TYPE_CODE;
     P_ACCR_AMT := ((M_FC_AMOUNT * M_PERC) / 100);
   EXIT WHEN C2%NOTFOUND;
     M_ALLW_AMT := (NVL(P_ACCR_AMT,0) + NVL(M_ALLW_AMT,0));
 END LOOP;
CLOSE C2;

OPEN C_PARA_VALUE;
 FETCH C_PARA_VALUE INTO M_PARA_VALUE;
CLOSE C_PARA_VALUE;

OPEN C_PARA_VALUE_1;
 FETCH C_PARA_VALUE_1 INTO M_PARA_VALUE_1;
CLOSE C_PARA_VALUE_1;

OPEN C_CPFMDT;
FETCH C_CPFMDT INTO M_CPFMDT;
CLOSE C_CPFMDT;

OPEN C_CPTODT;
FETCH C_CPTODT INTO M_CPTODT;
CLOSE C_CPTODT;

IF P_TYPE_CODE = '1' THEN
-- ADDED BY ASHIK FOR THE ISSUE FALCONCHEM-367848 ON 14/FEB/2010
    M_CPFMDT := To_Char(TO_DATE(P_DATE,'DD/MM/YYYY'),'YYYYMM');
    M_CPTODT := (To_Char(TO_DATE(P_DATE,'DD/MM/YYYY'),'YYYYMM'));
-- ADDED BY ASHIK FOR THE ISSUE FALCONCHEM-367848 ON 14/FEB/2010
  M_DAYS := M_CPTODT- M_CPFMDT + 1 ;
 IF M_PARA_VALUE = 'E' THEN
  P_ACCRUED_AMT_FC := ((M_ALLW_AMT / M_PARA_VALUE_1) * M_BALANCE);

  P_ACCRUED_AMT_FC:=ROUND(P_ACCRUED_AMT_FC,2);
 ELSE
     P_ACCRUED_AMT_FC := ((M_ALLW_AMT / M_DAYS) * M_BALANCE);

     P_ACCRUED_AMT_FC:=ROUND(P_ACCRUED_AMT_FC,2);
 END IF;
 ELSE
     P_ACCRUED_AMT_FC := 0;
END IF;
 --end  TAMEER-164898

-- ADDED BY ASHIK ON 14/OCT/2012 FOR THE ISSUE JSG-780692
OPEN C_GET_BASE_CURR;
FETCH C_GET_BASE_CURR INTO M_BASE_CURR;
CLOSE C_GET_BASE_CURR;

IF NVL(P_ACCRUED_AMT_FC,0) > 0 THEN
    F_DCONV_RATE_FM_CURR_TO_CURR(M_EMP_CURR_CODE,P_ACCRUED_AMT_FC,'B',SYSDATE,M_BASE_CURR,P_ACCRUED_AMT_LC,'W');
END IF;
-- ADDED BY ASHIK ON 14/OCT/2012 FOR THE ISSUE JSG-780692

 P_LV_BAL            := M_BALANCE;
 P_AVAILED_LV_BAL    := M_AVAIL_DAYS;
 P_CARRY_FRWD_LV_BAL := M_LVAC_CARRY_FRWD_DAYS;

/*   DUMMy('SURESH_B HRMSDBPKG_PAY_REPORT.P_GET_LEAVE_BAL_DTLS
P_COMP_CODE: '||P_COMP_CODE||',
P_EMP_CODE: '||P_EMP_CODE||',
P_LV_CATG_CODE: '||P_LV_CATG_CODE||',
P_DATE   : '||P_DATE||',
P_ACCRUED_AMT_FC : '||P_ACCRUED_AMT_FC||',
P_ACCRUED_AMT_LC: '||P_ACCRUED_AMT_LC||',
P_TYPE_CODE : '||P_TYPE_CODE||',
P_LV_BAL  : '||P_LV_BAL||',
P_AVAILED_LV_BAL : '||P_AVAILED_LV_BAL||',
P_CARRY_FRWD_LV_BAL : '||P_CARRY_FRWD_LV_BAL);    */

END P_GET_LEAVE_BAL_DTLS ;

--ADDED BY SURESH_B IN00951 REQ2928 - Maintaining the Leave Accrual History END
END HRMSDBPKG_PAY_REPORT;
/
